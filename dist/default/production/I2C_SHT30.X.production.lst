

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Apr 12 19:14:13 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F1936
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    87                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    88                           	dabs	1,0x320,16
    89                           	dabs	1,0x2A0,80
    90                           	dabs	1,0x220,80
    91                           	dabs	1,0x1A0,80
    92                           	dabs	1,0x154,28
    93                           	dabs	1,0x20D4,0,_SES_Modbus
    94                           	dabs	1,0x7E,2
    95     0000                     
    96                           ; Version 2.40
    97                           ; Generated 17/11/2021 GMT
    98                           ; 
    99                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution. Publication is not required when
   113                           ;        this file is used in an embedded application.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC16F1936 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131     0000                     	;# 
   132     0001                     	;# 
   133     0002                     	;# 
   134     0003                     	;# 
   135     0004                     	;# 
   136     0005                     	;# 
   137     0006                     	;# 
   138     0007                     	;# 
   139     0008                     	;# 
   140     0009                     	;# 
   141     000A                     	;# 
   142     000B                     	;# 
   143     000C                     	;# 
   144     000D                     	;# 
   145     000E                     	;# 
   146     0010                     	;# 
   147     0011                     	;# 
   148     0012                     	;# 
   149     0013                     	;# 
   150     0015                     	;# 
   151     0016                     	;# 
   152     0016                     	;# 
   153     0017                     	;# 
   154     0018                     	;# 
   155     0019                     	;# 
   156     001A                     	;# 
   157     001B                     	;# 
   158     001C                     	;# 
   159     001E                     	;# 
   160     001F                     	;# 
   161     008C                     	;# 
   162     008D                     	;# 
   163     008E                     	;# 
   164     0090                     	;# 
   165     0091                     	;# 
   166     0092                     	;# 
   167     0093                     	;# 
   168     0095                     	;# 
   169     0096                     	;# 
   170     0097                     	;# 
   171     0098                     	;# 
   172     0099                     	;# 
   173     009A                     	;# 
   174     009B                     	;# 
   175     009B                     	;# 
   176     009C                     	;# 
   177     009D                     	;# 
   178     009E                     	;# 
   179     010C                     	;# 
   180     010D                     	;# 
   181     010E                     	;# 
   182     0110                     	;# 
   183     0111                     	;# 
   184     0112                     	;# 
   185     0113                     	;# 
   186     0114                     	;# 
   187     0115                     	;# 
   188     0116                     	;# 
   189     0117                     	;# 
   190     0118                     	;# 
   191     0119                     	;# 
   192     011A                     	;# 
   193     011B                     	;# 
   194     011D                     	;# 
   195     018C                     	;# 
   196     018D                     	;# 
   197     0191                     	;# 
   198     0191                     	;# 
   199     0192                     	;# 
   200     0193                     	;# 
   201     0193                     	;# 
   202     0193                     	;# 
   203     0194                     	;# 
   204     0195                     	;# 
   205     0196                     	;# 
   206     0199                     	;# 
   207     019A                     	;# 
   208     019B                     	;# 
   209     019B                     	;# 
   210     019B                     	;# 
   211     019B                     	;# 
   212     019C                     	;# 
   213     019C                     	;# 
   214     019D                     	;# 
   215     019E                     	;# 
   216     019F                     	;# 
   217     020D                     	;# 
   218     0210                     	;# 
   219     0211                     	;# 
   220     0212                     	;# 
   221     0213                     	;# 
   222     0214                     	;# 
   223     0215                     	;# 
   224     0215                     	;# 
   225     0216                     	;# 
   226     0217                     	;# 
   227     0291                     	;# 
   228     0291                     	;# 
   229     0292                     	;# 
   230     0293                     	;# 
   231     0294                     	;# 
   232     0295                     	;# 
   233     0295                     	;# 
   234     0296                     	;# 
   235     0298                     	;# 
   236     0298                     	;# 
   237     0299                     	;# 
   238     029A                     	;# 
   239     029B                     	;# 
   240     029C                     	;# 
   241     029C                     	;# 
   242     029D                     	;# 
   243     029E                     	;# 
   244     029F                     	;# 
   245     0311                     	;# 
   246     0311                     	;# 
   247     0312                     	;# 
   248     0313                     	;# 
   249     0314                     	;# 
   250     0315                     	;# 
   251     0315                     	;# 
   252     0316                     	;# 
   253     0318                     	;# 
   254     0318                     	;# 
   255     0319                     	;# 
   256     031A                     	;# 
   257     031C                     	;# 
   258     031C                     	;# 
   259     031D                     	;# 
   260     031E                     	;# 
   261     0394                     	;# 
   262     0395                     	;# 
   263     0396                     	;# 
   264     0415                     	;# 
   265     0416                     	;# 
   266     0417                     	;# 
   267     041C                     	;# 
   268     041D                     	;# 
   269     041E                     	;# 
   270     0791                     	;# 
   271     0792                     	;# 
   272     0793                     	;# 
   273     0794                     	;# 
   274     0795                     	;# 
   275     0798                     	;# 
   276     0799                     	;# 
   277     07A0                     	;# 
   278     07A1                     	;# 
   279     07A3                     	;# 
   280     07A4                     	;# 
   281     07A6                     	;# 
   282     07A7                     	;# 
   283     07A9                     	;# 
   284     07AA                     	;# 
   285     0FE4                     	;# 
   286     0FE5                     	;# 
   287     0FE6                     	;# 
   288     0FE7                     	;# 
   289     0FE8                     	;# 
   290     0FE9                     	;# 
   291     0FEA                     	;# 
   292     0FEB                     	;# 
   293     0FED                     	;# 
   294     0FEE                     	;# 
   295     0FEF                     	;# 
   296     0000                     	;# 
   297     0001                     	;# 
   298     0002                     	;# 
   299     0003                     	;# 
   300     0004                     	;# 
   301     0005                     	;# 
   302     0006                     	;# 
   303     0007                     	;# 
   304     0008                     	;# 
   305     0009                     	;# 
   306     000A                     	;# 
   307     000B                     	;# 
   308     000C                     	;# 
   309     000D                     	;# 
   310     000E                     	;# 
   311     0010                     	;# 
   312     0011                     	;# 
   313     0012                     	;# 
   314     0013                     	;# 
   315     0015                     	;# 
   316     0016                     	;# 
   317     0016                     	;# 
   318     0017                     	;# 
   319     0018                     	;# 
   320     0019                     	;# 
   321     001A                     	;# 
   322     001B                     	;# 
   323     001C                     	;# 
   324     001E                     	;# 
   325     001F                     	;# 
   326     008C                     	;# 
   327     008D                     	;# 
   328     008E                     	;# 
   329     0090                     	;# 
   330     0091                     	;# 
   331     0092                     	;# 
   332     0093                     	;# 
   333     0095                     	;# 
   334     0096                     	;# 
   335     0097                     	;# 
   336     0098                     	;# 
   337     0099                     	;# 
   338     009A                     	;# 
   339     009B                     	;# 
   340     009B                     	;# 
   341     009C                     	;# 
   342     009D                     	;# 
   343     009E                     	;# 
   344     010C                     	;# 
   345     010D                     	;# 
   346     010E                     	;# 
   347     0110                     	;# 
   348     0111                     	;# 
   349     0112                     	;# 
   350     0113                     	;# 
   351     0114                     	;# 
   352     0115                     	;# 
   353     0116                     	;# 
   354     0117                     	;# 
   355     0118                     	;# 
   356     0119                     	;# 
   357     011A                     	;# 
   358     011B                     	;# 
   359     011D                     	;# 
   360     018C                     	;# 
   361     018D                     	;# 
   362     0191                     	;# 
   363     0191                     	;# 
   364     0192                     	;# 
   365     0193                     	;# 
   366     0193                     	;# 
   367     0193                     	;# 
   368     0194                     	;# 
   369     0195                     	;# 
   370     0196                     	;# 
   371     0199                     	;# 
   372     019A                     	;# 
   373     019B                     	;# 
   374     019B                     	;# 
   375     019B                     	;# 
   376     019B                     	;# 
   377     019C                     	;# 
   378     019C                     	;# 
   379     019D                     	;# 
   380     019E                     	;# 
   381     019F                     	;# 
   382     020D                     	;# 
   383     0210                     	;# 
   384     0211                     	;# 
   385     0212                     	;# 
   386     0213                     	;# 
   387     0214                     	;# 
   388     0215                     	;# 
   389     0215                     	;# 
   390     0216                     	;# 
   391     0217                     	;# 
   392     0291                     	;# 
   393     0291                     	;# 
   394     0292                     	;# 
   395     0293                     	;# 
   396     0294                     	;# 
   397     0295                     	;# 
   398     0295                     	;# 
   399     0296                     	;# 
   400     0298                     	;# 
   401     0298                     	;# 
   402     0299                     	;# 
   403     029A                     	;# 
   404     029B                     	;# 
   405     029C                     	;# 
   406     029C                     	;# 
   407     029D                     	;# 
   408     029E                     	;# 
   409     029F                     	;# 
   410     0311                     	;# 
   411     0311                     	;# 
   412     0312                     	;# 
   413     0313                     	;# 
   414     0314                     	;# 
   415     0315                     	;# 
   416     0315                     	;# 
   417     0316                     	;# 
   418     0318                     	;# 
   419     0318                     	;# 
   420     0319                     	;# 
   421     031A                     	;# 
   422     031C                     	;# 
   423     031C                     	;# 
   424     031D                     	;# 
   425     031E                     	;# 
   426     0394                     	;# 
   427     0395                     	;# 
   428     0396                     	;# 
   429     0415                     	;# 
   430     0416                     	;# 
   431     0417                     	;# 
   432     041C                     	;# 
   433     041D                     	;# 
   434     041E                     	;# 
   435     0791                     	;# 
   436     0792                     	;# 
   437     0793                     	;# 
   438     0794                     	;# 
   439     0795                     	;# 
   440     0798                     	;# 
   441     0799                     	;# 
   442     07A0                     	;# 
   443     07A1                     	;# 
   444     07A3                     	;# 
   445     07A4                     	;# 
   446     07A6                     	;# 
   447     07A7                     	;# 
   448     07A9                     	;# 
   449     07AA                     	;# 
   450     0FE4                     	;# 
   451     0FE5                     	;# 
   452     0FE6                     	;# 
   453     0FE7                     	;# 
   454     0FE8                     	;# 
   455     0FE9                     	;# 
   456     0FEA                     	;# 
   457     0FEB                     	;# 
   458     0FED                     	;# 
   459     0FEE                     	;# 
   460     0FEF                     	;# 
   461     0000                     	;# 
   462     0001                     	;# 
   463     0002                     	;# 
   464     0003                     	;# 
   465     0004                     	;# 
   466     0005                     	;# 
   467     0006                     	;# 
   468     0007                     	;# 
   469     0008                     	;# 
   470     0009                     	;# 
   471     000A                     	;# 
   472     000B                     	;# 
   473     000C                     	;# 
   474     000D                     	;# 
   475     000E                     	;# 
   476     0010                     	;# 
   477     0011                     	;# 
   478     0012                     	;# 
   479     0013                     	;# 
   480     0015                     	;# 
   481     0016                     	;# 
   482     0016                     	;# 
   483     0017                     	;# 
   484     0018                     	;# 
   485     0019                     	;# 
   486     001A                     	;# 
   487     001B                     	;# 
   488     001C                     	;# 
   489     001E                     	;# 
   490     001F                     	;# 
   491     008C                     	;# 
   492     008D                     	;# 
   493     008E                     	;# 
   494     0090                     	;# 
   495     0091                     	;# 
   496     0092                     	;# 
   497     0093                     	;# 
   498     0095                     	;# 
   499     0096                     	;# 
   500     0097                     	;# 
   501     0098                     	;# 
   502     0099                     	;# 
   503     009A                     	;# 
   504     009B                     	;# 
   505     009B                     	;# 
   506     009C                     	;# 
   507     009D                     	;# 
   508     009E                     	;# 
   509     010C                     	;# 
   510     010D                     	;# 
   511     010E                     	;# 
   512     0110                     	;# 
   513     0111                     	;# 
   514     0112                     	;# 
   515     0113                     	;# 
   516     0114                     	;# 
   517     0115                     	;# 
   518     0116                     	;# 
   519     0117                     	;# 
   520     0118                     	;# 
   521     0119                     	;# 
   522     011A                     	;# 
   523     011B                     	;# 
   524     011D                     	;# 
   525     018C                     	;# 
   526     018D                     	;# 
   527     0191                     	;# 
   528     0191                     	;# 
   529     0192                     	;# 
   530     0193                     	;# 
   531     0193                     	;# 
   532     0193                     	;# 
   533     0194                     	;# 
   534     0195                     	;# 
   535     0196                     	;# 
   536     0199                     	;# 
   537     019A                     	;# 
   538     019B                     	;# 
   539     019B                     	;# 
   540     019B                     	;# 
   541     019B                     	;# 
   542     019C                     	;# 
   543     019C                     	;# 
   544     019D                     	;# 
   545     019E                     	;# 
   546     019F                     	;# 
   547     020D                     	;# 
   548     0210                     	;# 
   549     0211                     	;# 
   550     0212                     	;# 
   551     0213                     	;# 
   552     0214                     	;# 
   553     0215                     	;# 
   554     0215                     	;# 
   555     0216                     	;# 
   556     0217                     	;# 
   557     0291                     	;# 
   558     0291                     	;# 
   559     0292                     	;# 
   560     0293                     	;# 
   561     0294                     	;# 
   562     0295                     	;# 
   563     0295                     	;# 
   564     0296                     	;# 
   565     0298                     	;# 
   566     0298                     	;# 
   567     0299                     	;# 
   568     029A                     	;# 
   569     029B                     	;# 
   570     029C                     	;# 
   571     029C                     	;# 
   572     029D                     	;# 
   573     029E                     	;# 
   574     029F                     	;# 
   575     0311                     	;# 
   576     0311                     	;# 
   577     0312                     	;# 
   578     0313                     	;# 
   579     0314                     	;# 
   580     0315                     	;# 
   581     0315                     	;# 
   582     0316                     	;# 
   583     0318                     	;# 
   584     0318                     	;# 
   585     0319                     	;# 
   586     031A                     	;# 
   587     031C                     	;# 
   588     031C                     	;# 
   589     031D                     	;# 
   590     031E                     	;# 
   591     0394                     	;# 
   592     0395                     	;# 
   593     0396                     	;# 
   594     0415                     	;# 
   595     0416                     	;# 
   596     0417                     	;# 
   597     041C                     	;# 
   598     041D                     	;# 
   599     041E                     	;# 
   600     0791                     	;# 
   601     0792                     	;# 
   602     0793                     	;# 
   603     0794                     	;# 
   604     0795                     	;# 
   605     0798                     	;# 
   606     0799                     	;# 
   607     07A0                     	;# 
   608     07A1                     	;# 
   609     07A3                     	;# 
   610     07A4                     	;# 
   611     07A6                     	;# 
   612     07A7                     	;# 
   613     07A9                     	;# 
   614     07AA                     	;# 
   615     0FE4                     	;# 
   616     0FE5                     	;# 
   617     0FE6                     	;# 
   618     0FE7                     	;# 
   619     0FE8                     	;# 
   620     0FE9                     	;# 
   621     0FEA                     	;# 
   622     0FEB                     	;# 
   623     0FED                     	;# 
   624     0FEE                     	;# 
   625     0FEF                     	;# 
   626     0000                     	;# 
   627     0001                     	;# 
   628     0002                     	;# 
   629     0003                     	;# 
   630     0004                     	;# 
   631     0005                     	;# 
   632     0006                     	;# 
   633     0007                     	;# 
   634     0008                     	;# 
   635     0009                     	;# 
   636     000A                     	;# 
   637     000B                     	;# 
   638     000C                     	;# 
   639     000D                     	;# 
   640     000E                     	;# 
   641     0010                     	;# 
   642     0011                     	;# 
   643     0012                     	;# 
   644     0013                     	;# 
   645     0015                     	;# 
   646     0016                     	;# 
   647     0016                     	;# 
   648     0017                     	;# 
   649     0018                     	;# 
   650     0019                     	;# 
   651     001A                     	;# 
   652     001B                     	;# 
   653     001C                     	;# 
   654     001E                     	;# 
   655     001F                     	;# 
   656     008C                     	;# 
   657     008D                     	;# 
   658     008E                     	;# 
   659     0090                     	;# 
   660     0091                     	;# 
   661     0092                     	;# 
   662     0093                     	;# 
   663     0095                     	;# 
   664     0096                     	;# 
   665     0097                     	;# 
   666     0098                     	;# 
   667     0099                     	;# 
   668     009A                     	;# 
   669     009B                     	;# 
   670     009B                     	;# 
   671     009C                     	;# 
   672     009D                     	;# 
   673     009E                     	;# 
   674     010C                     	;# 
   675     010D                     	;# 
   676     010E                     	;# 
   677     0110                     	;# 
   678     0111                     	;# 
   679     0112                     	;# 
   680     0113                     	;# 
   681     0114                     	;# 
   682     0115                     	;# 
   683     0116                     	;# 
   684     0117                     	;# 
   685     0118                     	;# 
   686     0119                     	;# 
   687     011A                     	;# 
   688     011B                     	;# 
   689     011D                     	;# 
   690     018C                     	;# 
   691     018D                     	;# 
   692     0191                     	;# 
   693     0191                     	;# 
   694     0192                     	;# 
   695     0193                     	;# 
   696     0193                     	;# 
   697     0193                     	;# 
   698     0194                     	;# 
   699     0195                     	;# 
   700     0196                     	;# 
   701     0199                     	;# 
   702     019A                     	;# 
   703     019B                     	;# 
   704     019B                     	;# 
   705     019B                     	;# 
   706     019B                     	;# 
   707     019C                     	;# 
   708     019C                     	;# 
   709     019D                     	;# 
   710     019E                     	;# 
   711     019F                     	;# 
   712     020D                     	;# 
   713     0210                     	;# 
   714     0211                     	;# 
   715     0212                     	;# 
   716     0213                     	;# 
   717     0214                     	;# 
   718     0215                     	;# 
   719     0215                     	;# 
   720     0216                     	;# 
   721     0217                     	;# 
   722     0291                     	;# 
   723     0291                     	;# 
   724     0292                     	;# 
   725     0293                     	;# 
   726     0294                     	;# 
   727     0295                     	;# 
   728     0295                     	;# 
   729     0296                     	;# 
   730     0298                     	;# 
   731     0298                     	;# 
   732     0299                     	;# 
   733     029A                     	;# 
   734     029B                     	;# 
   735     029C                     	;# 
   736     029C                     	;# 
   737     029D                     	;# 
   738     029E                     	;# 
   739     029F                     	;# 
   740     0311                     	;# 
   741     0311                     	;# 
   742     0312                     	;# 
   743     0313                     	;# 
   744     0314                     	;# 
   745     0315                     	;# 
   746     0315                     	;# 
   747     0316                     	;# 
   748     0318                     	;# 
   749     0318                     	;# 
   750     0319                     	;# 
   751     031A                     	;# 
   752     031C                     	;# 
   753     031C                     	;# 
   754     031D                     	;# 
   755     031E                     	;# 
   756     0394                     	;# 
   757     0395                     	;# 
   758     0396                     	;# 
   759     0415                     	;# 
   760     0416                     	;# 
   761     0417                     	;# 
   762     041C                     	;# 
   763     041D                     	;# 
   764     041E                     	;# 
   765     0791                     	;# 
   766     0792                     	;# 
   767     0793                     	;# 
   768     0794                     	;# 
   769     0795                     	;# 
   770     0798                     	;# 
   771     0799                     	;# 
   772     07A0                     	;# 
   773     07A1                     	;# 
   774     07A3                     	;# 
   775     07A4                     	;# 
   776     07A6                     	;# 
   777     07A7                     	;# 
   778     07A9                     	;# 
   779     07AA                     	;# 
   780     0FE4                     	;# 
   781     0FE5                     	;# 
   782     0FE6                     	;# 
   783     0FE7                     	;# 
   784     0FE8                     	;# 
   785     0FE9                     	;# 
   786     0FEA                     	;# 
   787     0FEB                     	;# 
   788     0FED                     	;# 
   789     0FEE                     	;# 
   790     0FEF                     	;# 
   791     0000                     	;# 
   792     0001                     	;# 
   793     0002                     	;# 
   794     0003                     	;# 
   795     0004                     	;# 
   796     0005                     	;# 
   797     0006                     	;# 
   798     0007                     	;# 
   799     0008                     	;# 
   800     0009                     	;# 
   801     000A                     	;# 
   802     000B                     	;# 
   803     000C                     	;# 
   804     000D                     	;# 
   805     000E                     	;# 
   806     0010                     	;# 
   807     0011                     	;# 
   808     0012                     	;# 
   809     0013                     	;# 
   810     0015                     	;# 
   811     0016                     	;# 
   812     0016                     	;# 
   813     0017                     	;# 
   814     0018                     	;# 
   815     0019                     	;# 
   816     001A                     	;# 
   817     001B                     	;# 
   818     001C                     	;# 
   819     001E                     	;# 
   820     001F                     	;# 
   821     008C                     	;# 
   822     008D                     	;# 
   823     008E                     	;# 
   824     0090                     	;# 
   825     0091                     	;# 
   826     0092                     	;# 
   827     0093                     	;# 
   828     0095                     	;# 
   829     0096                     	;# 
   830     0097                     	;# 
   831     0098                     	;# 
   832     0099                     	;# 
   833     009A                     	;# 
   834     009B                     	;# 
   835     009B                     	;# 
   836     009C                     	;# 
   837     009D                     	;# 
   838     009E                     	;# 
   839     010C                     	;# 
   840     010D                     	;# 
   841     010E                     	;# 
   842     0110                     	;# 
   843     0111                     	;# 
   844     0112                     	;# 
   845     0113                     	;# 
   846     0114                     	;# 
   847     0115                     	;# 
   848     0116                     	;# 
   849     0117                     	;# 
   850     0118                     	;# 
   851     0119                     	;# 
   852     011A                     	;# 
   853     011B                     	;# 
   854     011D                     	;# 
   855     018C                     	;# 
   856     018D                     	;# 
   857     0191                     	;# 
   858     0191                     	;# 
   859     0192                     	;# 
   860     0193                     	;# 
   861     0193                     	;# 
   862     0193                     	;# 
   863     0194                     	;# 
   864     0195                     	;# 
   865     0196                     	;# 
   866     0199                     	;# 
   867     019A                     	;# 
   868     019B                     	;# 
   869     019B                     	;# 
   870     019B                     	;# 
   871     019B                     	;# 
   872     019C                     	;# 
   873     019C                     	;# 
   874     019D                     	;# 
   875     019E                     	;# 
   876     019F                     	;# 
   877     020D                     	;# 
   878     0210                     	;# 
   879     0211                     	;# 
   880     0212                     	;# 
   881     0213                     	;# 
   882     0214                     	;# 
   883     0215                     	;# 
   884     0215                     	;# 
   885     0216                     	;# 
   886     0217                     	;# 
   887     0291                     	;# 
   888     0291                     	;# 
   889     0292                     	;# 
   890     0293                     	;# 
   891     0294                     	;# 
   892     0295                     	;# 
   893     0295                     	;# 
   894     0296                     	;# 
   895     0298                     	;# 
   896     0298                     	;# 
   897     0299                     	;# 
   898     029A                     	;# 
   899     029B                     	;# 
   900     029C                     	;# 
   901     029C                     	;# 
   902     029D                     	;# 
   903     029E                     	;# 
   904     029F                     	;# 
   905     0311                     	;# 
   906     0311                     	;# 
   907     0312                     	;# 
   908     0313                     	;# 
   909     0314                     	;# 
   910     0315                     	;# 
   911     0315                     	;# 
   912     0316                     	;# 
   913     0318                     	;# 
   914     0318                     	;# 
   915     0319                     	;# 
   916     031A                     	;# 
   917     031C                     	;# 
   918     031C                     	;# 
   919     031D                     	;# 
   920     031E                     	;# 
   921     0394                     	;# 
   922     0395                     	;# 
   923     0396                     	;# 
   924     0415                     	;# 
   925     0416                     	;# 
   926     0417                     	;# 
   927     041C                     	;# 
   928     041D                     	;# 
   929     041E                     	;# 
   930     0791                     	;# 
   931     0792                     	;# 
   932     0793                     	;# 
   933     0794                     	;# 
   934     0795                     	;# 
   935     0798                     	;# 
   936     0799                     	;# 
   937     07A0                     	;# 
   938     07A1                     	;# 
   939     07A3                     	;# 
   940     07A4                     	;# 
   941     07A6                     	;# 
   942     07A7                     	;# 
   943     07A9                     	;# 
   944     07AA                     	;# 
   945     0FE4                     	;# 
   946     0FE5                     	;# 
   947     0FE6                     	;# 
   948     0FE7                     	;# 
   949     0FE8                     	;# 
   950     0FE9                     	;# 
   951     0FEA                     	;# 
   952     0FEB                     	;# 
   953     0FED                     	;# 
   954     0FEE                     	;# 
   955     0FEF                     	;# 
   956     0000                     	;# 
   957     0001                     	;# 
   958     0002                     	;# 
   959     0003                     	;# 
   960     0004                     	;# 
   961     0005                     	;# 
   962     0006                     	;# 
   963     0007                     	;# 
   964     0008                     	;# 
   965     0009                     	;# 
   966     000A                     	;# 
   967     000B                     	;# 
   968     000C                     	;# 
   969     000D                     	;# 
   970     000E                     	;# 
   971     0010                     	;# 
   972     0011                     	;# 
   973     0012                     	;# 
   974     0013                     	;# 
   975     0015                     	;# 
   976     0016                     	;# 
   977     0016                     	;# 
   978     0017                     	;# 
   979     0018                     	;# 
   980     0019                     	;# 
   981     001A                     	;# 
   982     001B                     	;# 
   983     001C                     	;# 
   984     001E                     	;# 
   985     001F                     	;# 
   986     008C                     	;# 
   987     008D                     	;# 
   988     008E                     	;# 
   989     0090                     	;# 
   990     0091                     	;# 
   991     0092                     	;# 
   992     0093                     	;# 
   993     0095                     	;# 
   994     0096                     	;# 
   995     0097                     	;# 
   996     0098                     	;# 
   997     0099                     	;# 
   998     009A                     	;# 
   999     009B                     	;# 
  1000     009B                     	;# 
  1001     009C                     	;# 
  1002     009D                     	;# 
  1003     009E                     	;# 
  1004     010C                     	;# 
  1005     010D                     	;# 
  1006     010E                     	;# 
  1007     0110                     	;# 
  1008     0111                     	;# 
  1009     0112                     	;# 
  1010     0113                     	;# 
  1011     0114                     	;# 
  1012     0115                     	;# 
  1013     0116                     	;# 
  1014     0117                     	;# 
  1015     0118                     	;# 
  1016     0119                     	;# 
  1017     011A                     	;# 
  1018     011B                     	;# 
  1019     011D                     	;# 
  1020     018C                     	;# 
  1021     018D                     	;# 
  1022     0191                     	;# 
  1023     0191                     	;# 
  1024     0192                     	;# 
  1025     0193                     	;# 
  1026     0193                     	;# 
  1027     0193                     	;# 
  1028     0194                     	;# 
  1029     0195                     	;# 
  1030     0196                     	;# 
  1031     0199                     	;# 
  1032     019A                     	;# 
  1033     019B                     	;# 
  1034     019B                     	;# 
  1035     019B                     	;# 
  1036     019B                     	;# 
  1037     019C                     	;# 
  1038     019C                     	;# 
  1039     019D                     	;# 
  1040     019E                     	;# 
  1041     019F                     	;# 
  1042     020D                     	;# 
  1043     0210                     	;# 
  1044     0211                     	;# 
  1045     0212                     	;# 
  1046     0213                     	;# 
  1047     0214                     	;# 
  1048     0215                     	;# 
  1049     0215                     	;# 
  1050     0216                     	;# 
  1051     0217                     	;# 
  1052     0291                     	;# 
  1053     0291                     	;# 
  1054     0292                     	;# 
  1055     0293                     	;# 
  1056     0294                     	;# 
  1057     0295                     	;# 
  1058     0295                     	;# 
  1059     0296                     	;# 
  1060     0298                     	;# 
  1061     0298                     	;# 
  1062     0299                     	;# 
  1063     029A                     	;# 
  1064     029B                     	;# 
  1065     029C                     	;# 
  1066     029C                     	;# 
  1067     029D                     	;# 
  1068     029E                     	;# 
  1069     029F                     	;# 
  1070     0311                     	;# 
  1071     0311                     	;# 
  1072     0312                     	;# 
  1073     0313                     	;# 
  1074     0314                     	;# 
  1075     0315                     	;# 
  1076     0315                     	;# 
  1077     0316                     	;# 
  1078     0318                     	;# 
  1079     0318                     	;# 
  1080     0319                     	;# 
  1081     031A                     	;# 
  1082     031C                     	;# 
  1083     031C                     	;# 
  1084     031D                     	;# 
  1085     031E                     	;# 
  1086     0394                     	;# 
  1087     0395                     	;# 
  1088     0396                     	;# 
  1089     0415                     	;# 
  1090     0416                     	;# 
  1091     0417                     	;# 
  1092     041C                     	;# 
  1093     041D                     	;# 
  1094     041E                     	;# 
  1095     0791                     	;# 
  1096     0792                     	;# 
  1097     0793                     	;# 
  1098     0794                     	;# 
  1099     0795                     	;# 
  1100     0798                     	;# 
  1101     0799                     	;# 
  1102     07A0                     	;# 
  1103     07A1                     	;# 
  1104     07A3                     	;# 
  1105     07A4                     	;# 
  1106     07A6                     	;# 
  1107     07A7                     	;# 
  1108     07A9                     	;# 
  1109     07AA                     	;# 
  1110     0FE4                     	;# 
  1111     0FE5                     	;# 
  1112     0FE6                     	;# 
  1113     0FE7                     	;# 
  1114     0FE8                     	;# 
  1115     0FE9                     	;# 
  1116     0FEA                     	;# 
  1117     0FEB                     	;# 
  1118     0FED                     	;# 
  1119     0FEE                     	;# 
  1120     0FEF                     	;# 
  1121     0000                     	;# 
  1122     0001                     	;# 
  1123     0002                     	;# 
  1124     0003                     	;# 
  1125     0004                     	;# 
  1126     0005                     	;# 
  1127     0006                     	;# 
  1128     0007                     	;# 
  1129     0008                     	;# 
  1130     0009                     	;# 
  1131     000A                     	;# 
  1132     000B                     	;# 
  1133     000C                     	;# 
  1134     000D                     	;# 
  1135     000E                     	;# 
  1136     0010                     	;# 
  1137     0011                     	;# 
  1138     0012                     	;# 
  1139     0013                     	;# 
  1140     0015                     	;# 
  1141     0016                     	;# 
  1142     0016                     	;# 
  1143     0017                     	;# 
  1144     0018                     	;# 
  1145     0019                     	;# 
  1146     001A                     	;# 
  1147     001B                     	;# 
  1148     001C                     	;# 
  1149     001E                     	;# 
  1150     001F                     	;# 
  1151     008C                     	;# 
  1152     008D                     	;# 
  1153     008E                     	;# 
  1154     0090                     	;# 
  1155     0091                     	;# 
  1156     0092                     	;# 
  1157     0093                     	;# 
  1158     0095                     	;# 
  1159     0096                     	;# 
  1160     0097                     	;# 
  1161     0098                     	;# 
  1162     0099                     	;# 
  1163     009A                     	;# 
  1164     009B                     	;# 
  1165     009B                     	;# 
  1166     009C                     	;# 
  1167     009D                     	;# 
  1168     009E                     	;# 
  1169     010C                     	;# 
  1170     010D                     	;# 
  1171     010E                     	;# 
  1172     0110                     	;# 
  1173     0111                     	;# 
  1174     0112                     	;# 
  1175     0113                     	;# 
  1176     0114                     	;# 
  1177     0115                     	;# 
  1178     0116                     	;# 
  1179     0117                     	;# 
  1180     0118                     	;# 
  1181     0119                     	;# 
  1182     011A                     	;# 
  1183     011B                     	;# 
  1184     011D                     	;# 
  1185     018C                     	;# 
  1186     018D                     	;# 
  1187     0191                     	;# 
  1188     0191                     	;# 
  1189     0192                     	;# 
  1190     0193                     	;# 
  1191     0193                     	;# 
  1192     0193                     	;# 
  1193     0194                     	;# 
  1194     0195                     	;# 
  1195     0196                     	;# 
  1196     0199                     	;# 
  1197     019A                     	;# 
  1198     019B                     	;# 
  1199     019B                     	;# 
  1200     019B                     	;# 
  1201     019B                     	;# 
  1202     019C                     	;# 
  1203     019C                     	;# 
  1204     019D                     	;# 
  1205     019E                     	;# 
  1206     019F                     	;# 
  1207     020D                     	;# 
  1208     0210                     	;# 
  1209     0211                     	;# 
  1210     0212                     	;# 
  1211     0213                     	;# 
  1212     0214                     	;# 
  1213     0215                     	;# 
  1214     0215                     	;# 
  1215     0216                     	;# 
  1216     0217                     	;# 
  1217     0291                     	;# 
  1218     0291                     	;# 
  1219     0292                     	;# 
  1220     0293                     	;# 
  1221     0294                     	;# 
  1222     0295                     	;# 
  1223     0295                     	;# 
  1224     0296                     	;# 
  1225     0298                     	;# 
  1226     0298                     	;# 
  1227     0299                     	;# 
  1228     029A                     	;# 
  1229     029B                     	;# 
  1230     029C                     	;# 
  1231     029C                     	;# 
  1232     029D                     	;# 
  1233     029E                     	;# 
  1234     029F                     	;# 
  1235     0311                     	;# 
  1236     0311                     	;# 
  1237     0312                     	;# 
  1238     0313                     	;# 
  1239     0314                     	;# 
  1240     0315                     	;# 
  1241     0315                     	;# 
  1242     0316                     	;# 
  1243     0318                     	;# 
  1244     0318                     	;# 
  1245     0319                     	;# 
  1246     031A                     	;# 
  1247     031C                     	;# 
  1248     031C                     	;# 
  1249     031D                     	;# 
  1250     031E                     	;# 
  1251     0394                     	;# 
  1252     0395                     	;# 
  1253     0396                     	;# 
  1254     0415                     	;# 
  1255     0416                     	;# 
  1256     0417                     	;# 
  1257     041C                     	;# 
  1258     041D                     	;# 
  1259     041E                     	;# 
  1260     0791                     	;# 
  1261     0792                     	;# 
  1262     0793                     	;# 
  1263     0794                     	;# 
  1264     0795                     	;# 
  1265     0798                     	;# 
  1266     0799                     	;# 
  1267     07A0                     	;# 
  1268     07A1                     	;# 
  1269     07A3                     	;# 
  1270     07A4                     	;# 
  1271     07A6                     	;# 
  1272     07A7                     	;# 
  1273     07A9                     	;# 
  1274     07AA                     	;# 
  1275     0FE4                     	;# 
  1276     0FE5                     	;# 
  1277     0FE6                     	;# 
  1278     0FE7                     	;# 
  1279     0FE8                     	;# 
  1280     0FE9                     	;# 
  1281     0FEA                     	;# 
  1282     0FEB                     	;# 
  1283     0FED                     	;# 
  1284     0FEE                     	;# 
  1285     0FEF                     	;# 
  1286     0000                     	;# 
  1287     0001                     	;# 
  1288     0002                     	;# 
  1289     0003                     	;# 
  1290     0004                     	;# 
  1291     0005                     	;# 
  1292     0006                     	;# 
  1293     0007                     	;# 
  1294     0008                     	;# 
  1295     0009                     	;# 
  1296     000A                     	;# 
  1297     000B                     	;# 
  1298     000C                     	;# 
  1299     000D                     	;# 
  1300     000E                     	;# 
  1301     0010                     	;# 
  1302     0011                     	;# 
  1303     0012                     	;# 
  1304     0013                     	;# 
  1305     0015                     	;# 
  1306     0016                     	;# 
  1307     0016                     	;# 
  1308     0017                     	;# 
  1309     0018                     	;# 
  1310     0019                     	;# 
  1311     001A                     	;# 
  1312     001B                     	;# 
  1313     001C                     	;# 
  1314     001E                     	;# 
  1315     001F                     	;# 
  1316     008C                     	;# 
  1317     008D                     	;# 
  1318     008E                     	;# 
  1319     0090                     	;# 
  1320     0091                     	;# 
  1321     0092                     	;# 
  1322     0093                     	;# 
  1323     0095                     	;# 
  1324     0096                     	;# 
  1325     0097                     	;# 
  1326     0098                     	;# 
  1327     0099                     	;# 
  1328     009A                     	;# 
  1329     009B                     	;# 
  1330     009B                     	;# 
  1331     009C                     	;# 
  1332     009D                     	;# 
  1333     009E                     	;# 
  1334     010C                     	;# 
  1335     010D                     	;# 
  1336     010E                     	;# 
  1337     0110                     	;# 
  1338     0111                     	;# 
  1339     0112                     	;# 
  1340     0113                     	;# 
  1341     0114                     	;# 
  1342     0115                     	;# 
  1343     0116                     	;# 
  1344     0117                     	;# 
  1345     0118                     	;# 
  1346     0119                     	;# 
  1347     011A                     	;# 
  1348     011B                     	;# 
  1349     011D                     	;# 
  1350     018C                     	;# 
  1351     018D                     	;# 
  1352     0191                     	;# 
  1353     0191                     	;# 
  1354     0192                     	;# 
  1355     0193                     	;# 
  1356     0193                     	;# 
  1357     0193                     	;# 
  1358     0194                     	;# 
  1359     0195                     	;# 
  1360     0196                     	;# 
  1361     0199                     	;# 
  1362     019A                     	;# 
  1363     019B                     	;# 
  1364     019B                     	;# 
  1365     019B                     	;# 
  1366     019B                     	;# 
  1367     019C                     	;# 
  1368     019C                     	;# 
  1369     019D                     	;# 
  1370     019E                     	;# 
  1371     019F                     	;# 
  1372     020D                     	;# 
  1373     0210                     	;# 
  1374     0211                     	;# 
  1375     0212                     	;# 
  1376     0213                     	;# 
  1377     0214                     	;# 
  1378     0215                     	;# 
  1379     0215                     	;# 
  1380     0216                     	;# 
  1381     0217                     	;# 
  1382     0291                     	;# 
  1383     0291                     	;# 
  1384     0292                     	;# 
  1385     0293                     	;# 
  1386     0294                     	;# 
  1387     0295                     	;# 
  1388     0295                     	;# 
  1389     0296                     	;# 
  1390     0298                     	;# 
  1391     0298                     	;# 
  1392     0299                     	;# 
  1393     029A                     	;# 
  1394     029B                     	;# 
  1395     029C                     	;# 
  1396     029C                     	;# 
  1397     029D                     	;# 
  1398     029E                     	;# 
  1399     029F                     	;# 
  1400     0311                     	;# 
  1401     0311                     	;# 
  1402     0312                     	;# 
  1403     0313                     	;# 
  1404     0314                     	;# 
  1405     0315                     	;# 
  1406     0315                     	;# 
  1407     0316                     	;# 
  1408     0318                     	;# 
  1409     0318                     	;# 
  1410     0319                     	;# 
  1411     031A                     	;# 
  1412     031C                     	;# 
  1413     031C                     	;# 
  1414     031D                     	;# 
  1415     031E                     	;# 
  1416     0394                     	;# 
  1417     0395                     	;# 
  1418     0396                     	;# 
  1419     0415                     	;# 
  1420     0416                     	;# 
  1421     0417                     	;# 
  1422     041C                     	;# 
  1423     041D                     	;# 
  1424     041E                     	;# 
  1425     0791                     	;# 
  1426     0792                     	;# 
  1427     0793                     	;# 
  1428     0794                     	;# 
  1429     0795                     	;# 
  1430     0798                     	;# 
  1431     0799                     	;# 
  1432     07A0                     	;# 
  1433     07A1                     	;# 
  1434     07A3                     	;# 
  1435     07A4                     	;# 
  1436     07A6                     	;# 
  1437     07A7                     	;# 
  1438     07A9                     	;# 
  1439     07AA                     	;# 
  1440     0FE4                     	;# 
  1441     0FE5                     	;# 
  1442     0FE6                     	;# 
  1443     0FE7                     	;# 
  1444     0FE8                     	;# 
  1445     0FE9                     	;# 
  1446     0FEA                     	;# 
  1447     0FEB                     	;# 
  1448     0FED                     	;# 
  1449     0FEE                     	;# 
  1450     0FEF                     	;# 
  1451     0000                     	;# 
  1452     0001                     	;# 
  1453     0002                     	;# 
  1454     0003                     	;# 
  1455     0004                     	;# 
  1456     0005                     	;# 
  1457     0006                     	;# 
  1458     0007                     	;# 
  1459     0008                     	;# 
  1460     0009                     	;# 
  1461     000A                     	;# 
  1462     000B                     	;# 
  1463     000C                     	;# 
  1464     000D                     	;# 
  1465     000E                     	;# 
  1466     0010                     	;# 
  1467     0011                     	;# 
  1468     0012                     	;# 
  1469     0013                     	;# 
  1470     0015                     	;# 
  1471     0016                     	;# 
  1472     0016                     	;# 
  1473     0017                     	;# 
  1474     0018                     	;# 
  1475     0019                     	;# 
  1476     001A                     	;# 
  1477     001B                     	;# 
  1478     001C                     	;# 
  1479     001E                     	;# 
  1480     001F                     	;# 
  1481     008C                     	;# 
  1482     008D                     	;# 
  1483     008E                     	;# 
  1484     0090                     	;# 
  1485     0091                     	;# 
  1486     0092                     	;# 
  1487     0093                     	;# 
  1488     0095                     	;# 
  1489     0096                     	;# 
  1490     0097                     	;# 
  1491     0098                     	;# 
  1492     0099                     	;# 
  1493     009A                     	;# 
  1494     009B                     	;# 
  1495     009B                     	;# 
  1496     009C                     	;# 
  1497     009D                     	;# 
  1498     009E                     	;# 
  1499     010C                     	;# 
  1500     010D                     	;# 
  1501     010E                     	;# 
  1502     0110                     	;# 
  1503     0111                     	;# 
  1504     0112                     	;# 
  1505     0113                     	;# 
  1506     0114                     	;# 
  1507     0115                     	;# 
  1508     0116                     	;# 
  1509     0117                     	;# 
  1510     0118                     	;# 
  1511     0119                     	;# 
  1512     011A                     	;# 
  1513     011B                     	;# 
  1514     011D                     	;# 
  1515     018C                     	;# 
  1516     018D                     	;# 
  1517     0191                     	;# 
  1518     0191                     	;# 
  1519     0192                     	;# 
  1520     0193                     	;# 
  1521     0193                     	;# 
  1522     0193                     	;# 
  1523     0194                     	;# 
  1524     0195                     	;# 
  1525     0196                     	;# 
  1526     0199                     	;# 
  1527     019A                     	;# 
  1528     019B                     	;# 
  1529     019B                     	;# 
  1530     019B                     	;# 
  1531     019B                     	;# 
  1532     019C                     	;# 
  1533     019C                     	;# 
  1534     019D                     	;# 
  1535     019E                     	;# 
  1536     019F                     	;# 
  1537     020D                     	;# 
  1538     0210                     	;# 
  1539     0211                     	;# 
  1540     0212                     	;# 
  1541     0213                     	;# 
  1542     0214                     	;# 
  1543     0215                     	;# 
  1544     0215                     	;# 
  1545     0216                     	;# 
  1546     0217                     	;# 
  1547     0291                     	;# 
  1548     0291                     	;# 
  1549     0292                     	;# 
  1550     0293                     	;# 
  1551     0294                     	;# 
  1552     0295                     	;# 
  1553     0295                     	;# 
  1554     0296                     	;# 
  1555     0298                     	;# 
  1556     0298                     	;# 
  1557     0299                     	;# 
  1558     029A                     	;# 
  1559     029B                     	;# 
  1560     029C                     	;# 
  1561     029C                     	;# 
  1562     029D                     	;# 
  1563     029E                     	;# 
  1564     029F                     	;# 
  1565     0311                     	;# 
  1566     0311                     	;# 
  1567     0312                     	;# 
  1568     0313                     	;# 
  1569     0314                     	;# 
  1570     0315                     	;# 
  1571     0315                     	;# 
  1572     0316                     	;# 
  1573     0318                     	;# 
  1574     0318                     	;# 
  1575     0319                     	;# 
  1576     031A                     	;# 
  1577     031C                     	;# 
  1578     031C                     	;# 
  1579     031D                     	;# 
  1580     031E                     	;# 
  1581     0394                     	;# 
  1582     0395                     	;# 
  1583     0396                     	;# 
  1584     0415                     	;# 
  1585     0416                     	;# 
  1586     0417                     	;# 
  1587     041C                     	;# 
  1588     041D                     	;# 
  1589     041E                     	;# 
  1590     0791                     	;# 
  1591     0792                     	;# 
  1592     0793                     	;# 
  1593     0794                     	;# 
  1594     0795                     	;# 
  1595     0798                     	;# 
  1596     0799                     	;# 
  1597     07A0                     	;# 
  1598     07A1                     	;# 
  1599     07A3                     	;# 
  1600     07A4                     	;# 
  1601     07A6                     	;# 
  1602     07A7                     	;# 
  1603     07A9                     	;# 
  1604     07AA                     	;# 
  1605     0FE4                     	;# 
  1606     0FE5                     	;# 
  1607     0FE6                     	;# 
  1608     0FE7                     	;# 
  1609     0FE8                     	;# 
  1610     0FE9                     	;# 
  1611     0FEA                     	;# 
  1612     0FEB                     	;# 
  1613     0FED                     	;# 
  1614     0FEE                     	;# 
  1615     0FEF                     	;# 
  1616     0000                     	;# 
  1617     0001                     	;# 
  1618     0002                     	;# 
  1619     0003                     	;# 
  1620     0004                     	;# 
  1621     0005                     	;# 
  1622     0006                     	;# 
  1623     0007                     	;# 
  1624     0008                     	;# 
  1625     0009                     	;# 
  1626     000A                     	;# 
  1627     000B                     	;# 
  1628     000C                     	;# 
  1629     000D                     	;# 
  1630     000E                     	;# 
  1631     0010                     	;# 
  1632     0011                     	;# 
  1633     0012                     	;# 
  1634     0013                     	;# 
  1635     0015                     	;# 
  1636     0016                     	;# 
  1637     0016                     	;# 
  1638     0017                     	;# 
  1639     0018                     	;# 
  1640     0019                     	;# 
  1641     001A                     	;# 
  1642     001B                     	;# 
  1643     001C                     	;# 
  1644     001E                     	;# 
  1645     001F                     	;# 
  1646     008C                     	;# 
  1647     008D                     	;# 
  1648     008E                     	;# 
  1649     0090                     	;# 
  1650     0091                     	;# 
  1651     0092                     	;# 
  1652     0093                     	;# 
  1653     0095                     	;# 
  1654     0096                     	;# 
  1655     0097                     	;# 
  1656     0098                     	;# 
  1657     0099                     	;# 
  1658     009A                     	;# 
  1659     009B                     	;# 
  1660     009B                     	;# 
  1661     009C                     	;# 
  1662     009D                     	;# 
  1663     009E                     	;# 
  1664     010C                     	;# 
  1665     010D                     	;# 
  1666     010E                     	;# 
  1667     0110                     	;# 
  1668     0111                     	;# 
  1669     0112                     	;# 
  1670     0113                     	;# 
  1671     0114                     	;# 
  1672     0115                     	;# 
  1673     0116                     	;# 
  1674     0117                     	;# 
  1675     0118                     	;# 
  1676     0119                     	;# 
  1677     011A                     	;# 
  1678     011B                     	;# 
  1679     011D                     	;# 
  1680     018C                     	;# 
  1681     018D                     	;# 
  1682     0191                     	;# 
  1683     0191                     	;# 
  1684     0192                     	;# 
  1685     0193                     	;# 
  1686     0193                     	;# 
  1687     0193                     	;# 
  1688     0194                     	;# 
  1689     0195                     	;# 
  1690     0196                     	;# 
  1691     0199                     	;# 
  1692     019A                     	;# 
  1693     019B                     	;# 
  1694     019B                     	;# 
  1695     019B                     	;# 
  1696     019B                     	;# 
  1697     019C                     	;# 
  1698     019C                     	;# 
  1699     019D                     	;# 
  1700     019E                     	;# 
  1701     019F                     	;# 
  1702     020D                     	;# 
  1703     0210                     	;# 
  1704     0211                     	;# 
  1705     0212                     	;# 
  1706     0213                     	;# 
  1707     0214                     	;# 
  1708     0215                     	;# 
  1709     0215                     	;# 
  1710     0216                     	;# 
  1711     0217                     	;# 
  1712     0291                     	;# 
  1713     0291                     	;# 
  1714     0292                     	;# 
  1715     0293                     	;# 
  1716     0294                     	;# 
  1717     0295                     	;# 
  1718     0295                     	;# 
  1719     0296                     	;# 
  1720     0298                     	;# 
  1721     0298                     	;# 
  1722     0299                     	;# 
  1723     029A                     	;# 
  1724     029B                     	;# 
  1725     029C                     	;# 
  1726     029C                     	;# 
  1727     029D                     	;# 
  1728     029E                     	;# 
  1729     029F                     	;# 
  1730     0311                     	;# 
  1731     0311                     	;# 
  1732     0312                     	;# 
  1733     0313                     	;# 
  1734     0314                     	;# 
  1735     0315                     	;# 
  1736     0315                     	;# 
  1737     0316                     	;# 
  1738     0318                     	;# 
  1739     0318                     	;# 
  1740     0319                     	;# 
  1741     031A                     	;# 
  1742     031C                     	;# 
  1743     031C                     	;# 
  1744     031D                     	;# 
  1745     031E                     	;# 
  1746     0394                     	;# 
  1747     0395                     	;# 
  1748     0396                     	;# 
  1749     0415                     	;# 
  1750     0416                     	;# 
  1751     0417                     	;# 
  1752     041C                     	;# 
  1753     041D                     	;# 
  1754     041E                     	;# 
  1755     0791                     	;# 
  1756     0792                     	;# 
  1757     0793                     	;# 
  1758     0794                     	;# 
  1759     0795                     	;# 
  1760     0798                     	;# 
  1761     0799                     	;# 
  1762     07A0                     	;# 
  1763     07A1                     	;# 
  1764     07A3                     	;# 
  1765     07A4                     	;# 
  1766     07A6                     	;# 
  1767     07A7                     	;# 
  1768     07A9                     	;# 
  1769     07AA                     	;# 
  1770     0FE4                     	;# 
  1771     0FE5                     	;# 
  1772     0FE6                     	;# 
  1773     0FE7                     	;# 
  1774     0FE8                     	;# 
  1775     0FE9                     	;# 
  1776     0FEA                     	;# 
  1777     0FEB                     	;# 
  1778     0FED                     	;# 
  1779     0FEE                     	;# 
  1780     0FEF                     	;# 
  1781     0000                     	;# 
  1782     0001                     	;# 
  1783     0002                     	;# 
  1784     0003                     	;# 
  1785     0004                     	;# 
  1786     0005                     	;# 
  1787     0006                     	;# 
  1788     0007                     	;# 
  1789     0008                     	;# 
  1790     0009                     	;# 
  1791     000A                     	;# 
  1792     000B                     	;# 
  1793     000C                     	;# 
  1794     000D                     	;# 
  1795     000E                     	;# 
  1796     0010                     	;# 
  1797     0011                     	;# 
  1798     0012                     	;# 
  1799     0013                     	;# 
  1800     0015                     	;# 
  1801     0016                     	;# 
  1802     0016                     	;# 
  1803     0017                     	;# 
  1804     0018                     	;# 
  1805     0019                     	;# 
  1806     001A                     	;# 
  1807     001B                     	;# 
  1808     001C                     	;# 
  1809     001E                     	;# 
  1810     001F                     	;# 
  1811     008C                     	;# 
  1812     008D                     	;# 
  1813     008E                     	;# 
  1814     0090                     	;# 
  1815     0091                     	;# 
  1816     0092                     	;# 
  1817     0093                     	;# 
  1818     0095                     	;# 
  1819     0096                     	;# 
  1820     0097                     	;# 
  1821     0098                     	;# 
  1822     0099                     	;# 
  1823     009A                     	;# 
  1824     009B                     	;# 
  1825     009B                     	;# 
  1826     009C                     	;# 
  1827     009D                     	;# 
  1828     009E                     	;# 
  1829     010C                     	;# 
  1830     010D                     	;# 
  1831     010E                     	;# 
  1832     0110                     	;# 
  1833     0111                     	;# 
  1834     0112                     	;# 
  1835     0113                     	;# 
  1836     0114                     	;# 
  1837     0115                     	;# 
  1838     0116                     	;# 
  1839     0117                     	;# 
  1840     0118                     	;# 
  1841     0119                     	;# 
  1842     011A                     	;# 
  1843     011B                     	;# 
  1844     011D                     	;# 
  1845     018C                     	;# 
  1846     018D                     	;# 
  1847     0191                     	;# 
  1848     0191                     	;# 
  1849     0192                     	;# 
  1850     0193                     	;# 
  1851     0193                     	;# 
  1852     0193                     	;# 
  1853     0194                     	;# 
  1854     0195                     	;# 
  1855     0196                     	;# 
  1856     0199                     	;# 
  1857     019A                     	;# 
  1858     019B                     	;# 
  1859     019B                     	;# 
  1860     019B                     	;# 
  1861     019B                     	;# 
  1862     019C                     	;# 
  1863     019C                     	;# 
  1864     019D                     	;# 
  1865     019E                     	;# 
  1866     019F                     	;# 
  1867     020D                     	;# 
  1868     0210                     	;# 
  1869     0211                     	;# 
  1870     0212                     	;# 
  1871     0213                     	;# 
  1872     0214                     	;# 
  1873     0215                     	;# 
  1874     0215                     	;# 
  1875     0216                     	;# 
  1876     0217                     	;# 
  1877     0291                     	;# 
  1878     0291                     	;# 
  1879     0292                     	;# 
  1880     0293                     	;# 
  1881     0294                     	;# 
  1882     0295                     	;# 
  1883     0295                     	;# 
  1884     0296                     	;# 
  1885     0298                     	;# 
  1886     0298                     	;# 
  1887     0299                     	;# 
  1888     029A                     	;# 
  1889     029B                     	;# 
  1890     029C                     	;# 
  1891     029C                     	;# 
  1892     029D                     	;# 
  1893     029E                     	;# 
  1894     029F                     	;# 
  1895     0311                     	;# 
  1896     0311                     	;# 
  1897     0312                     	;# 
  1898     0313                     	;# 
  1899     0314                     	;# 
  1900     0315                     	;# 
  1901     0315                     	;# 
  1902     0316                     	;# 
  1903     0318                     	;# 
  1904     0318                     	;# 
  1905     0319                     	;# 
  1906     031A                     	;# 
  1907     031C                     	;# 
  1908     031C                     	;# 
  1909     031D                     	;# 
  1910     031E                     	;# 
  1911     0394                     	;# 
  1912     0395                     	;# 
  1913     0396                     	;# 
  1914     0415                     	;# 
  1915     0416                     	;# 
  1916     0417                     	;# 
  1917     041C                     	;# 
  1918     041D                     	;# 
  1919     041E                     	;# 
  1920     0791                     	;# 
  1921     0792                     	;# 
  1922     0793                     	;# 
  1923     0794                     	;# 
  1924     0795                     	;# 
  1925     0798                     	;# 
  1926     0799                     	;# 
  1927     07A0                     	;# 
  1928     07A1                     	;# 
  1929     07A3                     	;# 
  1930     07A4                     	;# 
  1931     07A6                     	;# 
  1932     07A7                     	;# 
  1933     07A9                     	;# 
  1934     07AA                     	;# 
  1935     0FE4                     	;# 
  1936     0FE5                     	;# 
  1937     0FE6                     	;# 
  1938     0FE7                     	;# 
  1939     0FE8                     	;# 
  1940     0FE9                     	;# 
  1941     0FEA                     	;# 
  1942     0FEB                     	;# 
  1943     0FED                     	;# 
  1944     0FEE                     	;# 
  1945     0FEF                     	;# 
  1946     0000                     	;# 
  1947     0001                     	;# 
  1948     0002                     	;# 
  1949     0003                     	;# 
  1950     0004                     	;# 
  1951     0005                     	;# 
  1952     0006                     	;# 
  1953     0007                     	;# 
  1954     0008                     	;# 
  1955     0009                     	;# 
  1956     000A                     	;# 
  1957     000B                     	;# 
  1958     000C                     	;# 
  1959     000D                     	;# 
  1960     000E                     	;# 
  1961     0010                     	;# 
  1962     0011                     	;# 
  1963     0012                     	;# 
  1964     0013                     	;# 
  1965     0015                     	;# 
  1966     0016                     	;# 
  1967     0016                     	;# 
  1968     0017                     	;# 
  1969     0018                     	;# 
  1970     0019                     	;# 
  1971     001A                     	;# 
  1972     001B                     	;# 
  1973     001C                     	;# 
  1974     001E                     	;# 
  1975     001F                     	;# 
  1976     008C                     	;# 
  1977     008D                     	;# 
  1978     008E                     	;# 
  1979     0090                     	;# 
  1980     0091                     	;# 
  1981     0092                     	;# 
  1982     0093                     	;# 
  1983     0095                     	;# 
  1984     0096                     	;# 
  1985     0097                     	;# 
  1986     0098                     	;# 
  1987     0099                     	;# 
  1988     009A                     	;# 
  1989     009B                     	;# 
  1990     009B                     	;# 
  1991     009C                     	;# 
  1992     009D                     	;# 
  1993     009E                     	;# 
  1994     010C                     	;# 
  1995     010D                     	;# 
  1996     010E                     	;# 
  1997     0110                     	;# 
  1998     0111                     	;# 
  1999     0112                     	;# 
  2000     0113                     	;# 
  2001     0114                     	;# 
  2002     0115                     	;# 
  2003     0116                     	;# 
  2004     0117                     	;# 
  2005     0118                     	;# 
  2006     0119                     	;# 
  2007     011A                     	;# 
  2008     011B                     	;# 
  2009     011D                     	;# 
  2010     018C                     	;# 
  2011     018D                     	;# 
  2012     0191                     	;# 
  2013     0191                     	;# 
  2014     0192                     	;# 
  2015     0193                     	;# 
  2016     0193                     	;# 
  2017     0193                     	;# 
  2018     0194                     	;# 
  2019     0195                     	;# 
  2020     0196                     	;# 
  2021     0199                     	;# 
  2022     019A                     	;# 
  2023     019B                     	;# 
  2024     019B                     	;# 
  2025     019B                     	;# 
  2026     019B                     	;# 
  2027     019C                     	;# 
  2028     019C                     	;# 
  2029     019D                     	;# 
  2030     019E                     	;# 
  2031     019F                     	;# 
  2032     020D                     	;# 
  2033     0210                     	;# 
  2034     0211                     	;# 
  2035     0212                     	;# 
  2036     0213                     	;# 
  2037     0214                     	;# 
  2038     0215                     	;# 
  2039     0215                     	;# 
  2040     0216                     	;# 
  2041     0217                     	;# 
  2042     0291                     	;# 
  2043     0291                     	;# 
  2044     0292                     	;# 
  2045     0293                     	;# 
  2046     0294                     	;# 
  2047     0295                     	;# 
  2048     0295                     	;# 
  2049     0296                     	;# 
  2050     0298                     	;# 
  2051     0298                     	;# 
  2052     0299                     	;# 
  2053     029A                     	;# 
  2054     029B                     	;# 
  2055     029C                     	;# 
  2056     029C                     	;# 
  2057     029D                     	;# 
  2058     029E                     	;# 
  2059     029F                     	;# 
  2060     0311                     	;# 
  2061     0311                     	;# 
  2062     0312                     	;# 
  2063     0313                     	;# 
  2064     0314                     	;# 
  2065     0315                     	;# 
  2066     0315                     	;# 
  2067     0316                     	;# 
  2068     0318                     	;# 
  2069     0318                     	;# 
  2070     0319                     	;# 
  2071     031A                     	;# 
  2072     031C                     	;# 
  2073     031C                     	;# 
  2074     031D                     	;# 
  2075     031E                     	;# 
  2076     0394                     	;# 
  2077     0395                     	;# 
  2078     0396                     	;# 
  2079     0415                     	;# 
  2080     0416                     	;# 
  2081     0417                     	;# 
  2082     041C                     	;# 
  2083     041D                     	;# 
  2084     041E                     	;# 
  2085     0791                     	;# 
  2086     0792                     	;# 
  2087     0793                     	;# 
  2088     0794                     	;# 
  2089     0795                     	;# 
  2090     0798                     	;# 
  2091     0799                     	;# 
  2092     07A0                     	;# 
  2093     07A1                     	;# 
  2094     07A3                     	;# 
  2095     07A4                     	;# 
  2096     07A6                     	;# 
  2097     07A7                     	;# 
  2098     07A9                     	;# 
  2099     07AA                     	;# 
  2100     0FE4                     	;# 
  2101     0FE5                     	;# 
  2102     0FE6                     	;# 
  2103     0FE7                     	;# 
  2104     0FE8                     	;# 
  2105     0FE9                     	;# 
  2106     0FEA                     	;# 
  2107     0FEB                     	;# 
  2108     0FED                     	;# 
  2109     0FEE                     	;# 
  2110     0FEF                     	;_SES_Modbus
  2111                           
  2112 ;; Function _rd1RegCompleteHandler is unused but had its address taken
  2113     0000                     
  2114 ;; Function _rd2RegCompleteHandler is unused but had its address taken
  2115     0000                     
  2116 ;; Function _wr1RegCompleteHandler is unused but had its address taken
  2117     0000                     
  2118 ;; Function _wr2RegCompleteHandler is unused but had its address taken
  2119     0000                     
  2120 ;; Function _rdBlkRegCompleteHandler is unused but had its address taken
  2121     0000                     
  2122 ;; Function _I2C_MasterIsr is unused but had its address taken
  2123     0000                     
  2124 ;; Function _I2C_DO_IDLE is unused but had its address taken
  2125     0000                     
  2126 ;; Function _I2C_DO_SEND_ADR_READ is unused but had its address taken
  2127     0000                     
  2128 ;; Function _I2C_DO_SEND_ADR_WRITE is unused but had its address taken
  2129     0000                     
  2130 ;; Function _I2C_DO_TX is unused but had its address taken
  2131     0000                     
  2132 ;; Function _I2C_DO_RX is unused but had its address taken
  2133     0000                     
  2134 ;; Function _I2C_DO_RCEN is unused but had its address taken
  2135     0000                     
  2136 ;; Function _I2C_DO_TX_EMPTY is unused but had its address taken
  2137     0000                     
  2138 ;; Function _I2C_DO_SEND_RESTART_READ is unused but had its address taken
  2139     0000                     
  2140 ;; Function _I2C_DO_SEND_RESTART_WRITE is unused but had its address taken
  2141     0000                     
  2142 ;; Function _I2C_DO_SEND_RESTART is unused but had its address taken
  2143     0000                     
  2144 ;; Function _I2C_DO_SEND_STOP is unused but had its address taken
  2145     0000                     
  2146 ;; Function _I2C_DO_RX_ACK is unused but had its address taken
  2147     0000                     
  2148 ;; Function _I2C_DO_RX_NACK_STOP is unused but had its address taken
  2149     0000                     
  2150 ;; Function _I2C_DO_RX_NACK_RESTART is unused but had its address taken
  2151     0000                     
  2152 ;; Function _I2C_DO_RESET is unused but had its address taken
  2153     0000                     
  2154 ;; Function _I2C_DO_ADDRESS_NACK is unused but had its address taken
  2155     0000                     
  2156 ;; Function _I2C_CallbackReturnStop is unused but had its address taken
  2157     0000                     
  2158 ;; Function _I2C_CallbackReturnReset is unused but had its address taken
  2159     0000                     
  2160                           	psect	idataBANK0
  2161     0F46                     __pidataBANK0:
  2162                           
  2163                           ;initializer for _SHT30_CMD_MEASURE_M_Enable
  2164     0F46  342C               	retlw	44
  2165     0F47  340D               	retlw	13
  2166                           
  2167                           ;initializer for _SHT30_CMD_MEASURE_H_Enable
  2168     0F48  342C               	retlw	44
  2169     0F49  3406               	retlw	6
  2170                           
  2171                           ;initializer for _SHT30_CMD_MEASURE_H_Disable
  2172     0F4A  3424               	retlw	36
  2173     0F4B  3400               	retlw	0
  2174                           
  2175                           	psect	idataBANK1
  2176     0F40                     __pidataBANK1:
  2177                           
  2178                           ;initializer for _SHT30_CMD_MEASURE_L_Disable
  2179     0F40  3424               	retlw	36
  2180     0F41  3416               	retlw	22
  2181                           
  2182                           ;initializer for _SHT30_CMD_MEASURE_M_Disable
  2183     0F42  3424               	retlw	36
  2184     0F43  340B               	retlw	11
  2185                           
  2186                           ;initializer for _SHT30_CMD_MEASURE_L_Enable
  2187     0F44  342C               	retlw	44
  2188     0F45  3410               	retlw	16
  2189                           
  2190                           	psect	stringtext1
  2191     0703                     __pstringtext1:
  2192     0703                     _i2c_fsmStateTable:
  2193     0703  3400               	retlw	0
  2194     0704  3400               	retlw	0
  2195     0705  3400               	retlw	0
  2196     0706  3400               	retlw	0
  2197     0707  3400               	retlw	0
  2198     0708  3400               	retlw	0
  2199     0709  3400               	retlw	0
  2200     070A  3400               	retlw	0
  2201     070B  3400               	retlw	0
  2202     070C  3400               	retlw	0
  2203     070D  3400               	retlw	0
  2204     070E  3400               	retlw	0
  2205     070F  3400               	retlw	0
  2206     0710  3400               	retlw	0
  2207     0711  3400               	retlw	0
  2208     0712  3400               	retlw	0
  2209     0713  3400               	retlw	0
  2210     0714  3400               	retlw	0
  2211     0715  3400               	retlw	0
  2212     0716  3400               	retlw	0
  2213     0717  3400               	retlw	0
  2214     0718  3400               	retlw	0
  2215     0719  3400               	retlw	0
  2216     071A  3400               	retlw	0
  2217     071B  3400               	retlw	0
  2218     071C  3400               	retlw	0
  2219     071D  3400               	retlw	0
  2220     071E  3400               	retlw	0
  2221     071F  3400               	retlw	0
  2222     0720  3400               	retlw	0
  2223     0721  3400               	retlw	0
  2224     0722  3400               	retlw	0
  2225     0723                     __end_of_i2c_fsmStateTable:
  2226                           
  2227                           	psect	stringtext2
  2228     1000                     __pstringtext2:
  2229     1000                     _fctsupported:
  2230     1000  3401               	retlw	1
  2231     1001  3402               	retlw	2
  2232     1002  3403               	retlw	3
  2233     1003  3404               	retlw	4
  2234     1004  3405               	retlw	5
  2235     1005  3406               	retlw	6
  2236     1006  340F               	retlw	15
  2237     1007  3410               	retlw	16
  2238     1008                     __end_of_fctsupported:
  2239                           
  2240                           	psect	nvBANK0
  2241     006E                     __pnvBANK0:
  2242     006E                     _SW_Ad:
  2243     006E                     	ds	1
  2244                           
  2245                           	psect	nvBANK1
  2246     00D5                     __pnvBANK1:
  2247     00D5                     _TMR1_InterruptHandler:
  2248     00D5                     	ds	2
  2249     00D7                     _EUSART_ErrorHandler:
  2250     00D7                     	ds	2
  2251     00D9                     _EUSART_OverrunErrorHandler:
  2252     00D9                     	ds	2
  2253     00DB                     _EUSART_FramingErrorHandler:
  2254     00DB                     	ds	2
  2255     00DD                     _EUSART_RxDefaultInterruptHandler:
  2256     00DD                     	ds	2
  2257     00DF                     _EUSART_TxDefaultInterruptHandler:
  2258     00DF                     	ds	2
  2259     00E1                     Device_Init@value_SW4:
  2260     00E1                     	ds	1
  2261     00E2                     Device_Init@value_SW3:
  2262     00E2                     	ds	1
  2263     00E3                     Device_Init@value_SW2:
  2264     00E3                     	ds	1
  2265     00E4                     Device_Init@value_SW1:
  2266     00E4                     	ds	1
  2267     000C                     _PORTAbits	set	12
  2268     0019                     _T1GCONbits	set	25
  2269     0018                     _T1CONbits	set	24
  2270     0018                     _T1CON	set	24
  2271     0016                     _TMR1L	set	22
  2272     0017                     _TMR1H	set	23
  2273     0019                     _T1GCON	set	25
  2274     000B                     _INTCONbits	set	11
  2275     0011                     _PIR1bits	set	17
  2276     0012                     _PIR2bits	set	18
  2277     0092                     _PIE2bits	set	146
  2278     0091                     _PIE1bits	set	145
  2279     0097                     _WDTCON	set	151
  2280     0098                     _OSCTUNE	set	152
  2281     0099                     _OSCCON	set	153
  2282     0095                     _OPTION_REGbits	set	149
  2283     008E                     _TRISC	set	142
  2284     008D                     _TRISB	set	141
  2285     008C                     _TRISA	set	140
  2286     0090                     _TRISE	set	144
  2287     010E                     _LATCbits	set	270
  2288     0116                     _BORCON	set	278
  2289     011D                     _APFCON	set	285
  2290     010E                     _LATC	set	270
  2291     010D                     _LATB	set	269
  2292     010C                     _LATA	set	268
  2293     0110                     _LATE	set	272
  2294     0199                     _RCREG	set	409
  2295     019D                     _RCSTAbits	set	413
  2296     019A                     _TXREG	set	410
  2297     019E                     _TXSTAbits	set	414
  2298     019C                     _SPBRGH	set	412
  2299     019B                     _SPBRGL	set	411
  2300     019E                     _TXSTA	set	414
  2301     019D                     _RCSTA	set	413
  2302     019F                     _BAUDCON	set	415
  2303     018C                     _ANSELA	set	396
  2304     018D                     _ANSELB	set	397
  2305     0214                     _SSPSTATbits	set	532
  2306     0216                     _SSPCON2bits	set	534
  2307     0211                     _SSPBUF	set	529
  2308     0215                     _SSPCON1bits	set	533
  2309     0212                     _SSPADD	set	530
  2310     0216                     _SSPCON2	set	534
  2311     0215                     _SSPCON1	set	533
  2312     0214                     _SSPSTAT	set	532
  2313     020D                     _WPUB	set	525
  2314     0210                     _WPUE	set	528
  2315                           
  2316                           	psect	cinit
  2317     0054                     start_initialization:	
  2318                           ; #config settings
  2319                           
  2320     0054                     __initialization:	;BIGRAM
  2321                           
  2322                           ; Initialize objects allocated to BANK0
  2323     0054  3046               	movlw	low __pidataBANK0
  2324     0055  0084               	movwf	4
  2325     0056  308F               	movlw	(high __pidataBANK0)| (0+128)
  2326     0057  0085               	movwf	5
  2327     0058  3068               	movlw	low __pdataBANK0
  2328     0059  0086               	movwf	6
  2329     005A  3000               	movlw	high __pdataBANK0
  2330     005B  0087               	movwf	7
  2331     005C  3000               	movlw	0
  2332     005D  00FF               	movwf	btemp+1
  2333     005E  3006               	movlw	6
  2334     005F  318F  279E  3180   	fcall	init_ram
  2335                           
  2336                           ; Initialize objects allocated to BANK1
  2337     0062  3040               	movlw	low __pidataBANK1
  2338     0063  0084               	movwf	4
  2339     0064  308F               	movlw	(high __pidataBANK1)| (0+128)
  2340     0065  0085               	movwf	5
  2341     0066  30E5               	movlw	low __pdataBANK1
  2342     0067  0086               	movwf	6
  2343     0068  3000               	movlw	high __pdataBANK1
  2344     0069  0087               	movwf	7
  2345     006A  3000               	movlw	0
  2346     006B  00FF               	movwf	btemp+1
  2347     006C  3006               	movlw	6
  2348     006D  318F  279E  3180   	fcall	init_ram
  2349                           
  2350                           ; Clear objects allocated to BIGRAM
  2351     0070  30D4               	movlw	low (0+8404)
  2352     0071  0084               	movwf	4
  2353     0072  3020               	movlw	high (0+8404)
  2354     0073  0085               	movwf	5
  2355     0074  301C               	movlw	28
  2356     0075  00FE               	movwf	btemp
  2357     0076  3001               	movlw	1
  2358     0077  00FF               	movwf	btemp+1
  2359     0078  318F  2792  3180   	fcall	clear_ram0
  2360                           
  2361                           ; Clear objects allocated to COMMON
  2362     007B  01FA               	clrf	__pbssCOMMON& (0+127)
  2363     007C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2364                           
  2365                           ; Clear objects allocated to BANK0
  2366     007D  3055               	movlw	low __pbssBANK0
  2367     007E  0084               	movwf	4
  2368     007F  3000               	movlw	high __pbssBANK0
  2369     0080  0085               	movwf	5
  2370     0081  3013               	movlw	19
  2371     0082  00FE               	movwf	btemp
  2372     0083  3000               	movlw	0
  2373     0084  00FF               	movwf	btemp+1
  2374     0085  318F  2792  3180   	fcall	clear_ram0
  2375                           
  2376                           ; Clear objects allocated to BANK1
  2377     0088  30A0               	movlw	low __pbssBANK1
  2378     0089  0084               	movwf	4
  2379     008A  3000               	movlw	high __pbssBANK1
  2380     008B  0085               	movwf	5
  2381     008C  3035               	movlw	53
  2382     008D  00FE               	movwf	btemp
  2383     008E  3000               	movlw	0
  2384     008F  00FF               	movwf	btemp+1
  2385     0090  318F  2792  3180   	fcall	clear_ram0
  2386                           
  2387                           ; Clear objects allocated to BANK2
  2388     0093  3020               	movlw	low __pbssBANK2
  2389     0094  0084               	movwf	4
  2390     0095  3001               	movlw	high __pbssBANK2
  2391     0096  0085               	movwf	5
  2392     0097  3020               	movlw	32
  2393     0098  00FE               	movwf	btemp
  2394     0099  3000               	movlw	0
  2395     009A  00FF               	movwf	btemp+1
  2396     009B  318F  2792  3180   	fcall	clear_ram0
  2397     009E                     end_of_initialization:	
  2398                           ;End of C runtime variable initialization code
  2399                           
  2400     009E                     __end_of__initialization:
  2401     009E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2402     009F  0020               	movlb	0
  2403     00A0  318F  2F86         	ljmp	_main	;jump to C main() function
  2404                           
  2405                           	psect	bssCOMMON
  2406     007A                     __pbssCOMMON:
  2407     007A                     _eusartRxTail:
  2408     007A                     	ds	1
  2409     007B                     _eusartRxHead:
  2410     007B                     	ds	1
  2411                           
  2412                           	psect	bssBANK0
  2413     0055                     __pbssBANK0:
  2414     0055                     _device_time:
  2415     0055                     	ds	4
  2416     0059                     _SensorAmbient:
  2417     0059                     	ds	4
  2418     005D                     _timer1ReloadVal:
  2419     005D                     	ds	2
  2420     005F                     _MSSP_InterruptHandler:
  2421     005F                     	ds	2
  2422     0061                     Task_MB@f_Modbus_Init:
  2423     0061                     	ds	1
  2424     0062                     _f_Indicator:
  2425     0062                     	ds	1
  2426     0063                     _eusartRxLastError:
  2427     0063                     	ds	1
  2428     0064                     _eusartRxCount:
  2429     0064                     	ds	1
  2430     0065                     _eusartTxBufferRemaining:
  2431     0065                     	ds	1
  2432     0066                     _eusartTxTail:
  2433     0066                     	ds	1
  2434     0067                     _eusartTxHead:
  2435     0067                     	ds	1
  2436                           
  2437                           	psect	dataBANK0
  2438     0068                     __pdataBANK0:
  2439     0068                     _SHT30_CMD_MEASURE_M_Enable:
  2440     0068                     	ds	2
  2441     006A                     _SHT30_CMD_MEASURE_H_Enable:
  2442     006A                     	ds	2
  2443     006C                     _SHT30_CMD_MEASURE_H_Disable:
  2444     006C                     	ds	2
  2445                           
  2446                           	psect	bssBANK1
  2447     00A0                     __pbssBANK1:
  2448     00A0                     _I2C_Status:
  2449     00A0                     	ds	29
  2450     00BD                     _eusartRxStatusBuffer:
  2451     00BD                     	ds	16
  2452     00CD                     Task_Sensor@valTime:
  2453     00CD                     	ds	4
  2454     00D1                     _MB_Register:
  2455     00D1                     	ds	4
  2456                           
  2457                           	psect	dataBANK1
  2458     00E5                     __pdataBANK1:
  2459     00E5                     _SHT30_CMD_MEASURE_L_Disable:
  2460     00E5                     	ds	2
  2461     00E7                     _SHT30_CMD_MEASURE_M_Disable:
  2462     00E7                     	ds	2
  2463     00E9                     _SHT30_CMD_MEASURE_L_Enable:
  2464     00E9                     	ds	2
  2465                           
  2466                           	psect	bssBANK2
  2467     0120                     __pbssBANK2:
  2468     0120                     _eusartRxBuffer:
  2469     0120                     	ds	16
  2470     0130                     _eusartTxBuffer:
  2471     0130                     	ds	16
  2472                           
  2473                           	psect	inittext
  2474     0F9E                     init_ram:
  2475     0F9E  00FE               	movwf	btemp
  2476     0F9F                     initloop:
  2477     0F9F  0012               	moviw fsr0++
  2478     0FA0  001E               	movwi fsr1++
  2479     0FA1  3001               	movlw	1
  2480     0FA2  02FE               	subwf	btemp,f
  2481     0FA3  3000               	movlw	0
  2482     0FA4  3BFF               	subwfb	btemp+1,f
  2483     0FA5  087F               	movf	btemp+1,w
  2484     0FA6  047E               	iorwf	btemp,w
  2485     0FA7  1D03               	skipz
  2486     0FA8  2F9F               	goto	initloop
  2487     0FA9  3400               	retlw	0
  2488                           
  2489                           	psect	clrtext
  2490     0F92                     clear_ram0:	
  2491                           ;	Called with FSR0 containing the base address, and
  2492                           ;	btemp/btemp+1 has the size to clear
  2493                           
  2494     0F92  0064               	clrwdt	;clear the watchdog before getting into this loop
  2495     0F93                     clrloop0:
  2496     0F93  0180               	clrf	0	;clear RAM location pointed to by FSR
  2497     0F94  3101               	addfsr 0,1
  2498     0F95  3001               	movlw	1
  2499     0F96  02FE               	subwf	btemp,f
  2500     0F97  3000               	movlw	0
  2501     0F98  3BFF               	subwfb	btemp+1,f
  2502     0F99  087F               	movf	btemp+1,w
  2503     0F9A  047E               	iorwf	btemp,w
  2504     0F9B  1D03               	skipz
  2505     0F9C  2F93               	goto	clrloop0	;have we reached the end yet?
  2506     0F9D  3400               	retlw	0	;all done for this memory range, return
  2507                           
  2508                           	psect	cstackBANK1
  2509     00EB                     __pcstackBANK1:
  2510     00EB                     ModbusRTU_Slave_Poll@reg:
  2511                           
  2512                           ; 1 bytes @ 0x0
  2513     00EB                     	ds	1
  2514     00EC                     ModbusRTU_Slave_Poll@u8Current:
  2515                           
  2516                           ; 1 bytes @ 0x1
  2517     00EC                     	ds	1
  2518     00ED                     ModbusRTU_Slave_Poll@i8state:
  2519                           
  2520                           ; 1 bytes @ 0x2
  2521     00ED                     	ds	1
  2522     00EE                     ModbusRTU_Slave_Poll@u8exception:
  2523                           
  2524                           ; 1 bytes @ 0x3
  2525     00EE                     	ds	1
  2526                           
  2527                           	psect	cstackCOMMON
  2528     0070                     __pcstackCOMMON:
  2529     0070                     ?_I2C_Open:
  2530     0070                     ?_I2C_MasterWrite:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533     0070                     ?_I2C_Close:	
  2534                           ; 1 bytes @ 0x0
  2535                           
  2536     0070                     ?_I2C_MasterRead:	
  2537                           ; 1 bytes @ 0x0
  2538                           
  2539     0070                     ?_OSCILLATOR_Initialize:	
  2540                           ; 1 bytes @ 0x0
  2541                           
  2542     0070                     ?_WDT_Initialize:	
  2543                           ; 1 bytes @ 0x0
  2544                           
  2545     0070                     ?_TMR1_Initialize:	
  2546                           ; 1 bytes @ 0x0
  2547                           
  2548     0070                     ?_EUSART_Initialize:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551     0070                     ?_I2C_MasterClearIrq:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554     0070                     ?_I2C_MasterOpen:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557     0070                     ?_I2C_MasterEnableIrq:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560     0070                     ?_I2C_MasterDisableIrq:	
  2561                           ; 1 bytes @ 0x0
  2562                           
  2563     0070                     ?_I2C_MasterClose:	
  2564                           ; 1 bytes @ 0x0
  2565                           
  2566     0070                     ?_I2C_MasterStart:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569     0070                     ?_TMR1_ISR:	
  2570                           ; 1 bytes @ 0x0
  2571                           
  2572     0070                     ?_EUSART_Receive_ISR:	
  2573                           ; 1 bytes @ 0x0
  2574                           
  2575     0070                     ?_EUSART_Transmit_ISR:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578     0070                     ??_EUSART_Transmit_ISR:	
  2579                           ; 1 bytes @ 0x0
  2580                           
  2581     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2582                           ; 1 bytes @ 0x0
  2583                           
  2584     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2585                           ; 1 bytes @ 0x0
  2586                           
  2587     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593     0070                     ?_EUSART_DefaultErrorHandler:	
  2594                           ; 1 bytes @ 0x0
  2595                           
  2596     0070                     ?_EUSART_RxDataHandler:	
  2597                           ; 1 bytes @ 0x0
  2598                           
  2599     0070                     ??_EUSART_RxDataHandler:	
  2600                           ; 1 bytes @ 0x0
  2601                           
  2602     0070                     ?_TMR1_DefaultInterruptHandler:	
  2603                           ; 1 bytes @ 0x0
  2604                           
  2605     0070                     ??_TMR1_DefaultInterruptHandler:	
  2606                           ; 1 bytes @ 0x0
  2607                           
  2608     0070                     ?_TMR1_CallBack:	
  2609                           ; 1 bytes @ 0x0
  2610                           
  2611     0070                     ??_TMR1_CallBack:	
  2612                           ; 1 bytes @ 0x0
  2613                           
  2614     0070                     ?_App_Init:	
  2615                           ; 1 bytes @ 0x0
  2616                           
  2617     0070                     ?_App_Process:	
  2618                           ; 1 bytes @ 0x0
  2619                           
  2620     0070                     ?_Tick_Init_SES:	
  2621                           ; 1 bytes @ 0x0
  2622                           
  2623     0070                     ?_Task_MB:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626     0070                     ?_Modbus_sendTxBuff:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629     0070                     ?_rtcc_handle:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632     0070                     ??_rtcc_handle:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635     0070                     ?_PIN_MANAGER_Initialize:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638     0070                     ?_SYSTEM_Initialize:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641     0070                     ?_I2C_MasterOperation:	
  2642                           ; 1 bytes @ 0x0
  2643                           
  2644     0070                     ?_INTERRUPT_InterruptManager:	
  2645                           ; 1 bytes @ 0x0
  2646                           
  2647     0070                     ?_EUSART_is_tx_done:	
  2648                           ; 1 bytes @ 0x0
  2649                           
  2650     0070                     ?_EUSART_Read:	
  2651                           ; 1 bytes @ 0x0
  2652                           
  2653     0070                     ?_EUSART_Write:	
  2654                           ; 1 bytes @ 0x0
  2655                           
  2656     0070                     ?_TMR1_StartTimer:	
  2657                           ; 1 bytes @ 0x0
  2658                           
  2659     0070                     ?_TMR1_WriteTimer:	
  2660                           ; 1 bytes @ 0x0
  2661                           
  2662     0070                     ?_main:	
  2663                           ; 1 bytes @ 0x0
  2664                           
  2665     0070                     ?_ReadData:	
  2666                           ; 1 bytes @ 0x0
  2667                           
  2668     0070                     ?_Task_Sensor:	
  2669                           ; 1 bytes @ 0x0
  2670                           
  2671     0070                     ?_Task_Indicator:	
  2672                           ; 1 bytes @ 0x0
  2673                           
  2674     0070                     ?_Device_Init:	
  2675                           ; 1 bytes @ 0x0
  2676                           
  2677     0070                     ?_buildException:	
  2678                           ; 1 bytes @ 0x0
  2679                           
  2680     0070                     ?_Modbus_getRxBuff:	
  2681                           ; 1 bytes @ 0x0
  2682                           
  2683     0070                     ?_validateRequest:	
  2684                           ; 1 bytes @ 0x0
  2685                           
  2686     0070                     ?_ModbusSlave_Init:	
  2687                           ; 1 bytes @ 0x0
  2688                           
  2689     0070                     ?_ModbusSlave_Process:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692     0070                     TMR1_WriteTimer@timerVal:	
  2693                           ; 1 bytes @ 0x0
  2694                           
  2695                           
  2696                           ; 2 bytes @ 0x0
  2697     0070                     	ds	1
  2698     0071                     ??_EUSART_Receive_ISR:
  2699     0071                     ??_EUSART_DefaultErrorHandler:	
  2700                           ; 1 bytes @ 0x1
  2701                           
  2702                           
  2703                           ; 1 bytes @ 0x1
  2704     0071                     	ds	1
  2705     0072                     ?_I2C_SetBuffer:
  2706     0072                     ??_I2C_Close:	
  2707                           ; 1 bytes @ 0x2
  2708                           
  2709     0072                     ??_OSCILLATOR_Initialize:	
  2710                           ; 1 bytes @ 0x2
  2711                           
  2712     0072                     ??_WDT_Initialize:	
  2713                           ; 1 bytes @ 0x2
  2714                           
  2715     0072                     ?_I2C_SetInterruptHandler:	
  2716                           ; 1 bytes @ 0x2
  2717                           
  2718     0072                     ??_I2C_MasterClearIrq:	
  2719                           ; 1 bytes @ 0x2
  2720                           
  2721     0072                     ??_I2C_MasterOpen:	
  2722                           ; 1 bytes @ 0x2
  2723                           
  2724     0072                     ??_I2C_MasterEnableIrq:	
  2725                           ; 1 bytes @ 0x2
  2726                           
  2727     0072                     ??_I2C_MasterDisableIrq:	
  2728                           ; 1 bytes @ 0x2
  2729                           
  2730     0072                     ??_I2C_MasterClose:	
  2731                           ; 1 bytes @ 0x2
  2732                           
  2733     0072                     ??_I2C_MasterStart:	
  2734                           ; 1 bytes @ 0x2
  2735                           
  2736     0072                     ?_I2C_SetCallback:	
  2737                           ; 1 bytes @ 0x2
  2738                           
  2739     0072                     ??_TMR1_ISR:	
  2740                           ; 1 bytes @ 0x2
  2741                           
  2742     0072                     ?_EUSART_SetRxInterruptHandler:	
  2743                           ; 1 bytes @ 0x2
  2744                           
  2745     0072                     ?_EUSART_SetTxInterruptHandler:	
  2746                           ; 1 bytes @ 0x2
  2747                           
  2748     0072                     ?_EUSART_SetFramingErrorHandler:	
  2749                           ; 1 bytes @ 0x2
  2750                           
  2751     0072                     ?_EUSART_SetOverrunErrorHandler:	
  2752                           ; 1 bytes @ 0x2
  2753                           
  2754     0072                     ?_EUSART_SetErrorHandler:	
  2755                           ; 1 bytes @ 0x2
  2756                           
  2757     0072                     ?_TMR1_SetInterruptHandler:	
  2758                           ; 1 bytes @ 0x2
  2759                           
  2760     0072                     ??_PIN_MANAGER_Initialize:	
  2761                           ; 1 bytes @ 0x2
  2762                           
  2763     0072                     ??_I2C_MasterOperation:	
  2764                           ; 1 bytes @ 0x2
  2765                           
  2766     0072                     ??_INTERRUPT_InterruptManager:	
  2767                           ; 1 bytes @ 0x2
  2768                           
  2769     0072                     ??_EUSART_is_tx_done:	
  2770                           ; 1 bytes @ 0x2
  2771                           
  2772     0072                     ??_EUSART_Read:	
  2773                           ; 1 bytes @ 0x2
  2774                           
  2775     0072                     ??_EUSART_Write:	
  2776                           ; 1 bytes @ 0x2
  2777                           
  2778     0072                     ??_TMR1_StartTimer:	
  2779                           ; 1 bytes @ 0x2
  2780                           
  2781     0072                     ??_TMR1_WriteTimer:	
  2782                           ; 1 bytes @ 0x2
  2783                           
  2784     0072                     ??_Task_Indicator:	
  2785                           ; 1 bytes @ 0x2
  2786                           
  2787     0072                     ??_Device_Init:	
  2788                           ; 1 bytes @ 0x2
  2789                           
  2790     0072                     ??_buildException:	
  2791                           ; 1 bytes @ 0x2
  2792                           
  2793     0072                     ??_ModbusSlave_Init:	
  2794                           ; 1 bytes @ 0x2
  2795                           
  2796     0072                     ?_Modbus_calcCRC:	
  2797                           ; 1 bytes @ 0x2
  2798                           
  2799     0072                     ?_Get_millis:	
  2800                           ; 2 bytes @ 0x2
  2801                           
  2802     0072                     I2C_Close@returnValue:	
  2803                           ; 4 bytes @ 0x2
  2804                           
  2805     0072                     I2C_MasterOperation@read:	
  2806                           ; 1 bytes @ 0x2
  2807                           
  2808     0072                     ModbusSlave_Init@_SW_Ad:	
  2809                           ; 1 bytes @ 0x2
  2810                           
  2811     0072                     I2C_SetBuffer@bufferSize:	
  2812                           ; 1 bytes @ 0x2
  2813                           
  2814     0072                     I2C_SetInterruptHandler@InterruptHandler:	
  2815                           ; 2 bytes @ 0x2
  2816                           
  2817     0072                     I2C_SetCallback@cb:	
  2818                           ; 2 bytes @ 0x2
  2819                           
  2820     0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2821                           ; 2 bytes @ 0x2
  2822                           
  2823     0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2824                           ; 2 bytes @ 0x2
  2825                           
  2826     0072                     EUSART_SetErrorHandler@interruptHandler:	
  2827                           ; 2 bytes @ 0x2
  2828                           
  2829     0072                     EUSART_SetTxInterruptHandler@interruptHandler:	
  2830                           ; 2 bytes @ 0x2
  2831                           
  2832     0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2833                           ; 2 bytes @ 0x2
  2834                           
  2835     0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  2836                           ; 2 bytes @ 0x2
  2837                           
  2838                           
  2839                           ; 2 bytes @ 0x2
  2840     0072                     	ds	1
  2841     0073                     I2C_MasterOperation@returnValue:
  2842     0073                     EUSART_Read@readValue:	
  2843                           ; 1 bytes @ 0x3
  2844                           
  2845     0073                     EUSART_Write@txData:	
  2846                           ; 1 bytes @ 0x3
  2847                           
  2848     0073                     buildException@exception:	
  2849                           ; 1 bytes @ 0x3
  2850                           
  2851                           
  2852                           ; 1 bytes @ 0x3
  2853     0073                     	ds	1
  2854     0074                     ??_I2C_Open:
  2855     0074                     ??_I2C_SetBuffer:	
  2856                           ; 1 bytes @ 0x4
  2857                           
  2858     0074                     ??_I2C_MasterWrite:	
  2859                           ; 1 bytes @ 0x4
  2860                           
  2861     0074                     ??_I2C_MasterRead:	
  2862                           ; 1 bytes @ 0x4
  2863                           
  2864     0074                     ??_TMR1_Initialize:	
  2865                           ; 1 bytes @ 0x4
  2866                           
  2867     0074                     ??_EUSART_Initialize:	
  2868                           ; 1 bytes @ 0x4
  2869                           
  2870     0074                     ??_I2C_SetInterruptHandler:	
  2871                           ; 1 bytes @ 0x4
  2872                           
  2873     0074                     ??_EUSART_SetRxInterruptHandler:	
  2874                           ; 1 bytes @ 0x4
  2875                           
  2876     0074                     ??_EUSART_SetTxInterruptHandler:	
  2877                           ; 1 bytes @ 0x4
  2878                           
  2879     0074                     ??_EUSART_SetFramingErrorHandler:	
  2880                           ; 1 bytes @ 0x4
  2881                           
  2882     0074                     ??_EUSART_SetOverrunErrorHandler:	
  2883                           ; 1 bytes @ 0x4
  2884                           
  2885     0074                     ??_EUSART_SetErrorHandler:	
  2886                           ; 1 bytes @ 0x4
  2887                           
  2888     0074                     ??_TMR1_SetInterruptHandler:	
  2889                           ; 1 bytes @ 0x4
  2890                           
  2891     0074                     ??_Tick_Init_SES:	
  2892                           ; 1 bytes @ 0x4
  2893                           
  2894     0074                     ??_Modbus_calcCRC:	
  2895                           ; 1 bytes @ 0x4
  2896                           
  2897     0074                     ??_SYSTEM_Initialize:	
  2898                           ; 1 bytes @ 0x4
  2899                           
  2900     0074                     I2C_Open@address:	
  2901                           ; 1 bytes @ 0x4
  2902                           
  2903     0074                     I2C_SetBuffer@buffer:	
  2904                           ; 1 bytes @ 0x4
  2905                           
  2906     0074                     I2C_SetCallback@ptr:	
  2907                           ; 1 bytes @ 0x4
  2908                           
  2909     0074                     buildException@u8func:	
  2910                           ; 1 bytes @ 0x4
  2911                           
  2912     0074                     Modbus_getRxBuff@bBuffOverflow:	
  2913                           ; 1 bytes @ 0x4
  2914                           
  2915                           
  2916                           ; 1 bytes @ 0x4
  2917     0074                     	ds	1
  2918     0075                     ??_I2C_SetCallback:
  2919     0075                     ??_App_Init:	
  2920                           ; 1 bytes @ 0x5
  2921                           
  2922     0075                     I2C_Open@returnValue:	
  2923                           ; 1 bytes @ 0x5
  2924                           
  2925     0075                     I2C_SetCallback@idx:	
  2926                           ; 1 bytes @ 0x5
  2927                           
  2928                           
  2929                           ; 1 bytes @ 0x5
  2930     0075                     	ds	1
  2931     0076                     ?_I2C_SetAddressNackCallback:
  2932     0076                     ??_Get_millis:	
  2933                           ; 1 bytes @ 0x6
  2934                           
  2935     0076                     ?_I2C_ReadNBytes:	
  2936                           ; 1 bytes @ 0x6
  2937                           
  2938     0076                     I2C_ReadNBytes@data:	
  2939                           ; 1 bytes @ 0x6
  2940                           
  2941     0076                     I2C_SetAddressNackCallback@cb:	
  2942                           ; 1 bytes @ 0x6
  2943                           
  2944                           
  2945                           ; 2 bytes @ 0x6
  2946     0076                     	ds	1
  2947     0077                     I2C_ReadNBytes@len:
  2948                           
  2949                           ; 2 bytes @ 0x7
  2950     0077                     	ds	1
  2951     0078                     ??_Task_MB:
  2952     0078                     ??_ModbusSlave_Process:	
  2953                           ; 1 bytes @ 0x8
  2954                           
  2955     0078                     I2C_SetAddressNackCallback@ptr:	
  2956                           ; 1 bytes @ 0x8
  2957                           
  2958                           
  2959                           ; 2 bytes @ 0x8
  2960     0078                     	ds	1
  2961     0079                     ??_I2C_ReadNBytes:
  2962     0079                     I2C_ReadNBytes@address:	
  2963                           ; 1 bytes @ 0x9
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x9
  2967     0079                     	ds	1
  2968     007A                     ??_I2C_SetAddressNackCallback:
  2969     007A                     ??_App_Process:	
  2970                           ; 1 bytes @ 0xA
  2971                           
  2972     007A                     ??_I2C_WriteNBytes:	
  2973                           ; 1 bytes @ 0xA
  2974                           
  2975     007A                     ??_main:	
  2976                           ; 1 bytes @ 0xA
  2977                           
  2978                           
  2979                           	psect	cstackBANK0
  2980     0020                     __pcstackBANK0:	
  2981                           ; 1 bytes @ 0xA
  2982                           
  2983     0020                     ?_I2C_WriteNBytes:
  2984     0020                     ??_Modbus_getRxBuff:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987     0020                     I2C_WriteNBytes@data:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990     0020                     Modbus_calcCRC@len:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993                           
  2994                           ; 1 bytes @ 0x0
  2995     0020                     	ds	1
  2996     0021                     I2C_WriteNBytes@len:
  2997     0021                     Modbus_calcCRC@temp2:	
  2998                           ; 2 bytes @ 0x1
  2999                           
  3000                           
  3001                           ; 2 bytes @ 0x1
  3002     0021                     	ds	2
  3003     0023                     I2C_WriteNBytes@address:
  3004     0023                     Modbus_calcCRC@flag:	
  3005                           ; 1 bytes @ 0x3
  3006                           
  3007                           
  3008                           ; 2 bytes @ 0x3
  3009     0023                     	ds	1
  3010     0024                     ??_ReadData:
  3011                           
  3012                           ; 1 bytes @ 0x4
  3013     0024                     	ds	1
  3014     0025                     Modbus_calcCRC@i:
  3015                           
  3016                           ; 1 bytes @ 0x5
  3017     0025                     	ds	1
  3018     0026                     Modbus_calcCRC@j:
  3019                           
  3020                           ; 1 bytes @ 0x6
  3021     0026                     	ds	1
  3022     0027                     Modbus_calcCRC@temp:
  3023                           
  3024                           ; 2 bytes @ 0x7
  3025     0027                     	ds	1
  3026     0028                     ReadData@aData:
  3027                           
  3028                           ; 6 bytes @ 0x8
  3029     0028                     	ds	1
  3030     0029                     ??_Modbus_sendTxBuff:
  3031     0029                     ??_validateRequest:	
  3032                           ; 1 bytes @ 0x9
  3033                           
  3034                           
  3035                           ; 1 bytes @ 0x9
  3036     0029                     	ds	5
  3037     002E                     ReadData@valTime:
  3038                           
  3039                           ; 4 bytes @ 0xE
  3040     002E                     	ds	2
  3041     0030                     Modbus_sendTxBuff@u16crc:
  3042                           
  3043                           ; 2 bytes @ 0x10
  3044     0030                     	ds	2
  3045     0032                     ??_Task_Sensor:
  3046     0032                     Modbus_sendTxBuff@index:	
  3047                           ; 1 bytes @ 0x12
  3048                           
  3049                           
  3050                           ; 2 bytes @ 0x12
  3051     0032                     	ds	2
  3052     0034                     Modbus_sendTxBuff@u32overTimecountDown:
  3053                           
  3054                           ; 4 bytes @ 0x14
  3055     0034                     	ds	2
  3056     0036                     validateRequest@u16MsgCRC:
  3057                           
  3058                           ; 2 bytes @ 0x16
  3059     0036                     	ds	2
  3060     0038                     ?_ModbusSlaveF04:
  3061     0038                     validateRequest@isSupported:	
  3062                           ; 1 bytes @ 0x18
  3063                           
  3064     0038                     ModbusSlaveF04@reg:	
  3065                           ; 1 bytes @ 0x18
  3066                           
  3067                           
  3068                           ; 2 bytes @ 0x18
  3069     0038                     	ds	1
  3070     0039                     validateRequest@i:
  3071                           
  3072                           ; 1 bytes @ 0x19
  3073     0039                     	ds	1
  3074     003A                     ModbusSlaveF04@size:
  3075                           
  3076                           ; 1 bytes @ 0x1A
  3077     003A                     	ds	1
  3078     003B                     ??_ModbusSlaveF04:
  3079                           
  3080                           ; 1 bytes @ 0x1B
  3081     003B                     	ds	11
  3082     0046                     ModbusSlaveF04@u8StartAdd:
  3083                           
  3084                           ; 2 bytes @ 0x26
  3085     0046                     	ds	2
  3086     0048                     ModbusSlaveF04@u8regsno:
  3087                           
  3088                           ; 1 bytes @ 0x28
  3089     0048                     	ds	1
  3090     0049                     ModbusSlaveF04@i:
  3091                           
  3092                           ; 2 bytes @ 0x29
  3093     0049                     	ds	2
  3094     004B                     ?_ModbusRTU_Slave_Poll:
  3095     004B                     ModbusRTU_Slave_Poll@size:	
  3096                           ; 1 bytes @ 0x2B
  3097                           
  3098                           
  3099                           ; 2 bytes @ 0x2B
  3100     004B                     	ds	2
  3101     004D                     ??_ModbusRTU_Slave_Poll:
  3102                           
  3103                           ; 1 bytes @ 0x2D
  3104     004D                     	ds	8
  3105                           
  3106                           	psect	maintext
  3107     0F86                     __pmaintext:	
  3108 ;;
  3109 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3110 ;;
  3111 ;; *************** function _main *****************
  3112 ;; Defined at:
  3113 ;;		line 50 in file "main.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;		None
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;		None
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : B1F/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3127 ;;      Params:         0       0       0       0       0       0       0       0
  3128 ;;      Locals:         0       0       0       0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0       0       0       0
  3130 ;;      Totals:         0       0       0       0       0       0       0       0
  3131 ;;Total ram usage:        0 bytes
  3132 ;; Hardware stack levels required when called: 11
  3133 ;; This function calls:
  3134 ;;		_App_Init
  3135 ;;		_App_Process
  3136 ;;		_SYSTEM_Initialize
  3137 ;; This function is called by:
  3138 ;;		Startup code after reset
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142     0F86                     _main:	
  3143                           ;psect for function _main
  3144                           
  3145     0F86                     l4573:	
  3146                           ;incstack = 0
  3147                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3148                           
  3149                           
  3150                           ;main.c: 52:     SYSTEM_Initialize();
  3151     0F86  318F  27DF  318F   	fcall	_SYSTEM_Initialize
  3152                           
  3153                           ;main.c: 53:     App_Init();
  3154     0F89  318F  275D  318F   	fcall	_App_Init
  3155     0F8C                     l4575:
  3156                           
  3157                           ;main.c: 71:         App_Process();
  3158     0F8C  318F  2771  318F   	fcall	_App_Process
  3159     0F8F  2F8C               	goto	l4575
  3160     0F90  3180  2852         	ljmp	start
  3161     0F92                     __end_of_main:
  3162                           
  3163                           	psect	text1
  3164     0FDF                     __ptext1:	
  3165 ;; *************** function _SYSTEM_Initialize *****************
  3166 ;; Defined at:
  3167 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;		None
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;		None
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0, pclath, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3181 ;;      Params:         0       0       0       0       0       0       0       0
  3182 ;;      Locals:         0       0       0       0       0       0       0       0
  3183 ;;      Temps:          0       0       0       0       0       0       0       0
  3184 ;;      Totals:         0       0       0       0       0       0       0       0
  3185 ;;Total ram usage:        0 bytes
  3186 ;; Hardware stack levels used: 1
  3187 ;; Hardware stack levels required when called: 6
  3188 ;; This function calls:
  3189 ;;		_EUSART_Initialize
  3190 ;;		_OSCILLATOR_Initialize
  3191 ;;		_PIN_MANAGER_Initialize
  3192 ;;		_TMR1_Initialize
  3193 ;;		_WDT_Initialize
  3194 ;; This function is called by:
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199     0FDF                     _SYSTEM_Initialize:	
  3200                           ;psect for function _SYSTEM_Initialize
  3201                           
  3202     0FDF                     l3385:	
  3203                           ;incstack = 0
  3204                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3205                           
  3206                           
  3207                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  3208     0FDF  3187  2741  318F   	fcall	_PIN_MANAGER_Initialize
  3209                           
  3210                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  3211     0FE2  318F  274C  318F   	fcall	_OSCILLATOR_Initialize
  3212                           
  3213                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  3214     0FE5  3187  27FC  318F   	fcall	_WDT_Initialize
  3215                           
  3216                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  3217     0FE8  3187  27A9  318F   	fcall	_TMR1_Initialize
  3218                           
  3219                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  3220     0FEB  3185  2555  318F   	fcall	_EUSART_Initialize
  3221     0FEE                     l159:
  3222     0FEE  0008               	return
  3223     0FEF                     __end_of_SYSTEM_Initialize:
  3224                           
  3225                           	psect	text2
  3226     07FC                     __ptext2:	
  3227 ;; *************** function _WDT_Initialize *****************
  3228 ;; Defined at:
  3229 ;;		line 71 in file "mcc_generated_files/mcc.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3243 ;;      Params:         0       0       0       0       0       0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0
  3246 ;;      Totals:         0       0       0       0       0       0       0       0
  3247 ;;Total ram usage:        0 bytes
  3248 ;; Hardware stack levels used: 1
  3249 ;; Hardware stack levels required when called: 4
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_SYSTEM_Initialize
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257     07FC                     _WDT_Initialize:	
  3258                           ;psect for function _WDT_Initialize
  3259                           
  3260     07FC                     l2119:	
  3261                           ;incstack = 0
  3262                           ; Regs used in _WDT_Initialize: [wreg]
  3263                           
  3264                           
  3265                           ;mcc_generated_files/mcc.c: 74:     WDTCON = 0x16;
  3266     07FC  3016               	movlw	22
  3267     07FD  0021               	movlb	1	; select bank1
  3268     07FE  0097               	movwf	23	;volatile
  3269     07FF                     l165:
  3270     07FF  0008               	return
  3271     0800                     __end_of_WDT_Initialize:
  3272                           
  3273                           	psect	text3
  3274     07A9                     __ptext3:	
  3275 ;; *************** function _TMR1_Initialize *****************
  3276 ;; Defined at:
  3277 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2, status,0, pclath, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3291 ;;      Params:         0       0       0       0       0       0       0       0
  3292 ;;      Locals:         0       0       0       0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0       0
  3294 ;;      Totals:         0       0       0       0       0       0       0       0
  3295 ;;Total ram usage:        0 bytes
  3296 ;; Hardware stack levels used: 1
  3297 ;; Hardware stack levels required when called: 5
  3298 ;; This function calls:
  3299 ;;		_TMR1_SetInterruptHandler
  3300 ;; This function is called by:
  3301 ;;		_SYSTEM_Initialize
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305     07A9                     _TMR1_Initialize:	
  3306                           ;psect for function _TMR1_Initialize
  3307                           
  3308     07A9                     l3235:	
  3309                           ;incstack = 0
  3310                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3311                           
  3312                           
  3313                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  3314     07A9  0020               	movlb	0	; select bank0
  3315     07AA  0199               	clrf	25	;volatile
  3316     07AB                     l3237:
  3317                           
  3318                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xE0;
  3319     07AB  30E0               	movlw	224
  3320     07AC  0097               	movwf	23	;volatile
  3321     07AD                     l3239:
  3322                           
  3323                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xC0;
  3324     07AD  30C0               	movlw	192
  3325     07AE  0096               	movwf	22	;volatile
  3326     07AF                     l3241:
  3327                           
  3328                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  3329     07AF  1011               	bcf	17,0	;volatile
  3330     07B0                     l3243:
  3331                           
  3332                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  3333     07B0  0817               	movf	23,w	;volatile
  3334     07B1  00DE               	movwf	_timer1ReloadVal+1	;volatile
  3335     07B2  0816               	movf	22,w	;volatile
  3336     07B3  00DD               	movwf	_timer1ReloadVal	;volatile
  3337     07B4                     l3245:
  3338                           
  3339                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  3340     07B4  0021               	movlb	1	; select bank1
  3341     07B5  1411               	bsf	17,0	;volatile
  3342     07B6                     l3247:
  3343                           
  3344                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  3345     07B6  3003               	movlw	low _TMR1_DefaultInterruptHandler
  3346     07B7  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3347     07B8  3000               	movlw	high _TMR1_DefaultInterruptHandler
  3348     07B9  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3349     07BA  318F  2716  3187   	fcall	_TMR1_SetInterruptHandler
  3350     07BD                     l3249:
  3351                           
  3352                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x41;
  3353     07BD  3041               	movlw	65
  3354     07BE  0020               	movlb	0	; select bank0
  3355     07BF  0098               	movwf	24	;volatile
  3356     07C0                     l710:
  3357     07C0  0008               	return
  3358     07C1                     __end_of_TMR1_Initialize:
  3359                           
  3360                           	psect	text4
  3361     0741                     __ptext4:	
  3362 ;; *************** function _PIN_MANAGER_Initialize *****************
  3363 ;; Defined at:
  3364 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3378 ;;      Params:         0       0       0       0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0       0       0       0
  3381 ;;      Totals:         0       0       0       0       0       0       0       0
  3382 ;;Total ram usage:        0 bytes
  3383 ;; Hardware stack levels used: 1
  3384 ;; Hardware stack levels required when called: 4
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_SYSTEM_Initialize
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392     0741                     _PIN_MANAGER_Initialize:	
  3393                           ;psect for function _PIN_MANAGER_Initialize
  3394                           
  3395     0741                     l2089:	
  3396                           ;incstack = 0
  3397                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3398                           
  3399                           
  3400                           ;mcc_generated_files/pin_manager.c: 60:     LATE = 0x00;
  3401     0741  0022               	movlb	2	; select bank2
  3402     0742  0190               	clrf	16	;volatile
  3403                           
  3404                           ;mcc_generated_files/pin_manager.c: 61:     LATA = 0x00;
  3405     0743  018C               	clrf	12	;volatile
  3406                           
  3407                           ;mcc_generated_files/pin_manager.c: 62:     LATB = 0x00;
  3408     0744  018D               	clrf	13	;volatile
  3409     0745                     l2091:
  3410                           
  3411                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x40;
  3412     0745  3040               	movlw	64
  3413     0746  008E               	movwf	14	;volatile
  3414     0747                     l2093:
  3415                           
  3416                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0x08;
  3417     0747  3008               	movlw	8
  3418     0748  0021               	movlb	1	; select bank1
  3419     0749  0090               	movwf	16	;volatile
  3420     074A                     l2095:
  3421                           
  3422                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0xFF;
  3423     074A  30FF               	movlw	255
  3424     074B  008C               	movwf	12	;volatile
  3425     074C                     l2097:
  3426                           
  3427                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xFF;
  3428     074C  30FF               	movlw	255
  3429     074D  008D               	movwf	13	;volatile
  3430     074E                     l2099:
  3431                           
  3432                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x9C;
  3433     074E  309C               	movlw	156
  3434     074F  008E               	movwf	14	;volatile
  3435     0750                     l2101:
  3436                           
  3437                           ;mcc_generated_files/pin_manager.c: 76:     ANSELB = 0x3F;
  3438     0750  303F               	movlw	63
  3439     0751  0023               	movlb	3	; select bank3
  3440     0752  008D               	movwf	13	;volatile
  3441     0753                     l2103:
  3442                           
  3443                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x30;
  3444     0753  3030               	movlw	48
  3445     0754  008C               	movwf	12	;volatile
  3446     0755                     l2105:
  3447                           
  3448                           ;mcc_generated_files/pin_manager.c: 82:     WPUE = 0x00;
  3449     0755  0024               	movlb	4	; select bank4
  3450     0756  0190               	clrf	16	;volatile
  3451     0757                     l2107:
  3452                           
  3453                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  3454     0757  018D               	clrf	13	;volatile
  3455     0758                     l2109:
  3456                           
  3457                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 1;
  3458     0758  0021               	movlb	1	; select bank1
  3459     0759  1795               	bsf	21,7	;volatile
  3460     075A                     l2111:
  3461                           
  3462                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  3463     075A  0022               	movlb	2	; select bank2
  3464     075B  019D               	clrf	29	;volatile
  3465     075C                     l135:
  3466     075C  0008               	return
  3467     075D                     __end_of_PIN_MANAGER_Initialize:
  3468                           
  3469                           	psect	text5
  3470     0F4C                     __ptext5:	
  3471 ;; *************** function _OSCILLATOR_Initialize *****************
  3472 ;; Defined at:
  3473 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;		None
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;		None
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  1    wreg      void 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3487 ;;      Params:         0       0       0       0       0       0       0       0
  3488 ;;      Locals:         0       0       0       0       0       0       0       0
  3489 ;;      Temps:          0       0       0       0       0       0       0       0
  3490 ;;      Totals:         0       0       0       0       0       0       0       0
  3491 ;;Total ram usage:        0 bytes
  3492 ;; Hardware stack levels used: 1
  3493 ;; Hardware stack levels required when called: 4
  3494 ;; This function calls:
  3495 ;;		Nothing
  3496 ;; This function is called by:
  3497 ;;		_SYSTEM_Initialize
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501     0F4C                     _OSCILLATOR_Initialize:	
  3502                           ;psect for function _OSCILLATOR_Initialize
  3503                           
  3504     0F4C                     l2113:	
  3505                           ;incstack = 0
  3506                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3507                           
  3508                           
  3509                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  3510     0F4C  3070               	movlw	112
  3511     0F4D  0021               	movlb	1	; select bank1
  3512     0F4E  0099               	movwf	25	;volatile
  3513     0F4F                     l2115:
  3514                           
  3515                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  3516     0F4F  0198               	clrf	24	;volatile
  3517     0F50                     l2117:
  3518                           
  3519                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  3520     0F50  0022               	movlb	2	; select bank2
  3521     0F51  0196               	clrf	22	;volatile
  3522     0F52                     l162:
  3523     0F52  0008               	return
  3524     0F53                     __end_of_OSCILLATOR_Initialize:
  3525                           
  3526                           	psect	text6
  3527     0555                     __ptext6:	
  3528 ;; *************** function _EUSART_Initialize *****************
  3529 ;; Defined at:
  3530 ;;		line 88 in file "mcc_generated_files/eusart.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, status,2, status,0, pclath, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3544 ;;      Params:         0       0       0       0       0       0       0       0
  3545 ;;      Locals:         0       0       0       0       0       0       0       0
  3546 ;;      Temps:          0       0       0       0       0       0       0       0
  3547 ;;      Totals:         0       0       0       0       0       0       0       0
  3548 ;;Total ram usage:        0 bytes
  3549 ;; Hardware stack levels used: 1
  3550 ;; Hardware stack levels required when called: 5
  3551 ;; This function calls:
  3552 ;;		_EUSART_SetErrorHandler
  3553 ;;		_EUSART_SetFramingErrorHandler
  3554 ;;		_EUSART_SetOverrunErrorHandler
  3555 ;;		_EUSART_SetRxInterruptHandler
  3556 ;;		_EUSART_SetTxInterruptHandler
  3557 ;; This function is called by:
  3558 ;;		_SYSTEM_Initialize
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562     0555                     _EUSART_Initialize:	
  3563                           ;psect for function _EUSART_Initialize
  3564                           
  3565     0555                     l3251:	
  3566                           ;incstack = 0
  3567                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3568                           
  3569                           
  3570                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  3571     0555  0021               	movlb	1	; select bank1
  3572     0556  1291               	bcf	17,5	;volatile
  3573     0557                     l3253:
  3574                           
  3575                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3576     0557  3092               	movlw	low _EUSART_Receive_ISR
  3577     0558  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3578     0559  3005               	movlw	high _EUSART_Receive_ISR
  3579     055A  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3580     055B  318F  2734  3185   	fcall	_EUSART_SetRxInterruptHandler
  3581     055E                     l3255:
  3582                           
  3583                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  3584     055E  0021               	movlb	1	; select bank1
  3585     055F  1211               	bcf	17,4	;volatile
  3586                           
  3587                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3588     0560  30E0               	movlw	low _EUSART_Transmit_ISR
  3589     0561  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  3590     0562  3006               	movlw	high _EUSART_Transmit_ISR
  3591     0563  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  3592     0564  318F  273A  3185   	fcall	_EUSART_SetTxInterruptHandler
  3593     0567                     l3257:
  3594                           
  3595                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  3596     0567  3008               	movlw	8
  3597     0568  0023               	movlb	3	; select bank3
  3598     0569  009F               	movwf	31	;volatile
  3599     056A                     l3259:
  3600                           
  3601                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  3602     056A  3090               	movlw	144
  3603     056B  009D               	movwf	29	;volatile
  3604     056C                     l3261:
  3605                           
  3606                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  3607     056C  3024               	movlw	36
  3608     056D  009E               	movwf	30	;volatile
  3609     056E                     l3263:
  3610                           
  3611                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xCF;
  3612     056E  30CF               	movlw	207
  3613     056F  009B               	movwf	27	;volatile
  3614     0570                     l3265:
  3615                           
  3616                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  3617     0570  019C               	clrf	28	;volatile
  3618     0571                     l3267:
  3619                           
  3620                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  3621     0571  3002               	movlw	low _EUSART_DefaultFramingErrorHandler
  3622     0572  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  3623     0573  3000               	movlw	high _EUSART_DefaultFramingErrorHandler
  3624     0574  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  3625     0575  318F  2728  3185   	fcall	_EUSART_SetFramingErrorHandler
  3626     0578                     l3269:
  3627                           
  3628                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  3629     0578  3004               	movlw	low _EUSART_DefaultOverrunErrorHandler
  3630     0579  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  3631     057A  300F               	movlw	high _EUSART_DefaultOverrunErrorHandler
  3632     057B  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  3633     057C  318F  272E  3185   	fcall	_EUSART_SetOverrunErrorHandler
  3634     057F                     l3271:
  3635                           
  3636                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  3637     057F  3000               	movlw	low _EUSART_DefaultErrorHandler
  3638     0580  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  3639     0581  300F               	movlw	high _EUSART_DefaultErrorHandler
  3640     0582  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  3641     0583  318F  2722  3185   	fcall	_EUSART_SetErrorHandler
  3642                           
  3643                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  3644     0586  0020               	movlb	0	; select bank0
  3645     0587  01E3               	clrf	_eusartRxLastError	;volatile
  3646                           
  3647                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  3648     0588  01E7               	clrf	_eusartTxHead	;volatile
  3649                           
  3650                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  3651     0589  01E6               	clrf	_eusartTxTail	;volatile
  3652     058A                     l3273:
  3653                           
  3654                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3655     058A  3010               	movlw	16
  3656     058B  00E5               	movwf	_eusartTxBufferRemaining	;volatile
  3657     058C                     l3275:
  3658                           
  3659                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  3660     058C  01FB               	clrf	_eusartRxHead	;volatile
  3661     058D                     l3277:
  3662                           
  3663                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  3664     058D  01FA               	clrf	_eusartRxTail	;volatile
  3665     058E                     l3279:
  3666                           
  3667                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  3668     058E  01E4               	clrf	_eusartRxCount	;volatile
  3669     058F                     l3281:
  3670                           
  3671                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  3672     058F  0021               	movlb	1	; select bank1
  3673     0590  1691               	bsf	17,5	;volatile
  3674     0591                     l612:
  3675     0591  0008               	return
  3676     0592                     __end_of_EUSART_Initialize:
  3677                           
  3678                           	psect	text7
  3679     0F3A                     __ptext7:	
  3680 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3681 ;; Defined at:
  3682 ;;		line 276 in file "mcc_generated_files/eusart.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3685 ;;		 -> EUSART_Transmit_ISR(1), 
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;		None
  3688 ;; Return value:  Size  Location     Type
  3689 ;;                  1    wreg      void 
  3690 ;; Registers used:
  3691 ;;		wreg
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3697 ;;      Params:         2       0       0       0       0       0       0       0
  3698 ;;      Locals:         0       0       0       0       0       0       0       0
  3699 ;;      Temps:          0       0       0       0       0       0       0       0
  3700 ;;      Totals:         2       0       0       0       0       0       0       0
  3701 ;;Total ram usage:        2 bytes
  3702 ;; Hardware stack levels used: 1
  3703 ;; Hardware stack levels required when called: 4
  3704 ;; This function calls:
  3705 ;;		Nothing
  3706 ;; This function is called by:
  3707 ;;		_EUSART_Initialize
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711     0F3A                     _EUSART_SetTxInterruptHandler:	
  3712                           ;psect for function _EUSART_SetTxInterruptHandler
  3713                           
  3714     0F3A                     l3177:	
  3715                           ;incstack = 0
  3716                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  3717                           
  3718                           
  3719                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  3720     0F3A  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  3721     0F3B  0021               	movlb	1	; select bank1
  3722     0F3C  00E0               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  3723     0F3D  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  3724     0F3E  00DF               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  3725     0F3F                     l678:
  3726     0F3F  0008               	return
  3727     0F40                     __end_of_EUSART_SetTxInterruptHandler:
  3728                           
  3729                           	psect	text8
  3730     0F34                     __ptext8:	
  3731 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  3732 ;; Defined at:
  3733 ;;		line 280 in file "mcc_generated_files/eusart.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3736 ;;		 -> EUSART_Receive_ISR(1), 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;		None
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      void 
  3741 ;; Registers used:
  3742 ;;		wreg
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3748 ;;      Params:         2       0       0       0       0       0       0       0
  3749 ;;      Locals:         0       0       0       0       0       0       0       0
  3750 ;;      Temps:          0       0       0       0       0       0       0       0
  3751 ;;      Totals:         2       0       0       0       0       0       0       0
  3752 ;;Total ram usage:        2 bytes
  3753 ;; Hardware stack levels used: 1
  3754 ;; Hardware stack levels required when called: 4
  3755 ;; This function calls:
  3756 ;;		Nothing
  3757 ;; This function is called by:
  3758 ;;		_EUSART_Initialize
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762     0F34                     _EUSART_SetRxInterruptHandler:	
  3763                           ;psect for function _EUSART_SetRxInterruptHandler
  3764                           
  3765     0F34                     l3175:	
  3766                           ;incstack = 0
  3767                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  3768                           
  3769                           
  3770                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  3771     0F34  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  3772     0F35  0021               	movlb	1	; select bank1
  3773     0F36  00DE               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  3774     0F37  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  3775     0F38  00DD               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  3776     0F39                     l681:
  3777     0F39  0008               	return
  3778     0F3A                     __end_of_EUSART_SetRxInterruptHandler:
  3779                           
  3780                           	psect	text9
  3781     0F2E                     __ptext9:	
  3782 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  3783 ;; Defined at:
  3784 ;;		line 268 in file "mcc_generated_files/eusart.c"
  3785 ;; Parameters:    Size  Location     Type
  3786 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3787 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;		None
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  1    wreg      void 
  3792 ;; Registers used:
  3793 ;;		wreg
  3794 ;; Tracked objects:
  3795 ;;		On entry : 0/0
  3796 ;;		On exit  : 0/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3799 ;;      Params:         2       0       0       0       0       0       0       0
  3800 ;;      Locals:         0       0       0       0       0       0       0       0
  3801 ;;      Temps:          0       0       0       0       0       0       0       0
  3802 ;;      Totals:         2       0       0       0       0       0       0       0
  3803 ;;Total ram usage:        2 bytes
  3804 ;; Hardware stack levels used: 1
  3805 ;; Hardware stack levels required when called: 4
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_EUSART_Initialize
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813     0F2E                     _EUSART_SetOverrunErrorHandler:	
  3814                           ;psect for function _EUSART_SetOverrunErrorHandler
  3815                           
  3816     0F2E                     l3181:	
  3817                           ;incstack = 0
  3818                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  3819                           
  3820                           
  3821                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  3822     0F2E  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  3823     0F2F  0021               	movlb	1	; select bank1
  3824     0F30  00DA               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  3825     0F31  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  3826     0F32  00D9               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  3827     0F33                     l672:
  3828     0F33  0008               	return
  3829     0F34                     __end_of_EUSART_SetOverrunErrorHandler:
  3830                           
  3831                           	psect	text10
  3832     0F28                     __ptext10:	
  3833 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  3834 ;; Defined at:
  3835 ;;		line 264 in file "mcc_generated_files/eusart.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3838 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;		None
  3841 ;; Return value:  Size  Location     Type
  3842 ;;                  1    wreg      void 
  3843 ;; Registers used:
  3844 ;;		wreg
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3850 ;;      Params:         2       0       0       0       0       0       0       0
  3851 ;;      Locals:         0       0       0       0       0       0       0       0
  3852 ;;      Temps:          0       0       0       0       0       0       0       0
  3853 ;;      Totals:         2       0       0       0       0       0       0       0
  3854 ;;Total ram usage:        2 bytes
  3855 ;; Hardware stack levels used: 1
  3856 ;; Hardware stack levels required when called: 4
  3857 ;; This function calls:
  3858 ;;		Nothing
  3859 ;; This function is called by:
  3860 ;;		_EUSART_Initialize
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864     0F28                     _EUSART_SetFramingErrorHandler:	
  3865                           ;psect for function _EUSART_SetFramingErrorHandler
  3866                           
  3867     0F28                     l3179:	
  3868                           ;incstack = 0
  3869                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  3870                           
  3871                           
  3872                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  3873     0F28  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  3874     0F29  0021               	movlb	1	; select bank1
  3875     0F2A  00DC               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  3876     0F2B  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  3877     0F2C  00DB               	movwf	_EUSART_FramingErrorHandler^(0+128)
  3878     0F2D                     l669:
  3879     0F2D  0008               	return
  3880     0F2E                     __end_of_EUSART_SetFramingErrorHandler:
  3881                           
  3882                           	psect	text11
  3883     0F22                     __ptext11:	
  3884 ;; *************** function _EUSART_SetErrorHandler *****************
  3885 ;; Defined at:
  3886 ;;		line 272 in file "mcc_generated_files/eusart.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3889 ;;		 -> EUSART_DefaultErrorHandler(1), 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3901 ;;      Params:         2       0       0       0       0       0       0       0
  3902 ;;      Locals:         0       0       0       0       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0
  3904 ;;      Totals:         2       0       0       0       0       0       0       0
  3905 ;;Total ram usage:        2 bytes
  3906 ;; Hardware stack levels used: 1
  3907 ;; Hardware stack levels required when called: 4
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_EUSART_Initialize
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915     0F22                     _EUSART_SetErrorHandler:	
  3916                           ;psect for function _EUSART_SetErrorHandler
  3917                           
  3918     0F22                     l3183:	
  3919                           ;incstack = 0
  3920                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  3921                           
  3922                           
  3923                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  3924     0F22  0873               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  3925     0F23  0021               	movlb	1	; select bank1
  3926     0F24  00D8               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  3927     0F25  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  3928     0F26  00D7               	movwf	_EUSART_ErrorHandler^(0+128)
  3929     0F27                     l675:
  3930     0F27  0008               	return
  3931     0F28                     __end_of_EUSART_SetErrorHandler:
  3932                           
  3933                           	psect	text12
  3934     0F71                     __ptext12:	
  3935 ;; *************** function _App_Process *****************
  3936 ;; Defined at:
  3937 ;;		line 48 in file "MCU.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;		None
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;		None
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  1    wreg      void 
  3944 ;; Registers used:
  3945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3951 ;;      Params:         0       0       0       0       0       0       0       0
  3952 ;;      Locals:         0       0       0       0       0       0       0       0
  3953 ;;      Temps:          0       0       0       0       0       0       0       0
  3954 ;;      Totals:         0       0       0       0       0       0       0       0
  3955 ;;Total ram usage:        0 bytes
  3956 ;; Hardware stack levels used: 1
  3957 ;; Hardware stack levels required when called: 10
  3958 ;; This function calls:
  3959 ;;		_Task_Indicator
  3960 ;;		_Task_MB
  3961 ;;		_Task_Sensor
  3962 ;; This function is called by:
  3963 ;;		_main
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967     0F71                     _App_Process:	
  3968                           ;psect for function _App_Process
  3969                           
  3970     0F71                     l4343:	
  3971                           ;incstack = 0
  3972                           ; Regs used in _App_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3973                           
  3974                           
  3975                           ;MCU.c: 49:     Task_Sensor();
  3976     0F71  3184  243B  318F   	fcall	_Task_Sensor
  3977     0F74                     l4345:
  3978                           
  3979                           ;MCU.c: 50:     Task_MB();
  3980     0F74  3187  27D9  318F   	fcall	_Task_MB
  3981     0F77                     l4347:
  3982                           
  3983                           ;MCU.c: 51:     Task_Indicator();
  3984     0F77  3186  26BC  318F   	fcall	_Task_Indicator
  3985     0F7A                     l872:
  3986     0F7A  0008               	return
  3987     0F7B                     __end_of_App_Process:
  3988                           
  3989                           	psect	text13
  3990     043B                     __ptext13:	
  3991 ;; *************** function _Task_Sensor *****************
  3992 ;; Defined at:
  3993 ;;		line 44 in file "I2C_SHT30.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1    wreg      void 
  4000 ;; Registers used:
  4001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4007 ;;      Params:         0       0       0       0       0       0       0       0
  4008 ;;      Locals:         0       0       0       0       0       0       0       0
  4009 ;;      Temps:          0       4       0       0       0       0       0       0
  4010 ;;      Totals:         0       4       0       0       0       0       0       0
  4011 ;;Total ram usage:        4 bytes
  4012 ;; Hardware stack levels used: 1
  4013 ;; Hardware stack levels required when called: 9
  4014 ;; This function calls:
  4015 ;;		_Get_millis
  4016 ;;		_ReadData
  4017 ;; This function is called by:
  4018 ;;		_App_Process
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022     043B                     _Task_Sensor:	
  4023                           ;psect for function _Task_Sensor
  4024                           
  4025     043B                     l4281:	
  4026                           ;incstack = 0
  4027                           ; Regs used in _Task_Sensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4028                           
  4029                           
  4030                           ;I2C_SHT30.c: 45:     static uint32_t valTime = 0;;I2C_SHT30.c: 47:     f_Indicator = OF
      +                          F_Sensor;
  4031     043B  0020               	movlb	0	; select bank0
  4032     043C  01E2               	clrf	_f_Indicator
  4033     043D                     l4283:
  4034                           
  4035                           ;I2C_SHT30.c: 50:     if ((((uint32_t) Get_millis() - valTime) >= (uint32_t) 2 * 1000)) 
      +                          {
  4036     043D  318F  2767  3184   	fcall	_Get_millis
  4037     0440  0021               	movlb	1	; select bank1
  4038     0441  084D               	movf	Task_Sensor@valTime^(0+128),w
  4039     0442  0272               	subwf	?_Get_millis,w
  4040     0443  0020               	movlb	0	; select bank0
  4041     0444  00B2               	movwf	??_Task_Sensor
  4042     0445  0021               	movlb	1	; select bank1
  4043     0446  084E               	movf	(Task_Sensor@valTime+1)^(0+128),w
  4044     0447  3B73               	subwfb	?_Get_millis+1,w
  4045     0448  0020               	movlb	0	; select bank0
  4046     0449  00B3               	movwf	??_Task_Sensor+1
  4047     044A  0021               	movlb	1	; select bank1
  4048     044B  084F               	movf	(Task_Sensor@valTime+2)^(0+128),w
  4049     044C  3B74               	subwfb	?_Get_millis+2,w
  4050     044D  0020               	movlb	0	; select bank0
  4051     044E  00B4               	movwf	??_Task_Sensor+2
  4052     044F  0021               	movlb	1	; select bank1
  4053     0450  0850               	movf	(Task_Sensor@valTime+3)^(0+128),w
  4054     0451  3B75               	subwfb	?_Get_millis+3,w
  4055     0452  0020               	movlb	0	; select bank0
  4056     0453  00B5               	movwf	??_Task_Sensor+3
  4057     0454  0835               	movf	??_Task_Sensor+3,w
  4058     0455  1D03               	btfss	3,2
  4059     0456  2C62               	goto	u2050
  4060     0457  0834               	movf	??_Task_Sensor+2,w
  4061     0458  1D03               	btfss	3,2
  4062     0459  2C62               	goto	u2050
  4063     045A  30D0               	movlw	208
  4064     045B  0232               	subwf	??_Task_Sensor,w
  4065     045C  3007               	movlw	7
  4066     045D  3B33               	subwfb	??_Task_Sensor+1,w
  4067     045E  1C03               	btfss	3,0
  4068     045F  2C61               	goto	u2051
  4069     0460  2C62               	goto	u2050
  4070     0461                     u2051:
  4071     0461  2C8C               	goto	l813
  4072     0462                     u2050:
  4073     0462                     l4285:
  4074                           
  4075                           ;I2C_SHT30.c: 51:         valTime = Get_millis();
  4076     0462  318F  2767  3184   	fcall	_Get_millis
  4077     0465  0875               	movf	?_Get_millis+3,w
  4078     0466  0021               	movlb	1	; select bank1
  4079     0467  00D0               	movwf	(Task_Sensor@valTime+3)^(0+128)
  4080     0468  0874               	movf	?_Get_millis+2,w
  4081     0469  00CF               	movwf	(Task_Sensor@valTime+2)^(0+128)
  4082     046A  0873               	movf	?_Get_millis+1,w
  4083     046B  00CE               	movwf	(Task_Sensor@valTime+1)^(0+128)
  4084     046C  0872               	movf	?_Get_millis,w
  4085     046D  00CD               	movwf	Task_Sensor@valTime^(0+128)
  4086     046E                     l4287:
  4087                           
  4088                           ;I2C_SHT30.c: 52:         f_Indicator = ON_Sensor;
  4089     046E  0020               	movlb	0	; select bank0
  4090     046F  01E2               	clrf	_f_Indicator
  4091     0470  0AE2               	incf	_f_Indicator,f
  4092     0471                     l4289:
  4093                           
  4094                           ;I2C_SHT30.c: 53:         ReadData();
  4095     0471  3184  248D  3184   	fcall	_ReadData
  4096     0474                     l4291:
  4097                           
  4098                           ;I2C_SHT30.c: 54:         if ((SensorAmbient.T.Val16 < 0) || (SensorAmbient.H.Val16 < 0)
      +                          ) {
  4099     0474  0020               	movlb	0	; select bank0
  4100     0475  1BDA               	btfsc	_SensorAmbient+1,7
  4101     0476  2C78               	goto	u2061
  4102     0477  2C79               	goto	u2060
  4103     0478                     u2061:
  4104     0478  2C82               	goto	l4295
  4105     0479                     u2060:
  4106     0479                     l4293:
  4107     0479  3002               	movlw	2
  4108     047A  3E59               	addlw	(low (_SensorAmbient| 0))& (0+255)
  4109     047B  0086               	movwf	6
  4110     047C  0187               	clrf	7
  4111     047D  3141               	addfsr 1,1
  4112     047E  1F81               	btfss	1,7
  4113     047F  2C81               	goto	u2071
  4114     0480  2C82               	goto	u2070
  4115     0481                     u2071:
  4116     0481  2C8C               	goto	l813
  4117     0482                     u2070:
  4118     0482                     l4295:
  4119                           
  4120                           ;I2C_SHT30.c: 55:             SensorAmbient.T.Val16 = 0x8000;
  4121     0482  3000               	movlw	0
  4122     0483  00D9               	movwf	_SensorAmbient
  4123     0484  3080               	movlw	128
  4124     0485  00DA               	movwf	_SensorAmbient+1
  4125                           
  4126                           ;I2C_SHT30.c: 56:             SensorAmbient.H.Val16 = 0x8000;
  4127     0486  3000               	movlw	0
  4128     0487  00DB               	movwf	_SensorAmbient+2
  4129     0488  3080               	movlw	128
  4130     0489  00DC               	movwf	_SensorAmbient+3
  4131                           
  4132                           ;I2C_SHT30.c: 57:             f_Indicator = ERR_Sensor;
  4133     048A  3002               	movlw	2
  4134     048B  00E2               	movwf	_f_Indicator
  4135     048C                     l813:
  4136     048C  0008               	return
  4137     048D                     __end_of_Task_Sensor:
  4138                           
  4139                           	psect	text14
  4140     048D                     __ptext14:	
  4141 ;; *************** function _ReadData *****************
  4142 ;; Defined at:
  4143 ;;		line 27 in file "I2C_SHT30.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  aData           6    8[BANK0 ] unsigned char [6]
  4148 ;;  valTime         4   14[BANK0 ] unsigned long 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  1    wreg      void 
  4151 ;; Registers used:
  4152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4158 ;;      Params:         0       0       0       0       0       0       0       0
  4159 ;;      Locals:         0      10       0       0       0       0       0       0
  4160 ;;      Temps:          0       4       0       0       0       0       0       0
  4161 ;;      Totals:         0      14       0       0       0       0       0       0
  4162 ;;Total ram usage:       14 bytes
  4163 ;; Hardware stack levels used: 1
  4164 ;; Hardware stack levels required when called: 8
  4165 ;; This function calls:
  4166 ;;		_Get_millis
  4167 ;;		_I2C_ReadNBytes
  4168 ;;		_I2C_WriteNBytes
  4169 ;; This function is called by:
  4170 ;;		_Task_Sensor
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174     048D                     _ReadData:	
  4175                           ;psect for function _ReadData
  4176                           
  4177     048D                     l4255:	
  4178                           ;incstack = 0
  4179                           ; Regs used in _ReadData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4180                           
  4181                           
  4182                           ;I2C_SHT30.c: 28:     uint8_t aData[6];;I2C_SHT30.c: 29:     uint32_t valTime;;I2C_SHT30
      +                          .c: 31:     I2C_WriteNBytes(0x88, SHT30_CMD_MEASURE_H_Disable, 2);
  4183     048D  306C               	movlw	(low (_SHT30_CMD_MEASURE_H_Disable| 0))& (0+255)
  4184     048E  0020               	movlb	0	; select bank0
  4185     048F  00A0               	movwf	I2C_WriteNBytes@data
  4186     0490  3002               	movlw	2
  4187     0491  00A1               	movwf	I2C_WriteNBytes@len
  4188     0492  3000               	movlw	0
  4189     0493  00A2               	movwf	I2C_WriteNBytes@len+1
  4190     0494  3088               	movlw	136
  4191     0495  3185  25CB  3184   	fcall	_I2C_WriteNBytes
  4192     0498                     l4257:
  4193                           
  4194                           ;I2C_SHT30.c: 32:     valTime = Get_millis();
  4195     0498  318F  2767  3184   	fcall	_Get_millis
  4196     049B  0875               	movf	?_Get_millis+3,w
  4197     049C  0020               	movlb	0	; select bank0
  4198     049D  00B1               	movwf	ReadData@valTime+3
  4199     049E  0874               	movf	?_Get_millis+2,w
  4200     049F  00B0               	movwf	ReadData@valTime+2
  4201     04A0  0873               	movf	?_Get_millis+1,w
  4202     04A1  00AF               	movwf	ReadData@valTime+1
  4203     04A2  0872               	movf	?_Get_millis,w
  4204     04A3  00AE               	movwf	ReadData@valTime
  4205     04A4                     l4259:	
  4206                           ;I2C_SHT30.c: 33:     while (((uint32_t) Get_millis() - valTime) < (uint32_t) 2 * 1);
  4207                           
  4208     04A4  318F  2767  3184   	fcall	_Get_millis
  4209     04A7  0020               	movlb	0	; select bank0
  4210     04A8  082E               	movf	ReadData@valTime,w
  4211     04A9  0272               	subwf	?_Get_millis,w
  4212     04AA  00A4               	movwf	??_ReadData
  4213     04AB  082F               	movf	ReadData@valTime+1,w
  4214     04AC  3B73               	subwfb	?_Get_millis+1,w
  4215     04AD  00A5               	movwf	??_ReadData+1
  4216     04AE  0830               	movf	ReadData@valTime+2,w
  4217     04AF  3B74               	subwfb	?_Get_millis+2,w
  4218     04B0  00A6               	movwf	??_ReadData+2
  4219     04B1  0831               	movf	ReadData@valTime+3,w
  4220     04B2  3B75               	subwfb	?_Get_millis+3,w
  4221     04B3  00A7               	movwf	??_ReadData+3
  4222     04B4  0827               	movf	??_ReadData+3,w
  4223     04B5  1D03               	btfss	3,2
  4224     04B6  2CC3               	goto	u2040
  4225     04B7  0826               	movf	??_ReadData+2,w
  4226     04B8  1D03               	btfss	3,2
  4227     04B9  2CC3               	goto	u2040
  4228     04BA  0825               	movf	??_ReadData+1,w
  4229     04BB  1D03               	btfss	3,2
  4230     04BC  2CC3               	goto	u2040
  4231     04BD  3002               	movlw	2
  4232     04BE  0224               	subwf	??_ReadData,w
  4233     04BF  1C03               	btfss	3,0
  4234     04C0  2CC2               	goto	u2041
  4235     04C1  2CC3               	goto	u2040
  4236     04C2                     u2041:
  4237     04C2  2CA4               	goto	l4259
  4238     04C3                     u2040:
  4239     04C3                     l4261:
  4240                           
  4241                           ;I2C_SHT30.c: 35:     I2C_ReadNBytes(0x89, aData, 6);
  4242     04C3  3028               	movlw	(low (ReadData@aData| 0))& (0+255)
  4243     04C4  00F6               	movwf	I2C_ReadNBytes@data
  4244     04C5  3006               	movlw	6
  4245     04C6  00F7               	movwf	I2C_ReadNBytes@len
  4246     04C7  3000               	movlw	0
  4247     04C8  00F8               	movwf	I2C_ReadNBytes@len+1
  4248     04C9  3089               	movlw	137
  4249     04CA  3187  2723  3184   	fcall	_I2C_ReadNBytes
  4250     04CD                     l4263:
  4251                           
  4252                           ;I2C_SHT30.c: 37:     SensorAmbient.T._Byte[1] = aData[0];
  4253     04CD  0020               	movlb	0	; select bank0
  4254     04CE  0828               	movf	ReadData@aData,w
  4255     04CF  00DA               	movwf	_SensorAmbient+1
  4256     04D0                     l4265:
  4257                           
  4258                           ;I2C_SHT30.c: 38:     SensorAmbient.T._Byte[0] = aData[1];
  4259     04D0  0829               	movf	ReadData@aData+1,w
  4260     04D1  00D9               	movwf	_SensorAmbient
  4261     04D2                     l4267:
  4262                           
  4263                           ;I2C_SHT30.c: 40:     SensorAmbient.H._Byte[1] = aData[3];
  4264     04D2  082B               	movf	ReadData@aData+3,w
  4265     04D3  00DC               	movwf	_SensorAmbient+3
  4266     04D4                     l4269:
  4267                           
  4268                           ;I2C_SHT30.c: 41:     SensorAmbient.H._Byte[0] = aData[4];
  4269     04D4  082C               	movf	ReadData@aData+4,w
  4270     04D5  00DB               	movwf	_SensorAmbient+2
  4271     04D6                     l804:
  4272     04D6  0008               	return
  4273     04D7                     __end_of_ReadData:
  4274                           
  4275                           	psect	text15
  4276     05CB                     __ptext15:	
  4277 ;; *************** function _I2C_WriteNBytes *****************
  4278 ;; Defined at:
  4279 ;;		line 111 in file "mcc_generated_files/examples/i2c_master_example.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  address         1    wreg     unsigned char 
  4282 ;;  data            1    0[BANK0 ] PTR unsigned char 
  4283 ;;		 -> SHT30_CMD_MEASURE_H_Disable(2), 
  4284 ;;  len             2    1[BANK0 ] unsigned int 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  address         1    3[BANK0 ] unsigned char 
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4296 ;;      Params:         0       3       0       0       0       0       0       0
  4297 ;;      Locals:         0       1       0       0       0       0       0       0
  4298 ;;      Temps:          0       0       0       0       0       0       0       0
  4299 ;;      Totals:         0       4       0       0       0       0       0       0
  4300 ;;Total ram usage:        4 bytes
  4301 ;; Hardware stack levels used: 1
  4302 ;; Hardware stack levels required when called: 7
  4303 ;; This function calls:
  4304 ;;		_I2C_Close
  4305 ;;		_I2C_MasterWrite
  4306 ;;		_I2C_Open
  4307 ;;		_I2C_SetAddressNackCallback
  4308 ;;		_I2C_SetBuffer
  4309 ;; This function is called by:
  4310 ;;		_ReadData
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314     05CB                     _I2C_WriteNBytes:	
  4315                           ;psect for function _I2C_WriteNBytes
  4316                           
  4317                           
  4318                           ;incstack = 0
  4319                           ; Regs used in _I2C_WriteNBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4320                           ;I2C_WriteNBytes@address stored from wreg
  4321     05CB  0020               	movlb	0	; select bank0
  4322     05CC  00A3               	movwf	I2C_WriteNBytes@address
  4323     05CD                     l4167:
  4324     05CD                     l4169:	
  4325                           ;mcc_generated_files/examples/i2c_master_example.c: 111: void I2C_WriteNBytes(i2c_addres
      +                          s_t address, uint8_t* data, size_t len);mcc_generated_files/examples/i2c_master_example.
      +                          c: 112: {;mcc_generated_files/examples/i2c_master_example.c: 113:     while(!I2C_Open(ad
      +                          dress));
  4326                           
  4327     05CD  0020               	movlb	0	; select bank0
  4328     05CE  0823               	movf	I2C_WriteNBytes@address,w
  4329     05CF  3184  24D7  3185   	fcall	_I2C_Open
  4330     05D2  3A00               	xorlw	0
  4331     05D3  1903               	skipnz
  4332     05D4  2DD6               	goto	u1931
  4333     05D5  2DD7               	goto	u1930
  4334     05D6                     u1931:
  4335     05D6  2DCD               	goto	l4169
  4336     05D7                     u1930:
  4337     05D7                     l4171:
  4338                           
  4339                           ;mcc_generated_files/examples/i2c_master_example.c: 114:     I2C_SetBuffer(data,len);
  4340     05D7  0020               	movlb	0	; select bank0
  4341     05D8  0822               	movf	I2C_WriteNBytes@len+1,w
  4342     05D9  00F3               	movwf	I2C_SetBuffer@bufferSize+1
  4343     05DA  0821               	movf	I2C_WriteNBytes@len,w
  4344     05DB  00F2               	movwf	I2C_SetBuffer@bufferSize
  4345     05DC  0820               	movf	I2C_WriteNBytes@data,w
  4346     05DD  318F  27D1  3185   	fcall	_I2C_SetBuffer
  4347     05E0                     l4173:
  4348                           
  4349                           ;mcc_generated_files/examples/i2c_master_example.c: 115:     I2C_SetAddressNackCallback(
      +                          ((void*)0),((void*)0));
  4350     05E0  3000               	movlw	0
  4351     05E1  00F6               	movwf	I2C_SetAddressNackCallback@cb
  4352     05E2  00F7               	movwf	I2C_SetAddressNackCallback@cb+1
  4353     05E3  3000               	movlw	0
  4354     05E4  00F8               	movwf	I2C_SetAddressNackCallback@ptr
  4355     05E5  00F9               	movwf	I2C_SetAddressNackCallback@ptr+1
  4356     05E6  318F  277B  3185   	fcall	_I2C_SetAddressNackCallback
  4357     05E9                     l4175:
  4358                           
  4359                           ;mcc_generated_files/examples/i2c_master_example.c: 116:     I2C_MasterWrite();
  4360     05E9  318F  2711  3185   	fcall	_I2C_MasterWrite
  4361     05EC                     l4177:	
  4362                           ;mcc_generated_files/examples/i2c_master_example.c: 117:     while(I2C_BUSY == I2C_Close
      +                          ());
  4363                           
  4364     05EC  3187  27C1  3185   	fcall	_I2C_Close
  4365     05EF  3A01               	xorlw	1
  4366     05F0  1903               	skipnz
  4367     05F1  2DF3               	goto	u1941
  4368     05F2  2DF4               	goto	u1940
  4369     05F3                     u1941:
  4370     05F3  2DEC               	goto	l4177
  4371     05F4                     u1940:
  4372     05F4                     l71:
  4373     05F4  0008               	return
  4374     05F5                     __end_of_I2C_WriteNBytes:
  4375                           
  4376                           	psect	text16
  4377     0F7B                     __ptext16:	
  4378 ;; *************** function _I2C_SetAddressNackCallback *****************
  4379 ;; Defined at:
  4380 ;;		line 284 in file "mcc_generated_files/i2c_master.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  cb              2    6[COMMON] PTR FTN(PTR void ,)enum 
  4383 ;;		 -> NULL(1), 
  4384 ;;  ptr             2    8[COMMON] PTR void 
  4385 ;;		 -> NULL(0), 
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;		None
  4388 ;; Return value:  Size  Location     Type
  4389 ;;                  1    wreg      void 
  4390 ;; Registers used:
  4391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4397 ;;      Params:         4       0       0       0       0       0       0       0
  4398 ;;      Locals:         0       0       0       0       0       0       0       0
  4399 ;;      Temps:          0       0       0       0       0       0       0       0
  4400 ;;      Totals:         4       0       0       0       0       0       0       0
  4401 ;;Total ram usage:        4 bytes
  4402 ;; Hardware stack levels used: 1
  4403 ;; Hardware stack levels required when called: 5
  4404 ;; This function calls:
  4405 ;;		_I2C_SetCallback
  4406 ;; This function is called by:
  4407 ;;		_I2C_WriteNBytes
  4408 ;;		_I2C_Read1ByteRegister
  4409 ;;		_I2C_Read2ByteRegister
  4410 ;;		_I2C_Write1ByteRegister
  4411 ;;		_I2C_Write2ByteRegister
  4412 ;;		_I2C_ReadDataBlock
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416     0F7B                     _I2C_SetAddressNackCallback:	
  4417                           ;psect for function _I2C_SetAddressNackCallback
  4418                           
  4419     0F7B                     l4045:	
  4420                           ;incstack = 0
  4421                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4422                           
  4423                           
  4424                           ;mcc_generated_files/i2c_master.c: 284: void I2C_SetAddressNackCallback(i2c_callback_t c
      +                          b, void *ptr);mcc_generated_files/i2c_master.c: 285: {;mcc_generated_files/i2c_master.c:
      +                           286:     I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  4425     0F7B  0877               	movf	I2C_SetAddressNackCallback@cb+1,w
  4426     0F7C  00F3               	movwf	I2C_SetCallback@cb+1
  4427     0F7D  0876               	movf	I2C_SetAddressNackCallback@cb,w
  4428     0F7E  00F2               	movwf	I2C_SetCallback@cb
  4429     0F7F  0878               	movf	I2C_SetAddressNackCallback@ptr,w
  4430     0F80  00F4               	movwf	I2C_SetCallback@ptr
  4431     0F81  3002               	movlw	2
  4432     0F82  3186  2698  318F   	fcall	_I2C_SetCallback
  4433     0F85                     l310:
  4434     0F85  0008               	return
  4435     0F86                     __end_of_I2C_SetAddressNackCallback:
  4436                           
  4437                           	psect	text17
  4438     0698                     __ptext17:	
  4439 ;; *************** function _I2C_SetCallback *****************
  4440 ;; Defined at:
  4441 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  idx             1    wreg     enum E3130
  4444 ;;  cb              2    2[COMMON] PTR FTN(PTR void ,)enum 
  4445 ;;		 -> NULL(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
  4446 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  4447 ;;  ptr             1    4[COMMON] PTR void 
  4448 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  4449 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;  idx             1    5[COMMON] enum E3130
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4461 ;;      Params:         3       0       0       0       0       0       0       0
  4462 ;;      Locals:         1       0       0       0       0       0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0       0
  4464 ;;      Totals:         4       0       0       0       0       0       0       0
  4465 ;;Total ram usage:        4 bytes
  4466 ;; Hardware stack levels used: 1
  4467 ;; Hardware stack levels required when called: 4
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_I2C_SetAddressNackCallback
  4472 ;;		_I2C_SetDataCompleteCallback
  4473 ;;		_I2C_SetWriteCollisionCallback
  4474 ;;		_I2C_SetDataNackCallback
  4475 ;;		_I2C_SetTimeoutCallback
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479     0698                     _I2C_SetCallback:	
  4480                           ;psect for function _I2C_SetCallback
  4481                           
  4482                           
  4483                           ;incstack = 0
  4484                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  4485                           ;I2C_SetCallback@idx stored from wreg
  4486     0698  00F5               	movwf	I2C_SetCallback@idx
  4487     0699                     l3939:
  4488                           
  4489                           ;mcc_generated_files/i2c_master.c: 304: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 305: {;mcc_generate
      +                          d_files/i2c_master.c: 306:     if(cb)
  4490     0699  0872               	movf	I2C_SetCallback@cb,w
  4491     069A  0473               	iorwf	I2C_SetCallback@cb+1,w
  4492     069B  1903               	btfsc	3,2
  4493     069C  2E9E               	goto	u1741
  4494     069D  2E9F               	goto	u1740
  4495     069E                     u1741:
  4496     069E  2EAE               	goto	l3943
  4497     069F                     u1740:
  4498     069F                     l3941:
  4499                           
  4500                           ;mcc_generated_files/i2c_master.c: 307:     {;mcc_generated_files/i2c_master.c: 308:    
      +                               I2C_Status.callbackTable[idx] = cb;
  4501     069F  3575               	lslf	I2C_SetCallback@idx,w
  4502     06A0  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  4503     06A1  0086               	movwf	6
  4504     06A2  0187               	clrf	7
  4505     06A3  0872               	movf	I2C_SetCallback@cb,w
  4506     06A4  3FC0               	movwi [0]fsr1
  4507     06A5  0873               	movf	I2C_SetCallback@cb+1,w
  4508     06A6  3FC1               	movwi [1]fsr1
  4509                           
  4510                           ;mcc_generated_files/i2c_master.c: 309:         I2C_Status.callbackPayload[idx] = ptr;
  4511     06A7  0875               	movf	I2C_SetCallback@idx,w
  4512     06A8  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  4513     06A9  0086               	movwf	6
  4514     06AA  0187               	clrf	7
  4515     06AB  0874               	movf	I2C_SetCallback@ptr,w
  4516     06AC  0081               	movwf	1
  4517                           
  4518                           ;mcc_generated_files/i2c_master.c: 310:     }
  4519     06AD  2EBB               	goto	l324
  4520     06AE                     l3943:
  4521                           
  4522                           ;mcc_generated_files/i2c_master.c: 312:     {;mcc_generated_files/i2c_master.c: 313:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  4523     06AE  3575               	lslf	I2C_SetCallback@idx,w
  4524     06AF  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  4525     06B0  0086               	movwf	6
  4526     06B1  0187               	clrf	7
  4527     06B2  3000               	movlw	0
  4528     06B3  3FC0               	movwi [0]fsr1
  4529     06B4  3000               	movlw	0
  4530     06B5  3FC1               	movwi [1]fsr1
  4531                           
  4532                           ;mcc_generated_files/i2c_master.c: 314:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
  4533     06B6  0875               	movf	I2C_SetCallback@idx,w
  4534     06B7  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  4535     06B8  0086               	movwf	6
  4536     06B9  0187               	clrf	7
  4537     06BA  0181               	clrf	1
  4538     06BB                     l324:
  4539     06BB  0008               	return
  4540     06BC                     __end_of_I2C_SetCallback:
  4541                           
  4542                           	psect	text18
  4543     0F11                     __ptext18:	
  4544 ;; *************** function _I2C_MasterWrite *****************
  4545 ;; Defined at:
  4546 ;;		line 252 in file "mcc_generated_files/i2c_master.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;		None
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;		None
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      enum E358
  4553 ;; Registers used:
  4554 ;;		wreg, status,2, status,0, pclath, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4560 ;;      Params:         0       0       0       0       0       0       0       0
  4561 ;;      Locals:         0       0       0       0       0       0       0       0
  4562 ;;      Temps:          0       0       0       0       0       0       0       0
  4563 ;;      Totals:         0       0       0       0       0       0       0       0
  4564 ;;Total ram usage:        0 bytes
  4565 ;; Hardware stack levels used: 1
  4566 ;; Hardware stack levels required when called: 6
  4567 ;; This function calls:
  4568 ;;		_I2C_MasterOperation
  4569 ;; This function is called by:
  4570 ;;		_I2C_WriteNBytes
  4571 ;;		_I2C_Read1ByteRegister
  4572 ;;		_I2C_Read2ByteRegister
  4573 ;;		_I2C_Write1ByteRegister
  4574 ;;		_I2C_Write2ByteRegister
  4575 ;;		_I2C_ReadDataBlock
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579     0F11                     _I2C_MasterWrite:	
  4580                           ;psect for function _I2C_MasterWrite
  4581                           
  4582     0F11                     l4047:	
  4583                           ;incstack = 0
  4584                           ; Regs used in _I2C_MasterWrite: [wreg+status,2+status,0+pclath+cstack]
  4585                           
  4586                           
  4587                           ;mcc_generated_files/i2c_master.c: 254:     return I2C_MasterOperation(0);;	Return value
      +                           of _I2C_MasterWrite is never used
  4588     0F11  3000               	movlw	0
  4589     0F12  3187  2777  318F   	fcall	_I2C_MasterOperation
  4590     0F15                     l294:
  4591     0F15  0008               	return
  4592     0F16                     __end_of_I2C_MasterWrite:
  4593                           
  4594                           	psect	text19
  4595     0723                     __ptext19:	
  4596 ;; *************** function _I2C_ReadNBytes *****************
  4597 ;; Defined at:
  4598 ;;		line 120 in file "mcc_generated_files/examples/i2c_master_example.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  address         1    wreg     unsigned char 
  4601 ;;  data            1    6[COMMON] PTR unsigned char 
  4602 ;;		 -> ReadData@aData(6), 
  4603 ;;  len             2    7[COMMON] unsigned int 
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;  address         1    9[COMMON] unsigned char 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2, status,0, pclath, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4615 ;;      Params:         3       0       0       0       0       0       0       0
  4616 ;;      Locals:         1       0       0       0       0       0       0       0
  4617 ;;      Temps:          0       0       0       0       0       0       0       0
  4618 ;;      Totals:         4       0       0       0       0       0       0       0
  4619 ;;Total ram usage:        4 bytes
  4620 ;; Hardware stack levels used: 1
  4621 ;; Hardware stack levels required when called: 7
  4622 ;; This function calls:
  4623 ;;		_I2C_Close
  4624 ;;		_I2C_MasterRead
  4625 ;;		_I2C_Open
  4626 ;;		_I2C_SetBuffer
  4627 ;; This function is called by:
  4628 ;;		_ReadData
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632     0723                     _I2C_ReadNBytes:	
  4633                           ;psect for function _I2C_ReadNBytes
  4634                           
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _I2C_ReadNBytes: [wreg+status,2+status,0+pclath+cstack]
  4638                           ;I2C_ReadNBytes@address stored from wreg
  4639     0723  00F9               	movwf	I2C_ReadNBytes@address
  4640     0724                     l4179:
  4641     0724                     l4181:	
  4642                           ;mcc_generated_files/examples/i2c_master_example.c: 120: void I2C_ReadNBytes(i2c_address
      +                          _t address, uint8_t *data, size_t len);mcc_generated_files/examples/i2c_master_example.c
      +                          : 121: {;mcc_generated_files/examples/i2c_master_example.c: 122:     while(!I2C_Open(add
      +                          ress));
  4643                           
  4644     0724  0879               	movf	I2C_ReadNBytes@address,w
  4645     0725  3184  24D7  3187   	fcall	_I2C_Open
  4646     0728  3A00               	xorlw	0
  4647     0729  1903               	skipnz
  4648     072A  2F2C               	goto	u1951
  4649     072B  2F2D               	goto	u1950
  4650     072C                     u1951:
  4651     072C  2F24               	goto	l4181
  4652     072D                     u1950:
  4653     072D                     l4183:
  4654                           
  4655                           ;mcc_generated_files/examples/i2c_master_example.c: 123:     I2C_SetBuffer(data,len);
  4656     072D  0878               	movf	I2C_ReadNBytes@len+1,w
  4657     072E  00F3               	movwf	I2C_SetBuffer@bufferSize+1
  4658     072F  0877               	movf	I2C_ReadNBytes@len,w
  4659     0730  00F2               	movwf	I2C_SetBuffer@bufferSize
  4660     0731  0876               	movf	I2C_ReadNBytes@data,w
  4661     0732  318F  27D1  3187   	fcall	_I2C_SetBuffer
  4662                           
  4663                           ;mcc_generated_files/examples/i2c_master_example.c: 124:     I2C_MasterRead();
  4664     0735  318F  270C  3187   	fcall	_I2C_MasterRead
  4665     0738                     l4185:	
  4666                           ;mcc_generated_files/examples/i2c_master_example.c: 125:     while(I2C_BUSY == I2C_Close
      +                          ());
  4667                           
  4668     0738  3187  27C1  3187   	fcall	_I2C_Close
  4669     073B  3A01               	xorlw	1
  4670     073C  1903               	skipnz
  4671     073D  2F3F               	goto	u1961
  4672     073E  2F40               	goto	u1960
  4673     073F                     u1961:
  4674     073F  2F38               	goto	l4185
  4675     0740                     u1960:
  4676     0740                     l80:
  4677     0740  0008               	return
  4678     0741                     __end_of_I2C_ReadNBytes:
  4679                           
  4680                           	psect	text20
  4681     0FD1                     __ptext20:	
  4682 ;; *************** function _I2C_SetBuffer *****************
  4683 ;; Defined at:
  4684 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;  buffer          1    wreg     PTR void 
  4687 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
  4688 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Disable(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), 
  4689 ;;		 -> bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1
      +), 
  4690 ;;		 -> I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), 
  4691 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  4692 ;;  bufferSize      2    2[COMMON] unsigned int 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  buffer          1    4[COMMON] PTR void 
  4695 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
  4696 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Disable(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), 
  4697 ;;		 -> bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1
      +), 
  4698 ;;		 -> I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), 
  4699 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4709 ;;      Params:         2       0       0       0       0       0       0       0
  4710 ;;      Locals:         1       0       0       0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0       0
  4712 ;;      Totals:         3       0       0       0       0       0       0       0
  4713 ;;Total ram usage:        3 bytes
  4714 ;; Hardware stack levels used: 1
  4715 ;; Hardware stack levels required when called: 4
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_I2C_WriteNBytes
  4720 ;;		_I2C_ReadNBytes
  4721 ;;		_I2C_Read1ByteRegister
  4722 ;;		_I2C_Read2ByteRegister
  4723 ;;		_I2C_Write1ByteRegister
  4724 ;;		_I2C_Write2ByteRegister
  4725 ;;		_I2C_ReadDataBlock
  4726 ;;		_rd1RegCompleteHandler
  4727 ;;		_rd2RegCompleteHandler
  4728 ;;		_wr1RegCompleteHandler
  4729 ;;		_wr2RegCompleteHandler
  4730 ;;		_rdBlkRegCompleteHandler
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734     0FD1                     _I2C_SetBuffer:	
  4735                           ;psect for function _I2C_SetBuffer
  4736                           
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _I2C_SetBuffer: [wreg]
  4740                           ;I2C_SetBuffer@buffer stored from wreg
  4741     0FD1  00F4               	movwf	I2C_SetBuffer@buffer
  4742     0FD2                     l4039:
  4743                           
  4744                           ;mcc_generated_files/i2c_master.c: 264: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 265: {;mcc_generated_files/i2c_master.c: 266:     
      +                          if(I2C_Status.bufferFree)
  4745     0FD2  0021               	movlb	1	; select bank1
  4746     0FD3  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
  4747     0FD4  2FD6               	goto	u1831
  4748     0FD5  2FD7               	goto	u1830
  4749     0FD6                     u1831:
  4750     0FD6  2FDE               	goto	l301
  4751     0FD7                     u1830:
  4752     0FD7                     l4041:
  4753                           
  4754                           ;mcc_generated_files/i2c_master.c: 267:     {;mcc_generated_files/i2c_master.c: 268:    
      +                               I2C_Status.data_ptr = buffer;
  4755     0FD7  0874               	movf	I2C_SetBuffer@buffer,w
  4756     0FD8  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
  4757                           
  4758                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.data_length = bufferSize;
  4759     0FD9  0873               	movf	I2C_SetBuffer@bufferSize+1,w
  4760     0FDA  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
  4761     0FDB  0872               	movf	I2C_SetBuffer@bufferSize,w
  4762     0FDC  00B8               	movwf	(_I2C_Status^(0+128)+24)
  4763     0FDD                     l4043:
  4764                           
  4765                           ;mcc_generated_files/i2c_master.c: 270:         I2C_Status.bufferFree = 0;
  4766     0FDD  11BC               	bcf	(_I2C_Status^(0+128)+28),3
  4767     0FDE                     l301:
  4768     0FDE  0008               	return
  4769     0FDF                     __end_of_I2C_SetBuffer:
  4770                           
  4771                           	psect	text21
  4772     04D7                     __ptext21:	
  4773 ;; *************** function _I2C_Open *****************
  4774 ;; Defined at:
  4775 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  address         1    wreg     unsigned char 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  address         1    4[COMMON] unsigned char 
  4780 ;;  returnValue     1    5[COMMON] enum E358
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      enum E358
  4783 ;; Registers used:
  4784 ;;		wreg, status,2, status,0, pclath, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4790 ;;      Params:         0       0       0       0       0       0       0       0
  4791 ;;      Locals:         2       0       0       0       0       0       0       0
  4792 ;;      Temps:          0       0       0       0       0       0       0       0
  4793 ;;      Totals:         2       0       0       0       0       0       0       0
  4794 ;;Total ram usage:        2 bytes
  4795 ;; Hardware stack levels used: 1
  4796 ;; Hardware stack levels required when called: 5
  4797 ;; This function calls:
  4798 ;;		_I2C_MasterClearIrq
  4799 ;;		_I2C_MasterEnableIrq
  4800 ;;		_I2C_MasterOpen
  4801 ;;		_I2C_SetInterruptHandler
  4802 ;; This function is called by:
  4803 ;;		_I2C_WriteNBytes
  4804 ;;		_I2C_ReadNBytes
  4805 ;;		_I2C_Read1ByteRegister
  4806 ;;		_I2C_Read2ByteRegister
  4807 ;;		_I2C_Write1ByteRegister
  4808 ;;		_I2C_Write2ByteRegister
  4809 ;;		_I2C_ReadDataBlock
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813     04D7                     _I2C_Open:	
  4814                           ;psect for function _I2C_Open
  4815                           
  4816                           
  4817                           ;incstack = 0
  4818                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  4819                           ;I2C_Open@address stored from wreg
  4820     04D7  00F4               	movwf	I2C_Open@address
  4821     04D8                     l4003:
  4822                           
  4823                           ;mcc_generated_files/i2c_master.c: 176: i2c_error_t I2C_Open(i2c_address_t address);mcc_
      +                          generated_files/i2c_master.c: 177: {;mcc_generated_files/i2c_master.c: 178:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  4824     04D8  01F5               	clrf	I2C_Open@returnValue
  4825     04D9  0AF5               	incf	I2C_Open@returnValue,f
  4826                           
  4827                           ;mcc_generated_files/i2c_master.c: 180:     if(!I2C_Status.inUse)
  4828     04DA  0021               	movlb	1	; select bank1
  4829     04DB  193C               	btfsc	(_I2C_Status^(0+128)+28),2
  4830     04DC  2CDE               	goto	u1821
  4831     04DD  2CDF               	goto	u1820
  4832     04DE                     u1821:
  4833     04DE  2D15               	goto	l4035
  4834     04DF                     u1820:
  4835     04DF                     l4005:
  4836                           
  4837                           ;mcc_generated_files/i2c_master.c: 181:     {;mcc_generated_files/i2c_master.c: 182:    
      +                               I2C_Status.address = address;
  4838     04DF  0874               	movf	I2C_Open@address,w
  4839     04E0  00B6               	movwf	(_I2C_Status^(0+128)+22)
  4840     04E1                     l4007:
  4841                           
  4842                           ;mcc_generated_files/i2c_master.c: 183:         I2C_Status.busy = 0;
  4843     04E1  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  4844     04E2                     l4009:
  4845                           
  4846                           ;mcc_generated_files/i2c_master.c: 184:         I2C_Status.inUse = 1;
  4847     04E2  153C               	bsf	(_I2C_Status^(0+128)+28),2
  4848     04E3                     l4011:
  4849                           
  4850                           ;mcc_generated_files/i2c_master.c: 185:         I2C_Status.addressNackCheck = 0;
  4851     04E3  103C               	bcf	(_I2C_Status^(0+128)+28),0
  4852                           
  4853                           ;mcc_generated_files/i2c_master.c: 186:         I2C_Status.state = I2C_RESET;
  4854     04E4  300E               	movlw	14
  4855     04E5  00BA               	movwf	(_I2C_Status^(0+128)+26)
  4856                           
  4857                           ;mcc_generated_files/i2c_master.c: 187:         I2C_Status.time_out_value = 500;
  4858     04E6  30F4               	movlw	244
  4859     04E7  00B4               	movwf	(_I2C_Status^(0+128)+20)
  4860     04E8  3001               	movlw	1
  4861     04E9  00B5               	movwf	(_I2C_Status^(0+128)+21)
  4862     04EA                     l4013:
  4863                           
  4864                           ;mcc_generated_files/i2c_master.c: 188:         I2C_Status.bufferFree = 1;
  4865     04EA  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  4866                           
  4867                           ;mcc_generated_files/i2c_master.c: 191:         I2C_Status.callbackTable[I2C_DATA_COMPLE
      +                          TE]=I2C_CallbackReturnStop;
  4868     04EB  3000               	movlw	0
  4869     04EC  00A0               	movwf	_I2C_Status^(0+128)
  4870     04ED  3000               	movlw	0
  4871     04EE  00A1               	movwf	(_I2C_Status^(0+128)+1)
  4872     04EF                     l4015:
  4873                           
  4874                           ;mcc_generated_files/i2c_master.c: 192:         I2C_Status.callbackPayload[I2C_DATA_COMP
      +                          LETE] = ((void*)0);
  4875     04EF  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
  4876     04F0                     l4017:
  4877                           
  4878                           ;mcc_generated_files/i2c_master.c: 193:         I2C_Status.callbackTable[I2C_WRITE_COLLI
      +                          SION]=I2C_CallbackReturnStop;
  4879     04F0  3000               	movlw	0
  4880     04F1  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
  4881     04F2  3000               	movlw	0
  4882     04F3  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
  4883                           
  4884                           ;mcc_generated_files/i2c_master.c: 194:         I2C_Status.callbackPayload[I2C_WRITE_COL
      +                          LISION] = ((void*)0);
  4885     04F4  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
  4886     04F5                     l4019:
  4887                           
  4888                           ;mcc_generated_files/i2c_master.c: 195:         I2C_Status.callbackTable[I2C_ADDR_NACK]=
      +                          I2C_CallbackReturnStop;
  4889     04F5  3000               	movlw	0
  4890     04F6  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
  4891     04F7  3000               	movlw	0
  4892     04F8  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
  4893     04F9                     l4021:
  4894                           
  4895                           ;mcc_generated_files/i2c_master.c: 196:         I2C_Status.callbackPayload[I2C_ADDR_NACK
      +                          ] = ((void*)0);
  4896     04F9  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
  4897                           
  4898                           ;mcc_generated_files/i2c_master.c: 197:         I2C_Status.callbackTable[I2C_DATA_NACK]=
      +                          I2C_CallbackReturnStop;
  4899     04FA  3000               	movlw	0
  4900     04FB  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
  4901     04FC  3000               	movlw	0
  4902     04FD  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
  4903     04FE                     l4023:
  4904                           
  4905                           ;mcc_generated_files/i2c_master.c: 198:         I2C_Status.callbackPayload[I2C_DATA_NACK
      +                          ] = ((void*)0);
  4906     04FE  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
  4907     04FF                     l4025:
  4908                           
  4909                           ;mcc_generated_files/i2c_master.c: 199:         I2C_Status.callbackTable[I2C_TIMEOUT]=I2
      +                          C_CallbackReturnReset;
  4910     04FF  3000               	movlw	0
  4911     0500  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
  4912     0501  3000               	movlw	0
  4913     0502  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
  4914                           
  4915                           ;mcc_generated_files/i2c_master.c: 200:         I2C_Status.callbackPayload[I2C_TIMEOUT] 
      +                          = ((void*)0);
  4916     0503  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
  4917     0504                     l4027:
  4918                           
  4919                           ;mcc_generated_files/i2c_master.c: 202:         I2C_SetInterruptHandler(I2C_MasterIsr);
  4920     0504  3000               	movlw	0
  4921     0505  00F2               	movwf	I2C_SetInterruptHandler@InterruptHandler
  4922     0506  3000               	movlw	0
  4923     0507  00F3               	movwf	I2C_SetInterruptHandler@InterruptHandler+1
  4924     0508  318F  271C  3184   	fcall	_I2C_SetInterruptHandler
  4925     050B                     l4029:
  4926                           
  4927                           ;mcc_generated_files/i2c_master.c: 203:         I2C_MasterClearIrq();
  4928     050B  318E  26F1  3184   	fcall	_I2C_MasterClearIrq
  4929     050E                     l4031:
  4930                           
  4931                           ;mcc_generated_files/i2c_master.c: 204:         I2C_MasterOpen();
  4932     050E  318F  27C4  3184   	fcall	_I2C_MasterOpen
  4933     0511                     l4033:
  4934                           
  4935                           ;mcc_generated_files/i2c_master.c: 205:         I2C_MasterEnableIrq();
  4936     0511  318E  26FD  3184   	fcall	_I2C_MasterEnableIrq
  4937                           
  4938                           ;mcc_generated_files/i2c_master.c: 206:         returnValue = I2C_NOERR;
  4939     0514  01F5               	clrf	I2C_Open@returnValue
  4940     0515                     l4035:
  4941                           
  4942                           ;mcc_generated_files/i2c_master.c: 208:     return returnValue;
  4943     0515  0875               	movf	I2C_Open@returnValue,w
  4944     0516                     l278:
  4945     0516  0008               	return
  4946     0517                     __end_of_I2C_Open:
  4947                           
  4948                           	psect	text22
  4949     0F1C                     __ptext22:	
  4950 ;; *************** function _I2C_SetInterruptHandler *****************
  4951 ;; Defined at:
  4952 ;;		line 299 in file "mcc_generated_files/i2c_master.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  4955 ;;		 -> I2C_MasterIsr(1), 
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;		None
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  1    wreg      void 
  4960 ;; Registers used:
  4961 ;;		wreg
  4962 ;; Tracked objects:
  4963 ;;		On entry : 0/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4967 ;;      Params:         2       0       0       0       0       0       0       0
  4968 ;;      Locals:         0       0       0       0       0       0       0       0
  4969 ;;      Temps:          0       0       0       0       0       0       0       0
  4970 ;;      Totals:         2       0       0       0       0       0       0       0
  4971 ;;Total ram usage:        2 bytes
  4972 ;; Hardware stack levels used: 1
  4973 ;; Hardware stack levels required when called: 4
  4974 ;; This function calls:
  4975 ;;		Nothing
  4976 ;; This function is called by:
  4977 ;;		_I2C_Open
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981     0F1C                     _I2C_SetInterruptHandler:	
  4982                           ;psect for function _I2C_SetInterruptHandler
  4983                           
  4984     0F1C                     l3899:	
  4985                           ;incstack = 0
  4986                           ; Regs used in _I2C_SetInterruptHandler: [wreg]
  4987                           
  4988                           
  4989                           ;mcc_generated_files/i2c_master.c: 299: void I2C_SetInterruptHandler(void (* InterruptHa
      +                          ndler)(void));mcc_generated_files/i2c_master.c: 300: {;mcc_generated_files/i2c_master.c:
      +                           301:     MSSP_InterruptHandler = InterruptHandler;
  4990     0F1C  0873               	movf	I2C_SetInterruptHandler@InterruptHandler+1,w
  4991     0F1D  0020               	movlb	0	; select bank0
  4992     0F1E  00E0               	movwf	_MSSP_InterruptHandler+1
  4993     0F1F  0872               	movf	I2C_SetInterruptHandler@InterruptHandler,w
  4994     0F20  00DF               	movwf	_MSSP_InterruptHandler
  4995     0F21                     l319:
  4996     0F21  0008               	return
  4997     0F22                     __end_of_I2C_SetInterruptHandler:
  4998                           
  4999                           	psect	text23
  5000     0FC4                     __ptext23:	
  5001 ;; *************** function _I2C_MasterOpen *****************
  5002 ;; Defined at:
  5003 ;;		line 544 in file "mcc_generated_files/i2c_master.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;		None
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;		None
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  1    wreg      _Bool 
  5010 ;; Registers used:
  5011 ;;		wreg, status,2
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5017 ;;      Params:         0       0       0       0       0       0       0       0
  5018 ;;      Locals:         0       0       0       0       0       0       0       0
  5019 ;;      Temps:          0       0       0       0       0       0       0       0
  5020 ;;      Totals:         0       0       0       0       0       0       0       0
  5021 ;;Total ram usage:        0 bytes
  5022 ;; Hardware stack levels used: 1
  5023 ;; Hardware stack levels required when called: 4
  5024 ;; This function calls:
  5025 ;;		Nothing
  5026 ;; This function is called by:
  5027 ;;		_I2C_Open
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031     0FC4                     _I2C_MasterOpen:	
  5032                           ;psect for function _I2C_MasterOpen
  5033                           
  5034     0FC4                     l3903:	
  5035                           ;incstack = 0
  5036                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  5037                           
  5038                           
  5039                           ;mcc_generated_files/i2c_master.c: 546:     if(!SSPCON1bits.SSPEN)
  5040     0FC4  0024               	movlb	4	; select bank4
  5041     0FC5  1A95               	btfsc	21,5	;volatile
  5042     0FC6  2FC8               	goto	u1711
  5043     0FC7  2FC9               	goto	u1710
  5044     0FC8                     u1711:
  5045     0FC8  2FD0               	goto	l443
  5046     0FC9                     u1710:
  5047     0FC9                     l3905:
  5048                           
  5049                           ;mcc_generated_files/i2c_master.c: 547:     {;mcc_generated_files/i2c_master.c: 548:    
      +                               SSPSTAT = 0x00;
  5050     0FC9  0194               	clrf	20	;volatile
  5051     0FCA                     l3907:
  5052                           
  5053                           ;mcc_generated_files/i2c_master.c: 549:         SSPCON1 = 0x08;
  5054     0FCA  3008               	movlw	8
  5055     0FCB  0095               	movwf	21	;volatile
  5056     0FCC                     l3909:
  5057                           
  5058                           ;mcc_generated_files/i2c_master.c: 550:         SSPCON2 = 0x00;
  5059     0FCC  0196               	clrf	22	;volatile
  5060                           
  5061                           ;mcc_generated_files/i2c_master.c: 551:         SSPADD = 0x13;
  5062     0FCD  3013               	movlw	19
  5063     0FCE  0092               	movwf	18	;volatile
  5064     0FCF                     l3911:
  5065                           
  5066                           ;mcc_generated_files/i2c_master.c: 552:         SSPCON1bits.SSPEN = 1;
  5067     0FCF  1695               	bsf	21,5	;volatile
  5068     0FD0                     l443:
  5069     0FD0  0008               	return
  5070     0FD1                     __end_of_I2C_MasterOpen:
  5071                           
  5072                           	psect	text24
  5073     0EFD                     __ptext24:	
  5074 ;; *************** function _I2C_MasterEnableIrq *****************
  5075 ;; Defined at:
  5076 ;;		line 627 in file "mcc_generated_files/i2c_master.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;		None
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;		None
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      void 
  5083 ;; Registers used:
  5084 ;;		None
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5090 ;;      Params:         0       0       0       0       0       0       0       0
  5091 ;;      Locals:         0       0       0       0       0       0       0       0
  5092 ;;      Temps:          0       0       0       0       0       0       0       0
  5093 ;;      Totals:         0       0       0       0       0       0       0       0
  5094 ;;Total ram usage:        0 bytes
  5095 ;; Hardware stack levels used: 1
  5096 ;; Hardware stack levels required when called: 4
  5097 ;; This function calls:
  5098 ;;		Nothing
  5099 ;; This function is called by:
  5100 ;;		_I2C_Open
  5101 ;;		_I2C_SetTimeOut
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105     0EFD                     _I2C_MasterEnableIrq:	
  5106                           ;psect for function _I2C_MasterEnableIrq
  5107                           
  5108     0EFD                     l3915:	
  5109                           ;incstack = 0
  5110                           ; Regs used in _I2C_MasterEnableIrq: []
  5111                           
  5112                           
  5113                           ;mcc_generated_files/i2c_master.c: 629:     PIE1bits.SSPIE = 1;
  5114     0EFD  0021               	movlb	1	; select bank1
  5115     0EFE  1591               	bsf	17,3	;volatile
  5116     0EFF                     l485:
  5117     0EFF  0008               	return
  5118     0F00                     __end_of_I2C_MasterEnableIrq:
  5119                           
  5120                           	psect	text25
  5121     0F0C                     __ptext25:	
  5122 ;; *************** function _I2C_MasterRead *****************
  5123 ;; Defined at:
  5124 ;;		line 247 in file "mcc_generated_files/i2c_master.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;		None
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;		None
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      enum E358
  5131 ;; Registers used:
  5132 ;;		wreg, status,2, status,0, pclath, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5138 ;;      Params:         0       0       0       0       0       0       0       0
  5139 ;;      Locals:         0       0       0       0       0       0       0       0
  5140 ;;      Temps:          0       0       0       0       0       0       0       0
  5141 ;;      Totals:         0       0       0       0       0       0       0       0
  5142 ;;Total ram usage:        0 bytes
  5143 ;; Hardware stack levels used: 1
  5144 ;; Hardware stack levels required when called: 6
  5145 ;; This function calls:
  5146 ;;		_I2C_MasterOperation
  5147 ;; This function is called by:
  5148 ;;		_I2C_ReadNBytes
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152     0F0C                     _I2C_MasterRead:	
  5153                           ;psect for function _I2C_MasterRead
  5154                           
  5155     0F0C                     l4069:	
  5156                           ;incstack = 0
  5157                           ; Regs used in _I2C_MasterRead: [wreg+status,2+status,0+pclath+cstack]
  5158                           
  5159                           
  5160                           ;mcc_generated_files/i2c_master.c: 249:     return I2C_MasterOperation(1);;	Return value
      +                           of _I2C_MasterRead is never used
  5161     0F0C  3001               	movlw	1
  5162     0F0D  3187  2777  318F   	fcall	_I2C_MasterOperation
  5163     0F10                     l291:
  5164     0F10  0008               	return
  5165     0F11                     __end_of_I2C_MasterRead:
  5166                           
  5167                           	psect	text26
  5168     0777                     __ptext26:	
  5169 ;; *************** function _I2C_MasterOperation *****************
  5170 ;; Defined at:
  5171 ;;		line 226 in file "mcc_generated_files/i2c_master.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;  read            1    wreg     _Bool 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  read            1    2[COMMON] _Bool 
  5176 ;;  returnValue     1    3[COMMON] enum E358
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  1    wreg      enum E358
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0, pclath, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5186 ;;      Params:         0       0       0       0       0       0       0       0
  5187 ;;      Locals:         2       0       0       0       0       0       0       0
  5188 ;;      Temps:          0       0       0       0       0       0       0       0
  5189 ;;      Totals:         2       0       0       0       0       0       0       0
  5190 ;;Total ram usage:        2 bytes
  5191 ;; Hardware stack levels used: 1
  5192 ;; Hardware stack levels required when called: 5
  5193 ;; This function calls:
  5194 ;;		_I2C_MasterStart
  5195 ;; This function is called by:
  5196 ;;		_I2C_MasterRead
  5197 ;;		_I2C_MasterWrite
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201     0777                     _I2C_MasterOperation:	
  5202                           ;psect for function _I2C_MasterOperation
  5203                           
  5204                           
  5205                           ;incstack = 0
  5206                           ; Regs used in _I2C_MasterOperation: [wreg+status,2+status,0+pclath+cstack]
  5207                           ;I2C_MasterOperation@read stored from wreg
  5208     0777  00F2               	movwf	I2C_MasterOperation@read
  5209     0778                     l3921:
  5210                           
  5211                           ;mcc_generated_files/i2c_master.c: 226: i2c_error_t I2C_MasterOperation(_Bool read);mcc_
      +                          generated_files/i2c_master.c: 227: {;mcc_generated_files/i2c_master.c: 228:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  5212     0778  01F3               	clrf	I2C_MasterOperation@returnValue
  5213     0779  0AF3               	incf	I2C_MasterOperation@returnValue,f
  5214                           
  5215                           ;mcc_generated_files/i2c_master.c: 229:     if(!I2C_Status.busy)
  5216     077A  0021               	movlb	1	; select bank1
  5217     077B  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  5218     077C  2F7E               	goto	u1721
  5219     077D  2F7F               	goto	u1720
  5220     077E                     u1721:
  5221     077E  2F8E               	goto	l3935
  5222     077F                     u1720:
  5223     077F                     l3923:
  5224                           
  5225                           ;mcc_generated_files/i2c_master.c: 230:     {;mcc_generated_files/i2c_master.c: 231:    
      +                               I2C_Status.busy = 1;
  5226     077F  14BC               	bsf	(_I2C_Status^(0+128)+28),1
  5227     0780                     l3925:
  5228                           
  5229                           ;mcc_generated_files/i2c_master.c: 232:         returnValue = I2C_NOERR;
  5230     0780  01F3               	clrf	I2C_MasterOperation@returnValue
  5231     0781                     l3927:
  5232                           
  5233                           ;mcc_generated_files/i2c_master.c: 234:         if(read)
  5234     0781  0872               	movf	I2C_MasterOperation@read,w
  5235     0782  1903               	btfsc	3,2
  5236     0783  2F85               	goto	u1731
  5237     0784  2F86               	goto	u1730
  5238     0785                     u1731:
  5239     0785  2F89               	goto	l3931
  5240     0786                     u1730:
  5241     0786                     l3929:
  5242                           
  5243                           ;mcc_generated_files/i2c_master.c: 235:         {;mcc_generated_files/i2c_master.c: 236:
      +                                       I2C_Status.state = I2C_SEND_ADR_READ;
  5244     0786  01BA               	clrf	(_I2C_Status^(0+128)+26)
  5245     0787  0ABA               	incf	(_I2C_Status^(0+128)+26),f
  5246                           
  5247                           ;mcc_generated_files/i2c_master.c: 237:         }
  5248     0788  2F8B               	goto	l3933
  5249     0789                     l3931:
  5250                           
  5251                           ;mcc_generated_files/i2c_master.c: 239:         {;mcc_generated_files/i2c_master.c: 240:
      +                                       I2C_Status.state = I2C_SEND_ADR_WRITE;
  5252     0789  3002               	movlw	2
  5253     078A  00BA               	movwf	(_I2C_Status^(0+128)+26)
  5254     078B                     l3933:
  5255                           
  5256                           ;mcc_generated_files/i2c_master.c: 242:         I2C_MasterStart();
  5257     078B  318E  26FA  3187   	fcall	_I2C_MasterStart
  5258     078E                     l3935:
  5259                           
  5260                           ;mcc_generated_files/i2c_master.c: 244:     return returnValue;
  5261     078E  0873               	movf	I2C_MasterOperation@returnValue,w
  5262     078F                     l288:
  5263     078F  0008               	return
  5264     0790                     __end_of_I2C_MasterOperation:
  5265                           
  5266                           	psect	text27
  5267     0EFA                     __ptext27:	
  5268 ;; *************** function _I2C_MasterStart *****************
  5269 ;; Defined at:
  5270 ;;		line 589 in file "mcc_generated_files/i2c_master.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      void 
  5277 ;; Registers used:
  5278 ;;		None
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5284 ;;      Params:         0       0       0       0       0       0       0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used: 1
  5290 ;; Hardware stack levels required when called: 4
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_I2C_MasterOperation
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298     0EFA                     _I2C_MasterStart:	
  5299                           ;psect for function _I2C_MasterStart
  5300                           
  5301     0EFA                     l3833:	
  5302                           ;incstack = 0
  5303                           ; Regs used in _I2C_MasterStart: []
  5304                           
  5305                           
  5306                           ;mcc_generated_files/i2c_master.c: 591:     SSPCON2bits.SEN = 1;
  5307     0EFA  0024               	movlb	4	; select bank4
  5308     0EFB  1416               	bsf	22,0	;volatile
  5309     0EFC                     l464:
  5310     0EFC  0008               	return
  5311     0EFD                     __end_of_I2C_MasterStart:
  5312                           
  5313                           	psect	text28
  5314     07C1                     __ptext28:	
  5315 ;; *************** function _I2C_Close *****************
  5316 ;; Defined at:
  5317 ;;		line 211 in file "mcc_generated_files/i2c_master.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;		None
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  returnValue     1    2[COMMON] enum E358
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  1    wreg      enum E358
  5324 ;; Registers used:
  5325 ;;		wreg, status,2, status,0, pclath, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5331 ;;      Params:         0       0       0       0       0       0       0       0
  5332 ;;      Locals:         1       0       0       0       0       0       0       0
  5333 ;;      Temps:          0       0       0       0       0       0       0       0
  5334 ;;      Totals:         1       0       0       0       0       0       0       0
  5335 ;;Total ram usage:        1 bytes
  5336 ;; Hardware stack levels used: 1
  5337 ;; Hardware stack levels required when called: 5
  5338 ;; This function calls:
  5339 ;;		_I2C_MasterClearIrq
  5340 ;;		_I2C_MasterClose
  5341 ;;		_I2C_MasterDisableIrq
  5342 ;; This function is called by:
  5343 ;;		_I2C_WriteNBytes
  5344 ;;		_I2C_ReadNBytes
  5345 ;;		_I2C_Read1ByteRegister
  5346 ;;		_I2C_Read2ByteRegister
  5347 ;;		_I2C_Write1ByteRegister
  5348 ;;		_I2C_Write2ByteRegister
  5349 ;;		_I2C_ReadDataBlock
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353     07C1                     _I2C_Close:	
  5354                           ;psect for function _I2C_Close
  5355                           
  5356     07C1                     l4051:	
  5357                           ;incstack = 0
  5358                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  5359                           
  5360                           
  5361                           ;mcc_generated_files/i2c_master.c: 213:     i2c_error_t returnValue = I2C_BUSY;
  5362     07C1  01F2               	clrf	I2C_Close@returnValue
  5363     07C2  0AF2               	incf	I2C_Close@returnValue,f
  5364                           
  5365                           ;mcc_generated_files/i2c_master.c: 214:     if(!I2C_Status.busy)
  5366     07C3  0021               	movlb	1	; select bank1
  5367     07C4  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  5368     07C5  2FC7               	goto	u1841
  5369     07C6  2FC8               	goto	u1840
  5370     07C7                     u1841:
  5371     07C7  2FD7               	goto	l4065
  5372     07C8                     u1840:
  5373     07C8                     l4053:
  5374                           
  5375                           ;mcc_generated_files/i2c_master.c: 215:     {;mcc_generated_files/i2c_master.c: 216:    
      +                               I2C_Status.inUse = 0;
  5376     07C8  113C               	bcf	(_I2C_Status^(0+128)+28),2
  5377     07C9                     l4055:
  5378                           
  5379                           ;mcc_generated_files/i2c_master.c: 217:         I2C_Status.address = 0xff;
  5380     07C9  30FF               	movlw	255
  5381     07CA  00B6               	movwf	(_I2C_Status^(0+128)+22)
  5382     07CB                     l4057:
  5383                           
  5384                           ;mcc_generated_files/i2c_master.c: 218:         I2C_MasterClearIrq();
  5385     07CB  318E  26F1  3187   	fcall	_I2C_MasterClearIrq
  5386     07CE                     l4059:
  5387                           
  5388                           ;mcc_generated_files/i2c_master.c: 219:         I2C_MasterDisableIrq();
  5389     07CE  318E  26F7  3187   	fcall	_I2C_MasterDisableIrq
  5390     07D1                     l4061:
  5391                           
  5392                           ;mcc_generated_files/i2c_master.c: 220:         I2C_MasterClose();
  5393     07D1  318E  26F4  3187   	fcall	_I2C_MasterClose
  5394     07D4                     l4063:
  5395                           
  5396                           ;mcc_generated_files/i2c_master.c: 221:         returnValue = I2C_Status.error;
  5397     07D4  0021               	movlb	1	; select bank1
  5398     07D5  083B               	movf	(_I2C_Status^(0+128)+27),w
  5399     07D6  00F2               	movwf	I2C_Close@returnValue
  5400     07D7                     l4065:
  5401                           
  5402                           ;mcc_generated_files/i2c_master.c: 223:     return returnValue;
  5403     07D7  0872               	movf	I2C_Close@returnValue,w
  5404     07D8                     l282:
  5405     07D8  0008               	return
  5406     07D9                     __end_of_I2C_Close:
  5407                           
  5408                           	psect	text29
  5409     0EF7                     __ptext29:	
  5410 ;; *************** function _I2C_MasterDisableIrq *****************
  5411 ;; Defined at:
  5412 ;;		line 637 in file "mcc_generated_files/i2c_master.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      void 
  5419 ;; Registers used:
  5420 ;;		None
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5426 ;;      Params:         0       0       0       0       0       0       0       0
  5427 ;;      Locals:         0       0       0       0       0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0       0
  5429 ;;      Totals:         0       0       0       0       0       0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used: 1
  5432 ;; Hardware stack levels required when called: 4
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_I2C_Close
  5437 ;;		_I2C_SetTimeOut
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441     0EF7                     _I2C_MasterDisableIrq:	
  5442                           ;psect for function _I2C_MasterDisableIrq
  5443                           
  5444     0EF7                     l3917:	
  5445                           ;incstack = 0
  5446                           ; Regs used in _I2C_MasterDisableIrq: []
  5447                           
  5448                           
  5449                           ;mcc_generated_files/i2c_master.c: 639:     PIE1bits.SSPIE = 0;
  5450     0EF7  0021               	movlb	1	; select bank1
  5451     0EF8  1191               	bcf	17,3	;volatile
  5452     0EF9                     l491:
  5453     0EF9  0008               	return
  5454     0EFA                     __end_of_I2C_MasterDisableIrq:
  5455                           
  5456                           	psect	text30
  5457     0EF4                     __ptext30:	
  5458 ;; *************** function _I2C_MasterClose *****************
  5459 ;; Defined at:
  5460 ;;		line 558 in file "mcc_generated_files/i2c_master.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;		None
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      void 
  5467 ;; Registers used:
  5468 ;;		None
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5474 ;;      Params:         0       0       0       0       0       0       0       0
  5475 ;;      Locals:         0       0       0       0       0       0       0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0       0
  5477 ;;      Totals:         0       0       0       0       0       0       0       0
  5478 ;;Total ram usage:        0 bytes
  5479 ;; Hardware stack levels used: 1
  5480 ;; Hardware stack levels required when called: 4
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		_I2C_Close
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488     0EF4                     _I2C_MasterClose:	
  5489                           ;psect for function _I2C_MasterClose
  5490                           
  5491     0EF4                     l3919:	
  5492                           ;incstack = 0
  5493                           ; Regs used in _I2C_MasterClose: []
  5494                           
  5495                           
  5496                           ;mcc_generated_files/i2c_master.c: 561:     SSPCON1bits.SSPEN = 0;
  5497     0EF4  0024               	movlb	4	; select bank4
  5498     0EF5  1295               	bcf	21,5	;volatile
  5499     0EF6                     l446:
  5500     0EF6  0008               	return
  5501     0EF7                     __end_of_I2C_MasterClose:
  5502                           
  5503                           	psect	text31
  5504     0EF1                     __ptext31:	
  5505 ;; *************** function _I2C_MasterClearIrq *****************
  5506 ;; Defined at:
  5507 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;		None
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;		None
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  1    wreg      void 
  5514 ;; Registers used:
  5515 ;;		None
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5521 ;;      Params:         0       0       0       0       0       0       0       0
  5522 ;;      Locals:         0       0       0       0       0       0       0       0
  5523 ;;      Temps:          0       0       0       0       0       0       0       0
  5524 ;;      Totals:         0       0       0       0       0       0       0       0
  5525 ;;Total ram usage:        0 bytes
  5526 ;; Hardware stack levels used: 1
  5527 ;; Hardware stack levels required when called: 4
  5528 ;; This function calls:
  5529 ;;		Nothing
  5530 ;; This function is called by:
  5531 ;;		_I2C_Open
  5532 ;;		_I2C_Close
  5533 ;;		_I2C_MasterFsm
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537     0EF1                     _I2C_MasterClearIrq:	
  5538                           ;psect for function _I2C_MasterClearIrq
  5539                           
  5540     0EF1                     l3901:	
  5541                           ;incstack = 0
  5542                           ; Regs used in _I2C_MasterClearIrq: []
  5543                           
  5544                           
  5545                           ;mcc_generated_files/i2c_master.c: 644:     PIR1bits.SSPIF = 0;
  5546     0EF1  0020               	movlb	0	; select bank0
  5547     0EF2  1191               	bcf	17,3	;volatile
  5548     0EF3                     l494:
  5549     0EF3  0008               	return
  5550     0EF4                     __end_of_I2C_MasterClearIrq:
  5551                           
  5552                           	psect	text32
  5553     07D9                     __ptext32:	
  5554 ;; *************** function _Task_MB *****************
  5555 ;; Defined at:
  5556 ;;		line 249 in file "Mobbus_Slave.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;		None
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;		None
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5570 ;;      Params:         0       0       0       0       0       0       0       0
  5571 ;;      Locals:         0       0       0       0       0       0       0       0
  5572 ;;      Temps:          0       0       0       0       0       0       0       0
  5573 ;;      Totals:         0       0       0       0       0       0       0       0
  5574 ;;Total ram usage:        0 bytes
  5575 ;; Hardware stack levels used: 1
  5576 ;; Hardware stack levels required when called: 9
  5577 ;; This function calls:
  5578 ;;		_ModbusSlave_Init
  5579 ;;		_ModbusSlave_Process
  5580 ;; This function is called by:
  5581 ;;		_App_Process
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585     07D9                     _Task_MB:	
  5586                           ;psect for function _Task_MB
  5587                           
  5588     07D9                     l4297:	
  5589                           ;incstack = 0
  5590                           ; Regs used in _Task_MB: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5591                           
  5592                           
  5593                           ;Mobbus_Slave.c: 250:     static _Bool f_Modbus_Init = 0;;Mobbus_Slave.c: 251:     if (!
      +                          f_Modbus_Init) {
  5594     07D9  0020               	movlb	0	; select bank0
  5595     07DA  0861               	movf	Task_MB@f_Modbus_Init,w
  5596     07DB  1D03               	btfss	3,2
  5597     07DC  2FDE               	goto	u2081
  5598     07DD  2FDF               	goto	u2080
  5599     07DE                     u2081:
  5600     07DE  2FE7               	goto	l4303
  5601     07DF                     u2080:
  5602     07DF                     l4299:
  5603                           
  5604                           ;Mobbus_Slave.c: 252:         ModbusSlave_Init(SW_Ad);
  5605     07DF  086E               	movf	_SW_Ad,w
  5606     07E0  3185  2517  3187   	fcall	_ModbusSlave_Init
  5607     07E3                     l4301:
  5608                           
  5609                           ;Mobbus_Slave.c: 253:         f_Modbus_Init = 1;
  5610     07E3  0020               	movlb	0	; select bank0
  5611     07E4  01E1               	clrf	Task_MB@f_Modbus_Init
  5612     07E5  0AE1               	incf	Task_MB@f_Modbus_Init,f
  5613                           
  5614                           ;Mobbus_Slave.c: 254:     } else {
  5615     07E6  2FEA               	goto	l978
  5616     07E7                     l4303:
  5617                           
  5618                           ;Mobbus_Slave.c: 255:         ModbusSlave_Process();
  5619     07E7  3187  275D  3187   	fcall	_ModbusSlave_Process
  5620     07EA                     l978:
  5621     07EA  0008               	return
  5622     07EB                     __end_of_Task_MB:
  5623                           
  5624                           	psect	text33
  5625     075D                     __ptext33:	
  5626 ;; *************** function _ModbusSlave_Process *****************
  5627 ;; Defined at:
  5628 ;;		line 240 in file "Mobbus_Slave.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;		None
  5631 ;; Auto vars:     Size  Location     Type
  5632 ;;  state           1    0        char 
  5633 ;; Return value:  Size  Location     Type
  5634 ;;                  1    wreg      void 
  5635 ;; Registers used:
  5636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5637 ;; Tracked objects:
  5638 ;;		On entry : 0/0
  5639 ;;		On exit  : 0/0
  5640 ;;		Unchanged: 0/0
  5641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5642 ;;      Params:         0       0       0       0       0       0       0       0
  5643 ;;      Locals:         0       0       0       0       0       0       0       0
  5644 ;;      Temps:          0       0       0       0       0       0       0       0
  5645 ;;      Totals:         0       0       0       0       0       0       0       0
  5646 ;;Total ram usage:        0 bytes
  5647 ;; Hardware stack levels used: 1
  5648 ;; Hardware stack levels required when called: 8
  5649 ;; This function calls:
  5650 ;;		_ModbusRTU_Slave_Poll
  5651 ;; This function is called by:
  5652 ;;		_Task_MB
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656     075D                     _ModbusSlave_Process:	
  5657                           ;psect for function _ModbusSlave_Process
  5658                           
  5659     075D                     l4271:	
  5660                           ;incstack = 0
  5661                           ; Regs used in _ModbusSlave_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5662                           
  5663     075D                     l4273:
  5664                           
  5665                           ;Mobbus_Slave.c: 243:     MB_Register[0] = SensorAmbient.T.Val16;
  5666     075D  0020               	movlb	0	; select bank0
  5667     075E  085A               	movf	_SensorAmbient+1,w
  5668     075F  0021               	movlb	1	; select bank1
  5669     0760  00D2               	movwf	(_MB_Register+1)^(0+128)
  5670     0761  0020               	movlb	0	; select bank0
  5671     0762  0859               	movf	_SensorAmbient,w
  5672     0763  0021               	movlb	1	; select bank1
  5673     0764  00D1               	movwf	_MB_Register^(0+128)
  5674     0765                     l4275:
  5675                           
  5676                           ;Mobbus_Slave.c: 244:     MB_Register[1] = SensorAmbient.H.Val16;
  5677     0765  0020               	movlb	0	; select bank0
  5678     0766  085C               	movf	_SensorAmbient+3,w
  5679     0767  0021               	movlb	1	; select bank1
  5680     0768  00D4               	movwf	((_MB_Register+1)^(0+128)+2)
  5681     0769  0020               	movlb	0	; select bank0
  5682     076A  085B               	movf	_SensorAmbient+2,w
  5683     076B  0021               	movlb	1	; select bank1
  5684     076C  00D3               	movwf	(_MB_Register^(0+128)+2)
  5685     076D                     l4277:
  5686     076D  3002               	movlw	2
  5687     076E  0020               	movlb	0	; select bank0
  5688     076F  00CB               	movwf	ModbusRTU_Slave_Poll@size
  5689     0770  3000               	movlw	0
  5690     0771  00CC               	movwf	ModbusRTU_Slave_Poll@size+1
  5691     0772  30D1               	movlw	(low (_MB_Register| 0))& (0+255)
  5692     0773  3181  2184  3187   	fcall	_ModbusRTU_Slave_Poll
  5693     0776                     l971:
  5694     0776  0008               	return
  5695     0777                     __end_of_ModbusSlave_Process:
  5696                           
  5697                           	psect	text34
  5698     0184                     __ptext34:	
  5699 ;; *************** function _ModbusRTU_Slave_Poll *****************
  5700 ;; Defined at:
  5701 ;;		line 119 in file "Mobbus_Slave.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  reg             1    wreg     PTR short 
  5704 ;;		 -> MB_Register(4), 
  5705 ;;  size            2   43[BANK0 ] unsigned short 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  reg             1    0[BANK1 ] PTR short 
  5708 ;;		 -> MB_Register(4), 
  5709 ;;  u8exception     1    3[BANK1 ] unsigned char 
  5710 ;;  i8state         1    2[BANK1 ] char 
  5711 ;;  u8Current       1    1[BANK1 ] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      char 
  5714 ;; Registers used:
  5715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5721 ;;      Params:         0       2       0       0       0       0       0       0
  5722 ;;      Locals:         0       0       4       0       0       0       0       0
  5723 ;;      Temps:          0       8       0       0       0       0       0       0
  5724 ;;      Totals:         0      10       4       0       0       0       0       0
  5725 ;;Total ram usage:       14 bytes
  5726 ;; Hardware stack levels used: 1
  5727 ;; Hardware stack levels required when called: 7
  5728 ;; This function calls:
  5729 ;;		_Get_millis
  5730 ;;		_ModbusSlaveF04
  5731 ;;		_Modbus_getRxBuff
  5732 ;;		_Modbus_sendTxBuff
  5733 ;;		_buildException
  5734 ;;		_validateRequest
  5735 ;; This function is called by:
  5736 ;;		_ModbusSlave_Process
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740     0184                     _ModbusRTU_Slave_Poll:	
  5741                           ;psect for function _ModbusRTU_Slave_Poll
  5742                           
  5743                           
  5744                           ;incstack = 0
  5745                           ; Regs used in _ModbusRTU_Slave_Poll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5746                           ;ModbusRTU_Slave_Poll@reg stored from wreg
  5747     0184  0021               	movlb	1	; select bank1
  5748     0185  00EB               	movwf	ModbusRTU_Slave_Poll@reg^(0+128)
  5749     0186                     l4187:
  5750                           
  5751                           ;Mobbus_Slave.c: 121:     SES_Modbus.u8regsize = size;
  5752     0186  30EA               	movlw	234
  5753     0187  0086               	movwf	6
  5754     0188  3021               	movlw	33
  5755     0189  0087               	movwf	7
  5756     018A  0020               	movlb	0	; select bank0
  5757     018B  084B               	movf	ModbusRTU_Slave_Poll@size,w
  5758     018C  3FC0               	movwi [0]fsr1
  5759     018D  084C               	movf	ModbusRTU_Slave_Poll@size+1,w
  5760     018E  3FC1               	movwi [1]fsr1
  5761     018F                     l4189:
  5762                           
  5763                           ;Mobbus_Slave.c: 122:     uint8_t u8Current;;Mobbus_Slave.c: 124:     u8Current = eusart
      +                          RxCount;
  5764     018F  0864               	movf	_eusartRxCount,w	;volatile
  5765     0190  0021               	movlb	1	; select bank1
  5766     0191  00EC               	movwf	ModbusRTU_Slave_Poll@u8Current^(0+128)
  5767     0192                     l4191:
  5768                           
  5769                           ;Mobbus_Slave.c: 126:     if (u8Current == 0) return 0;
  5770     0192  086C               	movf	ModbusRTU_Slave_Poll@u8Current^(0+128),w
  5771     0193  1D03               	btfss	3,2
  5772     0194  2996               	goto	u1971
  5773     0195  2997               	goto	u1970
  5774     0196                     u1971:
  5775     0196  2999               	goto	l4197
  5776     0197                     u1970:
  5777     0197                     l4193:
  5778     0197  3000               	movlw	0
  5779     0198  2A53               	goto	l932
  5780     0199                     l4197:
  5781                           
  5782                           ;Mobbus_Slave.c: 129:     if (u8Current != SES_Modbus.u8lastRec) {
  5783     0199  30D3               	movlw	211
  5784     019A  0086               	movwf	6
  5785     019B  3021               	movlw	33
  5786     019C  0087               	movwf	7
  5787     019D  0801               	movf	1,w
  5788     019E  066C               	xorwf	ModbusRTU_Slave_Poll@u8Current^(0+128),w
  5789     019F  1903               	skipnz
  5790     01A0  29A2               	goto	u1981
  5791     01A1  29A3               	goto	u1980
  5792     01A2                     u1981:
  5793     01A2  29B9               	goto	l4207
  5794     01A3                     u1980:
  5795     01A3                     l4199:
  5796                           
  5797                           ;Mobbus_Slave.c: 130:         SES_Modbus.u8lastRec = u8Current;
  5798     01A3  30D3               	movlw	211
  5799     01A4  0086               	movwf	6
  5800     01A5  3021               	movlw	33
  5801     01A6  0087               	movwf	7
  5802     01A7  086C               	movf	ModbusRTU_Slave_Poll@u8Current^(0+128),w
  5803     01A8  0081               	movwf	1
  5804     01A9                     l4201:
  5805                           
  5806                           ;Mobbus_Slave.c: 131:         SES_Modbus.u32time = Get_millis();
  5807     01A9  318F  2767  3181   	fcall	_Get_millis
  5808     01AC  30DE               	movlw	222
  5809     01AD  0086               	movwf	6
  5810     01AE  3021               	movlw	33
  5811     01AF  0087               	movwf	7
  5812     01B0  0872               	movf	?_Get_millis,w
  5813     01B1  3FC0               	movwi [0]fsr1
  5814     01B2  0873               	movf	?_Get_millis+1,w
  5815     01B3  3FC1               	movwi [1]fsr1
  5816     01B4  0874               	movf	?_Get_millis+2,w
  5817     01B5  3FC2               	movwi [2]fsr1
  5818     01B6  0875               	movf	?_Get_millis+3,w
  5819     01B7  3FC3               	movwi [3]fsr1
  5820     01B8  2997               	goto	l4193
  5821     01B9                     l4207:
  5822                           
  5823                           ;Mobbus_Slave.c: 134:     if ((unsigned long) (Get_millis() - SES_Modbus.u32time) < (uns
      +                          igned long) 3) return 0;
  5824     01B9  30DE               	movlw	222
  5825     01BA  0086               	movwf	6
  5826     01BB  3021               	movlw	33
  5827     01BC  0087               	movwf	7
  5828     01BD  3F40               	moviw [0]fsr1
  5829     01BE  0020               	movlb	0	; select bank0
  5830     01BF  00CD               	movwf	??_ModbusRTU_Slave_Poll
  5831     01C0  3F41               	moviw [1]fsr1
  5832     01C1  00CE               	movwf	??_ModbusRTU_Slave_Poll+1
  5833     01C2  3F42               	moviw [2]fsr1
  5834     01C3  00CF               	movwf	??_ModbusRTU_Slave_Poll+2
  5835     01C4  3F43               	moviw [3]fsr1
  5836     01C5  00D0               	movwf	??_ModbusRTU_Slave_Poll+3
  5837     01C6  318F  2767  3181   	fcall	_Get_millis
  5838     01C9  0872               	movf	?_Get_millis,w
  5839     01CA  0020               	movlb	0	; select bank0
  5840     01CB  00D1               	movwf	??_ModbusRTU_Slave_Poll+4
  5841     01CC  0873               	movf	?_Get_millis+1,w
  5842     01CD  00D2               	movwf	??_ModbusRTU_Slave_Poll+5
  5843     01CE  0874               	movf	?_Get_millis+2,w
  5844     01CF  00D3               	movwf	??_ModbusRTU_Slave_Poll+6
  5845     01D0  0875               	movf	?_Get_millis+3,w
  5846     01D1  00D4               	movwf	??_ModbusRTU_Slave_Poll+7
  5847     01D2  084D               	movf	??_ModbusRTU_Slave_Poll,w
  5848     01D3  02D1               	subwf	??_ModbusRTU_Slave_Poll+4,f
  5849     01D4  084E               	movf	??_ModbusRTU_Slave_Poll+1,w
  5850     01D5  3BD2               	subwfb	??_ModbusRTU_Slave_Poll+5,f
  5851     01D6  084F               	movf	??_ModbusRTU_Slave_Poll+2,w
  5852     01D7  3BD3               	subwfb	??_ModbusRTU_Slave_Poll+6,f
  5853     01D8  0850               	movf	??_ModbusRTU_Slave_Poll+3,w
  5854     01D9  3BD4               	subwfb	??_ModbusRTU_Slave_Poll+7,f
  5855     01DA  0854               	movf	??_ModbusRTU_Slave_Poll+7,w
  5856     01DB  1D03               	btfss	3,2
  5857     01DC  29E8               	goto	u1991
  5858     01DD  0853               	movf	??_ModbusRTU_Slave_Poll+6,w
  5859     01DE  1D03               	btfss	3,2
  5860     01DF  29E8               	goto	u1991
  5861     01E0  0852               	movf	??_ModbusRTU_Slave_Poll+5,w
  5862     01E1  1D03               	btfss	3,2
  5863     01E2  29E8               	goto	u1991
  5864     01E3  3003               	movlw	3
  5865     01E4  0251               	subwf	??_ModbusRTU_Slave_Poll+4,w
  5866     01E5  1803               	btfsc	3,0
  5867     01E6  29E8               	goto	u1991
  5868     01E7  29E9               	goto	u1990
  5869     01E8                     u1991:
  5870     01E8  29EA               	goto	l4213
  5871     01E9                     u1990:
  5872     01E9  2997               	goto	l4193
  5873     01EA                     l4213:
  5874                           
  5875                           ;Mobbus_Slave.c: 136:     SES_Modbus.u8lastRec = 0;
  5876     01EA  30D3               	movlw	211
  5877     01EB  0086               	movwf	6
  5878     01EC  3021               	movlw	33
  5879     01ED  0087               	movwf	7
  5880     01EE  0181               	clrf	1
  5881     01EF                     l4215:
  5882                           
  5883                           ;Mobbus_Slave.c: 137:     int8_t i8state = Modbus_getRxBuff();
  5884     01EF  3183  23DF  3181   	fcall	_Modbus_getRxBuff
  5885     01F2  0021               	movlb	1	; select bank1
  5886     01F3  00ED               	movwf	ModbusRTU_Slave_Poll@i8state^(0+128)
  5887     01F4                     l4217:
  5888                           
  5889                           ;Mobbus_Slave.c: 138:     SES_Modbus.u8lastError = i8state;
  5890     01F4  30D7               	movlw	215
  5891     01F5  0086               	movwf	6
  5892     01F6  3020               	movlw	32
  5893     01F7  0087               	movwf	7
  5894     01F8  086D               	movf	ModbusRTU_Slave_Poll@i8state^(0+128),w
  5895     01F9  0081               	movwf	1
  5896     01FA                     l4219:
  5897                           
  5898                           ;Mobbus_Slave.c: 139:     if (i8state < 7) return i8state;
  5899     01FA  086D               	movf	ModbusRTU_Slave_Poll@i8state^(0+128),w
  5900     01FB  3A80               	xorlw	128
  5901     01FC  3E79               	addlw	-135
  5902     01FD  1803               	skipnc
  5903     01FE  2A00               	goto	u2001
  5904     01FF  2A01               	goto	u2000
  5905     0200                     u2001:
  5906     0200  2A04               	goto	l4225
  5907     0201                     u2000:
  5908     0201                     l4221:
  5909     0201  0021               	movlb	1	; select bank1
  5910     0202  086D               	movf	ModbusRTU_Slave_Poll@i8state^(0+128),w
  5911     0203  2A53               	goto	l932
  5912     0204                     l4225:
  5913                           
  5914                           ;Mobbus_Slave.c: 142:     if (SES_Modbus.au8Buffer[ ID ] != SES_Modbus.u8id) return 0;
  5915     0204  30D4               	movlw	212
  5916     0205  0086               	movwf	6
  5917     0206  3020               	movlw	32
  5918     0207  0087               	movwf	7
  5919     0208  30D4               	movlw	212
  5920     0209  0084               	movwf	4
  5921     020A  3020               	movlw	32
  5922     020B  0085               	movwf	5
  5923     020C  3104               	addfsr 0,4
  5924     020D  0800               	movf	0,w
  5925     020E  0601               	xorwf	1,w
  5926     020F  1903               	skipnz
  5927     0210  2A12               	goto	u2011
  5928     0211  2A13               	goto	u2010
  5929     0212                     u2011:
  5930     0212  2A14               	goto	l4231
  5931     0213                     u2010:
  5932     0213  2997               	goto	l4193
  5933     0214                     l4231:
  5934                           
  5935                           ;Mobbus_Slave.c: 145:     uint8_t u8exception = validateRequest();
  5936     0214  3182  22FB  3181   	fcall	_validateRequest
  5937     0217  0021               	movlb	1	; select bank1
  5938     0218  00EE               	movwf	ModbusRTU_Slave_Poll@u8exception^(0+128)
  5939     0219                     l4233:
  5940                           
  5941                           ;Mobbus_Slave.c: 146:     if (u8exception > 0) {
  5942     0219  086E               	movf	ModbusRTU_Slave_Poll@u8exception^(0+128),w
  5943     021A  1903               	btfsc	3,2
  5944     021B  2A1D               	goto	u2021
  5945     021C  2A1E               	goto	u2020
  5946     021D                     u2021:
  5947     021D  2A33               	goto	l4245
  5948     021E                     u2020:
  5949     021E                     l4235:
  5950                           
  5951                           ;Mobbus_Slave.c: 147:         if (u8exception != NO_REPLY) {
  5952     021E  0A6E               	incf	ModbusRTU_Slave_Poll@u8exception^(0+128),w
  5953     021F  1903               	btfsc	3,2
  5954     0220  2A22               	goto	u2031
  5955     0221  2A23               	goto	u2030
  5956     0222                     u2031:
  5957     0222  2A2A               	goto	l4239
  5958     0223                     u2030:
  5959     0223                     l4237:
  5960                           
  5961                           ;Mobbus_Slave.c: 148:             buildException(u8exception);
  5962     0223  086E               	movf	ModbusRTU_Slave_Poll@u8exception^(0+128),w
  5963     0224  3185  25F5  3181   	fcall	_buildException
  5964                           
  5965                           ;Mobbus_Slave.c: 149:             Modbus_sendTxBuff();
  5966     0227  3180  20A2  3181   	fcall	_Modbus_sendTxBuff
  5967     022A                     l4239:
  5968                           
  5969                           ;Mobbus_Slave.c: 151:         SES_Modbus.u8lastError = u8exception;
  5970     022A  30D7               	movlw	215
  5971     022B  0086               	movwf	6
  5972     022C  3020               	movlw	32
  5973     022D  0087               	movwf	7
  5974     022E  0021               	movlb	1	; select bank1
  5975     022F  086E               	movf	ModbusRTU_Slave_Poll@u8exception^(0+128),w
  5976     0230  0081               	movwf	1
  5977     0231                     l4241:
  5978                           
  5979                           ;Mobbus_Slave.c: 152:         return u8exception;
  5980     0231  086E               	movf	ModbusRTU_Slave_Poll@u8exception^(0+128),w
  5981     0232  2A53               	goto	l932
  5982     0233                     l4245:
  5983                           
  5984                           ;Mobbus_Slave.c: 155:     SES_Modbus.u32timeOut = Get_millis();
  5985     0233  318F  2767  3181   	fcall	_Get_millis
  5986     0236  30E2               	movlw	226
  5987     0237  0086               	movwf	6
  5988     0238  3021               	movlw	33
  5989     0239  0087               	movwf	7
  5990     023A  0872               	movf	?_Get_millis,w
  5991     023B  3FC0               	movwi [0]fsr1
  5992     023C  0873               	movf	?_Get_millis+1,w
  5993     023D  3FC1               	movwi [1]fsr1
  5994     023E  0874               	movf	?_Get_millis+2,w
  5995     023F  3FC2               	movwi [2]fsr1
  5996     0240  0875               	movf	?_Get_millis+3,w
  5997     0241  3FC3               	movwi [3]fsr1
  5998     0242                     l4247:
  5999                           
  6000                           ;Mobbus_Slave.c: 156:     SES_Modbus.u8lastError = 0;
  6001     0242  30D4               	movlw	212
  6002     0243  0086               	movwf	6
  6003     0244  3020               	movlw	32
  6004     0245  0087               	movwf	7
  6005     0246  3143               	addfsr 1,3
  6006     0247  0181               	clrf	1
  6007     0248                     l4249:
  6008                           
  6009                           ;Mobbus_Slave.c: 158:     ModbusSlaveF04((uint16_t) reg, size);
  6010     0248  0021               	movlb	1	; select bank1
  6011     0249  086B               	movf	ModbusRTU_Slave_Poll@reg^(0+128),w
  6012     024A  0020               	movlb	0	; select bank0
  6013     024B  00B8               	movwf	ModbusSlaveF04@reg
  6014     024C  01B9               	clrf	ModbusSlaveF04@reg+1
  6015     024D  084B               	movf	ModbusRTU_Slave_Poll@size,w
  6016     024E  00BA               	movwf	ModbusSlaveF04@size
  6017     024F  3182  2254  3181   	fcall	_ModbusSlaveF04
  6018     0252  2A01               	goto	l4221
  6019     0253                     l932:
  6020     0253  0008               	return
  6021     0254                     __end_of_ModbusRTU_Slave_Poll:
  6022                           
  6023                           	psect	text35
  6024     02FB                     __ptext35:	
  6025 ;; *************** function _validateRequest *****************
  6026 ;; Defined at:
  6027 ;;		line 92 in file "Mobbus_Slave.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;		None
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;  u16MsgCRC       2   22[BANK0 ] unsigned short 
  6032 ;;  i               1   25[BANK0 ] unsigned char 
  6033 ;;  isSupported     1   24[BANK0 ] _Bool 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  1    wreg      unsigned char 
  6036 ;; Registers used:
  6037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6043 ;;      Params:         0       0       0       0       0       0       0       0
  6044 ;;      Locals:         0       4       0       0       0       0       0       0
  6045 ;;      Temps:          0      13       0       0       0       0       0       0
  6046 ;;      Totals:         0      17       0       0       0       0       0       0
  6047 ;;Total ram usage:       17 bytes
  6048 ;; Hardware stack levels used: 1
  6049 ;; Hardware stack levels required when called: 5
  6050 ;; This function calls:
  6051 ;;		_Modbus_calcCRC
  6052 ;; This function is called by:
  6053 ;;		_ModbusRTU_Slave_Poll
  6054 ;; This function uses a non-reentrant model
  6055 ;;
  6056                           
  6057     02FB                     _validateRequest:	
  6058                           ;psect for function _validateRequest
  6059                           
  6060     02FB                     l4131:	
  6061                           ;incstack = 0
  6062                           ; Regs used in _validateRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6063                           
  6064                           
  6065                           ;Mobbus_Slave.c: 94:     uint16_t u16MsgCRC =
  6066     02FB  30D2               	movlw	210
  6067     02FC  0086               	movwf	6
  6068     02FD  3021               	movlw	33
  6069     02FE  0087               	movwf	7
  6070     02FF  0801               	movf	1,w
  6071     0300  0020               	movlb	0	; select bank0
  6072     0301  00A9               	movwf	??_validateRequest
  6073     0302  01AA               	clrf	??_validateRequest+1
  6074     0303  30D7               	movlw	215
  6075     0304  00AB               	movwf	??_validateRequest+2
  6076     0305  3020               	movlw	32
  6077     0306  00AC               	movwf	??_validateRequest+3
  6078     0307  0829               	movf	??_validateRequest,w
  6079     0308  072B               	addwf	??_validateRequest+2,w
  6080     0309  0086               	movwf	6
  6081     030A  082A               	movf	??_validateRequest+1,w
  6082     030B  3D2C               	addwfc	??_validateRequest+3,w
  6083     030C  0087               	movwf	7
  6084     030D  0801               	movf	1,w
  6085     030E  00AD               	movwf	??_validateRequest+4
  6086     030F  01AE               	clrf	??_validateRequest+5
  6087     0310  30D2               	movlw	210
  6088     0311  0086               	movwf	6
  6089     0312  3021               	movlw	33
  6090     0313  0087               	movwf	7
  6091     0314  0801               	movf	1,w
  6092     0315  00AF               	movwf	??_validateRequest+6
  6093     0316  01B0               	clrf	??_validateRequest+7
  6094     0317  30D6               	movlw	214
  6095     0318  00B1               	movwf	??_validateRequest+8
  6096     0319  3020               	movlw	32
  6097     031A  00B2               	movwf	??_validateRequest+9
  6098     031B  082F               	movf	??_validateRequest+6,w
  6099     031C  0731               	addwf	??_validateRequest+8,w
  6100     031D  0086               	movwf	6
  6101     031E  0830               	movf	??_validateRequest+7,w
  6102     031F  3D32               	addwfc	??_validateRequest+9,w
  6103     0320  0087               	movwf	7
  6104     0321  0801               	movf	1,w
  6105     0322  00B3               	movwf	??_validateRequest+10
  6106     0323  01B4               	clrf	??_validateRequest+11
  6107     0324  0833               	movf	??_validateRequest+10,w
  6108     0325  00B4               	movwf	??_validateRequest+11
  6109     0326  01B3               	clrf	??_validateRequest+10
  6110     0327  082D               	movf	??_validateRequest+4,w
  6111     0328  0433               	iorwf	??_validateRequest+10,w
  6112     0329  00B6               	movwf	validateRequest@u16MsgCRC
  6113     032A  082E               	movf	??_validateRequest+5,w
  6114     032B  0434               	iorwf	??_validateRequest+11,w
  6115     032C  00B7               	movwf	validateRequest@u16MsgCRC+1
  6116     032D                     l4133:
  6117                           
  6118                           ;Mobbus_Slave.c: 97:     if (Modbus_calcCRC(SES_Modbus.u8BufferSize - 2) != u16MsgCRC) {
  6119     032D  30D2               	movlw	210
  6120     032E  0086               	movwf	6
  6121     032F  3021               	movlw	33
  6122     0330  0087               	movwf	7
  6123     0331  0801               	movf	1,w
  6124     0332  3EFE               	addlw	254
  6125     0333  3183  2380  3182   	fcall	_Modbus_calcCRC
  6126     0336  0020               	movlb	0	; select bank0
  6127     0337  0837               	movf	validateRequest@u16MsgCRC+1,w
  6128     0338  0673               	xorwf	?_Modbus_calcCRC+1,w
  6129     0339  1D03               	skipz
  6130     033A  2B3D               	goto	u1895
  6131     033B  0836               	movf	validateRequest@u16MsgCRC,w
  6132     033C  0672               	xorwf	?_Modbus_calcCRC,w
  6133     033D                     u1895:
  6134     033D  1903               	skipnz
  6135     033E  2B40               	goto	u1891
  6136     033F  2B41               	goto	u1890
  6137     0340                     u1891:
  6138     0340  2B4C               	goto	l4141
  6139     0341                     u1890:
  6140     0341                     l4135:
  6141                           
  6142                           ;Mobbus_Slave.c: 98:         SES_Modbus.u16errCnt++;
  6143     0341  30DA               	movlw	218
  6144     0342  0086               	movwf	6
  6145     0343  3021               	movlw	33
  6146     0344  0087               	movwf	7
  6147     0345  3001               	movlw	1
  6148     0346  0781               	addwf	1,f
  6149     0347  3141               	addfsr 1,1
  6150     0348  1803               	skipnc
  6151     0349  0A81               	incf	1,f
  6152     034A                     l4137:
  6153                           
  6154                           ;Mobbus_Slave.c: 99:         return NO_REPLY;
  6155     034A  30FF               	movlw	255
  6156     034B  2B7F               	goto	l924
  6157     034C                     l4141:
  6158                           
  6159                           ;Mobbus_Slave.c: 103:     _Bool isSupported = 0;
  6160     034C  01B8               	clrf	validateRequest@isSupported
  6161                           
  6162                           ;Mobbus_Slave.c: 104:     uint8_t i = 0;
  6163     034D  01B9               	clrf	validateRequest@i
  6164                           
  6165                           ;Mobbus_Slave.c: 105:     for (i = 0; i< sizeof ( fctsupported); i++) {
  6166     034E  01B9               	clrf	validateRequest@i
  6167     034F                     l4147:
  6168                           
  6169                           ;Mobbus_Slave.c: 106:         if (fctsupported[i] == SES_Modbus.au8Buffer[FUNC]) {
  6170     034F  30D4               	movlw	212
  6171     0350  0086               	movwf	6
  6172     0351  3020               	movlw	32
  6173     0352  0087               	movwf	7
  6174     0353  3145               	addfsr 1,5
  6175     0354  0839               	movf	validateRequest@i,w
  6176     0355  3E00               	addlw	low (_fctsupported| (0+32768))
  6177     0356  0084               	movwf	4
  6178     0357  3090               	movlw	high (_fctsupported| (0+32768))
  6179     0358  1803               	skipnc
  6180     0359  3E01               	addlw	1
  6181     035A  0085               	movwf	5
  6182     035B  0800               	movf	0,w	;code access
  6183     035C  0601               	xorwf	1,w
  6184     035D  1D03               	skipz
  6185     035E  2B60               	goto	u1901
  6186     035F  2B61               	goto	u1900
  6187     0360                     u1901:
  6188     0360  2B64               	goto	l4151
  6189     0361                     u1900:
  6190     0361                     l4149:
  6191                           
  6192                           ;Mobbus_Slave.c: 107:             isSupported = 1;
  6193     0361  01B8               	clrf	validateRequest@isSupported
  6194     0362  0AB8               	incf	validateRequest@isSupported,f
  6195                           
  6196                           ;Mobbus_Slave.c: 108:             break;
  6197     0363  2B6E               	goto	l4155
  6198     0364                     l4151:
  6199                           
  6200                           ;Mobbus_Slave.c: 110:     }
  6201     0364  3001               	movlw	1
  6202     0365  00A9               	movwf	??_validateRequest
  6203     0366  0829               	movf	??_validateRequest,w
  6204     0367  07B9               	addwf	validateRequest@i,f
  6205     0368                     l4153:
  6206     0368  3008               	movlw	8
  6207     0369  0239               	subwf	validateRequest@i,w
  6208     036A  1C03               	skipc
  6209     036B  2B6D               	goto	u1911
  6210     036C  2B6E               	goto	u1910
  6211     036D                     u1911:
  6212     036D  2B4F               	goto	l4147
  6213     036E                     u1910:
  6214     036E                     l4155:
  6215                           
  6216                           ;Mobbus_Slave.c: 111:     if (!isSupported) {
  6217     036E  0838               	movf	validateRequest@isSupported,w
  6218     036F  1D03               	btfss	3,2
  6219     0370  2B72               	goto	u1921
  6220     0371  2B73               	goto	u1920
  6221     0372                     u1921:
  6222     0372  2B7E               	goto	l4163
  6223     0373                     u1920:
  6224     0373                     l4157:
  6225                           
  6226                           ;Mobbus_Slave.c: 112:         SES_Modbus.u16errCnt++;
  6227     0373  30DA               	movlw	218
  6228     0374  0086               	movwf	6
  6229     0375  3021               	movlw	33
  6230     0376  0087               	movwf	7
  6231     0377  3001               	movlw	1
  6232     0378  0781               	addwf	1,f
  6233     0379  3141               	addfsr 1,1
  6234     037A  1803               	skipnc
  6235     037B  0A81               	incf	1,f
  6236     037C                     l4159:
  6237                           
  6238                           ;Mobbus_Slave.c: 113:         return EXC_FUNC_CODE;
  6239     037C  3001               	movlw	1
  6240     037D  2B7F               	goto	l924
  6241     037E                     l4163:
  6242                           
  6243                           ;Mobbus_Slave.c: 116:     return 0;
  6244     037E  3000               	movlw	0
  6245     037F                     l924:
  6246     037F  0008               	return
  6247     0380                     __end_of_validateRequest:
  6248                           
  6249                           	psect	text36
  6250     05F5                     __ptext36:	
  6251 ;; *************** function _buildException *****************
  6252 ;; Defined at:
  6253 ;;		line 58 in file "Mobbus_Slave.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  exception       1    wreg     unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  exception       1    3[COMMON] unsigned char 
  6258 ;;  u8func          1    4[COMMON] unsigned char 
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  1    wreg      void 
  6261 ;; Registers used:
  6262 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6268 ;;      Params:         0       0       0       0       0       0       0       0
  6269 ;;      Locals:         2       0       0       0       0       0       0       0
  6270 ;;      Temps:          1       0       0       0       0       0       0       0
  6271 ;;      Totals:         3       0       0       0       0       0       0       0
  6272 ;;Total ram usage:        3 bytes
  6273 ;; Hardware stack levels used: 1
  6274 ;; Hardware stack levels required when called: 4
  6275 ;; This function calls:
  6276 ;;		Nothing
  6277 ;; This function is called by:
  6278 ;;		_ModbusRTU_Slave_Poll
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282     05F5                     _buildException:	
  6283                           ;psect for function _buildException
  6284                           
  6285                           
  6286                           ;incstack = 0
  6287                           ; Regs used in _buildException: [wreg+fsr1l+fsr1h+status,2+status,0]
  6288                           ;buildException@exception stored from wreg
  6289     05F5  00F3               	movwf	buildException@exception
  6290     05F6                     l4093:
  6291                           
  6292                           ;Mobbus_Slave.c: 60:     uint8_t u8func = SES_Modbus.au8Buffer[ FUNC ];
  6293     05F6  30D4               	movlw	212
  6294     05F7  0086               	movwf	6
  6295     05F8  3020               	movlw	32
  6296     05F9  0087               	movwf	7
  6297     05FA  3145               	addfsr 1,5
  6298     05FB  0801               	movf	1,w
  6299     05FC  00F4               	movwf	buildException@u8func
  6300                           
  6301                           ;Mobbus_Slave.c: 62:     SES_Modbus.au8Buffer[ ID ] = SES_Modbus.u8id;
  6302     05FD  30D4               	movlw	212
  6303     05FE  0086               	movwf	6
  6304     05FF  3020               	movlw	32
  6305     0600  0087               	movwf	7
  6306     0601  0801               	movf	1,w
  6307     0602  00F2               	movwf	??_buildException
  6308     0603  30D8               	movlw	216
  6309     0604  0086               	movwf	6
  6310     0605  3020               	movlw	32
  6311     0606  0087               	movwf	7
  6312     0607  0872               	movf	??_buildException,w
  6313     0608  0081               	movwf	1
  6314     0609                     l4095:
  6315                           
  6316                           ;Mobbus_Slave.c: 63:     SES_Modbus.au8Buffer[ FUNC ] = u8func + 0x80;
  6317     0609  0874               	movf	buildException@u8func,w
  6318     060A  3E80               	addlw	128
  6319     060B  00F2               	movwf	??_buildException
  6320     060C  30D9               	movlw	217
  6321     060D  0086               	movwf	6
  6322     060E  3020               	movlw	32
  6323     060F  0087               	movwf	7
  6324     0610  0872               	movf	??_buildException,w
  6325     0611  0081               	movwf	1
  6326     0612                     l4097:
  6327                           
  6328                           ;Mobbus_Slave.c: 64:     SES_Modbus.au8Buffer[ 2 ] = exception;
  6329     0612  30DA               	movlw	218
  6330     0613  0086               	movwf	6
  6331     0614  3020               	movlw	32
  6332     0615  0087               	movwf	7
  6333     0616  0873               	movf	buildException@exception,w
  6334     0617  0081               	movwf	1
  6335     0618                     l4099:
  6336                           
  6337                           ;Mobbus_Slave.c: 65:     SES_Modbus.u8BufferSize = EXCEPTION_SIZE;
  6338     0618  30D2               	movlw	210
  6339     0619  0086               	movwf	6
  6340     061A  3021               	movlw	33
  6341     061B  0087               	movwf	7
  6342     061C  3003               	movlw	3
  6343     061D  0081               	movwf	1
  6344     061E                     l911:
  6345     061E  0008               	return
  6346     061F                     __end_of_buildException:
  6347                           
  6348                           	psect	text37
  6349     03DF                     __ptext37:	
  6350 ;; *************** function _Modbus_getRxBuff *****************
  6351 ;; Defined at:
  6352 ;;		line 68 in file "Mobbus_Slave.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;  bBuffOverflo    1    4[COMMON] _Bool 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      char 
  6359 ;; Registers used:
  6360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6366 ;;      Params:         0       0       0       0       0       0       0       0
  6367 ;;      Locals:         1       0       0       0       0       0       0       0
  6368 ;;      Temps:          0       7       0       0       0       0       0       0
  6369 ;;      Totals:         1       7       0       0       0       0       0       0
  6370 ;;Total ram usage:        8 bytes
  6371 ;; Hardware stack levels used: 1
  6372 ;; Hardware stack levels required when called: 5
  6373 ;; This function calls:
  6374 ;;		_EUSART_Read
  6375 ;; This function is called by:
  6376 ;;		_ModbusRTU_Slave_Poll
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380     03DF                     _Modbus_getRxBuff:	
  6381                           ;psect for function _Modbus_getRxBuff
  6382                           
  6383     03DF                     l4101:	
  6384                           ;incstack = 0
  6385                           ; Regs used in _Modbus_getRxBuff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6386                           
  6387                           
  6388                           ;Mobbus_Slave.c: 69:     _Bool bBuffOverflow = 0;
  6389     03DF  01F4               	clrf	Modbus_getRxBuff@bBuffOverflow
  6390     03E0                     l4105:
  6391                           
  6392                           ;Mobbus_Slave.c: 75:     SES_Modbus.u8BufferSize = 0;
  6393     03E0  30D2               	movlw	210
  6394     03E1  0086               	movwf	6
  6395     03E2  3021               	movlw	33
  6396     03E3  0087               	movwf	7
  6397     03E4  0181               	clrf	1
  6398                           
  6399                           ;Mobbus_Slave.c: 76:     while (eusartRxCount) {
  6400     03E5  2C16               	goto	l4115
  6401     03E6                     l4107:
  6402                           
  6403                           ;Mobbus_Slave.c: 77:         SES_Modbus.au8Buffer [SES_Modbus.u8BufferSize] = EUSART_Rea
      +                          d();
  6404     03E6  3186  2671  3183   	fcall	_EUSART_Read
  6405     03E9  0020               	movlb	0	; select bank0
  6406     03EA  00A0               	movwf	??_Modbus_getRxBuff
  6407     03EB  30D2               	movlw	210
  6408     03EC  0086               	movwf	6
  6409     03ED  3021               	movlw	33
  6410     03EE  0087               	movwf	7
  6411     03EF  0801               	movf	1,w
  6412     03F0  00A1               	movwf	??_Modbus_getRxBuff+1
  6413     03F1  01A2               	clrf	??_Modbus_getRxBuff+2
  6414     03F2  30D8               	movlw	216
  6415     03F3  00A3               	movwf	??_Modbus_getRxBuff+3
  6416     03F4  3020               	movlw	32
  6417     03F5  00A4               	movwf	??_Modbus_getRxBuff+4
  6418     03F6  0821               	movf	??_Modbus_getRxBuff+1,w
  6419     03F7  0723               	addwf	??_Modbus_getRxBuff+3,w
  6420     03F8  00A5               	movwf	??_Modbus_getRxBuff+5
  6421     03F9  0822               	movf	??_Modbus_getRxBuff+2,w
  6422     03FA  3D24               	addwfc	??_Modbus_getRxBuff+4,w
  6423     03FB  00A6               	movwf	??_Modbus_getRxBuff+6
  6424     03FC  0825               	movf	??_Modbus_getRxBuff+5,w
  6425     03FD  0086               	movwf	6
  6426     03FE  0826               	movf	??_Modbus_getRxBuff+6,w
  6427     03FF  0087               	movwf	7
  6428     0400  0820               	movf	??_Modbus_getRxBuff,w
  6429     0401  0081               	movwf	1
  6430     0402                     l4109:
  6431                           
  6432                           ;Mobbus_Slave.c: 78:         SES_Modbus.u8BufferSize++;
  6433     0402  3001               	movlw	1
  6434     0403  00A0               	movwf	??_Modbus_getRxBuff
  6435     0404  30D2               	movlw	210
  6436     0405  0086               	movwf	6
  6437     0406  3021               	movlw	33
  6438     0407  0087               	movwf	7
  6439     0408  0820               	movf	??_Modbus_getRxBuff,w
  6440     0409  0781               	addwf	1,f
  6441     040A                     l4111:
  6442                           
  6443                           ;Mobbus_Slave.c: 80:         if (SES_Modbus.u8BufferSize >= 250) bBuffOverflow = 1;
  6444     040A  30D2               	movlw	210
  6445     040B  0086               	movwf	6
  6446     040C  3021               	movlw	33
  6447     040D  0087               	movwf	7
  6448     040E  30FA               	movlw	250
  6449     040F  0201               	subwf	1,w
  6450     0410  1C03               	skipc
  6451     0411  2C13               	goto	u1861
  6452     0412  2C14               	goto	u1860
  6453     0413                     u1861:
  6454     0413  2C16               	goto	l4115
  6455     0414                     u1860:
  6456     0414                     l4113:
  6457     0414  01F4               	clrf	Modbus_getRxBuff@bBuffOverflow
  6458     0415  0AF4               	incf	Modbus_getRxBuff@bBuffOverflow,f
  6459     0416                     l4115:
  6460                           
  6461                           ;Mobbus_Slave.c: 76:     while (eusartRxCount) {
  6462     0416  0020               	movlb	0	; select bank0
  6463     0417  0864               	movf	_eusartRxCount,w	;volatile
  6464     0418  1D03               	btfss	3,2
  6465     0419  2C1B               	goto	u1871
  6466     041A  2C1C               	goto	u1870
  6467     041B                     u1871:
  6468     041B  2BE6               	goto	l4107
  6469     041C                     u1870:
  6470     041C                     l4117:
  6471                           
  6472                           ;Mobbus_Slave.c: 82:     SES_Modbus.u16InCnt++;
  6473     041C  30D6               	movlw	214
  6474     041D  0086               	movwf	6
  6475     041E  3021               	movlw	33
  6476     041F  0087               	movwf	7
  6477     0420  3001               	movlw	1
  6478     0421  0781               	addwf	1,f
  6479     0422  3141               	addfsr 1,1
  6480     0423  1803               	skipnc
  6481     0424  0A81               	incf	1,f
  6482     0425                     l4119:
  6483                           
  6484                           ;Mobbus_Slave.c: 84:     if (bBuffOverflow) {
  6485     0425  0874               	movf	Modbus_getRxBuff@bBuffOverflow,w
  6486     0426  1903               	btfsc	3,2
  6487     0427  2C29               	goto	u1881
  6488     0428  2C2A               	goto	u1880
  6489     0429                     u1881:
  6490     0429  2C35               	goto	l4127
  6491     042A                     u1880:
  6492     042A                     l4121:
  6493                           
  6494                           ;Mobbus_Slave.c: 85:         SES_Modbus.u16errCnt++;
  6495     042A  30DA               	movlw	218
  6496     042B  0086               	movwf	6
  6497     042C  3021               	movlw	33
  6498     042D  0087               	movwf	7
  6499     042E  3001               	movlw	1
  6500     042F  0781               	addwf	1,f
  6501     0430  3141               	addfsr 1,1
  6502     0431  1803               	skipnc
  6503     0432  0A81               	incf	1,f
  6504     0433                     l4123:
  6505                           
  6506                           ;Mobbus_Slave.c: 86:         return ERR_BUFF_OVERFLOW;
  6507     0433  30FD               	movlw	253
  6508     0434  2C3A               	goto	l920
  6509     0435                     l4127:
  6510                           
  6511                           ;Mobbus_Slave.c: 89:     return SES_Modbus.u8BufferSize;
  6512     0435  30D2               	movlw	210
  6513     0436  0086               	movwf	6
  6514     0437  3021               	movlw	33
  6515     0438  0087               	movwf	7
  6516     0439  0801               	movf	1,w
  6517     043A                     l920:
  6518     043A  0008               	return
  6519     043B                     __end_of_Modbus_getRxBuff:
  6520                           
  6521                           	psect	text38
  6522     0671                     __ptext38:	
  6523 ;; *************** function _EUSART_Read *****************
  6524 ;; Defined at:
  6525 ;;		line 151 in file "mcc_generated_files/eusart.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;		None
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  readValue       1    3[COMMON] unsigned char 
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      unsigned char 
  6532 ;; Registers used:
  6533 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6539 ;;      Params:         0       0       0       0       0       0       0       0
  6540 ;;      Locals:         1       0       0       0       0       0       0       0
  6541 ;;      Temps:          1       0       0       0       0       0       0       0
  6542 ;;      Totals:         2       0       0       0       0       0       0       0
  6543 ;;Total ram usage:        2 bytes
  6544 ;; Hardware stack levels used: 1
  6545 ;; Hardware stack levels required when called: 4
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		_Modbus_getRxBuff
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553     0671                     _EUSART_Read:	
  6554                           ;psect for function _EUSART_Read
  6555                           
  6556     0671                     l3945:	
  6557                           ;incstack = 0
  6558                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6559                           
  6560     0671                     l3947:	
  6561                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  6562                           
  6563                           
  6564                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  6565     0671  0020               	movlb	0	; select bank0
  6566     0672  0864               	movf	_eusartRxCount,w	;volatile
  6567     0673  1903               	btfsc	3,2
  6568     0674  2E76               	goto	u1751
  6569     0675  2E77               	goto	u1750
  6570     0676                     u1751:
  6571     0676  2E71               	goto	l3947
  6572     0677                     u1750:
  6573     0677                     l3949:
  6574                           
  6575                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  6576     0677  087A               	movf	_eusartRxTail,w	;volatile
  6577     0678  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  6578     0679  0086               	movwf	6
  6579     067A  0187               	clrf	7
  6580     067B  0801               	movf	1,w
  6581     067C  00E3               	movwf	_eusartRxLastError	;volatile
  6582                           
  6583                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  6584     067D  087A               	movf	_eusartRxTail,w
  6585     067E  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  6586     067F  0086               	movwf	6
  6587     0680  3001               	movlw	1	; select bank2/3
  6588     0681  0087               	movwf	7
  6589     0682  0801               	movf	1,w
  6590     0683  00F3               	movwf	EUSART_Read@readValue
  6591     0684                     l3951:
  6592     0684  3001               	movlw	1
  6593     0685  00F2               	movwf	??_EUSART_Read
  6594     0686  0872               	movf	??_EUSART_Read,w
  6595     0687  07FA               	addwf	_eusartRxTail,f	;volatile
  6596     0688                     l3953:
  6597                           
  6598                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6599     0688  3010               	movlw	16
  6600     0689  027A               	subwf	_eusartRxTail,w	;volatile
  6601     068A  1C03               	skipc
  6602     068B  2E8D               	goto	u1761
  6603     068C  2E8E               	goto	u1760
  6604     068D                     u1761:
  6605     068D  2E8F               	goto	l3957
  6606     068E                     u1760:
  6607     068E                     l3955:
  6608                           
  6609                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  6610     068E  01FA               	clrf	_eusartRxTail	;volatile
  6611     068F                     l3957:
  6612                           
  6613                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  6614     068F  0021               	movlb	1	; select bank1
  6615     0690  1291               	bcf	17,5	;volatile
  6616     0691                     l3959:
  6617                           
  6618                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  6619     0691  3001               	movlw	1
  6620     0692  0020               	movlb	0	; select bank0
  6621     0693  02E4               	subwf	_eusartRxCount,f	;volatile
  6622     0694                     l3961:
  6623                           
  6624                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  6625     0694  0021               	movlb	1	; select bank1
  6626     0695  1691               	bsf	17,5	;volatile
  6627     0696                     l3963:
  6628                           
  6629                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  6630     0696  0873               	movf	EUSART_Read@readValue,w
  6631     0697                     l631:
  6632     0697  0008               	return
  6633     0698                     __end_of_EUSART_Read:
  6634                           
  6635                           	psect	text39
  6636     0254                     __ptext39:	
  6637 ;; *************** function _ModbusSlaveF04 *****************
  6638 ;; Defined at:
  6639 ;;		line 37 in file "Mobbus_Slave.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  reg             2   24[BANK0 ] PTR unsigned short 
  6642 ;;		 -> MB_Register(4), RAM(4096), 
  6643 ;;  size            1   26[BANK0 ] unsigned char 
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  i               2   41[BANK0 ] unsigned short 
  6646 ;;  u8StartAdd      2   38[BANK0 ] unsigned short 
  6647 ;;  u8regsno        1   40[BANK0 ] unsigned char 
  6648 ;;  u8CopyBuffer    1    0        unsigned char 
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  1    wreg      char 
  6651 ;; Registers used:
  6652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6658 ;;      Params:         0       3       0       0       0       0       0       0
  6659 ;;      Locals:         0       5       0       0       0       0       0       0
  6660 ;;      Temps:          0      11       0       0       0       0       0       0
  6661 ;;      Totals:         0      19       0       0       0       0       0       0
  6662 ;;Total ram usage:       19 bytes
  6663 ;; Hardware stack levels used: 1
  6664 ;; Hardware stack levels required when called: 6
  6665 ;; This function calls:
  6666 ;;		_Modbus_sendTxBuff
  6667 ;; This function is called by:
  6668 ;;		_ModbusRTU_Slave_Poll
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672     0254                     _ModbusSlaveF04:	
  6673                           ;psect for function _ModbusSlaveF04
  6674                           
  6675     0254                     l4073:	
  6676                           ;incstack = 0
  6677                           ; Regs used in _ModbusSlaveF04: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6678                           
  6679                           
  6680                           ;Mobbus_Slave.c: 38:     uint16_t u8StartAdd = (SES_Modbus.au8Buffer[ ADD_LO ] & 0xff) |
      +                           ((SES_Modbus.au8Buffer[ ADD_HI ] & 0xff) << 8);
  6681     0254  30D4               	movlw	212
  6682     0255  0086               	movwf	6
  6683     0256  3020               	movlw	32
  6684     0257  0087               	movwf	7
  6685     0258  3146               	addfsr 1,6
  6686     0259  0801               	movf	1,w
  6687     025A  0020               	movlb	0	; select bank0
  6688     025B  00BB               	movwf	??_ModbusSlaveF04
  6689     025C  01BC               	clrf	??_ModbusSlaveF04+1
  6690     025D  083B               	movf	??_ModbusSlaveF04,w
  6691     025E  00BC               	movwf	??_ModbusSlaveF04+1
  6692     025F  01BB               	clrf	??_ModbusSlaveF04
  6693     0260  30D4               	movlw	212
  6694     0261  0086               	movwf	6
  6695     0262  3020               	movlw	32
  6696     0263  0087               	movwf	7
  6697     0264  3147               	addfsr 1,7
  6698     0265  083B               	movf	??_ModbusSlaveF04,w
  6699     0266  0401               	iorwf	1,w
  6700     0267  00C6               	movwf	ModbusSlaveF04@u8StartAdd
  6701     0268  083C               	movf	??_ModbusSlaveF04+1,w
  6702     0269  00C7               	movwf	ModbusSlaveF04@u8StartAdd+1
  6703                           
  6704                           ;Mobbus_Slave.c: 39:     uint8_t u8regsno = (SES_Modbus.au8Buffer[ NB_LO ] & 0xff) | ((S
      +                          ES_Modbus.au8Buffer[ NB_HI ] & 0xff) << 8);
  6705     026A  30D4               	movlw	212
  6706     026B  0086               	movwf	6
  6707     026C  3020               	movlw	32
  6708     026D  0087               	movwf	7
  6709     026E  3149               	addfsr 1,9
  6710     026F  0801               	movf	1,w
  6711     0270  00C8               	movwf	ModbusSlaveF04@u8regsno
  6712     0271                     l4075:
  6713                           
  6714                           ;Mobbus_Slave.c: 40:     uint8_t u8CopyBufferSize;;Mobbus_Slave.c: 41:     uint16_t i;;M
      +                          obbus_Slave.c: 43:     SES_Modbus.au8Buffer[ 2 ] = u8regsno * 2;
  6715     0271  3548               	lslf	ModbusSlaveF04@u8regsno,w
  6716     0272  00BB               	movwf	??_ModbusSlaveF04
  6717     0273  30DA               	movlw	218
  6718     0274  0086               	movwf	6
  6719     0275  3020               	movlw	32
  6720     0276  0087               	movwf	7
  6721     0277  083B               	movf	??_ModbusSlaveF04,w
  6722     0278  0081               	movwf	1
  6723     0279                     l4077:
  6724                           
  6725                           ;Mobbus_Slave.c: 44:     SES_Modbus.u8BufferSize = 3;
  6726     0279  30D2               	movlw	210
  6727     027A  0086               	movwf	6
  6728     027B  3021               	movlw	33
  6729     027C  0087               	movwf	7
  6730     027D  3003               	movlw	3
  6731     027E  0081               	movwf	1
  6732     027F                     l4079:
  6733                           
  6734                           ;Mobbus_Slave.c: 46:     for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++) {
  6735     027F  0847               	movf	ModbusSlaveF04@u8StartAdd+1,w
  6736     0280  00CA               	movwf	ModbusSlaveF04@i+1
  6737     0281  0846               	movf	ModbusSlaveF04@u8StartAdd,w
  6738     0282  00C9               	movwf	ModbusSlaveF04@i
  6739     0283  2AE6               	goto	l4085
  6740     0284                     l4081:
  6741                           
  6742                           ;Mobbus_Slave.c: 47:         SES_Modbus.au8Buffer[SES_Modbus.u8BufferSize ] = ((uint8_t)
      +                           ((reg[i]) >> 8));
  6743     0284  084A               	movf	ModbusSlaveF04@i+1,w
  6744     0285  00BC               	movwf	??_ModbusSlaveF04+1
  6745     0286  0849               	movf	ModbusSlaveF04@i,w
  6746     0287  00BB               	movwf	??_ModbusSlaveF04
  6747     0288  35BB               	lslf	??_ModbusSlaveF04,f
  6748     0289  0DBC               	rlf	??_ModbusSlaveF04+1,f
  6749     028A  083B               	movf	??_ModbusSlaveF04,w
  6750     028B  0738               	addwf	ModbusSlaveF04@reg,w
  6751     028C  0086               	movwf	6
  6752     028D  083C               	movf	??_ModbusSlaveF04+1,w
  6753     028E  3D39               	addwfc	ModbusSlaveF04@reg+1,w
  6754     028F  0087               	movwf	7
  6755     0290  3F40               	moviw [0]fsr1
  6756     0291  00BD               	movwf	??_ModbusSlaveF04+2
  6757     0292  3F41               	moviw [1]fsr1
  6758     0293  00BE               	movwf	??_ModbusSlaveF04+3
  6759     0294  083E               	movf	??_ModbusSlaveF04+3,w
  6760     0295  00BF               	movwf	??_ModbusSlaveF04+4
  6761     0296  30D2               	movlw	210
  6762     0297  0086               	movwf	6
  6763     0298  3021               	movlw	33
  6764     0299  0087               	movwf	7
  6765     029A  0801               	movf	1,w
  6766     029B  00C0               	movwf	??_ModbusSlaveF04+5
  6767     029C  01C1               	clrf	??_ModbusSlaveF04+6
  6768     029D  30D8               	movlw	216
  6769     029E  00C2               	movwf	??_ModbusSlaveF04+7
  6770     029F  3020               	movlw	32
  6771     02A0  00C3               	movwf	??_ModbusSlaveF04+8
  6772     02A1  0840               	movf	??_ModbusSlaveF04+5,w
  6773     02A2  0742               	addwf	??_ModbusSlaveF04+7,w
  6774     02A3  00C4               	movwf	??_ModbusSlaveF04+9
  6775     02A4  0841               	movf	??_ModbusSlaveF04+6,w
  6776     02A5  3D43               	addwfc	??_ModbusSlaveF04+8,w
  6777     02A6  00C5               	movwf	??_ModbusSlaveF04+10
  6778     02A7  0844               	movf	??_ModbusSlaveF04+9,w
  6779     02A8  0086               	movwf	6
  6780     02A9  0845               	movf	??_ModbusSlaveF04+10,w
  6781     02AA  0087               	movwf	7
  6782     02AB  083F               	movf	??_ModbusSlaveF04+4,w
  6783     02AC  0081               	movwf	1
  6784                           
  6785                           ;Mobbus_Slave.c: 48:         SES_Modbus.u8BufferSize++;
  6786     02AD  3001               	movlw	1
  6787     02AE  00BB               	movwf	??_ModbusSlaveF04
  6788     02AF  30D2               	movlw	210
  6789     02B0  0086               	movwf	6
  6790     02B1  3021               	movlw	33
  6791     02B2  0087               	movwf	7
  6792     02B3  083B               	movf	??_ModbusSlaveF04,w
  6793     02B4  0781               	addwf	1,f
  6794                           
  6795                           ;Mobbus_Slave.c: 49:         SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = ((uint8_t
      +                          ) ((reg[i]) & 0xff));
  6796     02B5  084A               	movf	ModbusSlaveF04@i+1,w
  6797     02B6  00BC               	movwf	??_ModbusSlaveF04+1
  6798     02B7  0849               	movf	ModbusSlaveF04@i,w
  6799     02B8  00BB               	movwf	??_ModbusSlaveF04
  6800     02B9  35BB               	lslf	??_ModbusSlaveF04,f
  6801     02BA  0DBC               	rlf	??_ModbusSlaveF04+1,f
  6802     02BB  083B               	movf	??_ModbusSlaveF04,w
  6803     02BC  0738               	addwf	ModbusSlaveF04@reg,w
  6804     02BD  0086               	movwf	6
  6805     02BE  083C               	movf	??_ModbusSlaveF04+1,w
  6806     02BF  3D39               	addwfc	ModbusSlaveF04@reg+1,w
  6807     02C0  0087               	movwf	7
  6808     02C1  0801               	movf	1,w
  6809     02C2  00BD               	movwf	??_ModbusSlaveF04+2
  6810     02C3  30D2               	movlw	210
  6811     02C4  0086               	movwf	6
  6812     02C5  3021               	movlw	33
  6813     02C6  0087               	movwf	7
  6814     02C7  0801               	movf	1,w
  6815     02C8  00BE               	movwf	??_ModbusSlaveF04+3
  6816     02C9  01BF               	clrf	??_ModbusSlaveF04+4
  6817     02CA  30D8               	movlw	216
  6818     02CB  00C0               	movwf	??_ModbusSlaveF04+5
  6819     02CC  3020               	movlw	32
  6820     02CD  00C1               	movwf	??_ModbusSlaveF04+6
  6821     02CE  083E               	movf	??_ModbusSlaveF04+3,w
  6822     02CF  0740               	addwf	??_ModbusSlaveF04+5,w
  6823     02D0  00C2               	movwf	??_ModbusSlaveF04+7
  6824     02D1  083F               	movf	??_ModbusSlaveF04+4,w
  6825     02D2  3D41               	addwfc	??_ModbusSlaveF04+6,w
  6826     02D3  00C3               	movwf	??_ModbusSlaveF04+8
  6827     02D4  0842               	movf	??_ModbusSlaveF04+7,w
  6828     02D5  0086               	movwf	6
  6829     02D6  0843               	movf	??_ModbusSlaveF04+8,w
  6830     02D7  0087               	movwf	7
  6831     02D8  083D               	movf	??_ModbusSlaveF04+2,w
  6832     02D9  0081               	movwf	1
  6833                           
  6834                           ;Mobbus_Slave.c: 50:         SES_Modbus.u8BufferSize++;
  6835     02DA  3001               	movlw	1
  6836     02DB  00BB               	movwf	??_ModbusSlaveF04
  6837     02DC  30D2               	movlw	210
  6838     02DD  0086               	movwf	6
  6839     02DE  3021               	movlw	33
  6840     02DF  0087               	movwf	7
  6841     02E0  083B               	movf	??_ModbusSlaveF04,w
  6842     02E1  0781               	addwf	1,f
  6843     02E2                     l4083:
  6844                           
  6845                           ;Mobbus_Slave.c: 51:     }
  6846     02E2  3001               	movlw	1
  6847     02E3  07C9               	addwf	ModbusSlaveF04@i,f
  6848     02E4  3000               	movlw	0
  6849     02E5  3DCA               	addwfc	ModbusSlaveF04@i+1,f
  6850     02E6                     l4085:
  6851     02E6  0848               	movf	ModbusSlaveF04@u8regsno,w
  6852     02E7  0746               	addwf	ModbusSlaveF04@u8StartAdd,w
  6853     02E8  00BB               	movwf	??_ModbusSlaveF04
  6854     02E9  0847               	movf	ModbusSlaveF04@u8StartAdd+1,w
  6855     02EA  1803               	skipnc
  6856     02EB  0A47               	incf	ModbusSlaveF04@u8StartAdd+1,w
  6857     02EC  00BC               	movwf	??_ModbusSlaveF04+1
  6858     02ED  083C               	movf	??_ModbusSlaveF04+1,w
  6859     02EE  024A               	subwf	ModbusSlaveF04@i+1,w
  6860     02EF  1D03               	skipz
  6861     02F0  2AF3               	goto	u1855
  6862     02F1  083B               	movf	??_ModbusSlaveF04,w
  6863     02F2  0249               	subwf	ModbusSlaveF04@i,w
  6864     02F3                     u1855:
  6865     02F3  1C03               	skipc
  6866     02F4  2AF6               	goto	u1851
  6867     02F5  2AF7               	goto	u1850
  6868     02F6                     u1851:
  6869     02F6  2A84               	goto	l4081
  6870     02F7                     u1850:
  6871     02F7                     l4087:
  6872     02F7                     l4089:
  6873                           
  6874                           ;Mobbus_Slave.c: 53:     Modbus_sendTxBuff();
  6875     02F7  3180  20A2  3182   	fcall	_Modbus_sendTxBuff
  6876     02FA                     l908:
  6877     02FA  0008               	return
  6878     02FB                     __end_of_ModbusSlaveF04:
  6879                           
  6880                           	psect	text40
  6881     00A2                     __ptext40:	
  6882 ;; *************** function _Modbus_sendTxBuff *****************
  6883 ;; Defined at:
  6884 ;;		line 163 in file "Mobbus_Slave.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;		None
  6887 ;; Auto vars:     Size  Location     Type
  6888 ;;  u32overTimec    4   20[BANK0 ] volatile unsigned long 
  6889 ;;  index           2   18[BANK0 ] int 
  6890 ;;  u16crc          2   16[BANK0 ] unsigned short 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      void 
  6893 ;; Registers used:
  6894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6900 ;;      Params:         0       0       0       0       0       0       0       0
  6901 ;;      Locals:         0       8       0       0       0       0       0       0
  6902 ;;      Temps:          0       7       0       0       0       0       0       0
  6903 ;;      Totals:         0      15       0       0       0       0       0       0
  6904 ;;Total ram usage:       15 bytes
  6905 ;; Hardware stack levels used: 1
  6906 ;; Hardware stack levels required when called: 5
  6907 ;; This function calls:
  6908 ;;		_EUSART_Write
  6909 ;;		_EUSART_is_tx_done
  6910 ;;		_Get_millis
  6911 ;;		_Modbus_calcCRC
  6912 ;; This function is called by:
  6913 ;;		_ModbusSlaveF04
  6914 ;;		_ModbusRTU_Slave_Poll
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918     00A2                     _Modbus_sendTxBuff:	
  6919                           ;psect for function _Modbus_sendTxBuff
  6920                           
  6921     00A2                     l3967:	
  6922                           ;incstack = 0
  6923                           ; Regs used in _Modbus_sendTxBuff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6924                           
  6925                           
  6926                           ;Mobbus_Slave.c: 164:     uint16_t u16crc = Modbus_calcCRC(SES_Modbus.u8BufferSize);
  6927     00A2  30D2               	movlw	210
  6928     00A3  0086               	movwf	6
  6929     00A4  3021               	movlw	33
  6930     00A5  0087               	movwf	7
  6931     00A6  0801               	movf	1,w
  6932     00A7  3183  2380  3180   	fcall	_Modbus_calcCRC
  6933     00AA  0873               	movf	?_Modbus_calcCRC+1,w
  6934     00AB  0020               	movlb	0	; select bank0
  6935     00AC  00B1               	movwf	Modbus_sendTxBuff@u16crc+1
  6936     00AD  0872               	movf	?_Modbus_calcCRC,w
  6937     00AE  00B0               	movwf	Modbus_sendTxBuff@u16crc
  6938     00AF                     l3969:
  6939                           
  6940                           ;Mobbus_Slave.c: 165:     SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = u16crc >> 8;
  6941     00AF  0831               	movf	Modbus_sendTxBuff@u16crc+1,w
  6942     00B0  00A9               	movwf	??_Modbus_sendTxBuff
  6943     00B1  30D2               	movlw	210
  6944     00B2  0086               	movwf	6
  6945     00B3  3021               	movlw	33
  6946     00B4  0087               	movwf	7
  6947     00B5  0801               	movf	1,w
  6948     00B6  00AA               	movwf	??_Modbus_sendTxBuff+1
  6949     00B7  01AB               	clrf	??_Modbus_sendTxBuff+2
  6950     00B8  30D8               	movlw	216
  6951     00B9  00AC               	movwf	??_Modbus_sendTxBuff+3
  6952     00BA  3020               	movlw	32
  6953     00BB  00AD               	movwf	??_Modbus_sendTxBuff+4
  6954     00BC  082A               	movf	??_Modbus_sendTxBuff+1,w
  6955     00BD  072C               	addwf	??_Modbus_sendTxBuff+3,w
  6956     00BE  00AE               	movwf	??_Modbus_sendTxBuff+5
  6957     00BF  082B               	movf	??_Modbus_sendTxBuff+2,w
  6958     00C0  3D2D               	addwfc	??_Modbus_sendTxBuff+4,w
  6959     00C1  00AF               	movwf	??_Modbus_sendTxBuff+6
  6960     00C2  082E               	movf	??_Modbus_sendTxBuff+5,w
  6961     00C3  0086               	movwf	6
  6962     00C4  082F               	movf	??_Modbus_sendTxBuff+6,w
  6963     00C5  0087               	movwf	7
  6964     00C6  0829               	movf	??_Modbus_sendTxBuff,w
  6965     00C7  0081               	movwf	1
  6966     00C8                     l3971:
  6967                           
  6968                           ;Mobbus_Slave.c: 166:     SES_Modbus.u8BufferSize++;
  6969     00C8  3001               	movlw	1
  6970     00C9  00A9               	movwf	??_Modbus_sendTxBuff
  6971     00CA  30D2               	movlw	210
  6972     00CB  0086               	movwf	6
  6973     00CC  3021               	movlw	33
  6974     00CD  0087               	movwf	7
  6975     00CE  0829               	movf	??_Modbus_sendTxBuff,w
  6976     00CF  0781               	addwf	1,f
  6977     00D0                     l3973:
  6978                           
  6979                           ;Mobbus_Slave.c: 167:     SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = u16crc & 0x0
      +                          0ff;
  6980     00D0  30D2               	movlw	210
  6981     00D1  0086               	movwf	6
  6982     00D2  3021               	movlw	33
  6983     00D3  0087               	movwf	7
  6984     00D4  0801               	movf	1,w
  6985     00D5  00A9               	movwf	??_Modbus_sendTxBuff
  6986     00D6  01AA               	clrf	??_Modbus_sendTxBuff+1
  6987     00D7  30D8               	movlw	216
  6988     00D8  00AB               	movwf	??_Modbus_sendTxBuff+2
  6989     00D9  3020               	movlw	32
  6990     00DA  00AC               	movwf	??_Modbus_sendTxBuff+3
  6991     00DB  0829               	movf	??_Modbus_sendTxBuff,w
  6992     00DC  072B               	addwf	??_Modbus_sendTxBuff+2,w
  6993     00DD  00AD               	movwf	??_Modbus_sendTxBuff+4
  6994     00DE  082A               	movf	??_Modbus_sendTxBuff+1,w
  6995     00DF  3D2C               	addwfc	??_Modbus_sendTxBuff+3,w
  6996     00E0  00AE               	movwf	??_Modbus_sendTxBuff+5
  6997     00E1  082D               	movf	??_Modbus_sendTxBuff+4,w
  6998     00E2  0086               	movwf	6
  6999     00E3  082E               	movf	??_Modbus_sendTxBuff+5,w
  7000     00E4  0087               	movwf	7
  7001     00E5  0830               	movf	Modbus_sendTxBuff@u16crc,w
  7002     00E6  0081               	movwf	1
  7003     00E7                     l3975:
  7004                           
  7005                           ;Mobbus_Slave.c: 168:     SES_Modbus.u8BufferSize++;
  7006     00E7  3001               	movlw	1
  7007     00E8  00A9               	movwf	??_Modbus_sendTxBuff
  7008     00E9  30D2               	movlw	210
  7009     00EA  0086               	movwf	6
  7010     00EB  3021               	movlw	33
  7011     00EC  0087               	movwf	7
  7012     00ED  0829               	movf	??_Modbus_sendTxBuff,w
  7013     00EE  0781               	addwf	1,f
  7014     00EF                     l3977:
  7015                           
  7016                           ;Mobbus_Slave.c: 171:     if (SES_Modbus.u8txenpin > 1) {
  7017     00EF  30D4               	movlw	212
  7018     00F0  0086               	movwf	6
  7019     00F1  3020               	movlw	32
  7020     00F2  0087               	movwf	7
  7021     00F3  3141               	addfsr 1,1
  7022     00F4  3002               	movlw	2
  7023     00F5  0201               	subwf	1,w
  7024     00F6  1C03               	skipc
  7025     00F7  28F9               	goto	u1771
  7026     00F8  28FA               	goto	u1770
  7027     00F9                     u1771:
  7028     00F9  28FC               	goto	l3979
  7029     00FA                     u1770:
  7030     00FA                     l942:	
  7031                           ;Mobbus_Slave.c: 172:         do { LATCbits.LATC5 = 1; } while(0);
  7032                           
  7033     00FA  0022               	movlb	2	; select bank2
  7034     00FB  168E               	bsf	14,5	;volatile
  7035     00FC                     l3979:
  7036                           
  7037                           ;Mobbus_Slave.c: 178:     for (int index = 0; index < SES_Modbus.u8BufferSize; index++) 
      +                          {
  7038     00FC  0020               	movlb	0	; select bank0
  7039     00FD  01B2               	clrf	Modbus_sendTxBuff@index
  7040     00FE  01B3               	clrf	Modbus_sendTxBuff@index+1
  7041     00FF  2914               	goto	l3985
  7042     0100                     l3981:
  7043                           
  7044                           ;Mobbus_Slave.c: 179:         EUSART_Write(SES_Modbus.au8Buffer[index]);
  7045     0100  30D8               	movlw	216
  7046     0101  0020               	movlb	0	; select bank0
  7047     0102  00A9               	movwf	??_Modbus_sendTxBuff
  7048     0103  3020               	movlw	32
  7049     0104  00AA               	movwf	??_Modbus_sendTxBuff+1
  7050     0105  0832               	movf	Modbus_sendTxBuff@index,w
  7051     0106  0729               	addwf	??_Modbus_sendTxBuff,w
  7052     0107  0086               	movwf	6
  7053     0108  0833               	movf	Modbus_sendTxBuff@index+1,w
  7054     0109  3D2A               	addwfc	??_Modbus_sendTxBuff+1,w
  7055     010A  0087               	movwf	7
  7056     010B  0801               	movf	1,w
  7057     010C  3186  261F  3180   	fcall	_EUSART_Write
  7058     010F                     l3983:
  7059                           
  7060                           ;Mobbus_Slave.c: 180:     }
  7061     010F  3001               	movlw	1
  7062     0110  0020               	movlb	0	; select bank0
  7063     0111  07B2               	addwf	Modbus_sendTxBuff@index,f
  7064     0112  3000               	movlw	0
  7065     0113  3DB3               	addwfc	Modbus_sendTxBuff@index+1,f
  7066     0114                     l3985:
  7067     0114  30D2               	movlw	210
  7068     0115  0086               	movwf	6
  7069     0116  3021               	movlw	33
  7070     0117  0087               	movwf	7
  7071     0118  0833               	movf	Modbus_sendTxBuff@index+1,w
  7072     0119  3A80               	xorlw	128
  7073     011A  00A9               	movwf	??_Modbus_sendTxBuff
  7074     011B  3080               	movlw	128
  7075     011C  0229               	subwf	??_Modbus_sendTxBuff,w
  7076     011D  1D03               	skipz
  7077     011E  2921               	goto	u1785
  7078     011F  0801               	movf	1,w
  7079     0120  0232               	subwf	Modbus_sendTxBuff@index,w
  7080     0121                     u1785:
  7081     0121  1C03               	skipc
  7082     0122  2924               	goto	u1781
  7083     0123  2925               	goto	u1780
  7084     0124                     u1781:
  7085     0124  2900               	goto	l3981
  7086     0125                     u1780:
  7087     0125                     l3987:
  7088                           
  7089                           ;Mobbus_Slave.c: 182:     if (SES_Modbus.u8txenpin > 1) {
  7090     0125  30D4               	movlw	212
  7091     0126  0086               	movwf	6
  7092     0127  3020               	movlw	32
  7093     0128  0087               	movwf	7
  7094     0129  3141               	addfsr 1,1
  7095     012A  3002               	movlw	2
  7096     012B  0201               	subwf	1,w
  7097     012C  1C03               	skipc
  7098     012D  292F               	goto	u1791
  7099     012E  2930               	goto	u1790
  7100     012F                     u1791:
  7101     012F  2966               	goto	l3997
  7102     0130                     u1790:
  7103     0130                     l3991:
  7104     0130  318F  2708  3180   	fcall	_EUSART_is_tx_done
  7105     0133  3A00               	xorlw	0
  7106     0134  1903               	skipnz
  7107     0135  2937               	goto	u1801
  7108     0136  2938               	goto	u1800
  7109     0137                     u1801:
  7110     0137  2930               	goto	l3991
  7111     0138                     u1800:
  7112     0138                     l3993:
  7113                           
  7114                           ;Mobbus_Slave.c: 190:         volatile uint32_t u32overTimecountDown = SES_Modbus.u32ove
      +                          rTime;
  7115     0138  30E6               	movlw	230
  7116     0139  0086               	movwf	6
  7117     013A  3021               	movlw	33
  7118     013B  0087               	movwf	7
  7119     013C  3F40               	moviw [0]fsr1
  7120     013D  0020               	movlb	0	; select bank0
  7121     013E  00B4               	movwf	Modbus_sendTxBuff@u32overTimecountDown	;volatile
  7122     013F  3F41               	moviw [1]fsr1
  7123     0140  00B5               	movwf	Modbus_sendTxBuff@u32overTimecountDown+1	;volatile
  7124     0141  3F42               	moviw [2]fsr1
  7125     0142  00B6               	movwf	Modbus_sendTxBuff@u32overTimecountDown+2	;volatile
  7126     0143  3F43               	moviw [3]fsr1
  7127     0144  00B7               	movwf	Modbus_sendTxBuff@u32overTimecountDown+3	;volatile
  7128     0145                     l3995:	
  7129                           ;Mobbus_Slave.c: 192:         while (u32overTimecountDown-- > 0);
  7130                           
  7131     0145  3001               	movlw	1
  7132     0146  0020               	movlb	0	; select bank0
  7133     0147  00A9               	movwf	??_Modbus_sendTxBuff
  7134     0148  3000               	movlw	0
  7135     0149  00AA               	movwf	??_Modbus_sendTxBuff+1
  7136     014A  3000               	movlw	0
  7137     014B  00AB               	movwf	??_Modbus_sendTxBuff+2
  7138     014C  3000               	movlw	0
  7139     014D  00AC               	movwf	??_Modbus_sendTxBuff+3
  7140     014E  0829               	movf	??_Modbus_sendTxBuff,w
  7141     014F  02B4               	subwf	Modbus_sendTxBuff@u32overTimecountDown,f	;volatile
  7142     0150  082A               	movf	??_Modbus_sendTxBuff+1,w
  7143     0151  3BB5               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+1,f	;volatile
  7144     0152  082B               	movf	??_Modbus_sendTxBuff+2,w
  7145     0153  3BB6               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+2,f	;volatile
  7146     0154  082C               	movf	??_Modbus_sendTxBuff+3,w
  7147     0155  3BB7               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+3,f	;volatile
  7148     0156  0A34               	incf	Modbus_sendTxBuff@u32overTimecountDown,w	;volatile
  7149     0157  1D03               	skipz
  7150     0158  2963               	goto	u1811
  7151     0159  0A35               	incf	Modbus_sendTxBuff@u32overTimecountDown+1,w	;volatile
  7152     015A  1D03               	skipz
  7153     015B  2963               	goto	u1811
  7154     015C  0A36               	incf	Modbus_sendTxBuff@u32overTimecountDown+2,w	;volatile
  7155     015D  1D03               	skipz
  7156     015E  2963               	goto	u1811
  7157     015F  0A37               	incf	Modbus_sendTxBuff@u32overTimecountDown+3,w	;volatile
  7158     0160  1D03               	btfss	3,2
  7159     0161  2963               	goto	u1811
  7160     0162  2964               	goto	u1810
  7161     0163                     u1811:
  7162     0163  2945               	goto	l3995
  7163     0164                     u1810:
  7164     0164                     l954:	
  7165                           ;Mobbus_Slave.c: 193:         do { LATCbits.LATC5 = 0; } while(0);
  7166                           
  7167     0164  0022               	movlb	2	; select bank2
  7168     0165  128E               	bcf	14,5	;volatile
  7169     0166                     l3997:
  7170                           
  7171                           ;Mobbus_Slave.c: 196:     SES_Modbus.u8BufferSize = 0;
  7172     0166  30D2               	movlw	210
  7173     0167  0086               	movwf	6
  7174     0168  3021               	movlw	33
  7175     0169  0087               	movwf	7
  7176     016A  0181               	clrf	1
  7177     016B                     l3999:
  7178                           
  7179                           ;Mobbus_Slave.c: 199:     SES_Modbus.u32timeOut = Get_millis();
  7180     016B  318F  2767  3180   	fcall	_Get_millis
  7181     016E  30E2               	movlw	226
  7182     016F  0086               	movwf	6
  7183     0170  3021               	movlw	33
  7184     0171  0087               	movwf	7
  7185     0172  0872               	movf	?_Get_millis,w
  7186     0173  3FC0               	movwi [0]fsr1
  7187     0174  0873               	movf	?_Get_millis+1,w
  7188     0175  3FC1               	movwi [1]fsr1
  7189     0176  0874               	movf	?_Get_millis+2,w
  7190     0177  3FC2               	movwi [2]fsr1
  7191     0178  0875               	movf	?_Get_millis+3,w
  7192     0179  3FC3               	movwi [3]fsr1
  7193     017A                     l4001:
  7194                           
  7195                           ;Mobbus_Slave.c: 202:     SES_Modbus.u16OutCnt++;
  7196     017A  30D8               	movlw	216
  7197     017B  0086               	movwf	6
  7198     017C  3021               	movlw	33
  7199     017D  0087               	movwf	7
  7200     017E  3001               	movlw	1
  7201     017F  0781               	addwf	1,f
  7202     0180  3141               	addfsr 1,1
  7203     0181  1803               	skipnc
  7204     0182  0A81               	incf	1,f
  7205     0183                     l956:
  7206     0183  0008               	return
  7207     0184                     __end_of_Modbus_sendTxBuff:
  7208                           
  7209                           	psect	text41
  7210     0380                     __ptext41:	
  7211 ;; *************** function _Modbus_calcCRC *****************
  7212 ;; Defined at:
  7213 ;;		line 205 in file "Mobbus_Slave.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  len             1    wreg     unsigned char 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  len             1    0[BANK0 ] unsigned char 
  7218 ;;  j               1    6[BANK0 ] unsigned char 
  7219 ;;  temp            2    7[BANK0 ] unsigned int 
  7220 ;;  flag            2    3[BANK0 ] unsigned int 
  7221 ;;  temp2           2    1[BANK0 ] unsigned int 
  7222 ;;  i               1    5[BANK0 ] unsigned char 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  2    2[COMMON] unsigned short 
  7225 ;; Registers used:
  7226 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7232 ;;      Params:         2       0       0       0       0       0       0       0
  7233 ;;      Locals:         0       9       0       0       0       0       0       0
  7234 ;;      Temps:          4       0       0       0       0       0       0       0
  7235 ;;      Totals:         6       9       0       0       0       0       0       0
  7236 ;;Total ram usage:       15 bytes
  7237 ;; Hardware stack levels used: 1
  7238 ;; Hardware stack levels required when called: 4
  7239 ;; This function calls:
  7240 ;;		Nothing
  7241 ;; This function is called by:
  7242 ;;		_validateRequest
  7243 ;;		_Modbus_sendTxBuff
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247     0380                     _Modbus_calcCRC:	
  7248                           ;psect for function _Modbus_calcCRC
  7249                           
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in _Modbus_calcCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
  7253                           ;Modbus_calcCRC@len stored from wreg
  7254     0380  0020               	movlb	0	; select bank0
  7255     0381  00A0               	movwf	Modbus_calcCRC@len
  7256     0382                     l3861:
  7257                           
  7258                           ;Mobbus_Slave.c: 206:     unsigned int temp, temp2, flag;;Mobbus_Slave.c: 207:     temp 
      +                          = 0xFFFF;
  7259     0382  30FF               	movlw	255
  7260     0383  00A7               	movwf	Modbus_calcCRC@temp
  7261     0384  30FF               	movlw	255
  7262     0385  00A8               	movwf	Modbus_calcCRC@temp+1
  7263     0386                     l3863:
  7264                           
  7265                           ;Mobbus_Slave.c: 208:     unsigned char i = 0;
  7266     0386  01A5               	clrf	Modbus_calcCRC@i
  7267                           
  7268                           ;Mobbus_Slave.c: 209:     for (i = 0; i < len; i++) {
  7269     0387  01A5               	clrf	Modbus_calcCRC@i
  7270     0388  2BC0               	goto	l3889
  7271     0389                     l3865:
  7272                           
  7273                           ;Mobbus_Slave.c: 210:         temp = temp ^ SES_Modbus.au8Buffer[i];
  7274     0389  0825               	movf	Modbus_calcCRC@i,w
  7275     038A  00F4               	movwf	??_Modbus_calcCRC
  7276     038B  01F5               	clrf	??_Modbus_calcCRC+1
  7277     038C  30D8               	movlw	216
  7278     038D  00F6               	movwf	??_Modbus_calcCRC+2
  7279     038E  3020               	movlw	32
  7280     038F  00F7               	movwf	??_Modbus_calcCRC+3
  7281     0390  0874               	movf	??_Modbus_calcCRC,w
  7282     0391  0776               	addwf	??_Modbus_calcCRC+2,w
  7283     0392  0086               	movwf	6
  7284     0393  0875               	movf	??_Modbus_calcCRC+1,w
  7285     0394  3D77               	addwfc	??_Modbus_calcCRC+3,w
  7286     0395  0087               	movwf	7
  7287     0396  0827               	movf	Modbus_calcCRC@temp,w
  7288     0397  0601               	xorwf	1,w
  7289     0398  00A7               	movwf	Modbus_calcCRC@temp
  7290     0399  0828               	movf	Modbus_calcCRC@temp+1,w
  7291     039A  00A8               	movwf	Modbus_calcCRC@temp+1
  7292     039B                     l3867:
  7293     039B                     l3869:
  7294                           
  7295                           ;Mobbus_Slave.c: 212:         for (j = 1; j <= 8; j++) {
  7296     039B  01A6               	clrf	Modbus_calcCRC@j
  7297     039C  0AA6               	incf	Modbus_calcCRC@j,f
  7298     039D                     l3875:
  7299                           
  7300                           ;Mobbus_Slave.c: 213:             flag = temp & 0x0001;
  7301     039D  3001               	movlw	1
  7302     039E  0527               	andwf	Modbus_calcCRC@temp,w
  7303     039F  00A3               	movwf	Modbus_calcCRC@flag
  7304     03A0  3000               	movlw	0
  7305     03A1  0528               	andwf	Modbus_calcCRC@temp+1,w
  7306     03A2  00A4               	movwf	Modbus_calcCRC@flag+1
  7307     03A3                     l3877:
  7308                           
  7309                           ;Mobbus_Slave.c: 214:             temp >>= 1;
  7310     03A3  3001               	movlw	1
  7311     03A4                     u1675:
  7312     03A4  36A8               	lsrf	Modbus_calcCRC@temp+1,f
  7313     03A5  0CA7               	rrf	Modbus_calcCRC@temp,f
  7314     03A6  0B89               	decfsz	9,f
  7315     03A7  2BA4               	goto	u1675
  7316     03A8                     l3879:
  7317                           
  7318                           ;Mobbus_Slave.c: 215:             if (flag)
  7319     03A8  0823               	movf	Modbus_calcCRC@flag,w
  7320     03A9  0424               	iorwf	Modbus_calcCRC@flag+1,w
  7321     03AA  1903               	btfsc	3,2
  7322     03AB  2BAD               	goto	u1681
  7323     03AC  2BAE               	goto	u1680
  7324     03AD                     u1681:
  7325     03AD  2BB2               	goto	l3883
  7326     03AE                     u1680:
  7327     03AE                     l3881:
  7328                           
  7329                           ;Mobbus_Slave.c: 216:                 temp ^= 0xA001;
  7330     03AE  3001               	movlw	1
  7331     03AF  06A7               	xorwf	Modbus_calcCRC@temp,f
  7332     03B0  30A0               	movlw	160
  7333     03B1  06A8               	xorwf	Modbus_calcCRC@temp+1,f
  7334     03B2                     l3883:
  7335                           
  7336                           ;Mobbus_Slave.c: 217:         }
  7337     03B2  3001               	movlw	1
  7338     03B3  00F4               	movwf	??_Modbus_calcCRC
  7339     03B4  0874               	movf	??_Modbus_calcCRC,w
  7340     03B5  07A6               	addwf	Modbus_calcCRC@j,f
  7341     03B6                     l3885:
  7342     03B6  3009               	movlw	9
  7343     03B7  0226               	subwf	Modbus_calcCRC@j,w
  7344     03B8  1C03               	skipc
  7345     03B9  2BBB               	goto	u1691
  7346     03BA  2BBC               	goto	u1690
  7347     03BB                     u1691:
  7348     03BB  2B9D               	goto	l3875
  7349     03BC                     u1690:
  7350     03BC                     l3887:
  7351                           
  7352                           ;Mobbus_Slave.c: 218:     }
  7353     03BC  3001               	movlw	1
  7354     03BD  00F4               	movwf	??_Modbus_calcCRC
  7355     03BE  0874               	movf	??_Modbus_calcCRC,w
  7356     03BF  07A5               	addwf	Modbus_calcCRC@i,f
  7357     03C0                     l3889:
  7358     03C0  0820               	movf	Modbus_calcCRC@len,w
  7359     03C1  0225               	subwf	Modbus_calcCRC@i,w
  7360     03C2  1C03               	skipc
  7361     03C3  2BC5               	goto	u1701
  7362     03C4  2BC6               	goto	u1700
  7363     03C5                     u1701:
  7364     03C5  2B89               	goto	l3865
  7365     03C6                     u1700:
  7366     03C6                     l3891:
  7367                           
  7368                           ;Mobbus_Slave.c: 220:     temp2 = temp >> 8;
  7369     03C6  0828               	movf	Modbus_calcCRC@temp+1,w
  7370     03C7  00F5               	movwf	??_Modbus_calcCRC+1
  7371     03C8  0827               	movf	Modbus_calcCRC@temp,w
  7372     03C9  00F4               	movwf	??_Modbus_calcCRC
  7373     03CA  0875               	movf	??_Modbus_calcCRC+1,w
  7374     03CB  00F4               	movwf	??_Modbus_calcCRC
  7375     03CC  01F5               	clrf	??_Modbus_calcCRC+1
  7376     03CD  0874               	movf	??_Modbus_calcCRC,w
  7377     03CE  00A1               	movwf	Modbus_calcCRC@temp2
  7378     03CF  0875               	movf	??_Modbus_calcCRC+1,w
  7379     03D0  00A2               	movwf	Modbus_calcCRC@temp2+1
  7380     03D1                     l3893:
  7381                           
  7382                           ;Mobbus_Slave.c: 221:     temp = (temp << 8) | temp2;
  7383     03D1  0827               	movf	Modbus_calcCRC@temp,w
  7384     03D2  00F5               	movwf	??_Modbus_calcCRC+1
  7385     03D3  01F4               	clrf	??_Modbus_calcCRC
  7386     03D4  0821               	movf	Modbus_calcCRC@temp2,w
  7387     03D5  0474               	iorwf	??_Modbus_calcCRC,w
  7388     03D6  00A7               	movwf	Modbus_calcCRC@temp
  7389     03D7  0822               	movf	Modbus_calcCRC@temp2+1,w
  7390     03D8  0475               	iorwf	??_Modbus_calcCRC+1,w
  7391     03D9  00A8               	movwf	Modbus_calcCRC@temp+1
  7392     03DA                     l3895:
  7393                           
  7394                           ;Mobbus_Slave.c: 225:     return temp;
  7395     03DA  0828               	movf	Modbus_calcCRC@temp+1,w
  7396     03DB  00F3               	movwf	?_Modbus_calcCRC+1
  7397     03DC  0827               	movf	Modbus_calcCRC@temp,w
  7398     03DD  00F2               	movwf	?_Modbus_calcCRC
  7399     03DE                     l965:
  7400     03DE  0008               	return
  7401     03DF                     __end_of_Modbus_calcCRC:
  7402                           
  7403                           	psect	text42
  7404     0F67                     __ptext42:	
  7405 ;; *************** function _Get_millis *****************
  7406 ;; Defined at:
  7407 ;;		line 15 in file "tick.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  4    2[COMMON] unsigned long 
  7414 ;; Registers used:
  7415 ;;		wreg
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7421 ;;      Params:         4       0       0       0       0       0       0       0
  7422 ;;      Locals:         0       0       0       0       0       0       0       0
  7423 ;;      Temps:          0       0       0       0       0       0       0       0
  7424 ;;      Totals:         4       0       0       0       0       0       0       0
  7425 ;;Total ram usage:        4 bytes
  7426 ;; Hardware stack levels used: 1
  7427 ;; Hardware stack levels required when called: 4
  7428 ;; This function calls:
  7429 ;;		Nothing
  7430 ;; This function is called by:
  7431 ;;		_ReadData
  7432 ;;		_Task_Sensor
  7433 ;;		_ModbusRTU_Slave_Poll
  7434 ;;		_Modbus_sendTxBuff
  7435 ;;		_delay_ms
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439     0F67                     _Get_millis:	
  7440                           ;psect for function _Get_millis
  7441                           
  7442     0F67                     l3857:	
  7443                           ;incstack = 0
  7444                           ; Regs used in _Get_millis: [wreg]
  7445                           
  7446                           
  7447                           ;tick.c: 16:     return device_time;
  7448     0F67  0020               	movlb	0	; select bank0
  7449     0F68  0858               	movf	_device_time+3,w	;volatile
  7450     0F69  00F5               	movwf	?_Get_millis+3
  7451     0F6A  0857               	movf	_device_time+2,w	;volatile
  7452     0F6B  00F4               	movwf	?_Get_millis+2
  7453     0F6C  0856               	movf	_device_time+1,w	;volatile
  7454     0F6D  00F3               	movwf	?_Get_millis+1
  7455     0F6E  0855               	movf	_device_time,w	;volatile
  7456     0F6F  00F2               	movwf	?_Get_millis
  7457     0F70                     l993:
  7458     0F70  0008               	return
  7459     0F71                     __end_of_Get_millis:
  7460                           
  7461                           	psect	text43
  7462     0F08                     __ptext43:	
  7463 ;; *************** function _EUSART_is_tx_done *****************
  7464 ;; Defined at:
  7465 ;;		line 142 in file "mcc_generated_files/eusart.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;		None
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      _Bool 
  7472 ;; Registers used:
  7473 ;;		wreg, status,2, status,0
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7479 ;;      Params:         0       0       0       0       0       0       0       0
  7480 ;;      Locals:         0       0       0       0       0       0       0       0
  7481 ;;      Temps:          0       0       0       0       0       0       0       0
  7482 ;;      Totals:         0       0       0       0       0       0       0       0
  7483 ;;Total ram usage:        0 bytes
  7484 ;; Hardware stack levels used: 1
  7485 ;; Hardware stack levels required when called: 4
  7486 ;; This function calls:
  7487 ;;		Nothing
  7488 ;; This function is called by:
  7489 ;;		_Modbus_sendTxBuff
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493     0F08                     _EUSART_is_tx_done:	
  7494                           ;psect for function _EUSART_is_tx_done
  7495                           
  7496     0F08                     l3835:	
  7497                           ;incstack = 0
  7498                           ; Regs used in _EUSART_is_tx_done: [wreg+status,2+status,0]
  7499                           
  7500                           
  7501                           ;mcc_generated_files/eusart.c: 144:     return TXSTAbits.TRMT;
  7502     0F08  0023               	movlb	3	; select bank3
  7503     0F09  0C1E               	rrf	30,w	;volatile
  7504     0F0A  3901               	andlw	1
  7505     0F0B                     l621:
  7506     0F0B  0008               	return
  7507     0F0C                     __end_of_EUSART_is_tx_done:
  7508                           
  7509                           	psect	text44
  7510     061F                     __ptext44:	
  7511 ;; *************** function _EUSART_Write *****************
  7512 ;; Defined at:
  7513 ;;		line 173 in file "mcc_generated_files/eusart.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  txData          1    wreg     unsigned char 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  txData          1    3[COMMON] unsigned char 
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      void 
  7520 ;; Registers used:
  7521 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7522 ;; Tracked objects:
  7523 ;;		On entry : 0/0
  7524 ;;		On exit  : 0/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7527 ;;      Params:         0       0       0       0       0       0       0       0
  7528 ;;      Locals:         1       0       0       0       0       0       0       0
  7529 ;;      Temps:          1       0       0       0       0       0       0       0
  7530 ;;      Totals:         2       0       0       0       0       0       0       0
  7531 ;;Total ram usage:        2 bytes
  7532 ;; Hardware stack levels used: 1
  7533 ;; Hardware stack levels required when called: 4
  7534 ;; This function calls:
  7535 ;;		Nothing
  7536 ;; This function is called by:
  7537 ;;		_Modbus_sendTxBuff
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541     061F                     _EUSART_Write:	
  7542                           ;psect for function _EUSART_Write
  7543                           
  7544                           
  7545                           ;incstack = 0
  7546                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  7547                           ;EUSART_Write@txData stored from wreg
  7548     061F  00F3               	movwf	EUSART_Write@txData
  7549     0620                     l3839:
  7550     0620                     l3841:	
  7551                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  7552                           
  7553                           
  7554                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  7555     0620  0020               	movlb	0	; select bank0
  7556     0621  0865               	movf	_eusartTxBufferRemaining,w	;volatile
  7557     0622  1903               	btfsc	3,2
  7558     0623  2E25               	goto	u1641
  7559     0624  2E26               	goto	u1640
  7560     0625                     u1641:
  7561     0625  2E20               	goto	l3841
  7562     0626                     u1640:
  7563     0626                     l636:
  7564                           
  7565                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  7566     0626  0021               	movlb	1	; select bank1
  7567     0627  1A11               	btfsc	17,4	;volatile
  7568     0628  2E2A               	goto	u1651
  7569     0629  2E2B               	goto	u1650
  7570     062A                     u1651:
  7571     062A  2E2F               	goto	l637
  7572     062B                     u1650:
  7573     062B                     l3843:
  7574                           
  7575                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  7576     062B  0873               	movf	EUSART_Write@txData,w
  7577     062C  0023               	movlb	3	; select bank3
  7578     062D  009A               	movwf	26	;volatile
  7579                           
  7580                           ;mcc_generated_files/eusart.c: 182:     }
  7581     062E  2E45               	goto	l3855
  7582     062F                     l637:	
  7583                           ;mcc_generated_files/eusart.c: 183:     else
  7584                           
  7585                           
  7586                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  7587     062F  1211               	bcf	17,4	;volatile
  7588     0630                     l3845:
  7589                           
  7590                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  7591     0630  0020               	movlb	0	; select bank0
  7592     0631  0867               	movf	_eusartTxHead,w
  7593     0632  3E30               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  7594     0633  0086               	movwf	6
  7595     0634  3001               	movlw	1	; select bank2/3
  7596     0635  0087               	movwf	7
  7597     0636  0873               	movf	EUSART_Write@txData,w
  7598     0637  0081               	movwf	1
  7599     0638                     l3847:
  7600     0638  3001               	movlw	1
  7601     0639  00F2               	movwf	??_EUSART_Write
  7602     063A  0872               	movf	??_EUSART_Write,w
  7603     063B  07E7               	addwf	_eusartTxHead,f	;volatile
  7604     063C                     l3849:
  7605                           
  7606                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  7607     063C  3010               	movlw	16
  7608     063D  0267               	subwf	_eusartTxHead,w	;volatile
  7609     063E  1C03               	skipc
  7610     063F  2E41               	goto	u1661
  7611     0640  2E42               	goto	u1660
  7612     0641                     u1661:
  7613     0641  2E43               	goto	l3853
  7614     0642                     u1660:
  7615     0642                     l3851:
  7616                           
  7617                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  7618     0642  01E7               	clrf	_eusartTxHead	;volatile
  7619     0643                     l3853:
  7620                           
  7621                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  7622     0643  3001               	movlw	1
  7623     0644  02E5               	subwf	_eusartTxBufferRemaining,f	;volatile
  7624     0645                     l3855:
  7625                           
  7626                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  7627     0645  0021               	movlb	1	; select bank1
  7628     0646  1611               	bsf	17,4	;volatile
  7629     0647                     l640:
  7630     0647  0008               	return
  7631     0648                     __end_of_EUSART_Write:
  7632                           
  7633                           	psect	text45
  7634     0517                     __ptext45:	
  7635 ;; *************** function _ModbusSlave_Init *****************
  7636 ;; Defined at:
  7637 ;;		line 228 in file "Mobbus_Slave.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;  _SW_Ad          1    wreg     char 
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;  _SW_Ad          1    2[COMMON] char 
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      void 
  7644 ;; Registers used:
  7645 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7651 ;;      Params:         0       0       0       0       0       0       0       0
  7652 ;;      Locals:         1       0       0       0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0       0
  7654 ;;      Totals:         1       0       0       0       0       0       0       0
  7655 ;;Total ram usage:        1 bytes
  7656 ;; Hardware stack levels used: 1
  7657 ;; Hardware stack levels required when called: 4
  7658 ;; This function calls:
  7659 ;;		Nothing
  7660 ;; This function is called by:
  7661 ;;		_Task_MB
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665     0517                     _ModbusSlave_Init:	
  7666                           ;psect for function _ModbusSlave_Init
  7667                           
  7668                           
  7669                           ;incstack = 0
  7670                           ; Regs used in _ModbusSlave_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  7671                           ;ModbusSlave_Init@_SW_Ad stored from wreg
  7672     0517  00F2               	movwf	ModbusSlave_Init@_SW_Ad
  7673     0518                     l3213:
  7674                           
  7675                           ;Mobbus_Slave.c: 229:     SES_Modbus.u8id = (uint8_t) _SW_Ad;
  7676     0518  30D4               	movlw	212
  7677     0519  0086               	movwf	6
  7678     051A  3020               	movlw	32
  7679     051B  0087               	movwf	7
  7680     051C  0872               	movf	ModbusSlave_Init@_SW_Ad,w
  7681     051D  3FC0               	movwi [0]fsr1
  7682                           
  7683                           ;Mobbus_Slave.c: 230:     SES_Modbus.u8txenpin = RS485;
  7684     051E  30D5               	movlw	213
  7685     051F  0086               	movwf	6
  7686     0520  3020               	movlw	32
  7687     0521  0087               	movwf	7
  7688     0522  3002               	movlw	2
  7689     0523  0081               	movwf	1
  7690     0524                     l3215:
  7691                           
  7692                           ;Mobbus_Slave.c: 231:     SES_Modbus.u16timeOut = 1000;
  7693     0524  30DC               	movlw	220
  7694     0525  0086               	movwf	6
  7695     0526  3021               	movlw	33
  7696     0527  0087               	movwf	7
  7697     0528  30E8               	movlw	232
  7698     0529  3FC0               	movwi [0]fsr1
  7699     052A  3003               	movlw	3
  7700     052B  3FC1               	movwi [1]fsr1
  7701     052C                     l3217:
  7702                           
  7703                           ;Mobbus_Slave.c: 232:     SES_Modbus.u32overTime = 0;
  7704     052C  30E6               	movlw	230
  7705     052D  0086               	movwf	6
  7706     052E  3021               	movlw	33
  7707     052F  0087               	movwf	7
  7708     0530  3000               	movlw	0
  7709     0531  3FC0               	movwi [0]fsr1
  7710     0532  3FC1               	movwi [1]fsr1
  7711     0533  3FC2               	movwi [2]fsr1
  7712     0534  3FC3               	movwi [3]fsr1
  7713     0535                     l3219:
  7714                           
  7715                           ;Mobbus_Slave.c: 236:     SES_Modbus.u8lastRec = SES_Modbus.u8BufferSize = 0;
  7716     0535  30D2               	movlw	210
  7717     0536  0086               	movwf	6
  7718     0537  3021               	movlw	33
  7719     0538  0087               	movwf	7
  7720     0539  0181               	clrf	1
  7721     053A  30D3               	movlw	211
  7722     053B  0086               	movwf	6
  7723     053C  3021               	movlw	33
  7724     053D  0087               	movwf	7
  7725     053E  0181               	clrf	1
  7726     053F                     l3221:
  7727                           
  7728                           ;Mobbus_Slave.c: 237:     SES_Modbus.u16InCnt = SES_Modbus.u16OutCnt = SES_Modbus.u16err
      +                          Cnt = 0;
  7729     053F  30DA               	movlw	218
  7730     0540  0086               	movwf	6
  7731     0541  3021               	movlw	33
  7732     0542  0087               	movwf	7
  7733     0543  3000               	movlw	0
  7734     0544  3FC0               	movwi [0]fsr1
  7735     0545  3FC1               	movwi [1]fsr1
  7736     0546  30D8               	movlw	216
  7737     0547  0086               	movwf	6
  7738     0548  3021               	movlw	33
  7739     0549  0087               	movwf	7
  7740     054A  3000               	movlw	0
  7741     054B  3FC0               	movwi [0]fsr1
  7742     054C  3FC1               	movwi [1]fsr1
  7743     054D  30D6               	movlw	214
  7744     054E  0086               	movwf	6
  7745     054F  3021               	movlw	33
  7746     0550  0087               	movwf	7
  7747     0551  3000               	movlw	0
  7748     0552  3FC0               	movwi [0]fsr1
  7749     0553  3FC1               	movwi [1]fsr1
  7750     0554                     l968:
  7751     0554  0008               	return
  7752     0555                     __end_of_ModbusSlave_Init:
  7753                           
  7754                           	psect	text46
  7755     06BC                     __ptext46:	
  7756 ;; *************** function _Task_Indicator *****************
  7757 ;; Defined at:
  7758 ;;		line 7 in file "MCU.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;		None
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;		None
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7772 ;;      Params:         0       0       0       0       0       0       0       0
  7773 ;;      Locals:         0       0       0       0       0       0       0       0
  7774 ;;      Temps:          2       0       0       0       0       0       0       0
  7775 ;;      Totals:         2       0       0       0       0       0       0       0
  7776 ;;Total ram usage:        2 bytes
  7777 ;; Hardware stack levels used: 1
  7778 ;; Hardware stack levels required when called: 4
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		_App_Process
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786     06BC                     _Task_Indicator:	
  7787                           ;psect for function _Task_Indicator
  7788                           
  7789     06BC                     l3321:	
  7790                           ;incstack = 0
  7791                           ; Regs used in _Task_Indicator: [wreg-fsr0h+status,2+status,0]
  7792                           
  7793                           
  7794                           ;MCU.c: 8:     switch (f_Indicator) {
  7795     06BC  2EC9               	goto	l3325
  7796     06BD                     l840:	
  7797                           ;MCU.c: 10:         {;MCU.c: 11:             do { LATCbits.LATC1 = 1; } while(0);
  7798                           
  7799     06BD  0022               	movlb	2	; select bank2
  7800     06BE  148E               	bsf	14,1	;volatile
  7801     06BF                     l842:	
  7802                           ;MCU.c: 12:             do { LATCbits.LATC0 = 1; } while(0);
  7803                           
  7804     06BF  140E               	bsf	14,0	;volatile
  7805     06C0  2EDF               	goto	l855
  7806     06C1                     l846:	
  7807                           ;MCU.c: 16:         {;MCU.c: 17:             do { LATCbits.LATC1 = 0; } while(0);
  7808                           
  7809     06C1  0022               	movlb	2	; select bank2
  7810     06C2  108E               	bcf	14,1	;volatile
  7811     06C3                     l848:	
  7812                           ;MCU.c: 18:             do { LATCbits.LATC0 = 1; } while(0);
  7813                           
  7814     06C3  140E               	bsf	14,0	;volatile
  7815     06C4  2EDF               	goto	l855
  7816     06C5                     l851:	
  7817                           ;MCU.c: 22:         {;MCU.c: 23:             do { LATCbits.LATC1 = 1; } while(0);
  7818                           
  7819     06C5  0022               	movlb	2	; select bank2
  7820     06C6  148E               	bsf	14,1	;volatile
  7821     06C7                     l853:	
  7822                           ;MCU.c: 24:             do { LATCbits.LATC0 = 0; } while(0);
  7823                           
  7824     06C7  100E               	bcf	14,0	;volatile
  7825     06C8  2EDF               	goto	l855
  7826     06C9                     l3325:
  7827     06C9  0020               	movlb	0	; select bank0
  7828     06CA  0862               	movf	_f_Indicator,w
  7829     06CB  00F2               	movwf	??_Task_Indicator
  7830     06CC  01F3               	clrf	??_Task_Indicator+1
  7831     06CD  1BF2               	btfsc	??_Task_Indicator,7
  7832     06CE  03F3               	decf	??_Task_Indicator+1,f
  7833                           
  7834                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7835                           ; Switch size 1, requested type "simple"
  7836                           ; Number of cases is 1, Range of values is 0 to 0
  7837                           ; switch strategies available:
  7838                           ; Name         Instructions Cycles
  7839                           ; simple_byte            4     3 (average)
  7840                           ; direct_byte            8     6 (fixed)
  7841                           ; jumptable            260     6 (fixed)
  7842                           ;	Chosen strategy is simple_byte
  7843     06CF  0873               	movf	??_Task_Indicator+1,w
  7844     06D0  3A00               	xorlw	0	; case 0
  7845     06D1  1903               	skipnz
  7846     06D2  2ED4               	goto	l4601
  7847     06D3  2EDF               	goto	l855
  7848     06D4                     l4601:
  7849                           
  7850                           ; Switch size 1, requested type "simple"
  7851                           ; Number of cases is 3, Range of values is 0 to 2
  7852                           ; switch strategies available:
  7853                           ; Name         Instructions Cycles
  7854                           ; simple_byte           10     6 (average)
  7855                           ; direct_byte           12     6 (fixed)
  7856                           ; jumptable            260     6 (fixed)
  7857                           ;	Chosen strategy is simple_byte
  7858     06D4  0872               	movf	??_Task_Indicator,w
  7859     06D5  3A00               	xorlw	0	; case 0
  7860     06D6  1903               	skipnz
  7861     06D7  2EBD               	goto	l840
  7862     06D8  3A01               	xorlw	1	; case 1
  7863     06D9  1903               	skipnz
  7864     06DA  2EC1               	goto	l846
  7865     06DB  3A03               	xorlw	3	; case 2
  7866     06DC  1903               	skipnz
  7867     06DD  2EC5               	goto	l851
  7868     06DE  2EDF               	goto	l855
  7869     06DF                     l855:
  7870     06DF  0008               	return
  7871     06E0                     __end_of_Task_Indicator:
  7872                           
  7873                           	psect	text47
  7874     0F5D                     __ptext47:	
  7875 ;; *************** function _App_Init *****************
  7876 ;; Defined at:
  7877 ;;		line 42 in file "MCU.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;		None
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;		None
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      void 
  7884 ;; Registers used:
  7885 ;;		wreg, status,2, status,0, pclath, cstack
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7891 ;;      Params:         0       0       0       0       0       0       0       0
  7892 ;;      Locals:         0       0       0       0       0       0       0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0       0
  7894 ;;      Totals:         0       0       0       0       0       0       0       0
  7895 ;;Total ram usage:        0 bytes
  7896 ;; Hardware stack levels used: 1
  7897 ;; Hardware stack levels required when called: 6
  7898 ;; This function calls:
  7899 ;;		_Device_Init
  7900 ;;		_TMR1_StartTimer
  7901 ;;		_Tick_Init_SES
  7902 ;; This function is called by:
  7903 ;;		_main
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907     0F5D                     _App_Init:	
  7908                           ;psect for function _App_Init
  7909                           
  7910     0F5D                     l3435:	
  7911                           ;incstack = 0
  7912                           ; Regs used in _App_Init: [wreg+status,2+status,0+pclath+cstack]
  7913                           
  7914                           
  7915                           ;MCU.c: 43:     Device_Init();
  7916     0F5D  3186  2648  318F   	fcall	_Device_Init
  7917     0F60                     l3437:
  7918                           
  7919                           ;MCU.c: 44:     TMR1_StartTimer();
  7920     0F60  318E  26EE  318F   	fcall	_TMR1_StartTimer
  7921     0F63                     l3439:
  7922                           
  7923                           ;MCU.c: 45:     Tick_Init_SES();
  7924     0F63  3187  27EB  318F   	fcall	_Tick_Init_SES
  7925     0F66                     l869:
  7926     0F66  0008               	return
  7927     0F67                     __end_of_App_Init:
  7928                           
  7929                           	psect	text48
  7930     07EB                     __ptext48:	
  7931 ;; *************** function _Tick_Init_SES *****************
  7932 ;; Defined at:
  7933 ;;		line 6 in file "tick.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;		None
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;		None
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  1    wreg      void 
  7940 ;; Registers used:
  7941 ;;		wreg, status,2, status,0, pclath, cstack
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7947 ;;      Params:         0       0       0       0       0       0       0       0
  7948 ;;      Locals:         0       0       0       0       0       0       0       0
  7949 ;;      Temps:          0       0       0       0       0       0       0       0
  7950 ;;      Totals:         0       0       0       0       0       0       0       0
  7951 ;;Total ram usage:        0 bytes
  7952 ;; Hardware stack levels used: 1
  7953 ;; Hardware stack levels required when called: 5
  7954 ;; This function calls:
  7955 ;;		_TMR1_SetInterruptHandler
  7956 ;; This function is called by:
  7957 ;;		_App_Init
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961     07EB                     _Tick_Init_SES:	
  7962                           ;psect for function _Tick_Init_SES
  7963                           
  7964     07EB                     l3335:	
  7965                           ;incstack = 0
  7966                           ; Regs used in _Tick_Init_SES: [wreg+status,2+status,0+pclath+cstack]
  7967                           
  7968                           
  7969                           ;tick.c: 7:     device_time = 0;
  7970     07EB  3000               	movlw	0
  7971     07EC  0020               	movlb	0	; select bank0
  7972     07ED  00D8               	movwf	_device_time+3	;volatile
  7973     07EE  3000               	movlw	0
  7974     07EF  00D7               	movwf	_device_time+2	;volatile
  7975     07F0  3000               	movlw	0
  7976     07F1  00D6               	movwf	_device_time+1	;volatile
  7977     07F2  3000               	movlw	0
  7978     07F3  00D5               	movwf	_device_time	;volatile
  7979     07F4                     l3337:
  7980                           
  7981                           ;tick.c: 8:     TMR1_SetInterruptHandler(&rtcc_handle);
  7982     07F4  3053               	movlw	low _rtcc_handle
  7983     07F5  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  7984     07F6  300F               	movlw	high _rtcc_handle
  7985     07F7  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  7986     07F8  318F  2716  3187   	fcall	_TMR1_SetInterruptHandler
  7987     07FB                     l987:
  7988     07FB  0008               	return
  7989     07FC                     __end_of_Tick_Init_SES:
  7990                           
  7991                           	psect	text49
  7992     0F16                     __ptext49:	
  7993 ;; *************** function _TMR1_SetInterruptHandler *****************
  7994 ;; Defined at:
  7995 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  7998 ;;		 -> rtcc_handle(1), TMR1_DefaultInterruptHandler(1), 
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;		None
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  1    wreg      void 
  8003 ;; Registers used:
  8004 ;;		wreg
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8010 ;;      Params:         2       0       0       0       0       0       0       0
  8011 ;;      Locals:         0       0       0       0       0       0       0       0
  8012 ;;      Temps:          0       0       0       0       0       0       0       0
  8013 ;;      Totals:         2       0       0       0       0       0       0       0
  8014 ;;Total ram usage:        2 bytes
  8015 ;; Hardware stack levels used: 1
  8016 ;; Hardware stack levels required when called: 4
  8017 ;; This function calls:
  8018 ;;		Nothing
  8019 ;; This function is called by:
  8020 ;;		_TMR1_Initialize
  8021 ;;		_Tick_Init_SES
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025     0F16                     _TMR1_SetInterruptHandler:	
  8026                           ;psect for function _TMR1_SetInterruptHandler
  8027                           
  8028     0F16                     l3195:	
  8029                           ;incstack = 0
  8030                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  8031                           
  8032                           
  8033                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  8034     0F16  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  8035     0F17  0021               	movlb	1	; select bank1
  8036     0F18  00D6               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  8037     0F19  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  8038     0F1A  00D5               	movwf	_TMR1_InterruptHandler^(0+128)
  8039     0F1B                     l743:
  8040     0F1B  0008               	return
  8041     0F1C                     __end_of_TMR1_SetInterruptHandler:
  8042                           
  8043                           	psect	text50
  8044     0EEE                     __ptext50:	
  8045 ;; *************** function _TMR1_StartTimer *****************
  8046 ;; Defined at:
  8047 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;		None
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;		None
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		None
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8061 ;;      Params:         0       0       0       0       0       0       0       0
  8062 ;;      Locals:         0       0       0       0       0       0       0       0
  8063 ;;      Temps:          0       0       0       0       0       0       0       0
  8064 ;;      Totals:         0       0       0       0       0       0       0       0
  8065 ;;Total ram usage:        0 bytes
  8066 ;; Hardware stack levels used: 1
  8067 ;; Hardware stack levels required when called: 4
  8068 ;; This function calls:
  8069 ;;		Nothing
  8070 ;; This function is called by:
  8071 ;;		_App_Init
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075     0EEE                     _TMR1_StartTimer:	
  8076                           ;psect for function _TMR1_StartTimer
  8077                           
  8078     0EEE                     l2173:	
  8079                           ;incstack = 0
  8080                           ; Regs used in _TMR1_StartTimer: []
  8081                           
  8082                           
  8083                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  8084     0EEE  0020               	movlb	0	; select bank0
  8085     0EEF  1418               	bsf	24,0	;volatile
  8086     0EF0                     l713:
  8087     0EF0  0008               	return
  8088     0EF1                     __end_of_TMR1_StartTimer:
  8089                           
  8090                           	psect	text51
  8091     0648                     __ptext51:	
  8092 ;; *************** function _Device_Init *****************
  8093 ;; Defined at:
  8094 ;;		line 30 in file "MCU.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;		None
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;		None
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      void 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8108 ;;      Params:         0       0       0       0       0       0       0       0
  8109 ;;      Locals:         0       0       0       0       0       0       0       0
  8110 ;;      Temps:          3       0       0       0       0       0       0       0
  8111 ;;      Totals:         3       0       0       0       0       0       0       0
  8112 ;;Total ram usage:        3 bytes
  8113 ;; Hardware stack levels used: 1
  8114 ;; Hardware stack levels required when called: 4
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_App_Init
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122     0648                     _Device_Init:	
  8123                           ;psect for function _Device_Init
  8124                           
  8125     0648                     l3331:	
  8126                           ;incstack = 0
  8127                           ; Regs used in _Device_Init: [wreg+status,2+status,0]
  8128                           
  8129                           
  8130                           ;MCU.c: 31:     static int8_t value_SW1, value_SW2, value_SW3, value_SW4;;MCU.c: 33:    
      +                           value_SW1 = PORTAbits.RA0;
  8131     0648  3000               	movlw	0
  8132     0649  0020               	movlb	0	; select bank0
  8133     064A  180C               	btfsc	12,0	;volatile
  8134     064B  3001               	movlw	1
  8135     064C  0021               	movlb	1	; select bank1
  8136     064D  00E4               	movwf	Device_Init@value_SW1^(0+128)
  8137                           
  8138                           ;MCU.c: 34:     value_SW2 = PORTAbits.RA1;
  8139     064E  3000               	movlw	0
  8140     064F  0020               	movlb	0	; select bank0
  8141     0650  188C               	btfsc	12,1	;volatile
  8142     0651  3001               	movlw	1
  8143     0652  0021               	movlb	1	; select bank1
  8144     0653  00E3               	movwf	Device_Init@value_SW2^(0+128)
  8145                           
  8146                           ;MCU.c: 35:     value_SW3 = PORTAbits.RA2;
  8147     0654  3000               	movlw	0
  8148     0655  0020               	movlb	0	; select bank0
  8149     0656  190C               	btfsc	12,2	;volatile
  8150     0657  3001               	movlw	1
  8151     0658  0021               	movlb	1	; select bank1
  8152     0659  00E2               	movwf	Device_Init@value_SW3^(0+128)
  8153                           
  8154                           ;MCU.c: 36:     value_SW4 = PORTAbits.RA3;
  8155     065A  3000               	movlw	0
  8156     065B  0020               	movlb	0	; select bank0
  8157     065C  198C               	btfsc	12,3	;volatile
  8158     065D  3001               	movlw	1
  8159     065E  0021               	movlb	1	; select bank1
  8160     065F  00E1               	movwf	Device_Init@value_SW4^(0+128)
  8161     0660                     l3333:
  8162                           
  8163                           ;MCU.c: 39:     SW_Ad = (((value_SW1 & 0x01) | (value_SW2 & 0x02) | (value_SW3 & 0x04) |
      +                           (value_SW4 & 0x08)) & (0xFF));
  8164     0660  3008               	movlw	8
  8165     0661  0561               	andwf	Device_Init@value_SW4^(0+128),w
  8166     0662  00F2               	movwf	??_Device_Init
  8167     0663  3004               	movlw	4
  8168     0664  0562               	andwf	Device_Init@value_SW3^(0+128),w
  8169     0665  00F3               	movwf	??_Device_Init+1
  8170     0666  3002               	movlw	2
  8171     0667  0563               	andwf	Device_Init@value_SW2^(0+128),w
  8172     0668  00F4               	movwf	??_Device_Init+2
  8173     0669  0864               	movf	Device_Init@value_SW1^(0+128),w
  8174     066A  3901               	andlw	1
  8175     066B  0474               	iorwf	??_Device_Init+2,w
  8176     066C  0473               	iorwf	??_Device_Init+1,w
  8177     066D  0472               	iorwf	??_Device_Init,w
  8178     066E  0020               	movlb	0	; select bank0
  8179     066F  00EE               	movwf	_SW_Ad
  8180     0670                     l866:
  8181     0670  0008               	return
  8182     0671                     __end_of_Device_Init:
  8183                           
  8184                           	psect	intentry
  8185     0004                     __pintentry:	
  8186 ;; *************** function _INTERRUPT_InterruptManager *****************
  8187 ;; Defined at:
  8188 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;		None
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;		None
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  1    wreg      void 
  8195 ;; Registers used:
  8196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8202 ;;      Params:         0       0       0       0       0       0       0       0
  8203 ;;      Locals:         0       0       0       0       0       0       0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0
  8205 ;;      Totals:         0       0       0       0       0       0       0       0
  8206 ;;Total ram usage:        0 bytes
  8207 ;; Hardware stack levels used: 1
  8208 ;; Hardware stack levels required when called: 3
  8209 ;; This function calls:
  8210 ;;		NULL
  8211 ;;		_EUSART_Receive_ISR
  8212 ;;		_EUSART_Transmit_ISR
  8213 ;;		_TMR1_ISR
  8214 ;; This function is called by:
  8215 ;;		Interrupt level 1
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219     0004                     _INTERRUPT_InterruptManager:
  8220                           
  8221                           ;incstack = 0
  8222     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  8223                           
  8224                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8225     0005  3180               	pagesel	$
  8226     0006                     i1l3779:
  8227                           
  8228                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  8229     0006  1F0B               	btfss	11,6	;volatile
  8230     0007  2809               	goto	u152_21
  8231     0008  280A               	goto	u152_20
  8232     0009                     u152_21:
  8233     0009  2850               	goto	i1l537
  8234     000A                     u152_20:
  8235     000A                     i1l3781:
  8236                           
  8237                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  8238     000A  0021               	movlb	1	; select bank1
  8239     000B  1E11               	btfss	17,4	;volatile
  8240     000C  280E               	goto	u153_21
  8241     000D  280F               	goto	u153_20
  8242     000E                     u153_21:
  8243     000E  281B               	goto	i1l526
  8244     000F                     u153_20:
  8245     000F                     i1l3783:
  8246     000F  0020               	movlb	0	; select bank0
  8247     0010  1E11               	btfss	17,4	;volatile
  8248     0011  2813               	goto	u154_21
  8249     0012  2814               	goto	u154_20
  8250     0013                     u154_21:
  8251     0013  281B               	goto	i1l526
  8252     0014                     u154_20:
  8253     0014                     i1l3785:
  8254                           
  8255                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  8256     0014  0021               	movlb	1	; select bank1
  8257     0015  0860               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
  8258     0016  008A               	movwf	10
  8259     0017  085F               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
  8260     0018  000A               	callw
  8261     0019  3180               	pagesel	$
  8262                           
  8263                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  8264     001A  2850               	goto	i1l537
  8265     001B                     i1l526:	
  8266                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  8267                           
  8268     001B  0021               	movlb	1	; select bank1
  8269     001C  1E91               	btfss	17,5	;volatile
  8270     001D  281F               	goto	u155_21
  8271     001E  2820               	goto	u155_20
  8272     001F                     u155_21:
  8273     001F  282C               	goto	i1l528
  8274     0020                     u155_20:
  8275     0020                     i1l3787:
  8276     0020  0020               	movlb	0	; select bank0
  8277     0021  1E91               	btfss	17,5	;volatile
  8278     0022  2824               	goto	u156_21
  8279     0023  2825               	goto	u156_20
  8280     0024                     u156_21:
  8281     0024  282C               	goto	i1l528
  8282     0025                     u156_20:
  8283     0025                     i1l3789:
  8284                           
  8285                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  8286     0025  0021               	movlb	1	; select bank1
  8287     0026  085E               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  8288     0027  008A               	movwf	10
  8289     0028  085D               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  8290     0029  000A               	callw
  8291     002A  3180               	pagesel	$
  8292                           
  8293                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  8294     002B  2850               	goto	i1l537
  8295     002C                     i1l528:	
  8296                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE2bits.BCLIE == 1 && PIR
      +                          2bits.BCLIF == 1)
  8297                           
  8298     002C  0021               	movlb	1	; select bank1
  8299     002D  1D92               	btfss	18,3	;volatile
  8300     002E  2830               	goto	u157_21
  8301     002F  2831               	goto	u157_20
  8302     0030                     u157_21:
  8303     0030  2837               	goto	i1l530
  8304     0031                     u157_20:
  8305     0031                     i1l3791:
  8306     0031  0020               	movlb	0	; select bank0
  8307     0032  1D92               	btfss	18,3	;volatile
  8308     0033  2835               	goto	u158_21
  8309     0034  2836               	goto	u158_20
  8310     0035                     u158_21:
  8311     0035  2837               	goto	i1l530
  8312     0036                     u158_20:
  8313     0036  2850               	goto	i1l537
  8314     0037                     i1l530:	
  8315                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.SSPIE == 1 && PIR
      +                          1bits.SSPIF == 1)
  8316                           
  8317     0037  0021               	movlb	1	; select bank1
  8318     0038  1D91               	btfss	17,3	;volatile
  8319     0039  283B               	goto	u159_21
  8320     003A  283C               	goto	u159_20
  8321     003B                     u159_21:
  8322     003B  2842               	goto	i1l532
  8323     003C                     u159_20:
  8324     003C                     i1l3795:
  8325     003C  0020               	movlb	0	; select bank0
  8326     003D  1D91               	btfss	17,3	;volatile
  8327     003E  2840               	goto	u160_21
  8328     003F  2841               	goto	u160_20
  8329     0040                     u160_21:
  8330     0040  2842               	goto	i1l532
  8331     0041                     u160_20:
  8332     0041  2850               	goto	i1l537
  8333     0042                     i1l532:	
  8334                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
  8335                           
  8336     0042  0021               	movlb	1	; select bank1
  8337     0043  1C11               	btfss	17,0	;volatile
  8338     0044  2846               	goto	u161_21
  8339     0045  2847               	goto	u161_20
  8340     0046                     u161_21:
  8341     0046  2850               	goto	i1l527
  8342     0047                     u161_20:
  8343     0047                     i1l3799:
  8344     0047  0020               	movlb	0	; select bank0
  8345     0048  1C11               	btfss	17,0	;volatile
  8346     0049  284B               	goto	u162_21
  8347     004A  284C               	goto	u162_20
  8348     004B                     u162_21:
  8349     004B  2850               	goto	i1l527
  8350     004C                     u162_20:
  8351     004C                     i1l3801:
  8352                           
  8353                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR1_ISR();
  8354     004C  318F  27B7  3180   	fcall	_TMR1_ISR
  8355                           
  8356                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  8357     004F  2850               	goto	i1l537
  8358     0050                     i1l527:
  8359     0050                     i1l537:	
  8360                           ;mcc_generated_files/interrupt_manager.c: 81:     }
  8361                           
  8362     0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8363     0051  0009               	retfie
  8364     0052                     __end_of_INTERRUPT_InterruptManager:
  8365                           
  8366                           	psect	text53
  8367     0FB7                     __ptext53:	
  8368 ;; *************** function _TMR1_ISR *****************
  8369 ;; Defined at:
  8370 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;		None
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;		None
  8375 ;; Return value:  Size  Location     Type
  8376 ;;                  1    wreg      void 
  8377 ;; Registers used:
  8378 ;;		wreg, status,2, status,0, pclath, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8384 ;;      Params:         0       0       0       0       0       0       0       0
  8385 ;;      Locals:         0       0       0       0       0       0       0       0
  8386 ;;      Temps:          0       0       0       0       0       0       0       0
  8387 ;;      Totals:         0       0       0       0       0       0       0       0
  8388 ;;Total ram usage:        0 bytes
  8389 ;; Hardware stack levels used: 1
  8390 ;; Hardware stack levels required when called: 2
  8391 ;; This function calls:
  8392 ;;		_TMR1_CallBack
  8393 ;;		_TMR1_WriteTimer
  8394 ;; This function is called by:
  8395 ;;		_INTERRUPT_InterruptManager
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399     0FB7                     _TMR1_ISR:	
  8400                           ;psect for function _TMR1_ISR
  8401                           
  8402     0FB7                     i1l3399:	
  8403                           ;incstack = 0
  8404                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  8405                           
  8406                           
  8407                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  8408     0FB7  0020               	movlb	0	; select bank0
  8409     0FB8  1011               	bcf	17,0	;volatile
  8410     0FB9                     i1l3401:
  8411                           
  8412                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  8413     0FB9  085E               	movf	_timer1ReloadVal+1,w	;volatile
  8414     0FBA  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  8415     0FBB  085D               	movf	_timer1ReloadVal,w	;volatile
  8416     0FBC  00F0               	movwf	TMR1_WriteTimer@timerVal
  8417     0FBD  318F  27EF  318F   	fcall	_TMR1_WriteTimer
  8418                           
  8419                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
  8420     0FC0  318F  27AA  318F   	fcall	_TMR1_CallBack
  8421     0FC3                     i1l736:
  8422     0FC3  0008               	return
  8423     0FC4                     __end_of_TMR1_ISR:
  8424                           
  8425                           	psect	text54
  8426     0FEF                     __ptext54:	
  8427 ;; *************** function _TMR1_WriteTimer *****************
  8428 ;; Defined at:
  8429 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;  timerVal        2    0[COMMON] unsigned short 
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;		None
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  1    wreg      void 
  8436 ;; Registers used:
  8437 ;;		wreg, status,2
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8443 ;;      Params:         2       0       0       0       0       0       0       0
  8444 ;;      Locals:         0       0       0       0       0       0       0       0
  8445 ;;      Temps:          0       0       0       0       0       0       0       0
  8446 ;;      Totals:         2       0       0       0       0       0       0       0
  8447 ;;Total ram usage:        2 bytes
  8448 ;; Hardware stack levels used: 1
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_TMR1_ISR
  8453 ;;		_TMR1_Reload
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457     0FEF                     _TMR1_WriteTimer:	
  8458                           ;psect for function _TMR1_WriteTimer
  8459                           
  8460     0FEF                     i1l3287:	
  8461                           ;incstack = 0
  8462                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  8463                           
  8464                           
  8465                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  8466     0FEF  0020               	movlb	0	; select bank0
  8467     0FF0  1D18               	btfss	24,2	;volatile
  8468     0FF1  2FF3               	goto	u125_21
  8469     0FF2  2FF4               	goto	u125_20
  8470     0FF3                     u125_21:
  8471     0FF3  2FFB               	goto	i1l3297
  8472     0FF4                     u125_20:
  8473     0FF4                     i1l3289:
  8474                           
  8475                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  8476     0FF4  1018               	bcf	24,0	;volatile
  8477     0FF5                     i1l3291:
  8478                           
  8479                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (uint8_t)(timerVal >> 8);
  8480     0FF5  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  8481     0FF6  0097               	movwf	23	;volatile
  8482     0FF7                     i1l3293:
  8483                           
  8484                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = (uint8_t)timerVal;
  8485     0FF7  0870               	movf	TMR1_WriteTimer@timerVal,w
  8486     0FF8  0096               	movwf	22	;volatile
  8487     0FF9                     i1l3295:
  8488                           
  8489                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  8490     0FF9  1418               	bsf	24,0	;volatile
  8491                           
  8492                           ;mcc_generated_files/tmr1.c: 133:     }
  8493     0FFA  2FFF               	goto	i1l724
  8494     0FFB                     i1l3297:
  8495                           
  8496                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
  8497     0FFB  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  8498     0FFC  0097               	movwf	23	;volatile
  8499     0FFD                     i1l3299:
  8500                           
  8501                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = (uint8_t)timerVal;
  8502     0FFD  0870               	movf	TMR1_WriteTimer@timerVal,w
  8503     0FFE  0096               	movwf	22	;volatile
  8504     0FFF                     i1l724:
  8505     0FFF  0008               	return
  8506     1000                     __end_of_TMR1_WriteTimer:
  8507                           
  8508                           	psect	text55
  8509     0FAA                     __ptext55:	
  8510 ;; *************** function _TMR1_CallBack *****************
  8511 ;; Defined at:
  8512 ;;		line 169 in file "mcc_generated_files/tmr1.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;		None
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;		None
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  1    wreg      void 
  8519 ;; Registers used:
  8520 ;;		wreg, status,2, status,0, pclath, cstack
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8526 ;;      Params:         0       0       0       0       0       0       0       0
  8527 ;;      Locals:         0       0       0       0       0       0       0       0
  8528 ;;      Temps:          0       0       0       0       0       0       0       0
  8529 ;;      Totals:         0       0       0       0       0       0       0       0
  8530 ;;Total ram usage:        0 bytes
  8531 ;; Hardware stack levels used: 1
  8532 ;; Hardware stack levels required when called: 1
  8533 ;; This function calls:
  8534 ;;		NULL
  8535 ;;		_TMR1_DefaultInterruptHandler
  8536 ;;		_rtcc_handle
  8537 ;; This function is called by:
  8538 ;;		_TMR1_ISR
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542     0FAA                     _TMR1_CallBack:	
  8543                           ;psect for function _TMR1_CallBack
  8544                           
  8545     0FAA                     i1l3301:	
  8546                           ;incstack = 0
  8547                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  8548                           
  8549                           
  8550                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
  8551     0FAA  0021               	movlb	1	; select bank1
  8552     0FAB  0855               	movf	_TMR1_InterruptHandler^(0+128),w
  8553     0FAC  0456               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  8554     0FAD  1903               	btfsc	3,2
  8555     0FAE  2FB0               	goto	u126_21
  8556     0FAF  2FB1               	goto	u126_20
  8557     0FB0                     u126_21:
  8558     0FB0  2FB6               	goto	i1l740
  8559     0FB1                     u126_20:
  8560     0FB1                     i1l3303:
  8561                           
  8562                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
  8563     0FB1  0856               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  8564     0FB2  008A               	movwf	10
  8565     0FB3  0855               	movf	_TMR1_InterruptHandler^(0+128),w
  8566     0FB4  000A               	callw
  8567     0FB5  318F               	pagesel	$
  8568     0FB6                     i1l740:
  8569     0FB6  0008               	return
  8570     0FB7                     __end_of_TMR1_CallBack:
  8571                           
  8572                           	psect	text56
  8573     0003                     __ptext56:	
  8574 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  8575 ;; Defined at:
  8576 ;;		line 182 in file "mcc_generated_files/tmr1.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;		None
  8579 ;; Auto vars:     Size  Location     Type
  8580 ;;		None
  8581 ;; Return value:  Size  Location     Type
  8582 ;;                  1    wreg      void 
  8583 ;; Registers used:
  8584 ;;		None
  8585 ;; Tracked objects:
  8586 ;;		On entry : 0/0
  8587 ;;		On exit  : 0/0
  8588 ;;		Unchanged: 0/0
  8589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8590 ;;      Params:         0       0       0       0       0       0       0       0
  8591 ;;      Locals:         0       0       0       0       0       0       0       0
  8592 ;;      Temps:          0       0       0       0       0       0       0       0
  8593 ;;      Totals:         0       0       0       0       0       0       0       0
  8594 ;;Total ram usage:        0 bytes
  8595 ;; Hardware stack levels used: 1
  8596 ;; This function calls:
  8597 ;;		Nothing
  8598 ;; This function is called by:
  8599 ;;		_TMR1_Initialize
  8600 ;;		_TMR1_CallBack
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604     0003                     _TMR1_DefaultInterruptHandler:	
  8605                           ;psect for function _TMR1_DefaultInterruptHandler
  8606                           
  8607     0003                     i1l746:	
  8608                           ;incstack = 0
  8609                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  8610                           
  8611     0003  0008               	return
  8612     0004                     __end_of_TMR1_DefaultInterruptHandler:
  8613                           
  8614                           	psect	text57
  8615     0F53                     __ptext57:	
  8616 ;; *************** function _rtcc_handle *****************
  8617 ;; Defined at:
  8618 ;;		line 11 in file "tick.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;		None
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;		None
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  1    wreg      void 
  8625 ;; Registers used:
  8626 ;;		wreg
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8632 ;;      Params:         0       0       0       0       0       0       0       0
  8633 ;;      Locals:         0       0       0       0       0       0       0       0
  8634 ;;      Temps:          0       0       0       0       0       0       0       0
  8635 ;;      Totals:         0       0       0       0       0       0       0       0
  8636 ;;Total ram usage:        0 bytes
  8637 ;; Hardware stack levels used: 1
  8638 ;; This function calls:
  8639 ;;		Nothing
  8640 ;; This function is called by:
  8641 ;;		_Tick_Init_SES
  8642 ;;		_TMR1_CallBack
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646     0F53                     _rtcc_handle:	
  8647                           ;psect for function _rtcc_handle
  8648                           
  8649     0F53                     i1l3231:	
  8650                           ;incstack = 0
  8651                           ; Regs used in _rtcc_handle: [wreg]
  8652                           
  8653                           
  8654                           ;tick.c: 12:     device_time++;
  8655     0F53  3001               	movlw	1
  8656     0F54  0020               	movlb	0	; select bank0
  8657     0F55  07D5               	addwf	_device_time,f	;volatile
  8658     0F56  3000               	movlw	0
  8659     0F57  3DD6               	addwfc	_device_time+1,f	;volatile
  8660     0F58  3000               	movlw	0
  8661     0F59  3DD7               	addwfc	_device_time+2,f	;volatile
  8662     0F5A  3000               	movlw	0
  8663     0F5B  3DD8               	addwfc	_device_time+3,f	;volatile
  8664     0F5C                     i1l990:
  8665     0F5C  0008               	return
  8666     0F5D                     __end_of_rtcc_handle:
  8667                           
  8668                           	psect	text58
  8669     06E0                     __ptext58:	
  8670 ;; *************** function _EUSART_Transmit_ISR *****************
  8671 ;; Defined at:
  8672 ;;		line 197 in file "mcc_generated_files/eusart.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;		None
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;		None
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      void 
  8679 ;; Registers used:
  8680 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8686 ;;      Params:         0       0       0       0       0       0       0       0
  8687 ;;      Locals:         0       0       0       0       0       0       0       0
  8688 ;;      Temps:          1       0       0       0       0       0       0       0
  8689 ;;      Totals:         1       0       0       0       0       0       0       0
  8690 ;;Total ram usage:        1 bytes
  8691 ;; Hardware stack levels used: 1
  8692 ;; This function calls:
  8693 ;;		Nothing
  8694 ;; This function is called by:
  8695 ;;		_EUSART_Initialize
  8696 ;;		_INTERRUPT_InterruptManager
  8697 ;; This function uses a non-reentrant model
  8698 ;;
  8699                           
  8700     06E0                     _EUSART_Transmit_ISR:	
  8701                           ;psect for function _EUSART_Transmit_ISR
  8702                           
  8703     06E0                     i1l3403:	
  8704                           ;incstack = 0
  8705                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8706                           
  8707                           
  8708                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  8709     06E0  3010               	movlw	16
  8710     06E1  0020               	movlb	0	; select bank0
  8711     06E2  0265               	subwf	_eusartTxBufferRemaining,w	;volatile
  8712     06E3  1803               	skipnc
  8713     06E4  2EE6               	goto	u131_21
  8714     06E5  2EE7               	goto	u131_20
  8715     06E6                     u131_21:
  8716     06E6  2F00               	goto	i1l643
  8717     06E7                     u131_20:
  8718     06E7                     i1l3405:
  8719                           
  8720                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  8721     06E7  0866               	movf	_eusartTxTail,w
  8722     06E8  3E30               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  8723     06E9  0086               	movwf	6
  8724     06EA  3001               	movlw	1	; select bank2/3
  8725     06EB  0087               	movwf	7
  8726     06EC  0801               	movf	1,w
  8727     06ED  0023               	movlb	3	; select bank3
  8728     06EE  009A               	movwf	26	;volatile
  8729     06EF                     i1l3407:
  8730     06EF  3001               	movlw	1
  8731     06F0  00F0               	movwf	??_EUSART_Transmit_ISR
  8732     06F1  0870               	movf	??_EUSART_Transmit_ISR,w
  8733     06F2  0020               	movlb	0	; select bank0
  8734     06F3  07E6               	addwf	_eusartTxTail,f	;volatile
  8735     06F4                     i1l3409:
  8736                           
  8737                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  8738     06F4  3010               	movlw	16
  8739     06F5  0266               	subwf	_eusartTxTail,w	;volatile
  8740     06F6  1C03               	skipc
  8741     06F7  2EF9               	goto	u132_21
  8742     06F8  2EFA               	goto	u132_20
  8743     06F9                     u132_21:
  8744     06F9  2EFB               	goto	i1l3413
  8745     06FA                     u132_20:
  8746     06FA                     i1l3411:
  8747                           
  8748                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  8749     06FA  01E6               	clrf	_eusartTxTail	;volatile
  8750     06FB                     i1l3413:
  8751                           
  8752                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  8753     06FB  3001               	movlw	1
  8754     06FC  00F0               	movwf	??_EUSART_Transmit_ISR
  8755     06FD  0870               	movf	??_EUSART_Transmit_ISR,w
  8756     06FE  07E5               	addwf	_eusartTxBufferRemaining,f	;volatile
  8757                           
  8758                           ;mcc_generated_files/eusart.c: 209:     }
  8759     06FF  2F02               	goto	i1l646
  8760     0700                     i1l643:	
  8761                           ;mcc_generated_files/eusart.c: 210:     else
  8762                           
  8763                           
  8764                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
  8765     0700  0021               	movlb	1	; select bank1
  8766     0701  1211               	bcf	17,4	;volatile
  8767     0702                     i1l646:
  8768     0702  0008               	return
  8769     0703                     __end_of_EUSART_Transmit_ISR:
  8770                           
  8771                           	psect	text59
  8772     0592                     __ptext59:	
  8773 ;; *************** function _EUSART_Receive_ISR *****************
  8774 ;; Defined at:
  8775 ;;		line 216 in file "mcc_generated_files/eusart.c"
  8776 ;; Parameters:    Size  Location     Type
  8777 ;;		None
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;		None
  8780 ;; Return value:  Size  Location     Type
  8781 ;;                  1    wreg      void 
  8782 ;; Registers used:
  8783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8784 ;; Tracked objects:
  8785 ;;		On entry : 0/0
  8786 ;;		On exit  : 0/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8789 ;;      Params:         0       0       0       0       0       0       0       0
  8790 ;;      Locals:         0       0       0       0       0       0       0       0
  8791 ;;      Temps:          0       0       0       0       0       0       0       0
  8792 ;;      Totals:         0       0       0       0       0       0       0       0
  8793 ;;Total ram usage:        0 bytes
  8794 ;; Hardware stack levels used: 1
  8795 ;; Hardware stack levels required when called: 2
  8796 ;; This function calls:
  8797 ;;		NULL
  8798 ;;		_EUSART_DefaultErrorHandler
  8799 ;;		_EUSART_DefaultFramingErrorHandler
  8800 ;;		_EUSART_DefaultOverrunErrorHandler
  8801 ;;		_EUSART_RxDataHandler
  8802 ;; This function is called by:
  8803 ;;		_EUSART_Initialize
  8804 ;;		_INTERRUPT_InterruptManager
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808     0592                     _EUSART_Receive_ISR:	
  8809                           ;psect for function _EUSART_Receive_ISR
  8810                           
  8811     0592                     i1l3415:	
  8812                           ;incstack = 0
  8813                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8814                           
  8815                           
  8816                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  8817     0592  087B               	movf	_eusartRxHead,w	;volatile
  8818     0593  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8819     0594  0086               	movwf	6
  8820     0595  0187               	clrf	7
  8821     0596  0181               	clrf	1
  8822     0597                     i1l3417:
  8823                           
  8824                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  8825     0597  0023               	movlb	3	; select bank3
  8826     0598  1D1D               	btfss	29,2	;volatile
  8827     0599  2D9B               	goto	u133_21
  8828     059A  2D9C               	goto	u133_20
  8829     059B                     u133_21:
  8830     059B  2DA7               	goto	i1l3423
  8831     059C                     u133_20:
  8832     059C                     i1l3419:
  8833                           
  8834                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  8835     059C  087B               	movf	_eusartRxHead,w	;volatile
  8836     059D  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8837     059E  0086               	movwf	6
  8838     059F  0187               	clrf	7
  8839     05A0  1481               	bsf	1,1
  8840     05A1                     i1l3421:
  8841                           
  8842                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  8843     05A1  0021               	movlb	1	; select bank1
  8844     05A2  085C               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  8845     05A3  008A               	movwf	10
  8846     05A4  085B               	movf	_EUSART_FramingErrorHandler^(0+128),w
  8847     05A5  000A               	callw
  8848     05A6  3185               	pagesel	$
  8849     05A7                     i1l3423:
  8850                           
  8851                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  8852     05A7  0023               	movlb	3	; select bank3
  8853     05A8  1C9D               	btfss	29,1	;volatile
  8854     05A9  2DAB               	goto	u134_21
  8855     05AA  2DAC               	goto	u134_20
  8856     05AB                     u134_21:
  8857     05AB  2DB7               	goto	i1l3429
  8858     05AC                     u134_20:
  8859     05AC                     i1l3425:
  8860                           
  8861                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  8862     05AC  087B               	movf	_eusartRxHead,w	;volatile
  8863     05AD  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8864     05AE  0086               	movwf	6
  8865     05AF  0187               	clrf	7
  8866     05B0  1501               	bsf	1,2
  8867     05B1                     i1l3427:
  8868                           
  8869                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  8870     05B1  0021               	movlb	1	; select bank1
  8871     05B2  085A               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  8872     05B3  008A               	movwf	10
  8873     05B4  0859               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  8874     05B5  000A               	callw
  8875     05B6  3185               	pagesel	$
  8876     05B7                     i1l3429:
  8877                           
  8878                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  8879     05B7  087B               	movf	_eusartRxHead,w	;volatile
  8880     05B8  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8881     05B9  0086               	movwf	6
  8882     05BA  0187               	clrf	7
  8883     05BB  0801               	movf	1,w
  8884     05BC  1903               	btfsc	3,2
  8885     05BD  2DBF               	goto	u135_21
  8886     05BE  2DC0               	goto	u135_20
  8887     05BF                     u135_21:
  8888     05BF  2DC7               	goto	i1l3433
  8889     05C0                     u135_20:
  8890     05C0                     i1l3431:
  8891                           
  8892                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  8893     05C0  0021               	movlb	1	; select bank1
  8894     05C1  0858               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  8895     05C2  008A               	movwf	10
  8896     05C3  0857               	movf	_EUSART_ErrorHandler^(0+128),w
  8897     05C4  000A               	callw
  8898     05C5  3185               	pagesel	$
  8899                           
  8900                           ;mcc_generated_files/eusart.c: 233:     } else {
  8901     05C6  2DCA               	goto	i1l653
  8902     05C7                     i1l3433:
  8903                           
  8904                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  8905     05C7  3187  2790  3185   	fcall	_EUSART_RxDataHandler
  8906     05CA                     i1l653:
  8907     05CA  0008               	return
  8908     05CB                     __end_of_EUSART_Receive_ISR:
  8909                           
  8910                           	psect	text60
  8911     0F04                     __ptext60:	
  8912 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  8913 ;; Defined at:
  8914 ;;		line 252 in file "mcc_generated_files/eusart.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;		None
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;		None
  8919 ;; Return value:  Size  Location     Type
  8920 ;;                  1    wreg      void 
  8921 ;; Registers used:
  8922 ;;		None
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8928 ;;      Params:         0       0       0       0       0       0       0       0
  8929 ;;      Locals:         0       0       0       0       0       0       0       0
  8930 ;;      Temps:          0       0       0       0       0       0       0       0
  8931 ;;      Totals:         0       0       0       0       0       0       0       0
  8932 ;;Total ram usage:        0 bytes
  8933 ;; Hardware stack levels used: 1
  8934 ;; This function calls:
  8935 ;;		Nothing
  8936 ;; This function is called by:
  8937 ;;		_EUSART_Initialize
  8938 ;;		_EUSART_Receive_ISR
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942     0F04                     _EUSART_DefaultOverrunErrorHandler:	
  8943                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  8944                           
  8945     0F04                     i1l3283:	
  8946                           ;incstack = 0
  8947                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  8948                           
  8949                           
  8950                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  8951     0F04  0023               	movlb	3	; select bank3
  8952     0F05  121D               	bcf	29,4	;volatile
  8953                           
  8954                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  8955     0F06  161D               	bsf	29,4	;volatile
  8956     0F07                     i1l663:
  8957     0F07  0008               	return
  8958     0F08                     __end_of_EUSART_DefaultOverrunErrorHandler:
  8959                           
  8960                           	psect	text61
  8961     0002                     __ptext61:	
  8962 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  8963 ;; Defined at:
  8964 ;;		line 250 in file "mcc_generated_files/eusart.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;		None
  8967 ;; Auto vars:     Size  Location     Type
  8968 ;;		None
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  1    wreg      void 
  8971 ;; Registers used:
  8972 ;;		None
  8973 ;; Tracked objects:
  8974 ;;		On entry : 0/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8978 ;;      Params:         0       0       0       0       0       0       0       0
  8979 ;;      Locals:         0       0       0       0       0       0       0       0
  8980 ;;      Temps:          0       0       0       0       0       0       0       0
  8981 ;;      Totals:         0       0       0       0       0       0       0       0
  8982 ;;Total ram usage:        0 bytes
  8983 ;; Hardware stack levels used: 1
  8984 ;; This function calls:
  8985 ;;		Nothing
  8986 ;; This function is called by:
  8987 ;;		_EUSART_Initialize
  8988 ;;		_EUSART_Receive_ISR
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992     0002                     _EUSART_DefaultFramingErrorHandler:	
  8993                           ;psect for function _EUSART_DefaultFramingErrorHandler
  8994                           
  8995     0002                     i1l660:	
  8996                           ;incstack = 0
  8997                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  8998                           
  8999     0002  0008               	return
  9000     0003                     __end_of_EUSART_DefaultFramingErrorHandler:
  9001                           
  9002                           	psect	text62
  9003     0F00                     __ptext62:	
  9004 ;; *************** function _EUSART_DefaultErrorHandler *****************
  9005 ;; Defined at:
  9006 ;;		line 260 in file "mcc_generated_files/eusart.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;		None
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;		None
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      void 
  9013 ;; Registers used:
  9014 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9020 ;;      Params:         0       0       0       0       0       0       0       0
  9021 ;;      Locals:         0       0       0       0       0       0       0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0
  9023 ;;      Totals:         0       0       0       0       0       0       0       0
  9024 ;;Total ram usage:        0 bytes
  9025 ;; Hardware stack levels used: 1
  9026 ;; Hardware stack levels required when called: 1
  9027 ;; This function calls:
  9028 ;;		_EUSART_RxDataHandler
  9029 ;; This function is called by:
  9030 ;;		_EUSART_Initialize
  9031 ;;		_EUSART_Receive_ISR
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035     0F00                     _EUSART_DefaultErrorHandler:	
  9036                           ;psect for function _EUSART_DefaultErrorHandler
  9037                           
  9038     0F00                     i1l3285:	
  9039                           ;incstack = 0
  9040                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9041                           
  9042                           
  9043                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  9044     0F00  3187  2790  318F   	fcall	_EUSART_RxDataHandler
  9045     0F03                     i1l666:
  9046     0F03  0008               	return
  9047     0F04                     __end_of_EUSART_DefaultErrorHandler:
  9048                           
  9049                           	psect	text63
  9050     0790                     __ptext63:	
  9051 ;; *************** function _EUSART_RxDataHandler *****************
  9052 ;; Defined at:
  9053 ;;		line 240 in file "mcc_generated_files/eusart.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;		None
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;		None
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1    wreg      void 
  9060 ;; Registers used:
  9061 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9067 ;;      Params:         0       0       0       0       0       0       0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0       0
  9069 ;;      Temps:          1       0       0       0       0       0       0       0
  9070 ;;      Totals:         1       0       0       0       0       0       0       0
  9071 ;;Total ram usage:        1 bytes
  9072 ;; Hardware stack levels used: 1
  9073 ;; This function calls:
  9074 ;;		Nothing
  9075 ;; This function is called by:
  9076 ;;		_EUSART_Receive_ISR
  9077 ;;		_EUSART_DefaultErrorHandler
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081     0790                     _EUSART_RxDataHandler:	
  9082                           ;psect for function _EUSART_RxDataHandler
  9083                           
  9084     0790                     i1l3185:	
  9085                           ;incstack = 0
  9086                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  9087                           
  9088                           
  9089                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  9090     0790  087B               	movf	_eusartRxHead,w
  9091     0791  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  9092     0792  0086               	movwf	6
  9093     0793  3001               	movlw	1	; select bank2/3
  9094     0794  0087               	movwf	7
  9095     0795  0023               	movlb	3	; select bank3
  9096     0796  0819               	movf	25,w	;volatile
  9097     0797  0081               	movwf	1
  9098     0798                     i1l3187:
  9099     0798  3001               	movlw	1
  9100     0799  00F0               	movwf	??_EUSART_RxDataHandler
  9101     079A  0870               	movf	??_EUSART_RxDataHandler,w
  9102     079B  07FB               	addwf	_eusartRxHead,f	;volatile
  9103     079C                     i1l3189:
  9104                           
  9105                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9106     079C  3010               	movlw	16
  9107     079D  027B               	subwf	_eusartRxHead,w	;volatile
  9108     079E  1C03               	skipc
  9109     079F  2FA1               	goto	u123_21
  9110     07A0  2FA2               	goto	u123_20
  9111     07A1                     u123_21:
  9112     07A1  2FA3               	goto	i1l3193
  9113     07A2                     u123_20:
  9114     07A2                     i1l3191:
  9115                           
  9116                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  9117     07A2  01FB               	clrf	_eusartRxHead	;volatile
  9118     07A3                     i1l3193:
  9119                           
  9120                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  9121     07A3  3001               	movlw	1
  9122     07A4  00F0               	movwf	??_EUSART_RxDataHandler
  9123     07A5  0870               	movf	??_EUSART_RxDataHandler,w
  9124     07A6  0020               	movlb	0	; select bank0
  9125     07A7  07E4               	addwf	_eusartRxCount,f	;volatile
  9126     07A8                     i1l657:
  9127     07A8  0008               	return
  9128     07A9                     __end_of_EUSART_RxDataHandler:
  9129     007E                     btemp	set	126	;btemp
  9130     007E                     int$flags	set	126
  9131     007E                     wtemp0	set	126
  9132     20D4                     
  9133                           	psect	idloc
  9134                           
  9135                           ;Config register IDLOC0 @ 0x8000
  9136                           ;	unspecified, using default values
  9137     8000                     	org	32768
  9138     8000  3FFF               	dw	16383
  9139                           
  9140                           ;Config register IDLOC1 @ 0x8001
  9141                           ;	unspecified, using default values
  9142     8001                     	org	32769
  9143     8001  3FFF               	dw	16383
  9144                           
  9145                           ;Config register IDLOC2 @ 0x8002
  9146                           ;	unspecified, using default values
  9147     8002                     	org	32770
  9148     8002  3FFF               	dw	16383
  9149                           
  9150                           ;Config register IDLOC3 @ 0x8003
  9151                           ;	unspecified, using default values
  9152     8003                     	org	32771
  9153     8003  3FFF               	dw	16383
  9154                           
  9155                           	psect	config
  9156                           
  9157                           ;Config register CONFIG1 @ 0x8007
  9158                           ;	Oscillator Selection
  9159                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  9160                           ;	Watchdog Timer Enable
  9161                           ;	WDTE = SWDTEN, WDT controlled by the SWDTEN bit in the WDTCON register
  9162                           ;	Power-up Timer Enable
  9163                           ;	PWRTE = OFF, PWRT disabled
  9164                           ;	MCLR Pin Function Select
  9165                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  9166                           ;	Flash Program Memory Code Protection
  9167                           ;	CP = OFF, Program memory code protection is disabled
  9168                           ;	Data Memory Code Protection
  9169                           ;	CPD = OFF, Data memory code protection is disabled
  9170                           ;	Brown-out Reset Enable
  9171                           ;	BOREN = ON, Brown-out Reset enabled
  9172                           ;	Clock Out Enable
  9173                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  9174                           ;	Internal/External Switchover
  9175                           ;	IESO = ON, Internal/External Switchover mode is enabled
  9176                           ;	Fail-Safe Clock Monitor Enable
  9177                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  9178     8007                     	org	32775
  9179     8007  3FEC               	dw	16364
  9180                           
  9181                           ;Config register CONFIG2 @ 0x8008
  9182                           ;	Flash Memory Self-Write Protection
  9183                           ;	WRT = OFF, Write protection off
  9184                           ;	Voltage Regulator Capacitor Enable
  9185                           ;	VCAPEN = RA5, VCAP functionality is enabled on RA5
  9186                           ;	PLL Enable
  9187                           ;	PLLEN = OFF, 4x PLL disabled
  9188                           ;	Stack Overflow/Underflow Reset Enable
  9189                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  9190                           ;	Brown-out Reset Voltage Selection
  9191                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  9192                           ;	Low-Voltage Programming Enable
  9193                           ;	LVP = ON, Low-voltage programming enabled
  9194     8008                     	org	32776
  9195     8008  3EDF               	dw	16095

Data Sizes:
    Strings     0
    Constant    40
    Data        12
    BSS         106
    Persistent  49
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     53      79
    BANK1            80      4      79
    BANK2            52      0      32
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_DO_TX$2377$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    NULL$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S329$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    ModbusRTU_Slave_Poll@reg	PTR short  size(1) Largest target is 4
		 -> MB_Register(BANK1[4]), 

    ModbusSlaveF04@reg	PTR unsigned short  size(2) Largest target is 4096
		 -> MB_Register(BANK1[4]), RAM(DATA[4096]), 

    S1486$INPUT_REGS	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.INPUT_REGS	PTR unsigned short  size(2) Largest target is 0

    S1486$HOLDING_REGS	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.HOLDING_REGS	PTR unsigned short  size(2) Largest target is 0

    S1486$au16regs	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.au16regs	PTR unsigned short  size(2) Largest target is 0

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> rtcc_handle(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> rtcc_handle(), TMR1_DefaultInterruptHandler(), NULL(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), 

    MSSP_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), NULL(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 6
		 -> I2C_Read1ByteRegister@returnValue.data(COMMON[2]), I2C_Read2ByteRegister@returnValue.data(COMMON[2]), I2C_Write1ByteRegister@data.data(COMMON[2]), I2C_Write2ByteRegister@data.data(COMMON[2]), 
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Disable(BANK0[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> bufferBlock.data(COMMON[2]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), 
		 -> I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S329$data_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Disable(BANK0[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> I2C_Read1ByteRegister@returnValue.data(COMMON[2]), I2C_Read2ByteRegister@returnValue.data(COMMON[2]), I2C_Write1ByteRegister@data.data(COMMON[2]), I2C_Write2ByteRegister@data.data(COMMON[2]), 
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Disable(BANK0[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> bufferBlock.data(COMMON[2]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), 
		 -> I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S329$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S329$callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    i2c_fsmStateTable	const PTR FTN()enum E3112[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(2) Largest target is 0

    S95$data	PTR unsigned char  size(2) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(2) Largest target is 0

    I2C_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 6
		 -> ReadData@aData(BANK0[6]), 

    I2C_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 2
		 -> SHT30_CMD_MEASURE_H_Disable(BANK0[2]), 


Critical Paths under _main in COMMON

    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _ReadData->_I2C_ReadNBytes
    _I2C_WriteNBytes->_I2C_SetAddressNackCallback
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_ReadNBytes->_I2C_Open
    _I2C_Open->_I2C_SetInterruptHandler
    _I2C_MasterRead->_I2C_MasterOperation
    _validateRequest->_Modbus_calcCRC
    _Modbus_getRxBuff->_EUSART_Read
    _Modbus_sendTxBuff->_Modbus_calcCRC
    _App_Init->_Device_Init
    _Tick_Init_SES->_TMR1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _Task_Sensor->_ReadData
    _ReadData->_I2C_WriteNBytes
    _ModbusSlave_Process->_ModbusRTU_Slave_Poll
    _ModbusRTU_Slave_Poll->_ModbusSlaveF04
    _validateRequest->_Modbus_calcCRC
    _ModbusSlaveF04->_Modbus_sendTxBuff
    _Modbus_sendTxBuff->_Modbus_calcCRC

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _ModbusSlave_Process->_ModbusRTU_Slave_Poll

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10688
                           _App_Init
                        _App_Process
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     664
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     490
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _App_Process                                          0     0      0    9850
                     _Task_Indicator
                            _Task_MB
                        _Task_Sensor
 ---------------------------------------------------------------------------------
 (2) _Task_Sensor                                          4     4      0    6748
                                             18 BANK0      4     4      0
                         _Get_millis
                           _ReadData
 ---------------------------------------------------------------------------------
 (3) _ReadData                                            14    14      0    6748
                                              4 BANK0     14    14      0
                         _Get_millis
                     _I2C_ReadNBytes
                    _I2C_WriteNBytes
 ---------------------------------------------------------------------------------
 (4) _I2C_WriteNBytes                                      4     1      3    4400
                                              0 BANK0      4     1      3
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C_SetAddressNackCallback                           4     0      4    2259
                                              6 COMMON     4     0      4
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (6) _I2C_SetCallback                                      4     1      3    1117
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWrite                                      0     0      0      68
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (4) _I2C_ReadNBytes                                       4     1      3    2141
                                              6 COMMON     4     1      3
                          _I2C_Close
                     _I2C_MasterRead
                           _I2C_Open
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C_SetBuffer                                        3     1      2    1574
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (5) _I2C_Open                                             2     2      0     189
                                              4 COMMON     2     2      0
                 _I2C_MasterClearIrq
                _I2C_MasterEnableIrq
                     _I2C_MasterOpen
            _I2C_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (6) _I2C_SetInterruptHandler                              2     0      2     121
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterEnableIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterRead                                       0     0      0      68
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterOperation                                  2     2      0      68
                                              2 COMMON     2     2      0
                    _I2C_MasterStart
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_Close                                            1     1      0      37
                                              2 COMMON     1     1      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Task_MB                                              0     0      0    3102
                   _ModbusSlave_Init
                _ModbusSlave_Process
 ---------------------------------------------------------------------------------
 (3) _ModbusSlave_Process                                  1     1      0    3080
               _ModbusRTU_Slave_Poll
 ---------------------------------------------------------------------------------
 (4) _ModbusRTU_Slave_Poll                                14    12      2    3074
                                             43 BANK0     10     8      2
                                              0 BANK1      4     4      0
                         _Get_millis
                     _ModbusSlaveF04
                   _Modbus_getRxBuff
                  _Modbus_sendTxBuff
                     _buildException
                    _validateRequest
 ---------------------------------------------------------------------------------
 (5) _validateRequest                                     17    17      0     584
                                              9 BANK0     17    17      0
                     _Modbus_calcCRC
 ---------------------------------------------------------------------------------
 (5) _buildException                                       3     3      0      65
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _Modbus_getRxBuff                                     8     8      0      74
                                              4 COMMON     1     1      0
                                              0 BANK0      7     7      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          2     2      0      37
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ModbusSlaveF04                                      20    17      3    1111
                                             24 BANK0     19    16      3
                  _Modbus_sendTxBuff
 ---------------------------------------------------------------------------------
 (5) _Modbus_sendTxBuff                                   15    15      0     640
                                              9 BANK0     15    15      0
                       _EUSART_Write
                  _EUSART_is_tx_done
                         _Get_millis
                     _Modbus_calcCRC
 ---------------------------------------------------------------------------------
 (6) _Modbus_calcCRC                                      15    13      2     411
                                              2 COMMON     6     4      2
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (4) _Get_millis                                           4     0      4       0
                                              2 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (6) _EUSART_is_tx_done                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ModbusSlave_Init                                     1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Task_Indicator                                       2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _App_Init                                             0     0      0     174
                        _Device_Init
                    _TMR1_StartTimer
                      _Tick_Init_SES
 ---------------------------------------------------------------------------------
 (2) _Tick_Init_SES                                        0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Device_Init                                          3     3      0       0
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     240
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     240
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                                NULL *
       _TMR1_DefaultInterruptHandler *
                        _rtcc_handle *
 ---------------------------------------------------------------------------------
 (11) _rtcc_handle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) NULL(Fake)                                           1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _App_Init
     _Device_Init
     _TMR1_StartTimer
     _Tick_Init_SES
       _TMR1_SetInterruptHandler
   _App_Process
     _Task_Indicator
     _Task_MB
       _ModbusSlave_Init
       _ModbusSlave_Process
         _ModbusRTU_Slave_Poll
           _Get_millis
           _ModbusSlaveF04
             _Modbus_sendTxBuff
               _EUSART_Write
               _EUSART_is_tx_done
               _Get_millis
               _Modbus_calcCRC
           _Modbus_getRxBuff
             _EUSART_Read
           _Modbus_sendTxBuff
           _buildException
           _validateRequest
             _Modbus_calcCRC
     _Task_Sensor
       _Get_millis
       _ReadData
         _Get_millis
         _I2C_ReadNBytes
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterRead
             _I2C_MasterOperation
               _I2C_MasterStart
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterEnableIrq
             _I2C_MasterOpen
             _I2C_SetInterruptHandler
           _I2C_SetBuffer
         _I2C_WriteNBytes
           _I2C_Close
           _I2C_MasterWrite
             _I2C_MasterOperation
           _I2C_Open
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _TMR1_ISR *
     _TMR1_CallBack
       NULL(Fake) *
       _TMR1_DefaultInterruptHandler *
       _rtcc_handle *
     _TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      CA       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     35      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      4      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               34      0      20      10       61.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      CA      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Apr 12 19:14:13 2023

                            _Modbus_sendTxBuff 00A2                           ?_ModbusSlave_Process 0070  
                ?_EUSART_SetRxInterruptHandler 0072                                    _SSPSTATbits 0214  
                           ?_Modbus_sendTxBuff 0070                                             l71 05F4  
                                           l80 0740                        buildException@exception 0073  
                                          l301 0FDE                                            l310 0F85  
                                          l135 075C                                            l162 0F52  
                                          l324 06BB                                            l165 07FF  
                                          l319 0F21                                            l159 0FEE  
                                          l282 07D8                                            l291 0F10  
                                          l443 0FD0                                            l612 0591  
                                          l621 0F0B                                            l446 0EF6  
                                          l278 0516                                            l294 0F15  
                                          l710 07C0                                            l631 0697  
                                          l640 0647                                            l464 0EFC  
                                          l288 078F                                            l713 0EF0  
                                          l491 0EF9                                            l636 0626  
                                          l804 04D6                                            l637 062F  
                                          l485 0EFF                                            l813 048C  
                                          l494 0EF3                                            l743 0F1B  
                                          l911 061E                                            l840 06BD  
                                          l920 043A                                            l672 0F33  
                                          l681 0F39                                            l842 06BF  
                                          l851 06C5                                            l675 0F27  
                                          l908 02FA                                            l924 037F  
                                          l932 0253                                            l853 06C7  
                                          l669 0F2D                                            l846 06C1  
                                          l942 00FA                                            l678 0F3F  
                                          l855 06DF                                            l848 06C3  
                                          l872 0F7A                                            l866 0670  
                                          l954 0164                                            l971 0776  
                                          l956 0183                                            l869 0F66  
                                          l965 03DE                                            l968 0554  
                                          l993 0F70                                            l978 07EA  
                                          l987 07FB                            __end_of_App_Process 0F7B  
                              _timer1ReloadVal 005D                         ??_EUSART_RxDataHandler 0070  
                          ??_Modbus_sendTxBuff 0029                 ?_EUSART_SetFramingErrorHandler 0072  
                                          wreg 0009                            __end_of_Device_Init 0671  
                 ??_I2C_SetAddressNackCallback 007A                                   ?_EUSART_Read 0070  
                                 _I2C_DO_RESET 0000                                ?_buildException 0070  
                                         l2101 0750                                           l2111 075A  
                                         l2103 0753                                           l2113 0F4C  
                                         l2105 0755                                           l2115 0F4F  
                                         l2107 0757                                           l2117 0F50  
                                         l2109 0758                                           l2119 07FC  
                                         l4001 017A                                           l4011 04E3  
                                         l4003 04D8                                           l2091 0745  
                                         l2173 0EEE                                           l3221 053F  
                                         l3213 0518                                           l4101 03DF  
                                         l4021 04F9                                           l4013 04EA  
                                         l4005 04DF                                           l2093 0747  
                                         l3215 0524                                           l4111 040A  
                                         l4031 050E                                           l4023 04FE  
                                         l4015 04EF                                           l4007 04E1  
                                         l2095 074A                                           l3321 06BC  
                                         l3217 052C                                           l4121 042A  
                                         l4113 0414                                           l4105 03E0  
                                         l4201 01A9                                           l4033 0511  
                                         l4025 04FF                                           l4017 04F0  
                                         l4009 04E2                                           l4041 0FD7  
                                         l2097 074C                                           l2089 0741  
                                         l3241 07AF                                           l3331 0648  
                                         l3219 0535                                           l4123 0433  
                                         l4107 03E6                                           l4115 0416  
                                         l4131 02FB                                           l4051 07C1  
                                         l4027 0504                                           l4019 04F5  
                                         l4035 0515                                           l4043 0FDD  
                                         l3251 0555                                           l2099 074E  
                                         l3243 07B0                                           l3235 07A9  
                                         l3333 0660                                           l3325 06C9  
                                         l4117 041C                                           l4109 0402  
                                         l4141 034C                                           l4133 032D  
                                         l4221 0201                                           l4213 01EA  
                                         l4301 07E3                                           l4061 07D1  
                                         l4053 07C8                                           l4029 050B  
                                         l4045 0F7B                                           l3181 0F2E  
                                         l3261 056C                                           l3253 0557  
                                         l3245 07B4                                           l3237 07AB  
                                         l3335 07EB                                           l4127 0435  
                                         l4119 0425                                           l4151 0364  
                                         l4135 0341                                           l4231 0214  
                                         l4215 01EF                                           l4207 01B9  
                                         l4303 07E7                                           l4063 07D4  
                                         l4055 07C9                                           l4039 0FD2  
                                         l4047 0F11                                           l3183 0F22  
                                         l3175 0F34                                           l3271 057F  
                                         l3263 056E                                           l3255 055E  
                                         l3247 07B6                                           l3239 07AD  
                                         l3337 07F4                                           l4081 0284  
                                         l4073 0254                                           l4153 0368  
                                         l4137 034A                                           l4241 0231  
                                         l4233 0219                                           l4225 0204  
                                         l4217 01F4                                           l4057 07CB  
                                         l4065 07D7                                           l3177 0F3A  
                                         l3281 058F                                           l3273 058A  
                                         l3265 0570                                           l3257 0567  
                                         l3249 07BD                                           l3195 0F16  
                                         l3435 0F5D                                           l4083 02E2  
                                         l4075 0271                                           l4163 037E  
                                         l4155 036E                                           l4147 034F  
                                         l4235 021E                                           l4219 01FA  
                                         l4059 07CE                                           l4171 05D7  
                                         l3179 0F28                                           l3275 058C  
                                         l3267 0571                                           l3259 056A  
                                         l3437 0F60                                           l4085 02E6  
                                         l4077 0279                                           l4093 05F6  
                                         l4157 0373                                           l4149 0361  
                                         l4237 0223                                           l4245 0233  
                                         l4069 0F0C                                           l4181 0724  
                                         l4173 05E0                                           l4261 04C3  
                                         l3277 058D                                           l3269 0578  
                                         l3439 0F63                                           l4087 02F7  
                                         l4079 027F                                           l4095 0609  
                                         l4159 037C                                           l4247 0242  
                                         l4239 022A                                           l4191 0192  
                                         l4271 075D                                           l4183 072D  
                                         l4175 05E9                                           l4167 05CD  
                                         l4263 04CD                                           l4255 048D  
                                         l4343 0F71                                           l3279 058E  
                                         l4601 06D4                                           l4089 02F7  
                                         l4097 0612                                           l4249 0248  
                                         l4193 0197                                           l4273 075D  
                                         l4185 0738                                           l4177 05EC  
                                         l4169 05CD                                           l4265 04D0  
                                         l4257 0498                                           l4281 043B  
                                         l4345 0F74                                           l3385 0FDF  
                                         l4099 0618                                           l4187 0186  
                                         l4275 0765                                           l4179 0724  
                                         l4267 04D2                                           l4259 04A4  
                                         l4291 0474                                           l4283 043D  
                                         l4347 0F77                                           l4197 0199  
                                         l4189 018F                                           l4277 076D  
                                         l3901 0EF1                                           l4269 04D4  
                                         l4293 0479                                           l4285 0462  
                                         l4199 01A3                                           l3911 0FCF  
                                         l3903 0FC4                                           l4295 0482  
                                         l4287 046E                                           l3841 0620  
                                         l4297 07D9                                           l3833 0EFA  
                                         l3921 0778                                           l3905 0FC9  
                                         l4289 0471                                           l3851 0642  
                                         l3843 062B                                           l3835 0F08  
                                         l4299 07DF                                           l3931 0789  
                                         l3923 077F                                           l3915 0EFD  
                                         l3907 0FCA                                           l3853 0643  
                                         l3845 0630                                           l3861 0382  
                                         l3917 0EF7                                           l3933 078B  
                                         l3925 0780                                           l3909 0FCC  
                                         l3941 069F                                           l4573 0F86  
                                         l3847 0638                                           l3855 0645  
                                         l3839 0620                                           l3863 0386  
                                         l3951 0684                                           l3919 0EF4  
                                         l3927 0781                                           l3935 078E  
                                         l3943 06AE                                           l4575 0F8C  
                                         l3849 063C                                           l3857 0F67  
                                         l3881 03AE                                           l3865 0389  
                                         l3961 0694                                           l3953 0688  
                                         l3945 0671                                           l3929 0786  
                                         l3891 03C6                                           l3883 03B2  
                                         l3875 039D                                           l3867 039B  
                                         l3971 00C8                                           l3963 0696  
                                         l3955 068E                                           l3947 0671  
                                         l3939 0699                                           l3893 03D1  
                                         l3885 03B6                                           l3877 03A3  
                                         l3869 039B                                           l3981 0100  
                                         l3973 00D0                                           l3957 068F  
                                         l3949 0677                                           l3895 03DA  
                                         l3887 03BC                                           l3879 03A8  
                                         l3991 0130                                           l3983 010F  
                                         l3975 00E7                                           l3967 00A2  
                                         l3959 0691                                           l3889 03C0  
                                         l3993 0138                                           l3985 0114  
                                         l3977 00EF                                           l3969 00AF  
                                         l3995 0145                                           l3987 0125  
                                         l3979 00FC                                           l3899 0F1C  
                                         l3997 0166                                           l3999 016B  
                                         u2000 0201                                           u2001 0200  
                                         u2010 0213                                           u2011 0212  
                                         u2020 021E                                           u2021 021D  
                                         u2030 0223                                           u2031 0222  
                                         u2040 04C3                                           u2041 04C2  
                                         u2050 0462                                           u2051 0461  
                                         u2060 0479                                           u2061 0478  
                                         _LATA 010C                                           u2070 0482  
                                         _LATB 010D                                           u2071 0481  
                                         _LATC 010E                                           u2080 07DF  
                                         u2081 07DE                                           _LATE 0110  
                                         u1700 03C6                                           u1701 03C5  
                                         u1710 0FC9                                           u1711 0FC8  
                                         u1640 0626                                           u1800 0138  
                                         u1720 077F                                           u1641 0625  
                                         u1801 0137                                           u1721 077E  
                                         u1650 062B                                           u1810 0164  
                                         u1730 0786                                           u1651 062A  
                                         u1811 0163                                           u1731 0785  
                                         u1660 0642                                           u1900 0361  
                                         u1820 04DF                                           u1740 069F  
                                         u1661 0641                                           u1901 0360  
                                         u1821 04DE                                           u1741 069E  
                                         u1750 0677                                           u1910 036E  
                                         u1830 0FD7                                           u1751 0676  
                                         u1911 036D                                           u1831 0FD6  
                                         u1680 03AE                                           u1760 068E  
                                         u1920 0373                                           u1840 07C8  
                                         u1681 03AD                                           u1761 068D  
                                         u1921 0372                                           u1841 07C7  
                                         u1690 03BC                                           u1770 00FA  
                                         u1850 02F7                                           u1930 05D7  
                                         u1691 03BB                                           u1675 03A4  
                                         u1771 00F9                                           u1851 02F6  
                                         u1931 05D6                                           u1780 0125  
                                         u1860 0414                                           u1940 05F4  
                                         u1781 0124                                           u1861 0413  
                                         u1941 05F3                                           u1790 0130  
                                         u1870 041C                                           u1950 072D  
                                         u1791 012F                                           u1855 02F3  
                                         u1871 041B                                           u1951 072C  
                                         u1880 042A                                           u1960 0740  
                                         u1785 0121                                           u1881 0429  
                                         u1961 073F                                           u1890 0341  
                                         u1970 0197                                           u1891 0340  
                                         u1971 0196                                           u1980 01A3  
                                         u1981 01A2                                           u1990 01E9  
                                         u1895 033D                                           u1991 01E8  
                                         _WPUB 020D                                           _WPUE 0210  
                                         _main 0F86                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                               __end_of_I2C_Open 0517  
                                         btemp 007E                                           start 0052  
                    __end_of_Modbus_sendTxBuff 0184                        _I2C_SetInterruptHandler 0F1C  
                              ?_Task_Indicator 0070                     ??_TMR1_SetInterruptHandler 0074  
                        ??_ModbusSlave_Process 0078                               ?_I2C_MasterClose 0070  
                              __end_of_Task_MB 07EB                                _I2C_WriteNBytes 05CB  
                                ?_EUSART_Write 0070                               ?_I2C_MasterStart 0070  
                                _I2C_DO_RX_ACK 0000                               ?_I2C_MasterWrite 0070  
                __end_of_OSCILLATOR_Initialize 0F53                                          ?_main 0070  
                              _TMR1_StartTimer 0EEE                                          _T1CON 0018  
                                        i1l530 0037                                          i1l532 0042  
                                        i1l526 001B                                          i1l527 0050  
                                        i1l528 002C                                          i1l537 0050  
                                        i1l643 0700                                          i1l660 0002  
                                        i1l740 0FB6                                          i1l724 0FFF  
                                        i1l653 05CA                                          i1l646 0702  
                                        i1l663 0F07                                          i1l736 0FC3  
                                        i1l657 07A8                                          i1l666 0F03  
                                        i1l746 0003                                          i1l990 0F5C  
                                        _RCREG 0199                                          _RCSTA 019D  
                             ?_validateRequest 0070                                          _TMR1H 0017  
                                        _TMR1L 0016                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _TRISE 0090                                          _TXREG 019A  
                                        _TXSTA 019E                                          _SW_Ad 006E  
                                   _Get_millis 0F67                               __end_of_TMR1_ISR 0FC4  
                               _WDT_Initialize 07FC                              __end_of_I2C_Close 07D9  
               I2C_MasterOperation@returnValue 0073                        __end_of_TMR1_Initialize 07C1  
                                        pclath 000A                               ?_I2C_SetCallback 0072  
                 I2C_SetAddressNackCallback@cb 0076                                          status 0003  
                                        wtemp0 007E                                _TMR1_WriteTimer 0FEF  
                             __end_of_App_Init 0F67                                __initialization 0054  
                                 __end_of_main 0F92                                    _App_Process 0F71  
                             __end_of_ReadData 04D7                                 ??_EUSART_Write 0072  
                  ?_INTERRUPT_InterruptManager 0070                   __end_of_ModbusRTU_Slave_Poll 0254  
               ??_EUSART_SetRxInterruptHandler 0074                                    _Device_Init 0648  
                                       ??_main 007A                         __end_of_WDT_Initialize 0800  
                                ??_Task_Sensor 0032      __end_of_EUSART_DefaultFramingErrorHandler 0003  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0002                     _EUSART_OverrunErrorHandler 00D9  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _BORCON 0116  
                                       _T1GCON 0019                        TMR1_WriteTimer@timerVal 0070  
                                       i1l3301 0FAA                                         i1l3231 0F53  
                                       i1l3303 0FB1                                         i1l3401 0FB9  
                                       i1l3411 06FA                                         i1l3403 06E0  
                                       i1l3421 05A1                                         i1l3413 06FB  
                                       i1l3405 06E7                                         i1l3191 07A2  
                                       i1l3431 05C0                                         i1l3423 05A7  
                                       i1l3415 0592                                         i1l3407 06EF  
                                       i1l3193 07A3                                         i1l3185 0790  
                                       i1l3433 05C7                                         i1l3425 05AC  
                                       i1l3417 0597                                         i1l3409 06F4  
                                       i1l3187 0798                                         i1l3283 0F04  
                                       i1l3427 05B1                                         i1l3419 059C  
                                       i1l3291 0FF5                                         i1l3189 079C  
                                       i1l3285 0F00                                         i1l3429 05B7  
                                       i1l3293 0FF7                                         i1l3295 0FF9  
                                       i1l3287 0FEF                                         u123_20 07A2  
                                       u131_20 06E7                                         u123_21 07A1  
                                       u131_21 06E6                                         i1l3289 0FF4  
                                       i1l3297 0FFB                                         i1l3801 004C  
                                       i1l3299 0FFD                                         i1l3399 0FB7  
                                       u132_20 06FA                                         u132_21 06F9  
                                       i1l3781 000A                                         i1l3791 0031  
                                       i1l3783 000F                                         u133_20 059C  
                                       u125_20 0FF4                                         u133_21 059B  
                                       u125_21 0FF3                                         i1l3785 0014  
                                       i1l3795 003C                                         i1l3787 0020  
                                       i1l3779 0006                                         i1l3789 0025  
                                       i1l3799 0047                                         u134_20 05AC  
                                       u126_20 0FB1                                         u134_21 05AB  
                                       u126_21 0FB0                                         u135_20 05C0  
                                       u135_21 05BF                                         u160_20 0041  
                                       u152_20 000A                                         u160_21 0040  
                                       u152_21 0009                                         u161_20 0047  
                                       u153_20 000F                                         u161_21 0046  
                                       u153_21 000E                                         u162_20 004C  
                                       u154_20 0014                                         u162_21 004B  
                                       u154_21 0013                                         u155_20 0020  
                                       u155_21 001F                                         u156_20 0025  
                                       u156_21 0024                                         u157_20 0031  
                                       u157_21 0030                                         u158_20 0036  
                                       u158_21 0035                                         u159_20 003C  
                                       u159_21 003B                                         _OSCCON 0099  
                    ??_I2C_SetInterruptHandler 0074                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                                       _SSPADD 0212                                         _SSPBUF 0211  
                          _I2C_MasterEnableIrq 0EFD                        __end_of_I2C_WriteNBytes 05F5  
                                    ??_Task_MB 0078           __end_of_TMR1_DefaultInterruptHandler 0004  
                 _TMR1_DefaultInterruptHandler 0003                        __end_of_TMR1_StartTimer 0EF1  
                                _I2C_MasterIsr 0000                            _EUSART_Transmit_ISR 06E0  
                            I2C_SetCallback@cb 0072                                  _I2C_SetBuffer 0FD1  
                 __end_of_I2C_MasterDisableIrq 0EFA                           ?_I2C_MasterEnableIrq 0070  
                          _I2C_DO_ADDRESS_NACK 0000                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 0F86                     _I2C_SetAddressNackCallback 0F7B  
                                  ?_Get_millis 0072                                   ?_rtcc_handle 0070  
                              ?_WDT_Initialize 0070       TMR1_SetInterruptHandler@InterruptHandler 0072  
      I2C_SetInterruptHandler@InterruptHandler 0072                        __end_of_TMR1_WriteTimer 1000  
                         ?_EUSART_Transmit_ISR 0070                          __end_of_TMR1_CallBack 0FB7  
                             ?_TMR1_Initialize 0070                              _SYSTEM_Initialize 0FDF  
                      __end_of__initialization 009E                            _I2C_MasterOperation 0777  
                          __end_of_Task_Sensor 048D                       validateRequest@u16MsgCRC 0036  
                           ?_SYSTEM_Initialize 0070           __end_of_EUSART_SetTxInterruptHandler 0F40  
                 _EUSART_SetTxInterruptHandler 0F3A                        _rdBlkRegCompleteHandler 0000  
                               __pcstackCOMMON 0070                                   __pidataBANK0 0F46  
                                 __pidataBANK1 0F40                         _I2C_CallbackReturnStop 0000  
                          ??_SYSTEM_Initialize 0074                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                           __end_of_fctsupported 1008  
                               ?_I2C_SetBuffer 0072                           ?_I2C_MasterOperation 0070  
                        ??_I2C_MasterEnableIrq 0072                                 _OPTION_REGbits 0095  
                             ??_buildException 0072                          I2C_ReadNBytes@address 0079  
                                   ??_I2C_Open 0074                           _eusartRxStatusBuffer 00BD  
                                    ?_App_Init 0070                     __end_of_I2C_MasterClearIrq 0EF4  
              ??_EUSART_SetOverrunErrorHandler 0074                      __end_of_SYSTEM_Initialize 0FEF  
                        ??_EUSART_Transmit_ISR 0070                                     __pbssBANK0 0055  
                                   __pbssBANK1 00A0                                     __pbssBANK2 0120  
                         __end_of_EUSART_Write 0648                                      ?_ReadData 0070  
                             ??_Task_Indicator 0072                           _ModbusRTU_Slave_Poll 0184  
                         Task_MB@f_Modbus_Init 0061                            _I2C_DO_RX_NACK_STOP 0000  
                        _rd1RegCompleteHandler 0000                               ?_I2C_WriteNBytes 0020  
                       I2C_WriteNBytes@address 0023                          _wr1RegCompleteHandler 0000  
                     ModbusRTU_Slave_Poll@size 004B                                     __pmaintext 0F86  
                                ReadData@aData 0028                  ?_EUSART_SetTxInterruptHandler 0072  
             _EUSART_TxDefaultInterruptHandler 00DF                                _I2C_DO_TX_EMPTY 0000  
                          I2C_SetBuffer@buffer 0074                               ?_TMR1_StartTimer 0070  
                                   ??_TMR1_ISR 0072                                     __pintentry 0004  
                                      _BAUDCON 019F                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 0072                                  _eusartRxCount 0064  
                                   ??_App_Init 0075                                        _OSCTUNE 0098  
                             _ModbusSlave_Init 0517                                    _Task_Sensor 043B  
                     ??_EUSART_SetErrorHandler 0074                                        _SSPCON1 0215  
                                      _SSPCON2 0216                                        _SSPSTAT 0214  
                   validateRequest@isSupported 0038                               ?_TMR1_WriteTimer 0070  
                         I2C_Close@returnValue 0072                                      _I2C_DO_RX 0000  
                                    _I2C_DO_TX 0000                                ReadData@valTime 002E  
                                   ??_ReadData 0024                          ?_ModbusRTU_Slave_Poll 004B  
                  __end_of_ModbusSlave_Process 0777                                      _I2C_Close 07C1  
                         _I2C_MasterDisableIrq 0EF7                                        _Task_MB 07D9  
                               _I2C_ReadNBytes 0723                                   ?_App_Process 0070  
                              ??_I2C_SetBuffer 0074                        I2C_SetBuffer@bufferSize 0072  
                           I2C_ReadNBytes@data 0076                                 _I2C_MasterRead 0F0C  
                               _I2C_MasterOpen 0FC4                                   ?_Device_Init 0070  
                                      __ptext1 0FDF                                        __ptext2 07FC  
                                      __ptext3 07A9                                        __ptext4 0741  
                                      __ptext5 0F4C                                        __ptext6 0555  
                                      __ptext7 0F3A                                        __ptext8 0F34  
                                      __ptext9 0F2E                 ??_TMR1_DefaultInterruptHandler 0070  
                                    _T1CONbits 0018                          _OSCILLATOR_Initialize 0F4C  
                           I2C_SetCallback@idx 0075                       ??_PIN_MANAGER_Initialize 0072  
                    ?_TMR1_SetInterruptHandler 0072                             I2C_SetCallback@ptr 0074  
                   _SHT30_CMD_MEASURE_H_Enable 006A                                ModbusSlaveF04@i 0049  
                                      clrloop0 0F93                     _SHT30_CMD_MEASURE_L_Enable 00E9  
                         end_of_initialization 009E                         Modbus_sendTxBuff@index 0032  
                   _SHT30_CMD_MEASURE_M_Enable 0068          __end_of_EUSART_SetOverrunErrorHandler 0F34  
                _EUSART_SetOverrunErrorHandler 0F2E                                        init_ram 0F9E  
                             _Modbus_getRxBuff 03DF                                     ?_I2C_Close 0070  
                                      initloop 0F9F                          ?_I2C_MasterDisableIrq 0070  
                       __end_of_I2C_ReadNBytes 0741                              _EUSART_Initialize 0555  
                  _SHT30_CMD_MEASURE_H_Disable 006C                             ?_EUSART_Initialize 0070  
                                    _RCSTAbits 019D                                  _Tick_Init_SES 07EB  
                       __end_of_I2C_MasterRead 0F11                         __end_of_I2C_MasterOpen 0FD1  
                  _SHT30_CMD_MEASURE_L_Disable 00E5                    _SHT30_CMD_MEASURE_M_Disable 00E7  
                          ??_EUSART_Initialize 0074                               ??_WDT_Initialize 0072  
                           ModbusSlaveF04@size 003A                 ??_EUSART_SetTxInterruptHandler 0074  
                                    _PORTAbits 000C                                Modbus_calcCRC@i 0025  
                              Modbus_calcCRC@j 0026                                   ??_Get_millis 0076  
                  ?_I2C_SetAddressNackCallback 0076                                    _f_Indicator 0062  
                       ??_ModbusRTU_Slave_Poll 004D                  ModbusRTU_Slave_Poll@u8Current 00EC  
                                 _fctsupported 1000                      __end_of_EUSART_Initialize 0592  
                                  _I2C_DO_IDLE 0000                                    _I2C_DO_RCEN 0000  
                             validateRequest@i 0039                                      _TXSTAbits 019E  
                              ?_I2C_ReadNBytes 0076                       _I2C_DO_SEND_RESTART_READ 0000  
                               ?_Tick_Init_SES 0070                             __end_of_Get_millis 0F71  
                              ?_I2C_MasterRead 0070                                ?_I2C_MasterOpen 0070  
                      _I2C_CallbackReturnReset 0000             __end_of_EUSART_DefaultErrorHandler 0F04  
                   _EUSART_DefaultErrorHandler 0F00                                   _EUSART_Write 061F  
                       ?_OSCILLATOR_Initialize 0070                            start_initialization 0054  
                                ??_EUSART_Read 0072                       ?_I2C_SetInterruptHandler 0072  
 EUSART_SetRxInterruptHandler@interruptHandler 0072   EUSART_SetTxInterruptHandler@interruptHandler 0072  
                            ??_I2C_MasterClose 0072                    ModbusRTU_Slave_Poll@i8state 00ED  
                       ??_I2C_MasterDisableIrq 0072                                    ??_I2C_Close 0072  
                            ??_I2C_MasterStart 0072                              ??_I2C_MasterWrite 0074  
                               _ModbusSlaveF04 0254                         _I2C_DO_RX_NACK_RESTART 0000  
                           _I2C_MasterClearIrq 0EF1                              ??_validateRequest 0029  
               ?_EUSART_SetOverrunErrorHandler 0072                     _EUSART_FramingErrorHandler 00DB  
                               _Modbus_calcCRC 0380                       __end_of_ModbusSlave_Init 0555  
                       _EUSART_SetErrorHandler 0F22                    __end_of_I2C_MasterEnableIrq 0F00  
                          ?_I2C_MasterClearIrq 0070                                    __pdataBANK0 0068  
                                  __pdataBANK1 00E5                         ModbusSlave_Init@_SW_Ad 0072  
                             _I2C_DO_SEND_STOP 0000                              ??_I2C_SetCallback 0075  
                          I2C_Open@returnValue 0075                              _i2c_fsmStateTable 0703  
                                  __pbssBIGRAM 20D4                    __end_of_EUSART_Transmit_ISR 0703  
                        _I2C_DO_SEND_ADR_WRITE 0000                                    __pbssCOMMON 007A  
                                    ___latbits 0002                                  _SensorAmbient 0059  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00EB  
                                 ?_Task_Sensor 0070                           ??_I2C_MasterClearIrq 0072  
                       __end_of_ModbusSlaveF04 02FB                     __end_of_EUSART_Receive_ISR 05CB  
                    _I2C_DO_SEND_RESTART_WRITE 0000               _EUSART_RxDefaultInterruptHandler 00DD  
                          __end_of_EUSART_Read 0698                                      __pnvBANK0 006E  
                                    __pnvBANK1 00D5                          _rd2RegCompleteHandler 0000  
                              ??_Tick_Init_SES 0074                         __end_of_Modbus_calcCRC 03DF  
                 __end_of_EUSART_RxDataHandler 07A9                                       ?_Task_MB 0070  
                       _PIN_MANAGER_Initialize 0741                          _wr2RegCompleteHandler 0000  
                      ModbusRTU_Slave_Poll@reg 00EB                           EUSART_Read@readValue 0073  
                  __end_of_I2C_MasterOperation 0790               __end_of_TMR1_SetInterruptHandler 0F1C  
                                 _eusartRxHead 007B                                   _eusartTxHead 0067  
                                 _eusartRxTail 007A                                   _eusartTxTail 0066  
                    __end_of_i2c_fsmStateTable 0723                   ??_INTERRUPT_InterruptManager 0072  
                     __end_of_Modbus_getRxBuff 043B                        _eusartTxBufferRemaining 0065  
              __end_of_I2C_SetInterruptHandler 0F22                         ModbusSlaveF04@u8regsno 0048  
                      I2C_MasterOperation@read 0072                                       _I2C_Open 04D7  
                                  _device_time 0055                              I2C_ReadNBytes@len 0077  
                               _eusartRxBuffer 0120                                ?_ModbusSlaveF04 0038  
                     ModbusSlaveF04@u8StartAdd 0046                                  _TMR1_CallBack 0FAA  
                               _eusartTxBuffer 0130         EUSART_SetErrorHandler@interruptHandler 0072  
                                     _LATCbits 010E                                      clear_ram0 0F92  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 0063                                ?_Modbus_calcCRC 0072  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0074  
                                     _PIR2bits 0012                              _EUSART_is_tx_done 0F08  
    __end_of_EUSART_DefaultOverrunErrorHandler 0F08            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0F04  
                                     _TMR1_ISR 0FB7                              ModbusSlaveF04@reg 0038  
                           ?_EUSART_is_tx_done 0070                           buildException@u8func 0074  
                        __end_of_I2C_SetBuffer 0FDF                              ??_TMR1_Initialize 0074  
                          ??_EUSART_is_tx_done 0072                                  ??_rtcc_handle 0070  
                                     _App_Init 0F5D                                    _EUSART_Read 0671  
                             ??_I2C_ReadNBytes 0079                                 ?_TMR1_CallBack 0070  
        Modbus_sendTxBuff@u32overTimecountDown 0034                                     _I2C_Status 00A0  
                                     _ReadData 048D                               ??_I2C_MasterRead 0074  
                          I2C_WriteNBytes@data 0020                               ??_I2C_MasterOpen 0072  
                    __end_of_EUSART_is_tx_done 0F0C                        ??_OSCILLATOR_Initialize 0072  
                          _EUSART_ErrorHandler 00D7                           _I2C_DO_SEND_ADR_READ 0000  
                  ?_EUSART_DefaultErrorHandler 0070                       _TMR1_SetInterruptHandler 0F16  
                        _TMR1_InterruptHandler 00D5                                _I2C_MasterClose 0EF4  
                I2C_SetAddressNackCallback@ptr 0078                                I2C_Open@address 0074  
                              _I2C_MasterStart 0EFA                                _I2C_MasterWrite 0F11  
                         _EUSART_RxDataHandler 0790                              ??_I2C_WriteNBytes 007A  
                                     __ptext10 0F28                                       __ptext11 0F22  
                                     __ptext20 0FD1                                       __ptext12 0F71  
                                     __ptext21 04D7                                       __ptext13 043B  
                                   _T1GCONbits 0019                                       __ptext30 0EF4  
                                     __ptext22 0F1C                                       __ptext14 048D  
                                     __ptext31 0EF1                                       __ptext23 0FC4  
                                     __ptext15 05CB                                       __ptext40 00A2  
                                     __ptext32 07D9                                       __ptext24 0EFD  
                                     __ptext16 0F7B                                       __ptext41 0380  
                                     __ptext33 075D                                       __ptext25 0F0C  
                                     __ptext17 0698                                       __ptext50 0EEE  
                                     __ptext42 0F67                                       __ptext34 0184  
                                     __ptext26 0777                                       __ptext18 0F11  
                                     __ptext51 0648                                       __ptext43 0F08  
                                     __ptext35 02FB                                       __ptext27 0EFA  
                                     __ptext19 0723                                       __ptext60 0F04  
                                     __ptext44 061F                                       __ptext36 05F5  
                                     __ptext28 07C1                                       __ptext61 0002  
                                     __ptext53 0FB7                                       __ptext45 0517  
                                     __ptext37 03DF                                       __ptext29 0EF7  
                                     __ptext62 0F00                                       __ptext54 0FEF  
                                     __ptext46 06BC                                       __ptext38 0671  
                                     __ptext63 0790                                       __ptext55 0FAA  
                                     __ptext47 0F5D                                       __ptext39 0254  
                                     __ptext56 0003                                       __ptext48 07EB  
                                     __ptext57 0F53                                       __ptext49 0F16  
                                     __ptext58 06E0                                       __ptext59 0592  
                              _validateRequest 02FB                              ??_TMR1_StartTimer 0072  
                          __end_of_rtcc_handle 0F5D                  Modbus_getRxBuff@bBuffOverflow 0074  
                      ?_EUSART_SetErrorHandler 0072                                _I2C_SetCallback 0698  
EUSART_SetOverrunErrorHandler@interruptHandler 0072                            Modbus_calcCRC@temp2 0021  
                      Modbus_sendTxBuff@u16crc 0030                                    _MB_Register 00D1  
                                     int$flags 007E                              ?_ModbusSlave_Init 0070  
           __end_of_INTERRUPT_InterruptManager 0052                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0F2E                  _EUSART_SetFramingErrorHandler 0F28  
                            ??_TMR1_WriteTimer 0072                             ??_ModbusSlave_Init 0072  
                                   _INTCONbits 000B                             I2C_WriteNBytes@len 0021  
                        ?_EUSART_RxDataHandler 0070                                ??_TMR1_CallBack 0070  
                                     intlevel1 0000                                 _buildException 05F5  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 0F28  
                          _I2C_DO_SEND_RESTART 0000           __end_of_EUSART_SetRxInterruptHandler 0F3A  
                 _EUSART_SetRxInterruptHandler 0F34                           Device_Init@value_SW1 00E4  
                         Device_Init@value_SW2 00E3                           Device_Init@value_SW3 00E2  
                         Device_Init@value_SW4 00E1                             Modbus_calcCRC@flag 0023  
                           Modbus_calcCRC@temp 0027                                  ??_App_Process 007A  
                               _Task_Indicator 06BC                             _EUSART_Receive_ISR 0592  
EUSART_SetFramingErrorHandler@interruptHandler 0072                        __end_of_I2C_MasterClose 0EF7  
                      __end_of_I2C_MasterStart 0EFD                ModbusRTU_Slave_Poll@u8exception 00EE  
                      __end_of_I2C_MasterWrite 0F16                                  ??_Device_Init 0072  
                                __pstringtext1 0703                                  __pstringtext2 1000  
                            ?_Modbus_getRxBuff 0070                            ?_EUSART_Receive_ISR 0070  
                      __end_of_validateRequest 0380                             ??_Modbus_getRxBuff 0020  
                                  _rtcc_handle 0F53                               ??_ModbusSlaveF04 003B  
                            Modbus_calcCRC@len 0020                                    _SSPCON1bits 0215  
                                  _SSPCON2bits 0216                            _ModbusSlave_Process 075D  
                       __end_of_buildException 061F                                     _SES_Modbus 20D4  
                           EUSART_Write@txData 0073                        __end_of_I2C_SetCallback 06BC  
               __end_of_PIN_MANAGER_Initialize 075D                               ??_Modbus_calcCRC 0074  
                         ??_EUSART_Receive_ISR 0071                          _MSSP_InterruptHandler 005F  
                              _TMR1_Initialize 07A9                             Task_Sensor@valTime 00CD  
                       __end_of_Task_Indicator 06E0                          __end_of_Tick_Init_SES 07FC  
