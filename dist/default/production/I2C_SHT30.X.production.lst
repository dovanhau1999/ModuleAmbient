

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Apr 26 08:58:31 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F1936
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	intentry,global,class=CODE,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,delta=2
   123                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   124                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   125                           	dabs	1,0x320,16
   126                           	dabs	1,0x2AC,68
   127                           	dabs	1,0x219C,0,_SES_Modbus
   128                           	dabs	1,0x7E,2
   129     0000                     
   130                           ; Version 2.40
   131                           ; Generated 17/11/2021 GMT
   132                           ; 
   133                           ; Copyright © 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   134                           ; All rights reserved.
   135                           ; 
   136                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   137                           ; 
   138                           ; Redistribution and use in source and binary forms, with or without modification, are
   139                           ; permitted provided that the following conditions are met:
   140                           ; 
   141                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   142                           ;        conditions and the following disclaimer.
   143                           ; 
   144                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   145                           ;        of conditions and the following disclaimer in the documentation and/or other
   146                           ;        materials provided with the distribution. Publication is not required when
   147                           ;        this file is used in an embedded application.
   148                           ; 
   149                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   150                           ;        software without specific prior written permission.
   151                           ; 
   152                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   153                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   154                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   155                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   156                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   157                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   158                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   159                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   160                           ; 
   161                           ; 
   162                           ; Code-generator required, PIC16F1936 Definitions
   163                           ; 
   164                           ; SFR Addresses
   165     0000                     	;# 
   166     0001                     	;# 
   167     0002                     	;# 
   168     0003                     	;# 
   169     0004                     	;# 
   170     0005                     	;# 
   171     0006                     	;# 
   172     0007                     	;# 
   173     0008                     	;# 
   174     0009                     	;# 
   175     000A                     	;# 
   176     000B                     	;# 
   177     000C                     	;# 
   178     000D                     	;# 
   179     000E                     	;# 
   180     0010                     	;# 
   181     0011                     	;# 
   182     0012                     	;# 
   183     0013                     	;# 
   184     0015                     	;# 
   185     0016                     	;# 
   186     0016                     	;# 
   187     0017                     	;# 
   188     0018                     	;# 
   189     0019                     	;# 
   190     001A                     	;# 
   191     001B                     	;# 
   192     001C                     	;# 
   193     001E                     	;# 
   194     001F                     	;# 
   195     008C                     	;# 
   196     008D                     	;# 
   197     008E                     	;# 
   198     0090                     	;# 
   199     0091                     	;# 
   200     0092                     	;# 
   201     0093                     	;# 
   202     0095                     	;# 
   203     0096                     	;# 
   204     0097                     	;# 
   205     0098                     	;# 
   206     0099                     	;# 
   207     009A                     	;# 
   208     009B                     	;# 
   209     009B                     	;# 
   210     009C                     	;# 
   211     009D                     	;# 
   212     009E                     	;# 
   213     010C                     	;# 
   214     010D                     	;# 
   215     010E                     	;# 
   216     0110                     	;# 
   217     0111                     	;# 
   218     0112                     	;# 
   219     0113                     	;# 
   220     0114                     	;# 
   221     0115                     	;# 
   222     0116                     	;# 
   223     0117                     	;# 
   224     0118                     	;# 
   225     0119                     	;# 
   226     011A                     	;# 
   227     011B                     	;# 
   228     011D                     	;# 
   229     018C                     	;# 
   230     018D                     	;# 
   231     0191                     	;# 
   232     0191                     	;# 
   233     0192                     	;# 
   234     0193                     	;# 
   235     0193                     	;# 
   236     0193                     	;# 
   237     0194                     	;# 
   238     0195                     	;# 
   239     0196                     	;# 
   240     0199                     	;# 
   241     019A                     	;# 
   242     019B                     	;# 
   243     019B                     	;# 
   244     019B                     	;# 
   245     019B                     	;# 
   246     019C                     	;# 
   247     019C                     	;# 
   248     019D                     	;# 
   249     019E                     	;# 
   250     019F                     	;# 
   251     020D                     	;# 
   252     0210                     	;# 
   253     0211                     	;# 
   254     0212                     	;# 
   255     0213                     	;# 
   256     0214                     	;# 
   257     0215                     	;# 
   258     0215                     	;# 
   259     0216                     	;# 
   260     0217                     	;# 
   261     0291                     	;# 
   262     0291                     	;# 
   263     0292                     	;# 
   264     0293                     	;# 
   265     0294                     	;# 
   266     0295                     	;# 
   267     0295                     	;# 
   268     0296                     	;# 
   269     0298                     	;# 
   270     0298                     	;# 
   271     0299                     	;# 
   272     029A                     	;# 
   273     029B                     	;# 
   274     029C                     	;# 
   275     029C                     	;# 
   276     029D                     	;# 
   277     029E                     	;# 
   278     029F                     	;# 
   279     0311                     	;# 
   280     0311                     	;# 
   281     0312                     	;# 
   282     0313                     	;# 
   283     0314                     	;# 
   284     0315                     	;# 
   285     0315                     	;# 
   286     0316                     	;# 
   287     0318                     	;# 
   288     0318                     	;# 
   289     0319                     	;# 
   290     031A                     	;# 
   291     031C                     	;# 
   292     031C                     	;# 
   293     031D                     	;# 
   294     031E                     	;# 
   295     0394                     	;# 
   296     0395                     	;# 
   297     0396                     	;# 
   298     0415                     	;# 
   299     0416                     	;# 
   300     0417                     	;# 
   301     041C                     	;# 
   302     041D                     	;# 
   303     041E                     	;# 
   304     0791                     	;# 
   305     0792                     	;# 
   306     0793                     	;# 
   307     0794                     	;# 
   308     0795                     	;# 
   309     0798                     	;# 
   310     0799                     	;# 
   311     07A0                     	;# 
   312     07A1                     	;# 
   313     07A3                     	;# 
   314     07A4                     	;# 
   315     07A6                     	;# 
   316     07A7                     	;# 
   317     07A9                     	;# 
   318     07AA                     	;# 
   319     0FE4                     	;# 
   320     0FE5                     	;# 
   321     0FE6                     	;# 
   322     0FE7                     	;# 
   323     0FE8                     	;# 
   324     0FE9                     	;# 
   325     0FEA                     	;# 
   326     0FEB                     	;# 
   327     0FED                     	;# 
   328     0FEE                     	;# 
   329     0FEF                     	;# 
   330     0000                     	;# 
   331     0001                     	;# 
   332     0002                     	;# 
   333     0003                     	;# 
   334     0004                     	;# 
   335     0005                     	;# 
   336     0006                     	;# 
   337     0007                     	;# 
   338     0008                     	;# 
   339     0009                     	;# 
   340     000A                     	;# 
   341     000B                     	;# 
   342     000C                     	;# 
   343     000D                     	;# 
   344     000E                     	;# 
   345     0010                     	;# 
   346     0011                     	;# 
   347     0012                     	;# 
   348     0013                     	;# 
   349     0015                     	;# 
   350     0016                     	;# 
   351     0016                     	;# 
   352     0017                     	;# 
   353     0018                     	;# 
   354     0019                     	;# 
   355     001A                     	;# 
   356     001B                     	;# 
   357     001C                     	;# 
   358     001E                     	;# 
   359     001F                     	;# 
   360     008C                     	;# 
   361     008D                     	;# 
   362     008E                     	;# 
   363     0090                     	;# 
   364     0091                     	;# 
   365     0092                     	;# 
   366     0093                     	;# 
   367     0095                     	;# 
   368     0096                     	;# 
   369     0097                     	;# 
   370     0098                     	;# 
   371     0099                     	;# 
   372     009A                     	;# 
   373     009B                     	;# 
   374     009B                     	;# 
   375     009C                     	;# 
   376     009D                     	;# 
   377     009E                     	;# 
   378     010C                     	;# 
   379     010D                     	;# 
   380     010E                     	;# 
   381     0110                     	;# 
   382     0111                     	;# 
   383     0112                     	;# 
   384     0113                     	;# 
   385     0114                     	;# 
   386     0115                     	;# 
   387     0116                     	;# 
   388     0117                     	;# 
   389     0118                     	;# 
   390     0119                     	;# 
   391     011A                     	;# 
   392     011B                     	;# 
   393     011D                     	;# 
   394     018C                     	;# 
   395     018D                     	;# 
   396     0191                     	;# 
   397     0191                     	;# 
   398     0192                     	;# 
   399     0193                     	;# 
   400     0193                     	;# 
   401     0193                     	;# 
   402     0194                     	;# 
   403     0195                     	;# 
   404     0196                     	;# 
   405     0199                     	;# 
   406     019A                     	;# 
   407     019B                     	;# 
   408     019B                     	;# 
   409     019B                     	;# 
   410     019B                     	;# 
   411     019C                     	;# 
   412     019C                     	;# 
   413     019D                     	;# 
   414     019E                     	;# 
   415     019F                     	;# 
   416     020D                     	;# 
   417     0210                     	;# 
   418     0211                     	;# 
   419     0212                     	;# 
   420     0213                     	;# 
   421     0214                     	;# 
   422     0215                     	;# 
   423     0215                     	;# 
   424     0216                     	;# 
   425     0217                     	;# 
   426     0291                     	;# 
   427     0291                     	;# 
   428     0292                     	;# 
   429     0293                     	;# 
   430     0294                     	;# 
   431     0295                     	;# 
   432     0295                     	;# 
   433     0296                     	;# 
   434     0298                     	;# 
   435     0298                     	;# 
   436     0299                     	;# 
   437     029A                     	;# 
   438     029B                     	;# 
   439     029C                     	;# 
   440     029C                     	;# 
   441     029D                     	;# 
   442     029E                     	;# 
   443     029F                     	;# 
   444     0311                     	;# 
   445     0311                     	;# 
   446     0312                     	;# 
   447     0313                     	;# 
   448     0314                     	;# 
   449     0315                     	;# 
   450     0315                     	;# 
   451     0316                     	;# 
   452     0318                     	;# 
   453     0318                     	;# 
   454     0319                     	;# 
   455     031A                     	;# 
   456     031C                     	;# 
   457     031C                     	;# 
   458     031D                     	;# 
   459     031E                     	;# 
   460     0394                     	;# 
   461     0395                     	;# 
   462     0396                     	;# 
   463     0415                     	;# 
   464     0416                     	;# 
   465     0417                     	;# 
   466     041C                     	;# 
   467     041D                     	;# 
   468     041E                     	;# 
   469     0791                     	;# 
   470     0792                     	;# 
   471     0793                     	;# 
   472     0794                     	;# 
   473     0795                     	;# 
   474     0798                     	;# 
   475     0799                     	;# 
   476     07A0                     	;# 
   477     07A1                     	;# 
   478     07A3                     	;# 
   479     07A4                     	;# 
   480     07A6                     	;# 
   481     07A7                     	;# 
   482     07A9                     	;# 
   483     07AA                     	;# 
   484     0FE4                     	;# 
   485     0FE5                     	;# 
   486     0FE6                     	;# 
   487     0FE7                     	;# 
   488     0FE8                     	;# 
   489     0FE9                     	;# 
   490     0FEA                     	;# 
   491     0FEB                     	;# 
   492     0FED                     	;# 
   493     0FEE                     	;# 
   494     0FEF                     	;# 
   495     0000                     	;# 
   496     0001                     	;# 
   497     0002                     	;# 
   498     0003                     	;# 
   499     0004                     	;# 
   500     0005                     	;# 
   501     0006                     	;# 
   502     0007                     	;# 
   503     0008                     	;# 
   504     0009                     	;# 
   505     000A                     	;# 
   506     000B                     	;# 
   507     000C                     	;# 
   508     000D                     	;# 
   509     000E                     	;# 
   510     0010                     	;# 
   511     0011                     	;# 
   512     0012                     	;# 
   513     0013                     	;# 
   514     0015                     	;# 
   515     0016                     	;# 
   516     0016                     	;# 
   517     0017                     	;# 
   518     0018                     	;# 
   519     0019                     	;# 
   520     001A                     	;# 
   521     001B                     	;# 
   522     001C                     	;# 
   523     001E                     	;# 
   524     001F                     	;# 
   525     008C                     	;# 
   526     008D                     	;# 
   527     008E                     	;# 
   528     0090                     	;# 
   529     0091                     	;# 
   530     0092                     	;# 
   531     0093                     	;# 
   532     0095                     	;# 
   533     0096                     	;# 
   534     0097                     	;# 
   535     0098                     	;# 
   536     0099                     	;# 
   537     009A                     	;# 
   538     009B                     	;# 
   539     009B                     	;# 
   540     009C                     	;# 
   541     009D                     	;# 
   542     009E                     	;# 
   543     010C                     	;# 
   544     010D                     	;# 
   545     010E                     	;# 
   546     0110                     	;# 
   547     0111                     	;# 
   548     0112                     	;# 
   549     0113                     	;# 
   550     0114                     	;# 
   551     0115                     	;# 
   552     0116                     	;# 
   553     0117                     	;# 
   554     0118                     	;# 
   555     0119                     	;# 
   556     011A                     	;# 
   557     011B                     	;# 
   558     011D                     	;# 
   559     018C                     	;# 
   560     018D                     	;# 
   561     0191                     	;# 
   562     0191                     	;# 
   563     0192                     	;# 
   564     0193                     	;# 
   565     0193                     	;# 
   566     0193                     	;# 
   567     0194                     	;# 
   568     0195                     	;# 
   569     0196                     	;# 
   570     0199                     	;# 
   571     019A                     	;# 
   572     019B                     	;# 
   573     019B                     	;# 
   574     019B                     	;# 
   575     019B                     	;# 
   576     019C                     	;# 
   577     019C                     	;# 
   578     019D                     	;# 
   579     019E                     	;# 
   580     019F                     	;# 
   581     020D                     	;# 
   582     0210                     	;# 
   583     0211                     	;# 
   584     0212                     	;# 
   585     0213                     	;# 
   586     0214                     	;# 
   587     0215                     	;# 
   588     0215                     	;# 
   589     0216                     	;# 
   590     0217                     	;# 
   591     0291                     	;# 
   592     0291                     	;# 
   593     0292                     	;# 
   594     0293                     	;# 
   595     0294                     	;# 
   596     0295                     	;# 
   597     0295                     	;# 
   598     0296                     	;# 
   599     0298                     	;# 
   600     0298                     	;# 
   601     0299                     	;# 
   602     029A                     	;# 
   603     029B                     	;# 
   604     029C                     	;# 
   605     029C                     	;# 
   606     029D                     	;# 
   607     029E                     	;# 
   608     029F                     	;# 
   609     0311                     	;# 
   610     0311                     	;# 
   611     0312                     	;# 
   612     0313                     	;# 
   613     0314                     	;# 
   614     0315                     	;# 
   615     0315                     	;# 
   616     0316                     	;# 
   617     0318                     	;# 
   618     0318                     	;# 
   619     0319                     	;# 
   620     031A                     	;# 
   621     031C                     	;# 
   622     031C                     	;# 
   623     031D                     	;# 
   624     031E                     	;# 
   625     0394                     	;# 
   626     0395                     	;# 
   627     0396                     	;# 
   628     0415                     	;# 
   629     0416                     	;# 
   630     0417                     	;# 
   631     041C                     	;# 
   632     041D                     	;# 
   633     041E                     	;# 
   634     0791                     	;# 
   635     0792                     	;# 
   636     0793                     	;# 
   637     0794                     	;# 
   638     0795                     	;# 
   639     0798                     	;# 
   640     0799                     	;# 
   641     07A0                     	;# 
   642     07A1                     	;# 
   643     07A3                     	;# 
   644     07A4                     	;# 
   645     07A6                     	;# 
   646     07A7                     	;# 
   647     07A9                     	;# 
   648     07AA                     	;# 
   649     0FE4                     	;# 
   650     0FE5                     	;# 
   651     0FE6                     	;# 
   652     0FE7                     	;# 
   653     0FE8                     	;# 
   654     0FE9                     	;# 
   655     0FEA                     	;# 
   656     0FEB                     	;# 
   657     0FED                     	;# 
   658     0FEE                     	;# 
   659     0FEF                     	;# 
   660     0000                     	;# 
   661     0001                     	;# 
   662     0002                     	;# 
   663     0003                     	;# 
   664     0004                     	;# 
   665     0005                     	;# 
   666     0006                     	;# 
   667     0007                     	;# 
   668     0008                     	;# 
   669     0009                     	;# 
   670     000A                     	;# 
   671     000B                     	;# 
   672     000C                     	;# 
   673     000D                     	;# 
   674     000E                     	;# 
   675     0010                     	;# 
   676     0011                     	;# 
   677     0012                     	;# 
   678     0013                     	;# 
   679     0015                     	;# 
   680     0016                     	;# 
   681     0016                     	;# 
   682     0017                     	;# 
   683     0018                     	;# 
   684     0019                     	;# 
   685     001A                     	;# 
   686     001B                     	;# 
   687     001C                     	;# 
   688     001E                     	;# 
   689     001F                     	;# 
   690     008C                     	;# 
   691     008D                     	;# 
   692     008E                     	;# 
   693     0090                     	;# 
   694     0091                     	;# 
   695     0092                     	;# 
   696     0093                     	;# 
   697     0095                     	;# 
   698     0096                     	;# 
   699     0097                     	;# 
   700     0098                     	;# 
   701     0099                     	;# 
   702     009A                     	;# 
   703     009B                     	;# 
   704     009B                     	;# 
   705     009C                     	;# 
   706     009D                     	;# 
   707     009E                     	;# 
   708     010C                     	;# 
   709     010D                     	;# 
   710     010E                     	;# 
   711     0110                     	;# 
   712     0111                     	;# 
   713     0112                     	;# 
   714     0113                     	;# 
   715     0114                     	;# 
   716     0115                     	;# 
   717     0116                     	;# 
   718     0117                     	;# 
   719     0118                     	;# 
   720     0119                     	;# 
   721     011A                     	;# 
   722     011B                     	;# 
   723     011D                     	;# 
   724     018C                     	;# 
   725     018D                     	;# 
   726     0191                     	;# 
   727     0191                     	;# 
   728     0192                     	;# 
   729     0193                     	;# 
   730     0193                     	;# 
   731     0193                     	;# 
   732     0194                     	;# 
   733     0195                     	;# 
   734     0196                     	;# 
   735     0199                     	;# 
   736     019A                     	;# 
   737     019B                     	;# 
   738     019B                     	;# 
   739     019B                     	;# 
   740     019B                     	;# 
   741     019C                     	;# 
   742     019C                     	;# 
   743     019D                     	;# 
   744     019E                     	;# 
   745     019F                     	;# 
   746     020D                     	;# 
   747     0210                     	;# 
   748     0211                     	;# 
   749     0212                     	;# 
   750     0213                     	;# 
   751     0214                     	;# 
   752     0215                     	;# 
   753     0215                     	;# 
   754     0216                     	;# 
   755     0217                     	;# 
   756     0291                     	;# 
   757     0291                     	;# 
   758     0292                     	;# 
   759     0293                     	;# 
   760     0294                     	;# 
   761     0295                     	;# 
   762     0295                     	;# 
   763     0296                     	;# 
   764     0298                     	;# 
   765     0298                     	;# 
   766     0299                     	;# 
   767     029A                     	;# 
   768     029B                     	;# 
   769     029C                     	;# 
   770     029C                     	;# 
   771     029D                     	;# 
   772     029E                     	;# 
   773     029F                     	;# 
   774     0311                     	;# 
   775     0311                     	;# 
   776     0312                     	;# 
   777     0313                     	;# 
   778     0314                     	;# 
   779     0315                     	;# 
   780     0315                     	;# 
   781     0316                     	;# 
   782     0318                     	;# 
   783     0318                     	;# 
   784     0319                     	;# 
   785     031A                     	;# 
   786     031C                     	;# 
   787     031C                     	;# 
   788     031D                     	;# 
   789     031E                     	;# 
   790     0394                     	;# 
   791     0395                     	;# 
   792     0396                     	;# 
   793     0415                     	;# 
   794     0416                     	;# 
   795     0417                     	;# 
   796     041C                     	;# 
   797     041D                     	;# 
   798     041E                     	;# 
   799     0791                     	;# 
   800     0792                     	;# 
   801     0793                     	;# 
   802     0794                     	;# 
   803     0795                     	;# 
   804     0798                     	;# 
   805     0799                     	;# 
   806     07A0                     	;# 
   807     07A1                     	;# 
   808     07A3                     	;# 
   809     07A4                     	;# 
   810     07A6                     	;# 
   811     07A7                     	;# 
   812     07A9                     	;# 
   813     07AA                     	;# 
   814     0FE4                     	;# 
   815     0FE5                     	;# 
   816     0FE6                     	;# 
   817     0FE7                     	;# 
   818     0FE8                     	;# 
   819     0FE9                     	;# 
   820     0FEA                     	;# 
   821     0FEB                     	;# 
   822     0FED                     	;# 
   823     0FEE                     	;# 
   824     0FEF                     	;# 
   825     0000                     	;# 
   826     0001                     	;# 
   827     0002                     	;# 
   828     0003                     	;# 
   829     0004                     	;# 
   830     0005                     	;# 
   831     0006                     	;# 
   832     0007                     	;# 
   833     0008                     	;# 
   834     0009                     	;# 
   835     000A                     	;# 
   836     000B                     	;# 
   837     000C                     	;# 
   838     000D                     	;# 
   839     000E                     	;# 
   840     0010                     	;# 
   841     0011                     	;# 
   842     0012                     	;# 
   843     0013                     	;# 
   844     0015                     	;# 
   845     0016                     	;# 
   846     0016                     	;# 
   847     0017                     	;# 
   848     0018                     	;# 
   849     0019                     	;# 
   850     001A                     	;# 
   851     001B                     	;# 
   852     001C                     	;# 
   853     001E                     	;# 
   854     001F                     	;# 
   855     008C                     	;# 
   856     008D                     	;# 
   857     008E                     	;# 
   858     0090                     	;# 
   859     0091                     	;# 
   860     0092                     	;# 
   861     0093                     	;# 
   862     0095                     	;# 
   863     0096                     	;# 
   864     0097                     	;# 
   865     0098                     	;# 
   866     0099                     	;# 
   867     009A                     	;# 
   868     009B                     	;# 
   869     009B                     	;# 
   870     009C                     	;# 
   871     009D                     	;# 
   872     009E                     	;# 
   873     010C                     	;# 
   874     010D                     	;# 
   875     010E                     	;# 
   876     0110                     	;# 
   877     0111                     	;# 
   878     0112                     	;# 
   879     0113                     	;# 
   880     0114                     	;# 
   881     0115                     	;# 
   882     0116                     	;# 
   883     0117                     	;# 
   884     0118                     	;# 
   885     0119                     	;# 
   886     011A                     	;# 
   887     011B                     	;# 
   888     011D                     	;# 
   889     018C                     	;# 
   890     018D                     	;# 
   891     0191                     	;# 
   892     0191                     	;# 
   893     0192                     	;# 
   894     0193                     	;# 
   895     0193                     	;# 
   896     0193                     	;# 
   897     0194                     	;# 
   898     0195                     	;# 
   899     0196                     	;# 
   900     0199                     	;# 
   901     019A                     	;# 
   902     019B                     	;# 
   903     019B                     	;# 
   904     019B                     	;# 
   905     019B                     	;# 
   906     019C                     	;# 
   907     019C                     	;# 
   908     019D                     	;# 
   909     019E                     	;# 
   910     019F                     	;# 
   911     020D                     	;# 
   912     0210                     	;# 
   913     0211                     	;# 
   914     0212                     	;# 
   915     0213                     	;# 
   916     0214                     	;# 
   917     0215                     	;# 
   918     0215                     	;# 
   919     0216                     	;# 
   920     0217                     	;# 
   921     0291                     	;# 
   922     0291                     	;# 
   923     0292                     	;# 
   924     0293                     	;# 
   925     0294                     	;# 
   926     0295                     	;# 
   927     0295                     	;# 
   928     0296                     	;# 
   929     0298                     	;# 
   930     0298                     	;# 
   931     0299                     	;# 
   932     029A                     	;# 
   933     029B                     	;# 
   934     029C                     	;# 
   935     029C                     	;# 
   936     029D                     	;# 
   937     029E                     	;# 
   938     029F                     	;# 
   939     0311                     	;# 
   940     0311                     	;# 
   941     0312                     	;# 
   942     0313                     	;# 
   943     0314                     	;# 
   944     0315                     	;# 
   945     0315                     	;# 
   946     0316                     	;# 
   947     0318                     	;# 
   948     0318                     	;# 
   949     0319                     	;# 
   950     031A                     	;# 
   951     031C                     	;# 
   952     031C                     	;# 
   953     031D                     	;# 
   954     031E                     	;# 
   955     0394                     	;# 
   956     0395                     	;# 
   957     0396                     	;# 
   958     0415                     	;# 
   959     0416                     	;# 
   960     0417                     	;# 
   961     041C                     	;# 
   962     041D                     	;# 
   963     041E                     	;# 
   964     0791                     	;# 
   965     0792                     	;# 
   966     0793                     	;# 
   967     0794                     	;# 
   968     0795                     	;# 
   969     0798                     	;# 
   970     0799                     	;# 
   971     07A0                     	;# 
   972     07A1                     	;# 
   973     07A3                     	;# 
   974     07A4                     	;# 
   975     07A6                     	;# 
   976     07A7                     	;# 
   977     07A9                     	;# 
   978     07AA                     	;# 
   979     0FE4                     	;# 
   980     0FE5                     	;# 
   981     0FE6                     	;# 
   982     0FE7                     	;# 
   983     0FE8                     	;# 
   984     0FE9                     	;# 
   985     0FEA                     	;# 
   986     0FEB                     	;# 
   987     0FED                     	;# 
   988     0FEE                     	;# 
   989     0FEF                     	;# 
   990     0000                     	;# 
   991     0001                     	;# 
   992     0002                     	;# 
   993     0003                     	;# 
   994     0004                     	;# 
   995     0005                     	;# 
   996     0006                     	;# 
   997     0007                     	;# 
   998     0008                     	;# 
   999     0009                     	;# 
  1000     000A                     	;# 
  1001     000B                     	;# 
  1002     000C                     	;# 
  1003     000D                     	;# 
  1004     000E                     	;# 
  1005     0010                     	;# 
  1006     0011                     	;# 
  1007     0012                     	;# 
  1008     0013                     	;# 
  1009     0015                     	;# 
  1010     0016                     	;# 
  1011     0016                     	;# 
  1012     0017                     	;# 
  1013     0018                     	;# 
  1014     0019                     	;# 
  1015     001A                     	;# 
  1016     001B                     	;# 
  1017     001C                     	;# 
  1018     001E                     	;# 
  1019     001F                     	;# 
  1020     008C                     	;# 
  1021     008D                     	;# 
  1022     008E                     	;# 
  1023     0090                     	;# 
  1024     0091                     	;# 
  1025     0092                     	;# 
  1026     0093                     	;# 
  1027     0095                     	;# 
  1028     0096                     	;# 
  1029     0097                     	;# 
  1030     0098                     	;# 
  1031     0099                     	;# 
  1032     009A                     	;# 
  1033     009B                     	;# 
  1034     009B                     	;# 
  1035     009C                     	;# 
  1036     009D                     	;# 
  1037     009E                     	;# 
  1038     010C                     	;# 
  1039     010D                     	;# 
  1040     010E                     	;# 
  1041     0110                     	;# 
  1042     0111                     	;# 
  1043     0112                     	;# 
  1044     0113                     	;# 
  1045     0114                     	;# 
  1046     0115                     	;# 
  1047     0116                     	;# 
  1048     0117                     	;# 
  1049     0118                     	;# 
  1050     0119                     	;# 
  1051     011A                     	;# 
  1052     011B                     	;# 
  1053     011D                     	;# 
  1054     018C                     	;# 
  1055     018D                     	;# 
  1056     0191                     	;# 
  1057     0191                     	;# 
  1058     0192                     	;# 
  1059     0193                     	;# 
  1060     0193                     	;# 
  1061     0193                     	;# 
  1062     0194                     	;# 
  1063     0195                     	;# 
  1064     0196                     	;# 
  1065     0199                     	;# 
  1066     019A                     	;# 
  1067     019B                     	;# 
  1068     019B                     	;# 
  1069     019B                     	;# 
  1070     019B                     	;# 
  1071     019C                     	;# 
  1072     019C                     	;# 
  1073     019D                     	;# 
  1074     019E                     	;# 
  1075     019F                     	;# 
  1076     020D                     	;# 
  1077     0210                     	;# 
  1078     0211                     	;# 
  1079     0212                     	;# 
  1080     0213                     	;# 
  1081     0214                     	;# 
  1082     0215                     	;# 
  1083     0215                     	;# 
  1084     0216                     	;# 
  1085     0217                     	;# 
  1086     0291                     	;# 
  1087     0291                     	;# 
  1088     0292                     	;# 
  1089     0293                     	;# 
  1090     0294                     	;# 
  1091     0295                     	;# 
  1092     0295                     	;# 
  1093     0296                     	;# 
  1094     0298                     	;# 
  1095     0298                     	;# 
  1096     0299                     	;# 
  1097     029A                     	;# 
  1098     029B                     	;# 
  1099     029C                     	;# 
  1100     029C                     	;# 
  1101     029D                     	;# 
  1102     029E                     	;# 
  1103     029F                     	;# 
  1104     0311                     	;# 
  1105     0311                     	;# 
  1106     0312                     	;# 
  1107     0313                     	;# 
  1108     0314                     	;# 
  1109     0315                     	;# 
  1110     0315                     	;# 
  1111     0316                     	;# 
  1112     0318                     	;# 
  1113     0318                     	;# 
  1114     0319                     	;# 
  1115     031A                     	;# 
  1116     031C                     	;# 
  1117     031C                     	;# 
  1118     031D                     	;# 
  1119     031E                     	;# 
  1120     0394                     	;# 
  1121     0395                     	;# 
  1122     0396                     	;# 
  1123     0415                     	;# 
  1124     0416                     	;# 
  1125     0417                     	;# 
  1126     041C                     	;# 
  1127     041D                     	;# 
  1128     041E                     	;# 
  1129     0791                     	;# 
  1130     0792                     	;# 
  1131     0793                     	;# 
  1132     0794                     	;# 
  1133     0795                     	;# 
  1134     0798                     	;# 
  1135     0799                     	;# 
  1136     07A0                     	;# 
  1137     07A1                     	;# 
  1138     07A3                     	;# 
  1139     07A4                     	;# 
  1140     07A6                     	;# 
  1141     07A7                     	;# 
  1142     07A9                     	;# 
  1143     07AA                     	;# 
  1144     0FE4                     	;# 
  1145     0FE5                     	;# 
  1146     0FE6                     	;# 
  1147     0FE7                     	;# 
  1148     0FE8                     	;# 
  1149     0FE9                     	;# 
  1150     0FEA                     	;# 
  1151     0FEB                     	;# 
  1152     0FED                     	;# 
  1153     0FEE                     	;# 
  1154     0FEF                     	;# 
  1155     0000                     	;# 
  1156     0001                     	;# 
  1157     0002                     	;# 
  1158     0003                     	;# 
  1159     0004                     	;# 
  1160     0005                     	;# 
  1161     0006                     	;# 
  1162     0007                     	;# 
  1163     0008                     	;# 
  1164     0009                     	;# 
  1165     000A                     	;# 
  1166     000B                     	;# 
  1167     000C                     	;# 
  1168     000D                     	;# 
  1169     000E                     	;# 
  1170     0010                     	;# 
  1171     0011                     	;# 
  1172     0012                     	;# 
  1173     0013                     	;# 
  1174     0015                     	;# 
  1175     0016                     	;# 
  1176     0016                     	;# 
  1177     0017                     	;# 
  1178     0018                     	;# 
  1179     0019                     	;# 
  1180     001A                     	;# 
  1181     001B                     	;# 
  1182     001C                     	;# 
  1183     001E                     	;# 
  1184     001F                     	;# 
  1185     008C                     	;# 
  1186     008D                     	;# 
  1187     008E                     	;# 
  1188     0090                     	;# 
  1189     0091                     	;# 
  1190     0092                     	;# 
  1191     0093                     	;# 
  1192     0095                     	;# 
  1193     0096                     	;# 
  1194     0097                     	;# 
  1195     0098                     	;# 
  1196     0099                     	;# 
  1197     009A                     	;# 
  1198     009B                     	;# 
  1199     009B                     	;# 
  1200     009C                     	;# 
  1201     009D                     	;# 
  1202     009E                     	;# 
  1203     010C                     	;# 
  1204     010D                     	;# 
  1205     010E                     	;# 
  1206     0110                     	;# 
  1207     0111                     	;# 
  1208     0112                     	;# 
  1209     0113                     	;# 
  1210     0114                     	;# 
  1211     0115                     	;# 
  1212     0116                     	;# 
  1213     0117                     	;# 
  1214     0118                     	;# 
  1215     0119                     	;# 
  1216     011A                     	;# 
  1217     011B                     	;# 
  1218     011D                     	;# 
  1219     018C                     	;# 
  1220     018D                     	;# 
  1221     0191                     	;# 
  1222     0191                     	;# 
  1223     0192                     	;# 
  1224     0193                     	;# 
  1225     0193                     	;# 
  1226     0193                     	;# 
  1227     0194                     	;# 
  1228     0195                     	;# 
  1229     0196                     	;# 
  1230     0199                     	;# 
  1231     019A                     	;# 
  1232     019B                     	;# 
  1233     019B                     	;# 
  1234     019B                     	;# 
  1235     019B                     	;# 
  1236     019C                     	;# 
  1237     019C                     	;# 
  1238     019D                     	;# 
  1239     019E                     	;# 
  1240     019F                     	;# 
  1241     020D                     	;# 
  1242     0210                     	;# 
  1243     0211                     	;# 
  1244     0212                     	;# 
  1245     0213                     	;# 
  1246     0214                     	;# 
  1247     0215                     	;# 
  1248     0215                     	;# 
  1249     0216                     	;# 
  1250     0217                     	;# 
  1251     0291                     	;# 
  1252     0291                     	;# 
  1253     0292                     	;# 
  1254     0293                     	;# 
  1255     0294                     	;# 
  1256     0295                     	;# 
  1257     0295                     	;# 
  1258     0296                     	;# 
  1259     0298                     	;# 
  1260     0298                     	;# 
  1261     0299                     	;# 
  1262     029A                     	;# 
  1263     029B                     	;# 
  1264     029C                     	;# 
  1265     029C                     	;# 
  1266     029D                     	;# 
  1267     029E                     	;# 
  1268     029F                     	;# 
  1269     0311                     	;# 
  1270     0311                     	;# 
  1271     0312                     	;# 
  1272     0313                     	;# 
  1273     0314                     	;# 
  1274     0315                     	;# 
  1275     0315                     	;# 
  1276     0316                     	;# 
  1277     0318                     	;# 
  1278     0318                     	;# 
  1279     0319                     	;# 
  1280     031A                     	;# 
  1281     031C                     	;# 
  1282     031C                     	;# 
  1283     031D                     	;# 
  1284     031E                     	;# 
  1285     0394                     	;# 
  1286     0395                     	;# 
  1287     0396                     	;# 
  1288     0415                     	;# 
  1289     0416                     	;# 
  1290     0417                     	;# 
  1291     041C                     	;# 
  1292     041D                     	;# 
  1293     041E                     	;# 
  1294     0791                     	;# 
  1295     0792                     	;# 
  1296     0793                     	;# 
  1297     0794                     	;# 
  1298     0795                     	;# 
  1299     0798                     	;# 
  1300     0799                     	;# 
  1301     07A0                     	;# 
  1302     07A1                     	;# 
  1303     07A3                     	;# 
  1304     07A4                     	;# 
  1305     07A6                     	;# 
  1306     07A7                     	;# 
  1307     07A9                     	;# 
  1308     07AA                     	;# 
  1309     0FE4                     	;# 
  1310     0FE5                     	;# 
  1311     0FE6                     	;# 
  1312     0FE7                     	;# 
  1313     0FE8                     	;# 
  1314     0FE9                     	;# 
  1315     0FEA                     	;# 
  1316     0FEB                     	;# 
  1317     0FED                     	;# 
  1318     0FEE                     	;# 
  1319     0FEF                     	;# 
  1320     0000                     	;# 
  1321     0001                     	;# 
  1322     0002                     	;# 
  1323     0003                     	;# 
  1324     0004                     	;# 
  1325     0005                     	;# 
  1326     0006                     	;# 
  1327     0007                     	;# 
  1328     0008                     	;# 
  1329     0009                     	;# 
  1330     000A                     	;# 
  1331     000B                     	;# 
  1332     000C                     	;# 
  1333     000D                     	;# 
  1334     000E                     	;# 
  1335     0010                     	;# 
  1336     0011                     	;# 
  1337     0012                     	;# 
  1338     0013                     	;# 
  1339     0015                     	;# 
  1340     0016                     	;# 
  1341     0016                     	;# 
  1342     0017                     	;# 
  1343     0018                     	;# 
  1344     0019                     	;# 
  1345     001A                     	;# 
  1346     001B                     	;# 
  1347     001C                     	;# 
  1348     001E                     	;# 
  1349     001F                     	;# 
  1350     008C                     	;# 
  1351     008D                     	;# 
  1352     008E                     	;# 
  1353     0090                     	;# 
  1354     0091                     	;# 
  1355     0092                     	;# 
  1356     0093                     	;# 
  1357     0095                     	;# 
  1358     0096                     	;# 
  1359     0097                     	;# 
  1360     0098                     	;# 
  1361     0099                     	;# 
  1362     009A                     	;# 
  1363     009B                     	;# 
  1364     009B                     	;# 
  1365     009C                     	;# 
  1366     009D                     	;# 
  1367     009E                     	;# 
  1368     010C                     	;# 
  1369     010D                     	;# 
  1370     010E                     	;# 
  1371     0110                     	;# 
  1372     0111                     	;# 
  1373     0112                     	;# 
  1374     0113                     	;# 
  1375     0114                     	;# 
  1376     0115                     	;# 
  1377     0116                     	;# 
  1378     0117                     	;# 
  1379     0118                     	;# 
  1380     0119                     	;# 
  1381     011A                     	;# 
  1382     011B                     	;# 
  1383     011D                     	;# 
  1384     018C                     	;# 
  1385     018D                     	;# 
  1386     0191                     	;# 
  1387     0191                     	;# 
  1388     0192                     	;# 
  1389     0193                     	;# 
  1390     0193                     	;# 
  1391     0193                     	;# 
  1392     0194                     	;# 
  1393     0195                     	;# 
  1394     0196                     	;# 
  1395     0199                     	;# 
  1396     019A                     	;# 
  1397     019B                     	;# 
  1398     019B                     	;# 
  1399     019B                     	;# 
  1400     019B                     	;# 
  1401     019C                     	;# 
  1402     019C                     	;# 
  1403     019D                     	;# 
  1404     019E                     	;# 
  1405     019F                     	;# 
  1406     020D                     	;# 
  1407     0210                     	;# 
  1408     0211                     	;# 
  1409     0212                     	;# 
  1410     0213                     	;# 
  1411     0214                     	;# 
  1412     0215                     	;# 
  1413     0215                     	;# 
  1414     0216                     	;# 
  1415     0217                     	;# 
  1416     0291                     	;# 
  1417     0291                     	;# 
  1418     0292                     	;# 
  1419     0293                     	;# 
  1420     0294                     	;# 
  1421     0295                     	;# 
  1422     0295                     	;# 
  1423     0296                     	;# 
  1424     0298                     	;# 
  1425     0298                     	;# 
  1426     0299                     	;# 
  1427     029A                     	;# 
  1428     029B                     	;# 
  1429     029C                     	;# 
  1430     029C                     	;# 
  1431     029D                     	;# 
  1432     029E                     	;# 
  1433     029F                     	;# 
  1434     0311                     	;# 
  1435     0311                     	;# 
  1436     0312                     	;# 
  1437     0313                     	;# 
  1438     0314                     	;# 
  1439     0315                     	;# 
  1440     0315                     	;# 
  1441     0316                     	;# 
  1442     0318                     	;# 
  1443     0318                     	;# 
  1444     0319                     	;# 
  1445     031A                     	;# 
  1446     031C                     	;# 
  1447     031C                     	;# 
  1448     031D                     	;# 
  1449     031E                     	;# 
  1450     0394                     	;# 
  1451     0395                     	;# 
  1452     0396                     	;# 
  1453     0415                     	;# 
  1454     0416                     	;# 
  1455     0417                     	;# 
  1456     041C                     	;# 
  1457     041D                     	;# 
  1458     041E                     	;# 
  1459     0791                     	;# 
  1460     0792                     	;# 
  1461     0793                     	;# 
  1462     0794                     	;# 
  1463     0795                     	;# 
  1464     0798                     	;# 
  1465     0799                     	;# 
  1466     07A0                     	;# 
  1467     07A1                     	;# 
  1468     07A3                     	;# 
  1469     07A4                     	;# 
  1470     07A6                     	;# 
  1471     07A7                     	;# 
  1472     07A9                     	;# 
  1473     07AA                     	;# 
  1474     0FE4                     	;# 
  1475     0FE5                     	;# 
  1476     0FE6                     	;# 
  1477     0FE7                     	;# 
  1478     0FE8                     	;# 
  1479     0FE9                     	;# 
  1480     0FEA                     	;# 
  1481     0FEB                     	;# 
  1482     0FED                     	;# 
  1483     0FEE                     	;# 
  1484     0FEF                     	;# 
  1485     0000                     	;# 
  1486     0001                     	;# 
  1487     0002                     	;# 
  1488     0003                     	;# 
  1489     0004                     	;# 
  1490     0005                     	;# 
  1491     0006                     	;# 
  1492     0007                     	;# 
  1493     0008                     	;# 
  1494     0009                     	;# 
  1495     000A                     	;# 
  1496     000B                     	;# 
  1497     000C                     	;# 
  1498     000D                     	;# 
  1499     000E                     	;# 
  1500     0010                     	;# 
  1501     0011                     	;# 
  1502     0012                     	;# 
  1503     0013                     	;# 
  1504     0015                     	;# 
  1505     0016                     	;# 
  1506     0016                     	;# 
  1507     0017                     	;# 
  1508     0018                     	;# 
  1509     0019                     	;# 
  1510     001A                     	;# 
  1511     001B                     	;# 
  1512     001C                     	;# 
  1513     001E                     	;# 
  1514     001F                     	;# 
  1515     008C                     	;# 
  1516     008D                     	;# 
  1517     008E                     	;# 
  1518     0090                     	;# 
  1519     0091                     	;# 
  1520     0092                     	;# 
  1521     0093                     	;# 
  1522     0095                     	;# 
  1523     0096                     	;# 
  1524     0097                     	;# 
  1525     0098                     	;# 
  1526     0099                     	;# 
  1527     009A                     	;# 
  1528     009B                     	;# 
  1529     009B                     	;# 
  1530     009C                     	;# 
  1531     009D                     	;# 
  1532     009E                     	;# 
  1533     010C                     	;# 
  1534     010D                     	;# 
  1535     010E                     	;# 
  1536     0110                     	;# 
  1537     0111                     	;# 
  1538     0112                     	;# 
  1539     0113                     	;# 
  1540     0114                     	;# 
  1541     0115                     	;# 
  1542     0116                     	;# 
  1543     0117                     	;# 
  1544     0118                     	;# 
  1545     0119                     	;# 
  1546     011A                     	;# 
  1547     011B                     	;# 
  1548     011D                     	;# 
  1549     018C                     	;# 
  1550     018D                     	;# 
  1551     0191                     	;# 
  1552     0191                     	;# 
  1553     0192                     	;# 
  1554     0193                     	;# 
  1555     0193                     	;# 
  1556     0193                     	;# 
  1557     0194                     	;# 
  1558     0195                     	;# 
  1559     0196                     	;# 
  1560     0199                     	;# 
  1561     019A                     	;# 
  1562     019B                     	;# 
  1563     019B                     	;# 
  1564     019B                     	;# 
  1565     019B                     	;# 
  1566     019C                     	;# 
  1567     019C                     	;# 
  1568     019D                     	;# 
  1569     019E                     	;# 
  1570     019F                     	;# 
  1571     020D                     	;# 
  1572     0210                     	;# 
  1573     0211                     	;# 
  1574     0212                     	;# 
  1575     0213                     	;# 
  1576     0214                     	;# 
  1577     0215                     	;# 
  1578     0215                     	;# 
  1579     0216                     	;# 
  1580     0217                     	;# 
  1581     0291                     	;# 
  1582     0291                     	;# 
  1583     0292                     	;# 
  1584     0293                     	;# 
  1585     0294                     	;# 
  1586     0295                     	;# 
  1587     0295                     	;# 
  1588     0296                     	;# 
  1589     0298                     	;# 
  1590     0298                     	;# 
  1591     0299                     	;# 
  1592     029A                     	;# 
  1593     029B                     	;# 
  1594     029C                     	;# 
  1595     029C                     	;# 
  1596     029D                     	;# 
  1597     029E                     	;# 
  1598     029F                     	;# 
  1599     0311                     	;# 
  1600     0311                     	;# 
  1601     0312                     	;# 
  1602     0313                     	;# 
  1603     0314                     	;# 
  1604     0315                     	;# 
  1605     0315                     	;# 
  1606     0316                     	;# 
  1607     0318                     	;# 
  1608     0318                     	;# 
  1609     0319                     	;# 
  1610     031A                     	;# 
  1611     031C                     	;# 
  1612     031C                     	;# 
  1613     031D                     	;# 
  1614     031E                     	;# 
  1615     0394                     	;# 
  1616     0395                     	;# 
  1617     0396                     	;# 
  1618     0415                     	;# 
  1619     0416                     	;# 
  1620     0417                     	;# 
  1621     041C                     	;# 
  1622     041D                     	;# 
  1623     041E                     	;# 
  1624     0791                     	;# 
  1625     0792                     	;# 
  1626     0793                     	;# 
  1627     0794                     	;# 
  1628     0795                     	;# 
  1629     0798                     	;# 
  1630     0799                     	;# 
  1631     07A0                     	;# 
  1632     07A1                     	;# 
  1633     07A3                     	;# 
  1634     07A4                     	;# 
  1635     07A6                     	;# 
  1636     07A7                     	;# 
  1637     07A9                     	;# 
  1638     07AA                     	;# 
  1639     0FE4                     	;# 
  1640     0FE5                     	;# 
  1641     0FE6                     	;# 
  1642     0FE7                     	;# 
  1643     0FE8                     	;# 
  1644     0FE9                     	;# 
  1645     0FEA                     	;# 
  1646     0FEB                     	;# 
  1647     0FED                     	;# 
  1648     0FEE                     	;# 
  1649     0FEF                     	;# 
  1650     0000                     	;# 
  1651     0001                     	;# 
  1652     0002                     	;# 
  1653     0003                     	;# 
  1654     0004                     	;# 
  1655     0005                     	;# 
  1656     0006                     	;# 
  1657     0007                     	;# 
  1658     0008                     	;# 
  1659     0009                     	;# 
  1660     000A                     	;# 
  1661     000B                     	;# 
  1662     000C                     	;# 
  1663     000D                     	;# 
  1664     000E                     	;# 
  1665     0010                     	;# 
  1666     0011                     	;# 
  1667     0012                     	;# 
  1668     0013                     	;# 
  1669     0015                     	;# 
  1670     0016                     	;# 
  1671     0016                     	;# 
  1672     0017                     	;# 
  1673     0018                     	;# 
  1674     0019                     	;# 
  1675     001A                     	;# 
  1676     001B                     	;# 
  1677     001C                     	;# 
  1678     001E                     	;# 
  1679     001F                     	;# 
  1680     008C                     	;# 
  1681     008D                     	;# 
  1682     008E                     	;# 
  1683     0090                     	;# 
  1684     0091                     	;# 
  1685     0092                     	;# 
  1686     0093                     	;# 
  1687     0095                     	;# 
  1688     0096                     	;# 
  1689     0097                     	;# 
  1690     0098                     	;# 
  1691     0099                     	;# 
  1692     009A                     	;# 
  1693     009B                     	;# 
  1694     009B                     	;# 
  1695     009C                     	;# 
  1696     009D                     	;# 
  1697     009E                     	;# 
  1698     010C                     	;# 
  1699     010D                     	;# 
  1700     010E                     	;# 
  1701     0110                     	;# 
  1702     0111                     	;# 
  1703     0112                     	;# 
  1704     0113                     	;# 
  1705     0114                     	;# 
  1706     0115                     	;# 
  1707     0116                     	;# 
  1708     0117                     	;# 
  1709     0118                     	;# 
  1710     0119                     	;# 
  1711     011A                     	;# 
  1712     011B                     	;# 
  1713     011D                     	;# 
  1714     018C                     	;# 
  1715     018D                     	;# 
  1716     0191                     	;# 
  1717     0191                     	;# 
  1718     0192                     	;# 
  1719     0193                     	;# 
  1720     0193                     	;# 
  1721     0193                     	;# 
  1722     0194                     	;# 
  1723     0195                     	;# 
  1724     0196                     	;# 
  1725     0199                     	;# 
  1726     019A                     	;# 
  1727     019B                     	;# 
  1728     019B                     	;# 
  1729     019B                     	;# 
  1730     019B                     	;# 
  1731     019C                     	;# 
  1732     019C                     	;# 
  1733     019D                     	;# 
  1734     019E                     	;# 
  1735     019F                     	;# 
  1736     020D                     	;# 
  1737     0210                     	;# 
  1738     0211                     	;# 
  1739     0212                     	;# 
  1740     0213                     	;# 
  1741     0214                     	;# 
  1742     0215                     	;# 
  1743     0215                     	;# 
  1744     0216                     	;# 
  1745     0217                     	;# 
  1746     0291                     	;# 
  1747     0291                     	;# 
  1748     0292                     	;# 
  1749     0293                     	;# 
  1750     0294                     	;# 
  1751     0295                     	;# 
  1752     0295                     	;# 
  1753     0296                     	;# 
  1754     0298                     	;# 
  1755     0298                     	;# 
  1756     0299                     	;# 
  1757     029A                     	;# 
  1758     029B                     	;# 
  1759     029C                     	;# 
  1760     029C                     	;# 
  1761     029D                     	;# 
  1762     029E                     	;# 
  1763     029F                     	;# 
  1764     0311                     	;# 
  1765     0311                     	;# 
  1766     0312                     	;# 
  1767     0313                     	;# 
  1768     0314                     	;# 
  1769     0315                     	;# 
  1770     0315                     	;# 
  1771     0316                     	;# 
  1772     0318                     	;# 
  1773     0318                     	;# 
  1774     0319                     	;# 
  1775     031A                     	;# 
  1776     031C                     	;# 
  1777     031C                     	;# 
  1778     031D                     	;# 
  1779     031E                     	;# 
  1780     0394                     	;# 
  1781     0395                     	;# 
  1782     0396                     	;# 
  1783     0415                     	;# 
  1784     0416                     	;# 
  1785     0417                     	;# 
  1786     041C                     	;# 
  1787     041D                     	;# 
  1788     041E                     	;# 
  1789     0791                     	;# 
  1790     0792                     	;# 
  1791     0793                     	;# 
  1792     0794                     	;# 
  1793     0795                     	;# 
  1794     0798                     	;# 
  1795     0799                     	;# 
  1796     07A0                     	;# 
  1797     07A1                     	;# 
  1798     07A3                     	;# 
  1799     07A4                     	;# 
  1800     07A6                     	;# 
  1801     07A7                     	;# 
  1802     07A9                     	;# 
  1803     07AA                     	;# 
  1804     0FE4                     	;# 
  1805     0FE5                     	;# 
  1806     0FE6                     	;# 
  1807     0FE7                     	;# 
  1808     0FE8                     	;# 
  1809     0FE9                     	;# 
  1810     0FEA                     	;# 
  1811     0FEB                     	;# 
  1812     0FED                     	;# 
  1813     0FEE                     	;# 
  1814     0FEF                     	;# 
  1815     0000                     	;# 
  1816     0001                     	;# 
  1817     0002                     	;# 
  1818     0003                     	;# 
  1819     0004                     	;# 
  1820     0005                     	;# 
  1821     0006                     	;# 
  1822     0007                     	;# 
  1823     0008                     	;# 
  1824     0009                     	;# 
  1825     000A                     	;# 
  1826     000B                     	;# 
  1827     000C                     	;# 
  1828     000D                     	;# 
  1829     000E                     	;# 
  1830     0010                     	;# 
  1831     0011                     	;# 
  1832     0012                     	;# 
  1833     0013                     	;# 
  1834     0015                     	;# 
  1835     0016                     	;# 
  1836     0016                     	;# 
  1837     0017                     	;# 
  1838     0018                     	;# 
  1839     0019                     	;# 
  1840     001A                     	;# 
  1841     001B                     	;# 
  1842     001C                     	;# 
  1843     001E                     	;# 
  1844     001F                     	;# 
  1845     008C                     	;# 
  1846     008D                     	;# 
  1847     008E                     	;# 
  1848     0090                     	;# 
  1849     0091                     	;# 
  1850     0092                     	;# 
  1851     0093                     	;# 
  1852     0095                     	;# 
  1853     0096                     	;# 
  1854     0097                     	;# 
  1855     0098                     	;# 
  1856     0099                     	;# 
  1857     009A                     	;# 
  1858     009B                     	;# 
  1859     009B                     	;# 
  1860     009C                     	;# 
  1861     009D                     	;# 
  1862     009E                     	;# 
  1863     010C                     	;# 
  1864     010D                     	;# 
  1865     010E                     	;# 
  1866     0110                     	;# 
  1867     0111                     	;# 
  1868     0112                     	;# 
  1869     0113                     	;# 
  1870     0114                     	;# 
  1871     0115                     	;# 
  1872     0116                     	;# 
  1873     0117                     	;# 
  1874     0118                     	;# 
  1875     0119                     	;# 
  1876     011A                     	;# 
  1877     011B                     	;# 
  1878     011D                     	;# 
  1879     018C                     	;# 
  1880     018D                     	;# 
  1881     0191                     	;# 
  1882     0191                     	;# 
  1883     0192                     	;# 
  1884     0193                     	;# 
  1885     0193                     	;# 
  1886     0193                     	;# 
  1887     0194                     	;# 
  1888     0195                     	;# 
  1889     0196                     	;# 
  1890     0199                     	;# 
  1891     019A                     	;# 
  1892     019B                     	;# 
  1893     019B                     	;# 
  1894     019B                     	;# 
  1895     019B                     	;# 
  1896     019C                     	;# 
  1897     019C                     	;# 
  1898     019D                     	;# 
  1899     019E                     	;# 
  1900     019F                     	;# 
  1901     020D                     	;# 
  1902     0210                     	;# 
  1903     0211                     	;# 
  1904     0212                     	;# 
  1905     0213                     	;# 
  1906     0214                     	;# 
  1907     0215                     	;# 
  1908     0215                     	;# 
  1909     0216                     	;# 
  1910     0217                     	;# 
  1911     0291                     	;# 
  1912     0291                     	;# 
  1913     0292                     	;# 
  1914     0293                     	;# 
  1915     0294                     	;# 
  1916     0295                     	;# 
  1917     0295                     	;# 
  1918     0296                     	;# 
  1919     0298                     	;# 
  1920     0298                     	;# 
  1921     0299                     	;# 
  1922     029A                     	;# 
  1923     029B                     	;# 
  1924     029C                     	;# 
  1925     029C                     	;# 
  1926     029D                     	;# 
  1927     029E                     	;# 
  1928     029F                     	;# 
  1929     0311                     	;# 
  1930     0311                     	;# 
  1931     0312                     	;# 
  1932     0313                     	;# 
  1933     0314                     	;# 
  1934     0315                     	;# 
  1935     0315                     	;# 
  1936     0316                     	;# 
  1937     0318                     	;# 
  1938     0318                     	;# 
  1939     0319                     	;# 
  1940     031A                     	;# 
  1941     031C                     	;# 
  1942     031C                     	;# 
  1943     031D                     	;# 
  1944     031E                     	;# 
  1945     0394                     	;# 
  1946     0395                     	;# 
  1947     0396                     	;# 
  1948     0415                     	;# 
  1949     0416                     	;# 
  1950     0417                     	;# 
  1951     041C                     	;# 
  1952     041D                     	;# 
  1953     041E                     	;# 
  1954     0791                     	;# 
  1955     0792                     	;# 
  1956     0793                     	;# 
  1957     0794                     	;# 
  1958     0795                     	;# 
  1959     0798                     	;# 
  1960     0799                     	;# 
  1961     07A0                     	;# 
  1962     07A1                     	;# 
  1963     07A3                     	;# 
  1964     07A4                     	;# 
  1965     07A6                     	;# 
  1966     07A7                     	;# 
  1967     07A9                     	;# 
  1968     07AA                     	;# 
  1969     0FE4                     	;# 
  1970     0FE5                     	;# 
  1971     0FE6                     	;# 
  1972     0FE7                     	;# 
  1973     0FE8                     	;# 
  1974     0FE9                     	;# 
  1975     0FEA                     	;# 
  1976     0FEB                     	;# 
  1977     0FED                     	;# 
  1978     0FEE                     	;# 
  1979     0FEF                     	;# 
  1980     0000                     	;# 
  1981     0001                     	;# 
  1982     0002                     	;# 
  1983     0003                     	;# 
  1984     0004                     	;# 
  1985     0005                     	;# 
  1986     0006                     	;# 
  1987     0007                     	;# 
  1988     0008                     	;# 
  1989     0009                     	;# 
  1990     000A                     	;# 
  1991     000B                     	;# 
  1992     000C                     	;# 
  1993     000D                     	;# 
  1994     000E                     	;# 
  1995     0010                     	;# 
  1996     0011                     	;# 
  1997     0012                     	;# 
  1998     0013                     	;# 
  1999     0015                     	;# 
  2000     0016                     	;# 
  2001     0016                     	;# 
  2002     0017                     	;# 
  2003     0018                     	;# 
  2004     0019                     	;# 
  2005     001A                     	;# 
  2006     001B                     	;# 
  2007     001C                     	;# 
  2008     001E                     	;# 
  2009     001F                     	;# 
  2010     008C                     	;# 
  2011     008D                     	;# 
  2012     008E                     	;# 
  2013     0090                     	;# 
  2014     0091                     	;# 
  2015     0092                     	;# 
  2016     0093                     	;# 
  2017     0095                     	;# 
  2018     0096                     	;# 
  2019     0097                     	;# 
  2020     0098                     	;# 
  2021     0099                     	;# 
  2022     009A                     	;# 
  2023     009B                     	;# 
  2024     009B                     	;# 
  2025     009C                     	;# 
  2026     009D                     	;# 
  2027     009E                     	;# 
  2028     010C                     	;# 
  2029     010D                     	;# 
  2030     010E                     	;# 
  2031     0110                     	;# 
  2032     0111                     	;# 
  2033     0112                     	;# 
  2034     0113                     	;# 
  2035     0114                     	;# 
  2036     0115                     	;# 
  2037     0116                     	;# 
  2038     0117                     	;# 
  2039     0118                     	;# 
  2040     0119                     	;# 
  2041     011A                     	;# 
  2042     011B                     	;# 
  2043     011D                     	;# 
  2044     018C                     	;# 
  2045     018D                     	;# 
  2046     0191                     	;# 
  2047     0191                     	;# 
  2048     0192                     	;# 
  2049     0193                     	;# 
  2050     0193                     	;# 
  2051     0193                     	;# 
  2052     0194                     	;# 
  2053     0195                     	;# 
  2054     0196                     	;# 
  2055     0199                     	;# 
  2056     019A                     	;# 
  2057     019B                     	;# 
  2058     019B                     	;# 
  2059     019B                     	;# 
  2060     019B                     	;# 
  2061     019C                     	;# 
  2062     019C                     	;# 
  2063     019D                     	;# 
  2064     019E                     	;# 
  2065     019F                     	;# 
  2066     020D                     	;# 
  2067     0210                     	;# 
  2068     0211                     	;# 
  2069     0212                     	;# 
  2070     0213                     	;# 
  2071     0214                     	;# 
  2072     0215                     	;# 
  2073     0215                     	;# 
  2074     0216                     	;# 
  2075     0217                     	;# 
  2076     0291                     	;# 
  2077     0291                     	;# 
  2078     0292                     	;# 
  2079     0293                     	;# 
  2080     0294                     	;# 
  2081     0295                     	;# 
  2082     0295                     	;# 
  2083     0296                     	;# 
  2084     0298                     	;# 
  2085     0298                     	;# 
  2086     0299                     	;# 
  2087     029A                     	;# 
  2088     029B                     	;# 
  2089     029C                     	;# 
  2090     029C                     	;# 
  2091     029D                     	;# 
  2092     029E                     	;# 
  2093     029F                     	;# 
  2094     0311                     	;# 
  2095     0311                     	;# 
  2096     0312                     	;# 
  2097     0313                     	;# 
  2098     0314                     	;# 
  2099     0315                     	;# 
  2100     0315                     	;# 
  2101     0316                     	;# 
  2102     0318                     	;# 
  2103     0318                     	;# 
  2104     0319                     	;# 
  2105     031A                     	;# 
  2106     031C                     	;# 
  2107     031C                     	;# 
  2108     031D                     	;# 
  2109     031E                     	;# 
  2110     0394                     	;# 
  2111     0395                     	;# 
  2112     0396                     	;# 
  2113     0415                     	;# 
  2114     0416                     	;# 
  2115     0417                     	;# 
  2116     041C                     	;# 
  2117     041D                     	;# 
  2118     041E                     	;# 
  2119     0791                     	;# 
  2120     0792                     	;# 
  2121     0793                     	;# 
  2122     0794                     	;# 
  2123     0795                     	;# 
  2124     0798                     	;# 
  2125     0799                     	;# 
  2126     07A0                     	;# 
  2127     07A1                     	;# 
  2128     07A3                     	;# 
  2129     07A4                     	;# 
  2130     07A6                     	;# 
  2131     07A7                     	;# 
  2132     07A9                     	;# 
  2133     07AA                     	;# 
  2134     0FE4                     	;# 
  2135     0FE5                     	;# 
  2136     0FE6                     	;# 
  2137     0FE7                     	;# 
  2138     0FE8                     	;# 
  2139     0FE9                     	;# 
  2140     0FEA                     	;# 
  2141     0FEB                     	;# 
  2142     0FED                     	;# 
  2143     0FEE                     	;# 
  2144     0FEF                     	;_SES_Modbus
  2145                           
  2146                           	psect	idataBANK1
  2147     0D78                     __pidataBANK1:
  2148                           
  2149                           ;initializer for _SHT30_CMD_MEASURE_L_Disable
  2150     0D78  3424               	retlw	36
  2151     0D79  3416               	retlw	22
  2152                           
  2153                           ;initializer for _SHT30_CMD_MEASURE_M_Disable
  2154     0D7A  3424               	retlw	36
  2155     0D7B  340B               	retlw	11
  2156                           
  2157                           ;initializer for _SHT30_CMD_MEASURE_H_Disable
  2158     0D7C  3424               	retlw	36
  2159     0D7D  3400               	retlw	0
  2160                           
  2161                           ;initializer for _SHT30_CMD_MEASURE_L_Enable
  2162     0D7E  342C               	retlw	44
  2163     0D7F  3410               	retlw	16
  2164                           
  2165                           ;initializer for _SHT30_CMD_MEASURE_M_Enable
  2166     0D80  342C               	retlw	44
  2167     0D81  340D               	retlw	13
  2168                           
  2169                           ;initializer for _SHT30_CMD_MEASURE_H_Enable
  2170     0D82  342C               	retlw	44
  2171     0D83  3406               	retlw	6
  2172                           
  2173                           	psect	stringtext1
  2174     1000                     __pstringtext1:
  2175     1000                     _i2c_fsmStateTable:
  2176     1000  3480               	retlw	low _I2C_DO_IDLE
  2177     1001  340C               	retlw	high _I2C_DO_IDLE
  2178     1002  34D9               	retlw	low _I2C_DO_SEND_ADR_READ
  2179     1003  340C               	retlw	high _I2C_DO_SEND_ADR_READ
  2180     1004  34D1               	retlw	low _I2C_DO_SEND_ADR_WRITE
  2181     1005  340C               	retlw	high _I2C_DO_SEND_ADR_WRITE
  2182     1006  34F3               	retlw	low _I2C_DO_TX
  2183     1007  3404               	retlw	high _I2C_DO_TX
  2184     1008  3422               	retlw	low _I2C_DO_RX
  2185     1009  3406               	retlw	high _I2C_DO_RX
  2186     100A  34C3               	retlw	low _I2C_DO_RCEN
  2187     100B  340C               	retlw	high _I2C_DO_RCEN
  2188     100C  3410               	retlw	low _I2C_DO_TX_EMPTY
  2189     100D  3407               	retlw	high _I2C_DO_TX_EMPTY
  2190     100E  3485               	retlw	low _I2C_DO_SEND_RESTART_READ
  2191     100F  340C               	retlw	high _I2C_DO_SEND_RESTART_READ
  2192     1010  348A               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  2193     1011  340C               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  2194     1012  348F               	retlw	low _I2C_DO_SEND_RESTART
  2195     1013  340C               	retlw	high _I2C_DO_SEND_RESTART
  2196     1014  3494               	retlw	low _I2C_DO_SEND_STOP
  2197     1015  340C               	retlw	high _I2C_DO_SEND_STOP
  2198     1016  3499               	retlw	low _I2C_DO_RX_ACK
  2199     1017  340C               	retlw	high _I2C_DO_RX_ACK
  2200     1018  349E               	retlw	low _I2C_DO_RX_NACK_STOP
  2201     1019  340C               	retlw	high _I2C_DO_RX_NACK_STOP
  2202     101A  34A3               	retlw	low _I2C_DO_RX_NACK_RESTART
  2203     101B  340C               	retlw	high _I2C_DO_RX_NACK_RESTART
  2204     101C  34A8               	retlw	low _I2C_DO_RESET
  2205     101D  340C               	retlw	high _I2C_DO_RESET
  2206     101E  34D8               	retlw	low _I2C_DO_ADDRESS_NACK
  2207     101F  340F               	retlw	high _I2C_DO_ADDRESS_NACK
  2208     1020                     __end_of_i2c_fsmStateTable:
  2209                           
  2210                           	psect	stringtext2
  2211     1020                     __pstringtext2:
  2212     1020                     _fctsupported:
  2213     1020  3401               	retlw	1
  2214     1021  3402               	retlw	2
  2215     1022  3403               	retlw	3
  2216     1023  3404               	retlw	4
  2217     1024  3405               	retlw	5
  2218     1025  3406               	retlw	6
  2219     1026  340F               	retlw	15
  2220     1027  3410               	retlw	16
  2221     1028                     __end_of_fctsupported:
  2222                           
  2223                           	psect	nvBANK1
  2224     00ED                     __pnvBANK1:
  2225     00ED                     _TMR1_InterruptHandler:
  2226     00ED                     	ds	2
  2227     00EF                     _SW_Ad:
  2228     00EF                     	ds	1
  2229                           
  2230                           	psect	nvBANK2
  2231     0120                     __pnvBANK2:
  2232     0120                     _EUSART_ErrorHandler:
  2233     0120                     	ds	2
  2234     0122                     _EUSART_OverrunErrorHandler:
  2235     0122                     	ds	2
  2236     0124                     _EUSART_FramingErrorHandler:
  2237     0124                     	ds	2
  2238     0126                     _EUSART_RxDefaultInterruptHandler:
  2239     0126                     	ds	2
  2240     0128                     _EUSART_TxDefaultInterruptHandler:
  2241     0128                     	ds	2
  2242     012A                     Device_Init@value_SW4:
  2243     012A                     	ds	1
  2244     012B                     Device_Init@value_SW3:
  2245     012B                     	ds	1
  2246     012C                     Device_Init@value_SW2:
  2247     012C                     	ds	1
  2248     012D                     Device_Init@value_SW1:
  2249     012D                     	ds	1
  2250     000C                     _PORTAbits	set	12
  2251     0018                     _T1CONbits	set	24
  2252     0018                     _T1CON	set	24
  2253     0016                     _TMR1L	set	22
  2254     0017                     _TMR1H	set	23
  2255     0019                     _T1GCON	set	25
  2256     0012                     _PIR2bits	set	18
  2257     0011                     _PIR1bits	set	17
  2258     000B                     _INTCONbits	set	11
  2259     0092                     _PIE2bits	set	146
  2260     0091                     _PIE1bits	set	145
  2261     0097                     _WDTCON	set	151
  2262     0098                     _OSCTUNE	set	152
  2263     0099                     _OSCCON	set	153
  2264     0095                     _OPTION_REGbits	set	149
  2265     008E                     _TRISC	set	142
  2266     008D                     _TRISB	set	141
  2267     008C                     _TRISA	set	140
  2268     0090                     _TRISE	set	144
  2269     010E                     _LATCbits	set	270
  2270     0116                     _BORCON	set	278
  2271     011D                     _APFCON	set	285
  2272     010E                     _LATC	set	270
  2273     010D                     _LATB	set	269
  2274     010C                     _LATA	set	268
  2275     0110                     _LATE	set	272
  2276     0199                     _RCREG	set	409
  2277     019D                     _RCSTAbits	set	413
  2278     019A                     _TXREG	set	410
  2279     019E                     _TXSTAbits	set	414
  2280     019C                     _SPBRGH	set	412
  2281     019B                     _SPBRGL	set	411
  2282     019E                     _TXSTA	set	414
  2283     019D                     _RCSTA	set	413
  2284     019F                     _BAUDCON	set	415
  2285     018C                     _ANSELA	set	396
  2286     018D                     _ANSELB	set	397
  2287     0214                     _SSPSTATbits	set	532
  2288     0216                     _SSPCON2bits	set	534
  2289     0211                     _SSPBUF	set	529
  2290     0215                     _SSPCON1bits	set	533
  2291     0212                     _SSPADD	set	530
  2292     0216                     _SSPCON2	set	534
  2293     0215                     _SSPCON1	set	533
  2294     0214                     _SSPSTAT	set	532
  2295     020D                     _WPUB	set	525
  2296     0210                     _WPUE	set	528
  2297                           
  2298                           	psect	cinit
  2299     0059                     start_initialization:	
  2300                           ; #config settings
  2301                           
  2302     0059                     __initialization:	;BIGRAM
  2303                           
  2304                           ; Initialize objects allocated to BANK1
  2305     0059  3078               	movlw	low __pidataBANK1
  2306     005A  0084               	movwf	4
  2307     005B  308D               	movlw	(high __pidataBANK1)| (0+128)
  2308     005C  0085               	movwf	5
  2309     005D  30E1               	movlw	low __pdataBANK1
  2310     005E  0086               	movwf	6
  2311     005F  3000               	movlw	high __pdataBANK1
  2312     0060  0087               	movwf	7
  2313     0061  3000               	movlw	0
  2314     0062  00FF               	movwf	btemp+1
  2315     0063  300C               	movlw	12
  2316     0064  318D  256C  3180   	fcall	init_ram
  2317                           
  2318                           ; Clear objects allocated to BIGRAM
  2319     0067  309C               	movlw	low (0+8604)
  2320     0068  0084               	movwf	4
  2321     0069  3021               	movlw	high (0+8604)
  2322     006A  0085               	movwf	5
  2323     006B  3054               	movlw	84
  2324     006C  00FE               	movwf	btemp
  2325     006D  3000               	movlw	0
  2326     006E  00FF               	movwf	btemp+1
  2327     006F  318D  2560  3180   	fcall	clear_ram0
  2328                           
  2329                           ; Clear objects allocated to COMMON
  2330     0072  01F8               	clrf	__pbssCOMMON& (0+127)
  2331     0073  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2332     0074  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2333     0075  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2334     0076  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2335                           
  2336                           ; Clear objects allocated to BANK0
  2337     0077  305E               	movlw	low __pbssBANK0
  2338     0078  0084               	movwf	4
  2339     0079  3000               	movlw	high __pbssBANK0
  2340     007A  0085               	movwf	5
  2341     007B  3010               	movlw	16
  2342     007C  00FE               	movwf	btemp
  2343     007D  3000               	movlw	0
  2344     007E  00FF               	movwf	btemp+1
  2345     007F  318D  2560  3180   	fcall	clear_ram0
  2346                           
  2347                           ; Clear objects allocated to BANK1
  2348     0082  30A0               	movlw	low __pbssBANK1
  2349     0083  0084               	movwf	4
  2350     0084  3000               	movlw	high __pbssBANK1
  2351     0085  0085               	movwf	5
  2352     0086  3041               	movlw	65
  2353     0087  00FE               	movwf	btemp
  2354     0088  3000               	movlw	0
  2355     0089  00FF               	movwf	btemp+1
  2356     008A  318D  2560  3180   	fcall	clear_ram0
  2357     008D                     end_of_initialization:	
  2358                           ;End of C runtime variable initialization code
  2359                           
  2360     008D                     __end_of__initialization:
  2361     008D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2362     008E  0020               	movlb	0
  2363     008F  318D  2DB9         	ljmp	_main	;jump to C main() function
  2364                           
  2365                           	psect	bssCOMMON
  2366     0078                     __pbssCOMMON:
  2367     0078                     _eusartRxCount:
  2368     0078                     	ds	1
  2369     0079                     _eusartRxTail:
  2370     0079                     	ds	1
  2371     007A                     _eusartRxHead:
  2372     007A                     	ds	1
  2373     007B                     _eusartTxTail:
  2374     007B                     	ds	1
  2375     007C                     _eusartTxHead:
  2376     007C                     	ds	1
  2377                           
  2378                           	psect	bssBANK0
  2379     005E                     __pbssBANK0:
  2380     005E                     _device_time:
  2381     005E                     	ds	4
  2382     0062                     _SensorAmbient:
  2383     0062                     	ds	4
  2384     0066                     _timer1ReloadVal:
  2385     0066                     	ds	2
  2386     0068                     _MSSP_InterruptHandler:
  2387     0068                     	ds	2
  2388     006A                     Task_MB@f_Modbus_Init:
  2389     006A                     	ds	1
  2390     006B                     _f_Indicator:
  2391     006B                     	ds	1
  2392     006C                     _eusartRxLastError:
  2393     006C                     	ds	1
  2394     006D                     _eusartTxBufferRemaining:
  2395     006D                     	ds	1
  2396                           
  2397                           	psect	bssBANK1
  2398     00A0                     __pbssBANK1:
  2399     00A0                     _I2C_Status:
  2400     00A0                     	ds	29
  2401     00BD                     _eusartRxStatusBuffer:
  2402     00BD                     	ds	8
  2403     00C5                     _eusartRxBuffer:
  2404     00C5                     	ds	8
  2405     00CD                     _eusartTxBuffer:
  2406     00CD                     	ds	8
  2407     00D5                     Task_Sensor@valTime:
  2408     00D5                     	ds	4
  2409     00D9                     ReadData@valTime:
  2410     00D9                     	ds	4
  2411     00DD                     _MB_Register:
  2412     00DD                     	ds	4
  2413                           
  2414                           	psect	dataBANK1
  2415     00E1                     __pdataBANK1:
  2416     00E1                     _SHT30_CMD_MEASURE_L_Disable:
  2417     00E1                     	ds	2
  2418     00E3                     _SHT30_CMD_MEASURE_M_Disable:
  2419     00E3                     	ds	2
  2420     00E5                     _SHT30_CMD_MEASURE_H_Disable:
  2421     00E5                     	ds	2
  2422     00E7                     _SHT30_CMD_MEASURE_L_Enable:
  2423     00E7                     	ds	2
  2424     00E9                     _SHT30_CMD_MEASURE_M_Enable:
  2425     00E9                     	ds	2
  2426     00EB                     _SHT30_CMD_MEASURE_H_Enable:
  2427     00EB                     	ds	2
  2428                           
  2429                           	psect	inittext
  2430     0D6C                     init_ram:
  2431     0D6C  00FE               	movwf	btemp
  2432     0D6D                     initloop:
  2433     0D6D  0012               	moviw fsr0++
  2434     0D6E  001E               	movwi fsr1++
  2435     0D6F  3001               	movlw	1
  2436     0D70  02FE               	subwf	btemp,f
  2437     0D71  3000               	movlw	0
  2438     0D72  3BFF               	subwfb	btemp+1,f
  2439     0D73  087F               	movf	btemp+1,w
  2440     0D74  047E               	iorwf	btemp,w
  2441     0D75  1D03               	skipz
  2442     0D76  2D6D               	goto	initloop
  2443     0D77  3400               	retlw	0
  2444                           
  2445                           	psect	clrtext
  2446     0D60                     clear_ram0:	
  2447                           ;	Called with FSR0 containing the base address, and
  2448                           ;	btemp/btemp+1 has the size to clear
  2449                           
  2450     0D60  0064               	clrwdt	;clear the watchdog before getting into this loop
  2451     0D61                     clrloop0:
  2452     0D61  0180               	clrf	0	;clear RAM location pointed to by FSR
  2453     0D62  3101               	addfsr 0,1
  2454     0D63  3001               	movlw	1
  2455     0D64  02FE               	subwf	btemp,f
  2456     0D65  3000               	movlw	0
  2457     0D66  3BFF               	subwfb	btemp+1,f
  2458     0D67  087F               	movf	btemp+1,w
  2459     0D68  047E               	iorwf	btemp,w
  2460     0D69  1D03               	skipz
  2461     0D6A  2D61               	goto	clrloop0	;have we reached the end yet?
  2462     0D6B  3400               	retlw	0	;all done for this memory range, return
  2463                           
  2464                           	psect	cstackBANK2
  2465     012E                     __pcstackBANK2:
  2466     012E                     ModbusRTU_Slave_Poll@reg:
  2467                           
  2468                           ; 1 bytes @ 0x0
  2469     012E                     	ds	1
  2470     012F                     ModbusRTU_Slave_Poll@u8Current:
  2471                           
  2472                           ; 1 bytes @ 0x1
  2473     012F                     	ds	1
  2474     0130                     ModbusRTU_Slave_Poll@i8state:
  2475                           
  2476                           ; 1 bytes @ 0x2
  2477     0130                     	ds	1
  2478     0131                     ModbusRTU_Slave_Poll@u8exception:
  2479                           
  2480                           ; 1 bytes @ 0x3
  2481     0131                     	ds	1
  2482                           
  2483                           	psect	cstackCOMMON
  2484     0070                     __pcstackCOMMON:
  2485     0070                     ?_I2C_Initialize:
  2486     0070                     ?_OSCILLATOR_Initialize:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489     0070                     ?_WDT_Initialize:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492     0070                     ?_TMR1_Initialize:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495     0070                     ?_EUSART_Initialize:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498     0070                     ?_TMR1_ISR:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501     0070                     ?_EUSART_Receive_ISR:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504     0070                     ?_EUSART_Transmit_ISR:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507     0070                     ??_EUSART_Transmit_ISR:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522     0070                     ?_EUSART_DefaultErrorHandler:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525     0070                     ?_EUSART_RxDataHandler:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528     0070                     ??_EUSART_RxDataHandler:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531     0070                     ?_TMR1_DefaultInterruptHandler:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534     0070                     ??_TMR1_DefaultInterruptHandler:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537     0070                     ?_TMR1_CallBack:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540     0070                     ??_TMR1_CallBack:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543     0070                     ?_App_Init:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546     0070                     ?_App_Process:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549     0070                     ?_Tick_Init_SES:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552     0070                     ?_Task_MB:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555     0070                     ?_Modbus_sendTxBuff:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558     0070                     ?_rtcc_handle:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561     0070                     ??_rtcc_handle:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564     0070                     ?_I2C_DO_IDLE:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567     0070                     ??_I2C_DO_IDLE:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570     0070                     ?_I2C_DO_SEND_ADR_READ:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573     0070                     ??_I2C_DO_SEND_ADR_READ:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576     0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579     0070                     ?_I2C_DO_TX:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582     0070                     ?_I2C_DO_RX:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585     0070                     ??_I2C_DO_RX:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588     0070                     ?_I2C_DO_RCEN:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591     0070                     ??_I2C_DO_RCEN:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594     0070                     ?_I2C_DO_TX_EMPTY:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597     0070                     ??_I2C_DO_TX_EMPTY:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600     0070                     ?_I2C_DO_SEND_RESTART_READ:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603     0070                     ??_I2C_DO_SEND_RESTART_READ:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606     0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609     0070                     ??_I2C_DO_SEND_RESTART_WRITE:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612     0070                     ?_I2C_DO_SEND_RESTART:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615     0070                     ??_I2C_DO_SEND_RESTART:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618     0070                     ?_I2C_DO_SEND_STOP:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621     0070                     ??_I2C_DO_SEND_STOP:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624     0070                     ?_I2C_DO_RX_ACK:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627     0070                     ??_I2C_DO_RX_ACK:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630     0070                     ?_I2C_DO_RX_NACK_STOP:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633     0070                     ??_I2C_DO_RX_NACK_STOP:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636     0070                     ?_I2C_DO_RX_NACK_RESTART:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639     0070                     ??_I2C_DO_RX_NACK_RESTART:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642     0070                     ?_I2C_DO_RESET:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645     0070                     ??_I2C_DO_RESET:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648     0070                     ?_I2C_DO_ADDRESS_NACK:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651     0070                     ??_I2C_DO_ADDRESS_NACK:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654     0070                     ?_I2C_MasterIsr:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657     0070                     ?_I2C_MasterClearIrq:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660     0070                     ?_I2C_MasterOpen:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663     0070                     ?_I2C_MasterEnableIrq:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666     0070                     ?_I2C_MasterDisableIrq:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669     0070                     ?_I2C_MasterClose:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672     0070                     ?_I2C_MasterStart:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675     0070                     ?_I2C_MasterFsm:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678     0070                     ?_I2C_MasterIsNack:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681     0070                     ??_I2C_MasterIsNack:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684     0070                     ?_I2C_MasterSendTxData:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687     0070                     ??_I2C_MasterSendTxData:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690     0070                     ?_I2C_MasterGetRxData:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693     0070                     ??_I2C_MasterGetRxData:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696     0070                     ?_I2C_MasterSendAck:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699     0070                     ??_I2C_MasterSendAck:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702     0070                     ?_I2C_MasterStartRx:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705     0070                     ??_I2C_MasterStartRx:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708     0070                     ?_I2C_MasterSetIrq:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711     0070                     ??_I2C_MasterSetIrq:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714     0070                     ?_I2C_MasterEnableRestart:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717     0070                     ??_I2C_MasterEnableRestart:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720     0070                     ?_I2C_MasterStop:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723     0070                     ??_I2C_MasterStop:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726     0070                     ?_I2C_MasterSendNack:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729     0070                     ??_I2C_MasterSendNack:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732     0070                     ?_PIN_MANAGER_Initialize:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735     0070                     ?_SYSTEM_Initialize:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738     0070                     ?_INTERRUPT_InterruptManager:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741     0070                     ?_EUSART_is_tx_done:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744     0070                     ?_EUSART_Read:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747     0070                     ?_EUSART_Write:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750     0070                     ?_TMR1_StartTimer:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753     0070                     ?_TMR1_WriteTimer:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756     0070                     ?_main:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759     0070                     ?_ReadData:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762     0070                     ?_Task_Sensor:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765     0070                     ?_Task_Indicator:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768     0070                     ?_Device_Init:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771     0070                     ?_buildException:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774     0070                     ?_Modbus_getRxBuff:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777     0070                     ?_validateRequest:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780     0070                     ?_ModbusSlave_Init:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783     0070                     ?_ModbusSlave_Process:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786     0070                     ?_I2C_Open:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789     0070                     ?_I2C_Close:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792     0070                     ?_I2C_MasterOperation:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795     0070                     ?_I2C_MasterRead:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798     0070                     ?_I2C_MasterWrite:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801     0070                     ?i1_I2C_SetBuffer:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804     0070                     ?i1_I2C_SetCallback:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807     0070                     ?i1_I2C_MasterClearIrq:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810     0070                     ??i1_I2C_MasterClearIrq:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813     0070                     I2C_MasterSendTxData@data:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816     0070                     TMR1_WriteTimer@timerVal:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819     0070                     i1I2C_SetBuffer@bufferSize:	
  2820                           ; 2 bytes @ 0x0
  2821                           
  2822     0070                     i1I2C_SetCallback@cb:	
  2823                           ; 2 bytes @ 0x0
  2824                           
  2825                           
  2826                           ; 2 bytes @ 0x0
  2827     0070                     	ds	1
  2828     0071                     ??_EUSART_Receive_ISR:
  2829     0071                     ??_EUSART_DefaultErrorHandler:	
  2830                           ; 1 bytes @ 0x1
  2831                           
  2832     0071                     ??_I2C_DO_SEND_ADR_WRITE:	
  2833                           ; 1 bytes @ 0x1
  2834                           
  2835     0071                     ??_I2C_DO_TX:	
  2836                           ; 1 bytes @ 0x1
  2837                           
  2838                           
  2839                           ; 1 bytes @ 0x1
  2840     0071                     	ds	1
  2841     0072                     ??_TMR1_ISR:
  2842     0072                     ??_TMR1_WriteTimer:	
  2843                           ; 1 bytes @ 0x2
  2844                           
  2845     0072                     ??i1_I2C_SetBuffer:	
  2846                           ; 1 bytes @ 0x2
  2847                           
  2848     0072                     i1I2C_SetBuffer@buffer:	
  2849                           ; 1 bytes @ 0x2
  2850                           
  2851     0072                     i1I2C_SetCallback@ptr:	
  2852                           ; 1 bytes @ 0x2
  2853                           
  2854                           
  2855                           ; 1 bytes @ 0x2
  2856     0072                     	ds	1
  2857     0073                     ??_I2C_MasterFsm:
  2858     0073                     ??i1_I2C_SetCallback:	
  2859                           ; 1 bytes @ 0x3
  2860                           
  2861     0073                     i1I2C_SetCallback@idx:	
  2862                           ; 1 bytes @ 0x3
  2863                           
  2864                           
  2865                           ; 1 bytes @ 0x3
  2866     0073                     	ds	1
  2867     0074                     ?_I2C_SetDataCompleteCallback:
  2868     0074                     I2C_SetDataCompleteCallback@cb:	
  2869                           ; 1 bytes @ 0x4
  2870                           
  2871                           
  2872                           ; 2 bytes @ 0x4
  2873     0074                     	ds	1
  2874     0075                     ??_I2C_MasterIsr:
  2875     0075                     ??_INTERRUPT_InterruptManager:	
  2876                           ; 1 bytes @ 0x5
  2877                           
  2878                           
  2879                           ; 1 bytes @ 0x5
  2880     0075                     	ds	1
  2881     0076                     I2C_SetDataCompleteCallback@ptr:
  2882                           
  2883                           ; 1 bytes @ 0x6
  2884     0076                     	ds	1
  2885     0077                     ?_I2C_CallbackReturnStop:
  2886     0077                     ?_I2C_CallbackReturnReset:	
  2887                           ; 1 bytes @ 0x7
  2888                           
  2889     0077                     ?_rd1RegCompleteHandler:	
  2890                           ; 1 bytes @ 0x7
  2891                           
  2892     0077                     ?_rd2RegCompleteHandler:	
  2893                           ; 1 bytes @ 0x7
  2894                           
  2895     0077                     ?_wr1RegCompleteHandler:	
  2896                           ; 1 bytes @ 0x7
  2897                           
  2898     0077                     ?_wr2RegCompleteHandler:	
  2899                           ; 1 bytes @ 0x7
  2900                           
  2901     0077                     ?_rdBlkRegCompleteHandler:	
  2902                           ; 1 bytes @ 0x7
  2903                           
  2904     0077                     ??_I2C_SetDataCompleteCallback:	
  2905                           ; 1 bytes @ 0x7
  2906                           
  2907     0077                     I2C_CallbackReturnStop@funPtr:	
  2908                           ; 1 bytes @ 0x7
  2909                           
  2910     0077                     I2C_CallbackReturnReset@funPtr:	
  2911                           ; 1 bytes @ 0x7
  2912                           
  2913     0077                     rd1RegCompleteHandler@ptr:	
  2914                           ; 1 bytes @ 0x7
  2915                           
  2916     0077                     rd2RegCompleteHandler@ptr:	
  2917                           ; 1 bytes @ 0x7
  2918                           
  2919     0077                     wr1RegCompleteHandler@ptr:	
  2920                           ; 1 bytes @ 0x7
  2921                           
  2922     0077                     wr2RegCompleteHandler@ptr:	
  2923                           ; 1 bytes @ 0x7
  2924                           
  2925     0077                     rdBlkRegCompleteHandler@ptr:	
  2926                           ; 1 bytes @ 0x7
  2927                           
  2928                           
  2929                           ; 1 bytes @ 0x7
  2930     0077                     	ds	1
  2931     0078                     ??_I2C_CallbackReturnStop:
  2932     0078                     ??_I2C_CallbackReturnReset:	
  2933                           ; 1 bytes @ 0x8
  2934                           
  2935     0078                     ??_rd1RegCompleteHandler:	
  2936                           ; 1 bytes @ 0x8
  2937                           
  2938     0078                     ??_rd2RegCompleteHandler:	
  2939                           ; 1 bytes @ 0x8
  2940                           
  2941     0078                     ??_wr1RegCompleteHandler:	
  2942                           ; 1 bytes @ 0x8
  2943                           
  2944     0078                     ??_wr2RegCompleteHandler:	
  2945                           ; 1 bytes @ 0x8
  2946                           
  2947     0078                     ??_rdBlkRegCompleteHandler:	
  2948                           ; 1 bytes @ 0x8
  2949                           
  2950                           
  2951                           	psect	cstackBANK0
  2952     0020                     __pcstackBANK0:	
  2953                           ; 1 bytes @ 0x8
  2954                           
  2955     0020                     ??_I2C_Initialize:
  2956     0020                     ??_OSCILLATOR_Initialize:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959     0020                     ??_WDT_Initialize:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962     0020                     ?_EUSART_SetRxInterruptHandler:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965     0020                     ?_EUSART_SetTxInterruptHandler:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968     0020                     ?_EUSART_SetFramingErrorHandler:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971     0020                     ?_EUSART_SetOverrunErrorHandler:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974     0020                     ?_EUSART_SetErrorHandler:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977     0020                     ?_TMR1_SetInterruptHandler:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980     0020                     ?_I2C_SetInterruptHandler:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983     0020                     ??_I2C_MasterClearIrq:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986     0020                     ??_I2C_MasterOpen:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989     0020                     ??_I2C_MasterEnableIrq:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992     0020                     ??_I2C_MasterDisableIrq:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995     0020                     ??_I2C_MasterClose:	
  2996                           ; 1 bytes @ 0x0
  2997                           
  2998     0020                     ??_I2C_MasterStart:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001     0020                     ?_I2C_SetCallback:	
  3002                           ; 1 bytes @ 0x0
  3003                           
  3004     0020                     ??_PIN_MANAGER_Initialize:	
  3005                           ; 1 bytes @ 0x0
  3006                           
  3007     0020                     ??_EUSART_is_tx_done:	
  3008                           ; 1 bytes @ 0x0
  3009                           
  3010     0020                     ??_EUSART_Read:	
  3011                           ; 1 bytes @ 0x0
  3012                           
  3013     0020                     ??_EUSART_Write:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016     0020                     ??_TMR1_StartTimer:	
  3017                           ; 1 bytes @ 0x0
  3018                           
  3019     0020                     ??_Task_Indicator:	
  3020                           ; 1 bytes @ 0x0
  3021                           
  3022     0020                     ??_Device_Init:	
  3023                           ; 1 bytes @ 0x0
  3024                           
  3025     0020                     ??_buildException:	
  3026                           ; 1 bytes @ 0x0
  3027                           
  3028     0020                     ??_ModbusSlave_Init:	
  3029                           ; 1 bytes @ 0x0
  3030                           
  3031     0020                     ??_I2C_Close:	
  3032                           ; 1 bytes @ 0x0
  3033                           
  3034     0020                     ??_I2C_MasterOperation:	
  3035                           ; 1 bytes @ 0x0
  3036                           
  3037     0020                     ?_I2C_SetBuffer:	
  3038                           ; 1 bytes @ 0x0
  3039                           
  3040     0020                     ?_Modbus_calcCRC:	
  3041                           ; 1 bytes @ 0x0
  3042                           
  3043     0020                     ?_Get_millis:	
  3044                           ; 2 bytes @ 0x0
  3045                           
  3046     0020                     ModbusSlave_Init@_SW_Ad:	
  3047                           ; 4 bytes @ 0x0
  3048                           
  3049     0020                     I2C_Close@returnValue:	
  3050                           ; 1 bytes @ 0x0
  3051                           
  3052     0020                     I2C_MasterOperation@read:	
  3053                           ; 1 bytes @ 0x0
  3054                           
  3055     0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3056                           ; 1 bytes @ 0x0
  3057                           
  3058     0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3059                           ; 2 bytes @ 0x0
  3060                           
  3061     0020                     EUSART_SetErrorHandler@interruptHandler:	
  3062                           ; 2 bytes @ 0x0
  3063                           
  3064     0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3065                           ; 2 bytes @ 0x0
  3066                           
  3067     0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3068                           ; 2 bytes @ 0x0
  3069                           
  3070     0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  3071                           ; 2 bytes @ 0x0
  3072                           
  3073     0020                     I2C_SetBuffer@bufferSize:	
  3074                           ; 2 bytes @ 0x0
  3075                           
  3076     0020                     I2C_SetInterruptHandler@InterruptHandler:	
  3077                           ; 2 bytes @ 0x0
  3078                           
  3079     0020                     I2C_SetCallback@cb:	
  3080                           ; 2 bytes @ 0x0
  3081                           
  3082                           
  3083                           ; 2 bytes @ 0x0
  3084     0020                     	ds	1
  3085     0021                     EUSART_Read@readValue:
  3086     0021                     EUSART_Write@txData:	
  3087                           ; 1 bytes @ 0x1
  3088                           
  3089     0021                     buildException@exception:	
  3090                           ; 1 bytes @ 0x1
  3091                           
  3092     0021                     I2C_MasterOperation@returnValue:	
  3093                           ; 1 bytes @ 0x1
  3094                           
  3095                           
  3096                           ; 1 bytes @ 0x1
  3097     0021                     	ds	1
  3098     0022                     ??_TMR1_Initialize:
  3099     0022                     ??_EUSART_Initialize:	
  3100                           ; 1 bytes @ 0x2
  3101                           
  3102     0022                     ??_EUSART_SetRxInterruptHandler:	
  3103                           ; 1 bytes @ 0x2
  3104                           
  3105     0022                     ??_EUSART_SetTxInterruptHandler:	
  3106                           ; 1 bytes @ 0x2
  3107                           
  3108     0022                     ??_EUSART_SetFramingErrorHandler:	
  3109                           ; 1 bytes @ 0x2
  3110                           
  3111     0022                     ??_EUSART_SetOverrunErrorHandler:	
  3112                           ; 1 bytes @ 0x2
  3113                           
  3114     0022                     ??_EUSART_SetErrorHandler:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117     0022                     ??_TMR1_SetInterruptHandler:	
  3118                           ; 1 bytes @ 0x2
  3119                           
  3120     0022                     ??_Tick_Init_SES:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123     0022                     ??_Modbus_calcCRC:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126     0022                     ??_I2C_SetInterruptHandler:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129     0022                     ??_SYSTEM_Initialize:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132     0022                     ??_Modbus_getRxBuff:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135     0022                     ??_I2C_Open:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138     0022                     ??_I2C_MasterRead:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141     0022                     ??_I2C_MasterWrite:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144     0022                     ??_I2C_SetBuffer:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147     0022                     buildException@u8func:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150     0022                     I2C_Open@address:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153     0022                     I2C_SetBuffer@buffer:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156     0022                     I2C_SetCallback@ptr:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159                           
  3160                           ; 1 bytes @ 0x2
  3161     0022                     	ds	1
  3162     0023                     ??_App_Init:
  3163     0023                     ??_I2C_SetCallback:	
  3164                           ; 1 bytes @ 0x3
  3165                           
  3166     0023                     I2C_Open@returnValue:	
  3167                           ; 1 bytes @ 0x3
  3168                           
  3169     0023                     I2C_SetCallback@idx:	
  3170                           ; 1 bytes @ 0x3
  3171                           
  3172                           
  3173                           ; 1 bytes @ 0x3
  3174     0023                     	ds	1
  3175     0024                     ??_Get_millis:
  3176     0024                     ?_I2C_ReadNBytes:	
  3177                           ; 1 bytes @ 0x4
  3178                           
  3179     0024                     ?_I2C_SetAddressNackCallback:	
  3180                           ; 1 bytes @ 0x4
  3181                           
  3182     0024                     ?_llabs:	
  3183                           ; 1 bytes @ 0x4
  3184                           
  3185     0024                     I2C_ReadNBytes@data:	
  3186                           ; 8 bytes @ 0x4
  3187                           
  3188     0024                     I2C_SetAddressNackCallback@cb:	
  3189                           ; 1 bytes @ 0x4
  3190                           
  3191     0024                     llabs@a:	
  3192                           ; 2 bytes @ 0x4
  3193                           
  3194                           
  3195                           ; 8 bytes @ 0x4
  3196     0024                     	ds	1
  3197     0025                     I2C_ReadNBytes@len:
  3198                           
  3199                           ; 2 bytes @ 0x5
  3200     0025                     	ds	1
  3201     0026                     Modbus_calcCRC@len:
  3202     0026                     I2C_SetAddressNackCallback@ptr:	
  3203                           ; 1 bytes @ 0x6
  3204                           
  3205                           
  3206                           ; 2 bytes @ 0x6
  3207     0026                     	ds	1
  3208     0027                     ??_I2C_ReadNBytes:
  3209     0027                     I2C_ReadNBytes@address:	
  3210                           ; 1 bytes @ 0x7
  3211                           
  3212     0027                     Modbus_calcCRC@temp2:	
  3213                           ; 1 bytes @ 0x7
  3214                           
  3215                           
  3216                           ; 2 bytes @ 0x7
  3217     0027                     	ds	1
  3218     0028                     ?_I2C_WriteNBytes:
  3219     0028                     ??_I2C_SetAddressNackCallback:	
  3220                           ; 1 bytes @ 0x8
  3221                           
  3222     0028                     I2C_WriteNBytes@data:	
  3223                           ; 1 bytes @ 0x8
  3224                           
  3225                           
  3226                           ; 1 bytes @ 0x8
  3227     0028                     	ds	1
  3228     0029                     Modbus_getRxBuff@bBuffOverflow:
  3229     0029                     Modbus_calcCRC@flag:	
  3230                           ; 1 bytes @ 0x9
  3231                           
  3232     0029                     I2C_WriteNBytes@len:	
  3233                           ; 2 bytes @ 0x9
  3234                           
  3235                           
  3236                           ; 2 bytes @ 0x9
  3237     0029                     	ds	2
  3238     002B                     ??_I2C_WriteNBytes:
  3239     002B                     Modbus_calcCRC@i:	
  3240                           ; 1 bytes @ 0xB
  3241                           
  3242     002B                     I2C_WriteNBytes@address:	
  3243                           ; 1 bytes @ 0xB
  3244                           
  3245                           
  3246                           ; 1 bytes @ 0xB
  3247     002B                     	ds	1
  3248     002C                     ??_llabs:
  3249     002C                     ??_ReadData:	
  3250                           ; 1 bytes @ 0xC
  3251                           
  3252     002C                     Modbus_calcCRC@j:	
  3253                           ; 1 bytes @ 0xC
  3254                           
  3255                           
  3256                           ; 1 bytes @ 0xC
  3257     002C                     	ds	1
  3258     002D                     Modbus_calcCRC@temp:
  3259                           
  3260                           ; 2 bytes @ 0xD
  3261     002D                     	ds	2
  3262     002F                     ??_Modbus_sendTxBuff:
  3263     002F                     ??_validateRequest:	
  3264                           ; 1 bytes @ 0xF
  3265                           
  3266                           
  3267                           ; 1 bytes @ 0xF
  3268     002F                     	ds	1
  3269     0030                     ReadData@aData:
  3270                           
  3271                           ; 6 bytes @ 0x10
  3272     0030                     	ds	6
  3273     0036                     ??_Task_Sensor:
  3274     0036                     Modbus_sendTxBuff@u16crc:	
  3275                           ; 1 bytes @ 0x16
  3276                           
  3277                           
  3278                           ; 2 bytes @ 0x16
  3279     0036                     	ds	2
  3280     0038                     Modbus_sendTxBuff@index:
  3281                           
  3282                           ; 2 bytes @ 0x18
  3283     0038                     	ds	2
  3284     003A                     Modbus_sendTxBuff@u32overTimecountDown:
  3285                           
  3286                           ; 4 bytes @ 0x1A
  3287     003A                     	ds	2
  3288     003C                     validateRequest@u16MsgCRC:
  3289                           
  3290                           ; 2 bytes @ 0x1C
  3291     003C                     	ds	2
  3292     003E                     ?_ModbusSlaveF04:
  3293     003E                     validateRequest@isSupported:	
  3294                           ; 1 bytes @ 0x1E
  3295                           
  3296     003E                     ModbusSlaveF04@size:	
  3297                           ; 1 bytes @ 0x1E
  3298                           
  3299                           
  3300                           ; 2 bytes @ 0x1E
  3301     003E                     	ds	1
  3302     003F                     validateRequest@i:
  3303                           
  3304                           ; 1 bytes @ 0x1F
  3305     003F                     	ds	1
  3306     0040                     ??_ModbusSlaveF04:
  3307                           
  3308                           ; 1 bytes @ 0x20
  3309     0040                     	ds	10
  3310     004A                     ModbusSlaveF04@u8StartAdd:
  3311                           
  3312                           ; 2 bytes @ 0x2A
  3313     004A                     	ds	2
  3314     004C                     ModbusSlaveF04@reg:
  3315                           
  3316                           ; 1 bytes @ 0x2C
  3317     004C                     	ds	1
  3318     004D                     ModbusSlaveF04@u8regsno:
  3319                           
  3320                           ; 1 bytes @ 0x2D
  3321     004D                     	ds	1
  3322     004E                     ModbusSlaveF04@valueAdd:
  3323                           
  3324                           ; 2 bytes @ 0x2E
  3325     004E                     	ds	2
  3326     0050                     ModbusSlaveF04@valueRegsno:
  3327                           
  3328                           ; 2 bytes @ 0x30
  3329     0050                     	ds	2
  3330     0052                     ModbusSlaveF04@i:
  3331                           
  3332                           ; 2 bytes @ 0x32
  3333     0052                     	ds	2
  3334     0054                     ?_ModbusRTU_Slave_Poll:
  3335     0054                     ModbusRTU_Slave_Poll@size:	
  3336                           ; 1 bytes @ 0x34
  3337                           
  3338                           
  3339                           ; 2 bytes @ 0x34
  3340     0054                     	ds	2
  3341     0056                     ??_ModbusRTU_Slave_Poll:
  3342                           
  3343                           ; 1 bytes @ 0x36
  3344     0056                     	ds	8
  3345     005E                     ??_App_Process:
  3346     005E                     ??_Task_MB:	
  3347                           ; 1 bytes @ 0x3E
  3348                           
  3349     005E                     ??_main:	
  3350                           ; 1 bytes @ 0x3E
  3351                           
  3352     005E                     ??_ModbusSlave_Process:	
  3353                           ; 1 bytes @ 0x3E
  3354                           
  3355                           
  3356                           	psect	maintext
  3357     0DB9                     __pmaintext:	
  3358                           ; 1 bytes @ 0x3E
  3359 ;;
  3360 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3361 ;;
  3362 ;; *************** function _main *****************
  3363 ;; Defined at:
  3364 ;;		line 49 in file "main.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : B1F/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3378 ;;      Params:         0       0       0       0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0       0       0       0
  3381 ;;      Totals:         0       0       0       0       0       0       0       0
  3382 ;;Total ram usage:        0 bytes
  3383 ;; Hardware stack levels required when called: 14
  3384 ;; This function calls:
  3385 ;;		_App_Init
  3386 ;;		_App_Process
  3387 ;;		_SYSTEM_Initialize
  3388 ;; This function is called by:
  3389 ;;		Startup code after reset
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393     0DB9                     _main:	
  3394                           ;psect for function _main
  3395                           
  3396     0DB9                     l4714:	
  3397                           ;incstack = 0
  3398                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3399                           
  3400                           
  3401                           ;main.c: 51:     SYSTEM_Initialize();
  3402     0DB9  318E  2640  318D   	fcall	_SYSTEM_Initialize
  3403                           
  3404                           ;main.c: 52:     App_Init();
  3405     0DBC  318D  252B  318D   	fcall	_App_Init
  3406     0DBF                     l4716:
  3407                           
  3408                           ;main.c: 57:     (INTCONbits.GIE = 1);
  3409     0DBF  178B               	bsf	11,7	;volatile
  3410     0DC0                     l4718:
  3411                           
  3412                           ;main.c: 60:     (INTCONbits.PEIE = 1);
  3413     0DC0  170B               	bsf	11,6	;volatile
  3414     0DC1                     l4720:
  3415                           
  3416                           ;main.c: 70:         App_Process();
  3417     0DC1  318D  253F  318D   	fcall	_App_Process
  3418     0DC4  2DC1               	goto	l4720
  3419     0DC5  3180  2857         	ljmp	start
  3420     0DC7                     __end_of_main:
  3421                           
  3422                           	psect	text1
  3423     0E40                     __ptext1:	
  3424 ;; *************** function _SYSTEM_Initialize *****************
  3425 ;; Defined at:
  3426 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1    wreg      void 
  3433 ;; Registers used:
  3434 ;;		wreg, status,2, status,0, pclath, cstack
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3440 ;;      Params:         0       0       0       0       0       0       0       0
  3441 ;;      Locals:         0       0       0       0       0       0       0       0
  3442 ;;      Temps:          0       0       0       0       0       0       0       0
  3443 ;;      Totals:         0       0       0       0       0       0       0       0
  3444 ;;Total ram usage:        0 bytes
  3445 ;; Hardware stack levels used: 1
  3446 ;; Hardware stack levels required when called: 9
  3447 ;; This function calls:
  3448 ;;		_EUSART_Initialize
  3449 ;;		_I2C_Initialize
  3450 ;;		_OSCILLATOR_Initialize
  3451 ;;		_PIN_MANAGER_Initialize
  3452 ;;		_TMR1_Initialize
  3453 ;;		_WDT_Initialize
  3454 ;; This function is called by:
  3455 ;;		_main
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459     0E40                     _SYSTEM_Initialize:	
  3460                           ;psect for function _SYSTEM_Initialize
  3461                           
  3462     0E40                     l4694:	
  3463                           ;incstack = 0
  3464                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3465                           
  3466                           
  3467                           ;mcc_generated_files/mcc.c: 53:     I2C_Initialize();
  3468     0E40  318D  2518  318E   	fcall	_I2C_Initialize
  3469                           
  3470                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  3471     0E43  3187  27E4  318E   	fcall	_PIN_MANAGER_Initialize
  3472                           
  3473                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  3474     0E46  318C  24CA  318E   	fcall	_OSCILLATOR_Initialize
  3475                           
  3476                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  3477     0E49  318C  2477  318E   	fcall	_WDT_Initialize
  3478                           
  3479                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  3480     0E4C  318E  2697  318E   	fcall	_TMR1_Initialize
  3481                           
  3482                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  3483     0E4F  3186  2665  318E   	fcall	_EUSART_Initialize
  3484     0E52                     l59:
  3485     0E52  0008               	return
  3486     0E53                     __end_of_SYSTEM_Initialize:
  3487                           
  3488                           	psect	text2
  3489     0C77                     __ptext2:	
  3490 ;; *************** function _WDT_Initialize *****************
  3491 ;; Defined at:
  3492 ;;		line 71 in file "mcc_generated_files/mcc.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;		None
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      void 
  3499 ;; Registers used:
  3500 ;;		wreg
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3506 ;;      Params:         0       0       0       0       0       0       0       0
  3507 ;;      Locals:         0       0       0       0       0       0       0       0
  3508 ;;      Temps:          0       0       0       0       0       0       0       0
  3509 ;;      Totals:         0       0       0       0       0       0       0       0
  3510 ;;Total ram usage:        0 bytes
  3511 ;; Hardware stack levels used: 1
  3512 ;; Hardware stack levels required when called: 7
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_SYSTEM_Initialize
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520     0C77                     _WDT_Initialize:	
  3521                           ;psect for function _WDT_Initialize
  3522                           
  3523     0C77                     l4600:	
  3524                           ;incstack = 0
  3525                           ; Regs used in _WDT_Initialize: [wreg]
  3526                           
  3527                           
  3528                           ;mcc_generated_files/mcc.c: 74:     WDTCON = 0x24;
  3529     0C77  3024               	movlw	36
  3530     0C78  0021               	movlb	1	; select bank1
  3531     0C79  0097               	movwf	23	;volatile
  3532     0C7A                     l65:
  3533     0C7A  0008               	return
  3534     0C7B                     __end_of_WDT_Initialize:
  3535                           
  3536                           	psect	text3
  3537     0E97                     __ptext3:	
  3538 ;; *************** function _TMR1_Initialize *****************
  3539 ;; Defined at:
  3540 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;		None
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      void 
  3547 ;; Registers used:
  3548 ;;		wreg, status,2, status,0, pclath, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3554 ;;      Params:         0       0       0       0       0       0       0       0
  3555 ;;      Locals:         0       0       0       0       0       0       0       0
  3556 ;;      Temps:          0       0       0       0       0       0       0       0
  3557 ;;      Totals:         0       0       0       0       0       0       0       0
  3558 ;;Total ram usage:        0 bytes
  3559 ;; Hardware stack levels used: 1
  3560 ;; Hardware stack levels required when called: 8
  3561 ;; This function calls:
  3562 ;;		_TMR1_SetInterruptHandler
  3563 ;; This function is called by:
  3564 ;;		_SYSTEM_Initialize
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568     0E97                     _TMR1_Initialize:	
  3569                           ;psect for function _TMR1_Initialize
  3570                           
  3571     0E97                     l4602:	
  3572                           ;incstack = 0
  3573                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3574                           
  3575                           
  3576                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  3577     0E97  0020               	movlb	0	; select bank0
  3578     0E98  0199               	clrf	25	;volatile
  3579     0E99                     l4604:
  3580                           
  3581                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xE0;
  3582     0E99  30E0               	movlw	224
  3583     0E9A  0097               	movwf	23	;volatile
  3584     0E9B                     l4606:
  3585                           
  3586                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xC0;
  3587     0E9B  30C0               	movlw	192
  3588     0E9C  0096               	movwf	22	;volatile
  3589     0E9D                     l4608:
  3590                           
  3591                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  3592     0E9D  1011               	bcf	17,0	;volatile
  3593     0E9E                     l4610:
  3594                           
  3595                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  3596     0E9E  0817               	movf	23,w	;volatile
  3597     0E9F  00E7               	movwf	_timer1ReloadVal+1	;volatile
  3598     0EA0  0816               	movf	22,w	;volatile
  3599     0EA1  00E6               	movwf	_timer1ReloadVal	;volatile
  3600     0EA2                     l4612:
  3601                           
  3602                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  3603     0EA2  0021               	movlb	1	; select bank1
  3604     0EA3  1411               	bsf	17,0	;volatile
  3605     0EA4                     l4614:
  3606                           
  3607                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  3608     0EA4  3038               	movlw	low _TMR1_DefaultInterruptHandler
  3609     0EA5  0020               	movlb	0	; select bank0
  3610     0EA6  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3611     0EA7  300C               	movlw	high _TMR1_DefaultInterruptHandler
  3612     0EA8  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3613     0EA9  318C  24E2  318E   	fcall	_TMR1_SetInterruptHandler
  3614     0EAC                     l4616:
  3615                           
  3616                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x41;
  3617     0EAC  3041               	movlw	65
  3618     0EAD  0020               	movlb	0	; select bank0
  3619     0EAE  0098               	movwf	24	;volatile
  3620     0EAF                     l277:
  3621     0EAF  0008               	return
  3622     0EB0                     __end_of_TMR1_Initialize:
  3623                           
  3624                           	psect	text4
  3625     07E4                     __ptext4:	
  3626 ;; *************** function _PIN_MANAGER_Initialize *****************
  3627 ;; Defined at:
  3628 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;		None
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3642 ;;      Params:         0       0       0       0       0       0       0       0
  3643 ;;      Locals:         0       0       0       0       0       0       0       0
  3644 ;;      Temps:          0       0       0       0       0       0       0       0
  3645 ;;      Totals:         0       0       0       0       0       0       0       0
  3646 ;;Total ram usage:        0 bytes
  3647 ;; Hardware stack levels used: 1
  3648 ;; Hardware stack levels required when called: 7
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_SYSTEM_Initialize
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656     07E4                     _PIN_MANAGER_Initialize:	
  3657                           ;psect for function _PIN_MANAGER_Initialize
  3658                           
  3659     07E4                     l4562:	
  3660                           ;incstack = 0
  3661                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3662                           
  3663                           
  3664                           ;mcc_generated_files/pin_manager.c: 60:     LATE = 0x00;
  3665     07E4  0022               	movlb	2	; select bank2
  3666     07E5  0190               	clrf	16	;volatile
  3667                           
  3668                           ;mcc_generated_files/pin_manager.c: 61:     LATA = 0x00;
  3669     07E6  018C               	clrf	12	;volatile
  3670                           
  3671                           ;mcc_generated_files/pin_manager.c: 62:     LATB = 0x00;
  3672     07E7  018D               	clrf	13	;volatile
  3673     07E8                     l4564:
  3674                           
  3675                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x40;
  3676     07E8  3040               	movlw	64
  3677     07E9  008E               	movwf	14	;volatile
  3678     07EA                     l4566:
  3679                           
  3680                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0x08;
  3681     07EA  3008               	movlw	8
  3682     07EB  0021               	movlb	1	; select bank1
  3683     07EC  0090               	movwf	16	;volatile
  3684     07ED                     l4568:
  3685                           
  3686                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0xFF;
  3687     07ED  30FF               	movlw	255
  3688     07EE  008C               	movwf	12	;volatile
  3689     07EF                     l4570:
  3690                           
  3691                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xFF;
  3692     07EF  30FF               	movlw	255
  3693     07F0  008D               	movwf	13	;volatile
  3694     07F1                     l4572:
  3695                           
  3696                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x9C;
  3697     07F1  309C               	movlw	156
  3698     07F2  008E               	movwf	14	;volatile
  3699     07F3                     l4574:
  3700                           
  3701                           ;mcc_generated_files/pin_manager.c: 76:     ANSELB = 0x3F;
  3702     07F3  303F               	movlw	63
  3703     07F4  0023               	movlb	3	; select bank3
  3704     07F5  008D               	movwf	13	;volatile
  3705     07F6                     l4576:
  3706                           
  3707                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x30;
  3708     07F6  3030               	movlw	48
  3709     07F7  008C               	movwf	12	;volatile
  3710     07F8                     l4578:
  3711                           
  3712                           ;mcc_generated_files/pin_manager.c: 82:     WPUE = 0x00;
  3713     07F8  0024               	movlb	4	; select bank4
  3714     07F9  0190               	clrf	16	;volatile
  3715     07FA                     l4580:
  3716                           
  3717                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  3718     07FA  018D               	clrf	13	;volatile
  3719     07FB                     l4582:
  3720                           
  3721                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 1;
  3722     07FB  0021               	movlb	1	; select bank1
  3723     07FC  1795               	bsf	21,7	;volatile
  3724     07FD                     l4584:
  3725                           
  3726                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  3727     07FD  0022               	movlb	2	; select bank2
  3728     07FE  019D               	clrf	29	;volatile
  3729     07FF                     l31:
  3730     07FF  0008               	return
  3731     0800                     __end_of_PIN_MANAGER_Initialize:
  3732                           
  3733                           	psect	text5
  3734     0CCA                     __ptext5:	
  3735 ;; *************** function _OSCILLATOR_Initialize *****************
  3736 ;; Defined at:
  3737 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;		None
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;		None
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      void 
  3744 ;; Registers used:
  3745 ;;		wreg, status,2
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3751 ;;      Params:         0       0       0       0       0       0       0       0
  3752 ;;      Locals:         0       0       0       0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0
  3754 ;;      Totals:         0       0       0       0       0       0       0       0
  3755 ;;Total ram usage:        0 bytes
  3756 ;; Hardware stack levels used: 1
  3757 ;; Hardware stack levels required when called: 7
  3758 ;; This function calls:
  3759 ;;		Nothing
  3760 ;; This function is called by:
  3761 ;;		_SYSTEM_Initialize
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765     0CCA                     _OSCILLATOR_Initialize:	
  3766                           ;psect for function _OSCILLATOR_Initialize
  3767                           
  3768     0CCA                     l4594:	
  3769                           ;incstack = 0
  3770                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3771                           
  3772                           
  3773                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  3774     0CCA  3070               	movlw	112
  3775     0CCB  0021               	movlb	1	; select bank1
  3776     0CCC  0099               	movwf	25	;volatile
  3777     0CCD                     l4596:
  3778                           
  3779                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  3780     0CCD  0198               	clrf	24	;volatile
  3781     0CCE                     l4598:
  3782                           
  3783                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  3784     0CCE  0022               	movlb	2	; select bank2
  3785     0CCF  0196               	clrf	22	;volatile
  3786     0CD0                     l62:
  3787     0CD0  0008               	return
  3788     0CD1                     __end_of_OSCILLATOR_Initialize:
  3789                           
  3790                           	psect	text6
  3791     0D18                     __ptext6:	
  3792 ;; *************** function _I2C_Initialize *****************
  3793 ;; Defined at:
  3794 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;		None
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg, status,2
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3808 ;;      Params:         0       0       0       0       0       0       0       0
  3809 ;;      Locals:         0       0       0       0       0       0       0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0
  3811 ;;      Totals:         0       0       0       0       0       0       0       0
  3812 ;;Total ram usage:        0 bytes
  3813 ;; Hardware stack levels used: 1
  3814 ;; Hardware stack levels required when called: 7
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_SYSTEM_Initialize
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822     0D18                     _I2C_Initialize:	
  3823                           ;psect for function _I2C_Initialize
  3824                           
  3825     0D18                     l4586:	
  3826                           ;incstack = 0
  3827                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  3828                           
  3829                           
  3830                           ;mcc_generated_files/i2c_master.c: 169:     SSPSTAT = 0x00;
  3831     0D18  0024               	movlb	4	; select bank4
  3832     0D19  0194               	clrf	20	;volatile
  3833     0D1A                     l4588:
  3834                           
  3835                           ;mcc_generated_files/i2c_master.c: 170:     SSPCON1 = 0x08;
  3836     0D1A  3008               	movlw	8
  3837     0D1B  0095               	movwf	21	;volatile
  3838     0D1C                     l4590:
  3839                           
  3840                           ;mcc_generated_files/i2c_master.c: 171:     SSPCON2 = 0x00;
  3841     0D1C  0196               	clrf	22	;volatile
  3842                           
  3843                           ;mcc_generated_files/i2c_master.c: 172:     SSPADD = 0x13;
  3844     0D1D  3013               	movlw	19
  3845     0D1E  0092               	movwf	18	;volatile
  3846     0D1F                     l4592:
  3847                           
  3848                           ;mcc_generated_files/i2c_master.c: 173:     SSPCON1bits.SSPEN = 0;
  3849     0D1F  1295               	bcf	21,5	;volatile
  3850     0D20                     l671:
  3851     0D20  0008               	return
  3852     0D21                     __end_of_I2C_Initialize:
  3853                           
  3854                           	psect	text7
  3855     0665                     __ptext7:	
  3856 ;; *************** function _EUSART_Initialize *****************
  3857 ;; Defined at:
  3858 ;;		line 88 in file "mcc_generated_files/eusart.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;		None
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0, pclath, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3872 ;;      Params:         0       0       0       0       0       0       0       0
  3873 ;;      Locals:         0       0       0       0       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0       0       0       0
  3875 ;;      Totals:         0       0       0       0       0       0       0       0
  3876 ;;Total ram usage:        0 bytes
  3877 ;; Hardware stack levels used: 1
  3878 ;; Hardware stack levels required when called: 8
  3879 ;; This function calls:
  3880 ;;		_EUSART_SetErrorHandler
  3881 ;;		_EUSART_SetFramingErrorHandler
  3882 ;;		_EUSART_SetOverrunErrorHandler
  3883 ;;		_EUSART_SetRxInterruptHandler
  3884 ;;		_EUSART_SetTxInterruptHandler
  3885 ;; This function is called by:
  3886 ;;		_SYSTEM_Initialize
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890     0665                     _EUSART_Initialize:	
  3891                           ;psect for function _EUSART_Initialize
  3892                           
  3893     0665                     l4618:	
  3894                           ;incstack = 0
  3895                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3896                           
  3897                           
  3898                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  3899     0665  0021               	movlb	1	; select bank1
  3900     0666  1291               	bcf	17,5	;volatile
  3901     0667                     l4620:
  3902                           
  3903                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3904     0667  30A7               	movlw	low _EUSART_Receive_ISR
  3905     0668  0020               	movlb	0	; select bank0
  3906     0669  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3907     066A  3006               	movlw	high _EUSART_Receive_ISR
  3908     066B  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3909     066C  318D  2506  3186   	fcall	_EUSART_SetRxInterruptHandler
  3910     066F                     l4622:
  3911                           
  3912                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  3913     066F  0021               	movlb	1	; select bank1
  3914     0670  1211               	bcf	17,4	;volatile
  3915                           
  3916                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3917     0671  3024               	movlw	low _EUSART_Transmit_ISR
  3918     0672  0020               	movlb	0	; select bank0
  3919     0673  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  3920     0674  300F               	movlw	high _EUSART_Transmit_ISR
  3921     0675  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  3922     0676  318D  250F  3186   	fcall	_EUSART_SetTxInterruptHandler
  3923     0679                     l4624:
  3924                           
  3925                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  3926     0679  3008               	movlw	8
  3927     067A  0023               	movlb	3	; select bank3
  3928     067B  009F               	movwf	31	;volatile
  3929     067C                     l4626:
  3930                           
  3931                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  3932     067C  3090               	movlw	144
  3933     067D  009D               	movwf	29	;volatile
  3934     067E                     l4628:
  3935                           
  3936                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  3937     067E  3024               	movlw	36
  3938     067F  009E               	movwf	30	;volatile
  3939     0680                     l4630:
  3940                           
  3941                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xCF;
  3942     0680  30CF               	movlw	207
  3943     0681  009B               	movwf	27	;volatile
  3944     0682                     l4632:
  3945                           
  3946                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  3947     0682  019C               	clrf	28	;volatile
  3948     0683                     l4634:
  3949                           
  3950                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  3951     0683  3037               	movlw	low _EUSART_DefaultFramingErrorHandler
  3952     0684  0020               	movlb	0	; select bank0
  3953     0685  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  3954     0686  300C               	movlw	high _EUSART_DefaultFramingErrorHandler
  3955     0687  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  3956     0688  318C  24F4  3186   	fcall	_EUSART_SetFramingErrorHandler
  3957     068B                     l4636:
  3958                           
  3959                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  3960     068B  3063               	movlw	low _EUSART_DefaultOverrunErrorHandler
  3961     068C  0020               	movlb	0	; select bank0
  3962     068D  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  3963     068E  300C               	movlw	high _EUSART_DefaultOverrunErrorHandler
  3964     068F  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  3965     0690  318C  24FD  3186   	fcall	_EUSART_SetOverrunErrorHandler
  3966     0693                     l4638:
  3967                           
  3968                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  3969     0693  305F               	movlw	low _EUSART_DefaultErrorHandler
  3970     0694  0020               	movlb	0	; select bank0
  3971     0695  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  3972     0696  300C               	movlw	high _EUSART_DefaultErrorHandler
  3973     0697  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  3974     0698  318C  24EB  3186   	fcall	_EUSART_SetErrorHandler
  3975                           
  3976                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  3977     069B  0020               	movlb	0	; select bank0
  3978     069C  01EC               	clrf	_eusartRxLastError	;volatile
  3979                           
  3980                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  3981     069D  01FC               	clrf	_eusartTxHead	;volatile
  3982                           
  3983                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  3984     069E  01FB               	clrf	_eusartTxTail	;volatile
  3985     069F                     l4640:
  3986                           
  3987                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3988     069F  3008               	movlw	8
  3989     06A0  00ED               	movwf	_eusartTxBufferRemaining	;volatile
  3990     06A1                     l4642:
  3991                           
  3992                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  3993     06A1  01FA               	clrf	_eusartRxHead	;volatile
  3994     06A2                     l4644:
  3995                           
  3996                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  3997     06A2  01F9               	clrf	_eusartRxTail	;volatile
  3998     06A3                     l4646:
  3999                           
  4000                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  4001     06A3  01F8               	clrf	_eusartRxCount	;volatile
  4002     06A4                     l4648:
  4003                           
  4004                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  4005     06A4  0021               	movlb	1	; select bank1
  4006     06A5  1691               	bsf	17,5	;volatile
  4007     06A6                     l175:
  4008     06A6  0008               	return
  4009     06A7                     __end_of_EUSART_Initialize:
  4010                           
  4011                           	psect	text8
  4012     0D0F                     __ptext8:	
  4013 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  4014 ;; Defined at:
  4015 ;;		line 285 in file "mcc_generated_files/eusart.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4018 ;;		 -> EUSART_Transmit_ISR(1), 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;		None
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		wreg
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4030 ;;      Params:         0       2       0       0       0       0       0       0
  4031 ;;      Locals:         0       0       0       0       0       0       0       0
  4032 ;;      Temps:          0       0       0       0       0       0       0       0
  4033 ;;      Totals:         0       2       0       0       0       0       0       0
  4034 ;;Total ram usage:        2 bytes
  4035 ;; Hardware stack levels used: 1
  4036 ;; Hardware stack levels required when called: 7
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_EUSART_Initialize
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044     0D0F                     _EUSART_SetTxInterruptHandler:	
  4045                           ;psect for function _EUSART_SetTxInterruptHandler
  4046                           
  4047     0D0F                     l4516:	
  4048                           ;incstack = 0
  4049                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  4050                           
  4051                           
  4052                           ;mcc_generated_files/eusart.c: 286:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  4053     0D0F  0020               	movlb	0	; select bank0
  4054     0D10  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  4055     0D11  0022               	movlb	2	; select bank2
  4056     0D12  00A9               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  4057     0D13  0020               	movlb	0	; select bank0
  4058     0D14  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  4059     0D15  0022               	movlb	2	; select bank2
  4060     0D16  00A8               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  4061     0D17                     l247:
  4062     0D17  0008               	return
  4063     0D18                     __end_of_EUSART_SetTxInterruptHandler:
  4064                           
  4065                           	psect	text9
  4066     0D06                     __ptext9:	
  4067 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  4068 ;; Defined at:
  4069 ;;		line 289 in file "mcc_generated_files/eusart.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4072 ;;		 -> EUSART_Receive_ISR(1), 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;		None
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      void 
  4077 ;; Registers used:
  4078 ;;		wreg
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4084 ;;      Params:         0       2       0       0       0       0       0       0
  4085 ;;      Locals:         0       0       0       0       0       0       0       0
  4086 ;;      Temps:          0       0       0       0       0       0       0       0
  4087 ;;      Totals:         0       2       0       0       0       0       0       0
  4088 ;;Total ram usage:        2 bytes
  4089 ;; Hardware stack levels used: 1
  4090 ;; Hardware stack levels required when called: 7
  4091 ;; This function calls:
  4092 ;;		Nothing
  4093 ;; This function is called by:
  4094 ;;		_EUSART_Initialize
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098     0D06                     _EUSART_SetRxInterruptHandler:	
  4099                           ;psect for function _EUSART_SetRxInterruptHandler
  4100                           
  4101     0D06                     l4514:	
  4102                           ;incstack = 0
  4103                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4104                           
  4105                           
  4106                           ;mcc_generated_files/eusart.c: 290:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  4107     0D06  0020               	movlb	0	; select bank0
  4108     0D07  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4109     0D08  0022               	movlb	2	; select bank2
  4110     0D09  00A7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  4111     0D0A  0020               	movlb	0	; select bank0
  4112     0D0B  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4113     0D0C  0022               	movlb	2	; select bank2
  4114     0D0D  00A6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  4115     0D0E                     l250:
  4116     0D0E  0008               	return
  4117     0D0F                     __end_of_EUSART_SetRxInterruptHandler:
  4118                           
  4119                           	psect	text10
  4120     0CFD                     __ptext10:	
  4121 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  4122 ;; Defined at:
  4123 ;;		line 277 in file "mcc_generated_files/eusart.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4126 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;		None
  4129 ;; Return value:  Size  Location     Type
  4130 ;;                  1    wreg      void 
  4131 ;; Registers used:
  4132 ;;		wreg
  4133 ;; Tracked objects:
  4134 ;;		On entry : 0/0
  4135 ;;		On exit  : 0/0
  4136 ;;		Unchanged: 0/0
  4137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4138 ;;      Params:         0       2       0       0       0       0       0       0
  4139 ;;      Locals:         0       0       0       0       0       0       0       0
  4140 ;;      Temps:          0       0       0       0       0       0       0       0
  4141 ;;      Totals:         0       2       0       0       0       0       0       0
  4142 ;;Total ram usage:        2 bytes
  4143 ;; Hardware stack levels used: 1
  4144 ;; Hardware stack levels required when called: 7
  4145 ;; This function calls:
  4146 ;;		Nothing
  4147 ;; This function is called by:
  4148 ;;		_EUSART_Initialize
  4149 ;; This function uses a non-reentrant model
  4150 ;;
  4151                           
  4152     0CFD                     _EUSART_SetOverrunErrorHandler:	
  4153                           ;psect for function _EUSART_SetOverrunErrorHandler
  4154                           
  4155     0CFD                     l4520:	
  4156                           ;incstack = 0
  4157                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  4158                           
  4159                           
  4160                           ;mcc_generated_files/eusart.c: 278:     EUSART_OverrunErrorHandler = interruptHandler;
  4161     0CFD  0020               	movlb	0	; select bank0
  4162     0CFE  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  4163     0CFF  0022               	movlb	2	; select bank2
  4164     0D00  00A3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  4165     0D01  0020               	movlb	0	; select bank0
  4166     0D02  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  4167     0D03  0022               	movlb	2	; select bank2
  4168     0D04  00A2               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  4169     0D05                     l241:
  4170     0D05  0008               	return
  4171     0D06                     __end_of_EUSART_SetOverrunErrorHandler:
  4172                           
  4173                           	psect	text11
  4174     0CF4                     __ptext11:	
  4175 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  4176 ;; Defined at:
  4177 ;;		line 273 in file "mcc_generated_files/eusart.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4180 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;		None
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      void 
  4185 ;; Registers used:
  4186 ;;		wreg
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4192 ;;      Params:         0       2       0       0       0       0       0       0
  4193 ;;      Locals:         0       0       0       0       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0       0
  4195 ;;      Totals:         0       2       0       0       0       0       0       0
  4196 ;;Total ram usage:        2 bytes
  4197 ;; Hardware stack levels used: 1
  4198 ;; Hardware stack levels required when called: 7
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		_EUSART_Initialize
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206     0CF4                     _EUSART_SetFramingErrorHandler:	
  4207                           ;psect for function _EUSART_SetFramingErrorHandler
  4208                           
  4209     0CF4                     l4518:	
  4210                           ;incstack = 0
  4211                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  4212                           
  4213                           
  4214                           ;mcc_generated_files/eusart.c: 274:     EUSART_FramingErrorHandler = interruptHandler;
  4215     0CF4  0020               	movlb	0	; select bank0
  4216     0CF5  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  4217     0CF6  0022               	movlb	2	; select bank2
  4218     0CF7  00A5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  4219     0CF8  0020               	movlb	0	; select bank0
  4220     0CF9  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  4221     0CFA  0022               	movlb	2	; select bank2
  4222     0CFB  00A4               	movwf	_EUSART_FramingErrorHandler^(0+256)
  4223     0CFC                     l238:
  4224     0CFC  0008               	return
  4225     0CFD                     __end_of_EUSART_SetFramingErrorHandler:
  4226                           
  4227                           	psect	text12
  4228     0CEB                     __ptext12:	
  4229 ;; *************** function _EUSART_SetErrorHandler *****************
  4230 ;; Defined at:
  4231 ;;		line 281 in file "mcc_generated_files/eusart.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4234 ;;		 -> EUSART_DefaultErrorHandler(1), 
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;		None
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4246 ;;      Params:         0       2       0       0       0       0       0       0
  4247 ;;      Locals:         0       0       0       0       0       0       0       0
  4248 ;;      Temps:          0       0       0       0       0       0       0       0
  4249 ;;      Totals:         0       2       0       0       0       0       0       0
  4250 ;;Total ram usage:        2 bytes
  4251 ;; Hardware stack levels used: 1
  4252 ;; Hardware stack levels required when called: 7
  4253 ;; This function calls:
  4254 ;;		Nothing
  4255 ;; This function is called by:
  4256 ;;		_EUSART_Initialize
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260     0CEB                     _EUSART_SetErrorHandler:	
  4261                           ;psect for function _EUSART_SetErrorHandler
  4262                           
  4263     0CEB                     l4522:	
  4264                           ;incstack = 0
  4265                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  4266                           
  4267                           
  4268                           ;mcc_generated_files/eusart.c: 282:     EUSART_ErrorHandler = interruptHandler;
  4269     0CEB  0020               	movlb	0	; select bank0
  4270     0CEC  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  4271     0CED  0022               	movlb	2	; select bank2
  4272     0CEE  00A1               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  4273     0CEF  0020               	movlb	0	; select bank0
  4274     0CF0  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  4275     0CF1  0022               	movlb	2	; select bank2
  4276     0CF2  00A0               	movwf	_EUSART_ErrorHandler^(0+256)
  4277     0CF3                     l244:
  4278     0CF3  0008               	return
  4279     0CF4                     __end_of_EUSART_SetErrorHandler:
  4280                           
  4281                           	psect	text13
  4282     0D3F                     __ptext13:	
  4283 ;; *************** function _App_Process *****************
  4284 ;; Defined at:
  4285 ;;		line 49 in file "MCU.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;		None
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  1    wreg      void 
  4292 ;; Registers used:
  4293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4299 ;;      Params:         0       0       0       0       0       0       0       0
  4300 ;;      Locals:         0       0       0       0       0       0       0       0
  4301 ;;      Temps:          0       0       0       0       0       0       0       0
  4302 ;;      Totals:         0       0       0       0       0       0       0       0
  4303 ;;Total ram usage:        0 bytes
  4304 ;; Hardware stack levels used: 1
  4305 ;; Hardware stack levels required when called: 13
  4306 ;; This function calls:
  4307 ;;		_Task_Indicator
  4308 ;;		_Task_MB
  4309 ;;		_Task_Sensor
  4310 ;; This function is called by:
  4311 ;;		_main
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315     0D3F                     _App_Process:	
  4316                           ;psect for function _App_Process
  4317                           
  4318     0D3F                     l4702:	
  4319                           ;incstack = 0
  4320                           ; Regs used in _App_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4321                           
  4322                           
  4323                           ;MCU.c: 50:     Task_Sensor();
  4324     0D3F  3183  236B  318D   	fcall	_Task_Sensor
  4325     0D42                     l4704:
  4326                           
  4327                           ;MCU.c: 51:     Task_MB();
  4328     0D42  318E  262D  318D   	fcall	_Task_MB
  4329     0D45                     l4706:
  4330                           
  4331                           ;MCU.c: 52:     Task_Indicator();
  4332     0D45  318F  276A  318D   	fcall	_Task_Indicator
  4333     0D48                     l433:
  4334     0D48  0008               	return
  4335     0D49                     __end_of_App_Process:
  4336                           
  4337                           	psect	text14
  4338     036B                     __ptext14:	
  4339 ;; *************** function _Task_Sensor *****************
  4340 ;; Defined at:
  4341 ;;		line 44 in file "I2C_SHT30.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;		None
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;		None
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      void 
  4348 ;; Registers used:
  4349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4355 ;;      Params:         0       0       0       0       0       0       0       0
  4356 ;;      Locals:         0       0       0       0       0       0       0       0
  4357 ;;      Temps:          0      12       0       0       0       0       0       0
  4358 ;;      Totals:         0      12       0       0       0       0       0       0
  4359 ;;Total ram usage:       12 bytes
  4360 ;; Hardware stack levels used: 1
  4361 ;; Hardware stack levels required when called: 12
  4362 ;; This function calls:
  4363 ;;		_Get_millis
  4364 ;;		_ReadData
  4365 ;;		_llabs
  4366 ;; This function is called by:
  4367 ;;		_App_Process
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371     036B                     _Task_Sensor:	
  4372                           ;psect for function _Task_Sensor
  4373                           
  4374     036B                     l4652:	
  4375                           ;incstack = 0
  4376                           ; Regs used in _Task_Sensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4377                           
  4378                           
  4379                           ;I2C_SHT30.c: 45:     static uint32_t valTime = 0;;I2C_SHT30.c: 47:     f_Indicator = OF
      +                          F_Sensor;
  4380     036B  0020               	movlb	0	; select bank0
  4381     036C  01EB               	clrf	_f_Indicator
  4382     036D                     l4654:
  4383                           
  4384                           ;I2C_SHT30.c: 50:     if ((llabs(((uint32_t) Get_millis() - valTime)) >= (uint32_t) 2 * 
      +                          1000)) {
  4385     036D  318D  2535  3183   	fcall	_Get_millis
  4386     0370  0021               	movlb	1	; select bank1
  4387     0371  0855               	movf	Task_Sensor@valTime^(0+128),w
  4388     0372  0020               	movlb	0	; select bank0
  4389     0373  0220               	subwf	?_Get_millis,w
  4390     0374  00B6               	movwf	??_Task_Sensor
  4391     0375  0021               	movlb	1	; select bank1
  4392     0376  0856               	movf	(Task_Sensor@valTime+1)^(0+128),w
  4393     0377  0020               	movlb	0	; select bank0
  4394     0378  3B21               	subwfb	?_Get_millis+1,w
  4395     0379  00B7               	movwf	??_Task_Sensor+1
  4396     037A  0021               	movlb	1	; select bank1
  4397     037B  0857               	movf	(Task_Sensor@valTime+2)^(0+128),w
  4398     037C  0020               	movlb	0	; select bank0
  4399     037D  3B22               	subwfb	?_Get_millis+2,w
  4400     037E  00B8               	movwf	??_Task_Sensor+2
  4401     037F  0021               	movlb	1	; select bank1
  4402     0380  0858               	movf	(Task_Sensor@valTime+3)^(0+128),w
  4403     0381  0020               	movlb	0	; select bank0
  4404     0382  3B23               	subwfb	?_Get_millis+3,w
  4405     0383  00B9               	movwf	??_Task_Sensor+3
  4406     0384  0836               	movf	??_Task_Sensor,w
  4407     0385  00BA               	movwf	??_Task_Sensor+4
  4408     0386  0837               	movf	??_Task_Sensor+1,w
  4409     0387  00BB               	movwf	??_Task_Sensor+5
  4410     0388  0838               	movf	??_Task_Sensor+2,w
  4411     0389  00BC               	movwf	??_Task_Sensor+6
  4412     038A  0839               	movf	??_Task_Sensor+3,w
  4413     038B  00BD               	movwf	??_Task_Sensor+7
  4414     038C  01BE               	clrf	??_Task_Sensor+8
  4415     038D  01BF               	clrf	??_Task_Sensor+9
  4416     038E  01C0               	clrf	??_Task_Sensor+10
  4417     038F  01C1               	clrf	??_Task_Sensor+11
  4418     0390  0841               	movf	??_Task_Sensor+11,w
  4419     0391  00AB               	movwf	llabs@a+7
  4420     0392  0840               	movf	??_Task_Sensor+10,w
  4421     0393  00AA               	movwf	llabs@a+6
  4422     0394  083F               	movf	??_Task_Sensor+9,w
  4423     0395  00A9               	movwf	llabs@a+5
  4424     0396  083E               	movf	??_Task_Sensor+8,w
  4425     0397  00A8               	movwf	llabs@a+4
  4426     0398  083D               	movf	??_Task_Sensor+7,w
  4427     0399  00A7               	movwf	llabs@a+3
  4428     039A  083C               	movf	??_Task_Sensor+6,w
  4429     039B  00A6               	movwf	llabs@a+2
  4430     039C  083B               	movf	??_Task_Sensor+5,w
  4431     039D  00A5               	movwf	llabs@a+1
  4432     039E  083A               	movf	??_Task_Sensor+4,w
  4433     039F  00A4               	movwf	llabs@a
  4434     03A0  3185  2595  3183   	fcall	_llabs
  4435     03A3  0020               	movlb	0	; select bank0
  4436     03A4  1BAB               	btfsc	?_llabs+7,7
  4437     03A5  2BBF               	goto	u2121
  4438     03A6  082B               	movf	?_llabs+7,w
  4439     03A7  1D03               	btfss	3,2
  4440     03A8  2BC0               	goto	u2120
  4441     03A9  082A               	movf	?_llabs+6,w
  4442     03AA  1D03               	btfss	3,2
  4443     03AB  2BC0               	goto	u2120
  4444     03AC  0829               	movf	?_llabs+5,w
  4445     03AD  1D03               	btfss	3,2
  4446     03AE  2BC0               	goto	u2120
  4447     03AF  0828               	movf	?_llabs+4,w
  4448     03B0  1D03               	btfss	3,2
  4449     03B1  2BC0               	goto	u2120
  4450     03B2  0827               	movf	?_llabs+3,w
  4451     03B3  1D03               	btfss	3,2
  4452     03B4  2BC0               	goto	u2120
  4453     03B5  0826               	movf	?_llabs+2,w
  4454     03B6  1D03               	btfss	3,2
  4455     03B7  2BC0               	goto	u2120
  4456     03B8  30D0               	movlw	208
  4457     03B9  0224               	subwf	?_llabs,w
  4458     03BA  3007               	movlw	7
  4459     03BB  3B25               	subwfb	?_llabs+1,w
  4460     03BC  1C03               	btfss	3,0
  4461     03BD  2BBF               	goto	u2121
  4462     03BE  2BC0               	goto	u2120
  4463     03BF                     u2121:
  4464     03BF  2BDE               	goto	l374
  4465     03C0                     u2120:
  4466     03C0                     l4656:
  4467                           
  4468                           ;I2C_SHT30.c: 51:         valTime = Get_millis();
  4469     03C0  318D  2535  3183   	fcall	_Get_millis
  4470     03C3  0020               	movlb	0	; select bank0
  4471     03C4  0823               	movf	?_Get_millis+3,w
  4472     03C5  0021               	movlb	1	; select bank1
  4473     03C6  00D8               	movwf	(Task_Sensor@valTime+3)^(0+128)
  4474     03C7  0020               	movlb	0	; select bank0
  4475     03C8  0822               	movf	?_Get_millis+2,w
  4476     03C9  0021               	movlb	1	; select bank1
  4477     03CA  00D7               	movwf	(Task_Sensor@valTime+2)^(0+128)
  4478     03CB  0020               	movlb	0	; select bank0
  4479     03CC  0821               	movf	?_Get_millis+1,w
  4480     03CD  0021               	movlb	1	; select bank1
  4481     03CE  00D6               	movwf	(Task_Sensor@valTime+1)^(0+128)
  4482     03CF  0020               	movlb	0	; select bank0
  4483     03D0  0820               	movf	?_Get_millis,w
  4484     03D1  0021               	movlb	1	; select bank1
  4485     03D2  00D5               	movwf	Task_Sensor@valTime^(0+128)
  4486     03D3                     l4658:
  4487                           
  4488                           ;I2C_SHT30.c: 52:         f_Indicator = ON_Sensor;
  4489     03D3  0020               	movlb	0	; select bank0
  4490     03D4  01EB               	clrf	_f_Indicator
  4491     03D5  0AEB               	incf	_f_Indicator,f
  4492     03D6                     l4660:
  4493                           
  4494                           ;I2C_SHT30.c: 54:         ReadData();
  4495     03D6  3184  249A  3183   	fcall	_ReadData
  4496     03D9                     l4662:
  4497                           
  4498                           ;I2C_SHT30.c: 55:         if ((SensorAmbient.T.Val16 = 0) || (SensorAmbient.H.Val16 = 0)
      +                          ) {
  4499     03D9  0020               	movlb	0	; select bank0
  4500     03DA  01E2               	clrf	_SensorAmbient
  4501     03DB  01E3               	clrf	_SensorAmbient+1
  4502     03DC                     l4664:
  4503     03DC  01E4               	clrf	_SensorAmbient+2
  4504     03DD  01E5               	clrf	_SensorAmbient+3
  4505     03DE                     l374:
  4506     03DE  0008               	return
  4507     03DF                     __end_of_Task_Sensor:
  4508                           
  4509                           	psect	text15
  4510     0595                     __ptext15:	
  4511 ;; *************** function _llabs *****************
  4512 ;; Defined at:
  4513 ;;		line 1 in file "C:\Program Files\Microchip\XC8_Ver2.41\pic\sources\c99\common\llabs.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  a               8    4[BANK0 ] long long 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;		None
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  8    4[BANK0 ] long long 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4527 ;;      Params:         0       8       0       0       0       0       0       0
  4528 ;;      Locals:         0       0       0       0       0       0       0       0
  4529 ;;      Temps:          0       0       0       0       0       0       0       0
  4530 ;;      Totals:         0       8       0       0       0       0       0       0
  4531 ;;Total ram usage:        8 bytes
  4532 ;; Hardware stack levels used: 1
  4533 ;; Hardware stack levels required when called: 7
  4534 ;; This function calls:
  4535 ;;		Nothing
  4536 ;; This function is called by:
  4537 ;;		_Task_Sensor
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541     0595                     _llabs:	
  4542                           ;psect for function _llabs
  4543                           
  4544     0595                     l4542:	
  4545                           ;incstack = 0
  4546                           ; Regs used in _llabs: [wreg+status,2+status,0]
  4547                           
  4548     0595  0020               	movlb	0	; select bank0
  4549     0596  1BAB               	btfsc	llabs@a+7,7
  4550     0597  2DB3               	goto	u2090
  4551     0598  082B               	movf	llabs@a+7,w
  4552     0599  1D03               	btfss	3,2
  4553     059A  2DB2               	goto	u2091
  4554     059B  082A               	movf	llabs@a+6,w
  4555     059C  1D03               	btfss	3,2
  4556     059D  2DB2               	goto	u2091
  4557     059E  0829               	movf	llabs@a+5,w
  4558     059F  1D03               	btfss	3,2
  4559     05A0  2DB2               	goto	u2091
  4560     05A1  0828               	movf	llabs@a+4,w
  4561     05A2  1D03               	btfss	3,2
  4562     05A3  2DB2               	goto	u2091
  4563     05A4  0827               	movf	llabs@a+3,w
  4564     05A5  1D03               	btfss	3,2
  4565     05A6  2DB2               	goto	u2091
  4566     05A7  0826               	movf	llabs@a+2,w
  4567     05A8  1D03               	btfss	3,2
  4568     05A9  2DB2               	goto	u2091
  4569     05AA  0825               	movf	llabs@a+1,w
  4570     05AB  1D03               	btfss	3,2
  4571     05AC  2DB2               	goto	u2091
  4572     05AD  3001               	movlw	1
  4573     05AE  0224               	subwf	llabs@a,w
  4574     05AF  1803               	btfsc	3,0
  4575     05B0  2DB2               	goto	u2091
  4576     05B1  2DB3               	goto	u2090
  4577     05B2                     u2091:
  4578     05B2  2DDB               	goto	l1615
  4579     05B3                     u2090:
  4580     05B3                     l4544:
  4581     05B3  0020               	movlb	0	; select bank0
  4582     05B4  0924               	comf	llabs@a,w
  4583     05B5  00A4               	movwf	?_llabs
  4584     05B6  0925               	comf	llabs@a+1,w
  4585     05B7  00A5               	movwf	?_llabs+1
  4586     05B8  0926               	comf	llabs@a+2,w
  4587     05B9  00A6               	movwf	?_llabs+2
  4588     05BA  0927               	comf	llabs@a+3,w
  4589     05BB  00A7               	movwf	?_llabs+3
  4590     05BC  0928               	comf	llabs@a+4,w
  4591     05BD  00A8               	movwf	?_llabs+4
  4592     05BE  0929               	comf	llabs@a+5,w
  4593     05BF  00A9               	movwf	?_llabs+5
  4594     05C0  092A               	comf	llabs@a+6,w
  4595     05C1  00AA               	movwf	?_llabs+6
  4596     05C2  092B               	comf	llabs@a+7,w
  4597     05C3  00AB               	movwf	?_llabs+7
  4598     05C4  0AA4               	incf	?_llabs,f
  4599     05C5  1D03               	skipz
  4600     05C6  2DDA               	goto	u210lld
  4601     05C7  0AA5               	incf	?_llabs+1,f
  4602     05C8  1D03               	skipz
  4603     05C9  2DDA               	goto	u210lld
  4604     05CA  0AA6               	incf	?_llabs+2,f
  4605     05CB  1D03               	skipz
  4606     05CC  2DDA               	goto	u210lld
  4607     05CD  0AA7               	incf	?_llabs+3,f
  4608     05CE  1D03               	skipz
  4609     05CF  2DDA               	goto	u210lld
  4610     05D0  0AA8               	incf	?_llabs+4,f
  4611     05D1  1D03               	skipz
  4612     05D2  2DDA               	goto	u210lld
  4613     05D3  0AA9               	incf	?_llabs+5,f
  4614     05D4  1D03               	skipz
  4615     05D5  2DDA               	goto	u210lld
  4616     05D6  0AAA               	incf	?_llabs+6,f
  4617     05D7  1D03               	skipz
  4618     05D8  2DDA               	goto	u210lld
  4619     05D9  0AAB               	incf	?_llabs+7,f
  4620     05DA                     u210lld:
  4621     05DA  2DDB               	goto	l1618
  4622     05DB                     l1615:
  4623     05DB                     l1618:
  4624     05DB  0008               	return
  4625     05DC                     __end_of_llabs:
  4626                           
  4627                           	psect	text16
  4628     049A                     __ptext16:	
  4629 ;; *************** function _ReadData *****************
  4630 ;; Defined at:
  4631 ;;		line 26 in file "I2C_SHT30.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;		None
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;  aData           6   16[BANK0 ] unsigned char [6]
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4645 ;;      Params:         0       0       0       0       0       0       0       0
  4646 ;;      Locals:         0       6       0       0       0       0       0       0
  4647 ;;      Temps:          0       4       0       0       0       0       0       0
  4648 ;;      Totals:         0      10       0       0       0       0       0       0
  4649 ;;Total ram usage:       10 bytes
  4650 ;; Hardware stack levels used: 1
  4651 ;; Hardware stack levels required when called: 11
  4652 ;; This function calls:
  4653 ;;		_Get_millis
  4654 ;;		_I2C_ReadNBytes
  4655 ;;		_I2C_WriteNBytes
  4656 ;; This function is called by:
  4657 ;;		_Task_Sensor
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661     049A                     _ReadData:	
  4662                           ;psect for function _ReadData
  4663                           
  4664     049A                     l4526:	
  4665                           ;incstack = 0
  4666                           ; Regs used in _ReadData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4667                           
  4668                           
  4669                           ;I2C_SHT30.c: 27:     uint8_t aData[6];;I2C_SHT30.c: 28:     static uint32_t valTime = 0
      +                          ;;I2C_SHT30.c: 29:     I2C_WriteNBytes(0x44, SHT30_CMD_MEASURE_H_Enable, 2);
  4670     049A  30EB               	movlw	(low (_SHT30_CMD_MEASURE_H_Enable| 0))& (0+255)
  4671     049B  0020               	movlb	0	; select bank0
  4672     049C  00A8               	movwf	I2C_WriteNBytes@data
  4673     049D  3002               	movlw	2
  4674     049E  00A9               	movwf	I2C_WriteNBytes@len
  4675     049F  3000               	movlw	0
  4676     04A0  00AA               	movwf	I2C_WriteNBytes@len+1
  4677     04A1  3044               	movlw	68
  4678     04A2  3187  273D  3184   	fcall	_I2C_WriteNBytes
  4679     04A5                     l4528:
  4680                           
  4681                           ;I2C_SHT30.c: 30:     valTime = Get_millis();
  4682     04A5  318D  2535  3184   	fcall	_Get_millis
  4683     04A8  0020               	movlb	0	; select bank0
  4684     04A9  0823               	movf	?_Get_millis+3,w
  4685     04AA  0021               	movlb	1	; select bank1
  4686     04AB  00DC               	movwf	(ReadData@valTime+3)^(0+128)
  4687     04AC  0020               	movlb	0	; select bank0
  4688     04AD  0822               	movf	?_Get_millis+2,w
  4689     04AE  0021               	movlb	1	; select bank1
  4690     04AF  00DB               	movwf	(ReadData@valTime+2)^(0+128)
  4691     04B0  0020               	movlb	0	; select bank0
  4692     04B1  0821               	movf	?_Get_millis+1,w
  4693     04B2  0021               	movlb	1	; select bank1
  4694     04B3  00DA               	movwf	(ReadData@valTime+1)^(0+128)
  4695     04B4  0020               	movlb	0	; select bank0
  4696     04B5  0820               	movf	?_Get_millis,w
  4697     04B6  0021               	movlb	1	; select bank1
  4698     04B7  00D9               	movwf	ReadData@valTime^(0+128)
  4699     04B8                     l4530:	
  4700                           ;I2C_SHT30.c: 31:     while (((uint32_t) Get_millis() - valTime) < (uint32_t) 2 * 4);
  4701                           
  4702     04B8  318D  2535  3184   	fcall	_Get_millis
  4703     04BB  0021               	movlb	1	; select bank1
  4704     04BC  0859               	movf	ReadData@valTime^(0+128),w
  4705     04BD  0020               	movlb	0	; select bank0
  4706     04BE  0220               	subwf	?_Get_millis,w
  4707     04BF  00AC               	movwf	??_ReadData
  4708     04C0  0021               	movlb	1	; select bank1
  4709     04C1  085A               	movf	(ReadData@valTime+1)^(0+128),w
  4710     04C2  0020               	movlb	0	; select bank0
  4711     04C3  3B21               	subwfb	?_Get_millis+1,w
  4712     04C4  00AD               	movwf	??_ReadData+1
  4713     04C5  0021               	movlb	1	; select bank1
  4714     04C6  085B               	movf	(ReadData@valTime+2)^(0+128),w
  4715     04C7  0020               	movlb	0	; select bank0
  4716     04C8  3B22               	subwfb	?_Get_millis+2,w
  4717     04C9  00AE               	movwf	??_ReadData+2
  4718     04CA  0021               	movlb	1	; select bank1
  4719     04CB  085C               	movf	(ReadData@valTime+3)^(0+128),w
  4720     04CC  0020               	movlb	0	; select bank0
  4721     04CD  3B23               	subwfb	?_Get_millis+3,w
  4722     04CE  00AF               	movwf	??_ReadData+3
  4723     04CF  082F               	movf	??_ReadData+3,w
  4724     04D0  1D03               	btfss	3,2
  4725     04D1  2CDE               	goto	u2080
  4726     04D2  082E               	movf	??_ReadData+2,w
  4727     04D3  1D03               	btfss	3,2
  4728     04D4  2CDE               	goto	u2080
  4729     04D5  082D               	movf	??_ReadData+1,w
  4730     04D6  1D03               	btfss	3,2
  4731     04D7  2CDE               	goto	u2080
  4732     04D8  3008               	movlw	8
  4733     04D9  022C               	subwf	??_ReadData,w
  4734     04DA  1C03               	btfss	3,0
  4735     04DB  2CDD               	goto	u2081
  4736     04DC  2CDE               	goto	u2080
  4737     04DD                     u2081:
  4738     04DD  2CB8               	goto	l4530
  4739     04DE                     u2080:
  4740     04DE                     l4532:
  4741                           
  4742                           ;I2C_SHT30.c: 33:     I2C_ReadNBytes(0x44, aData, 6);
  4743     04DE  3030               	movlw	(low (ReadData@aData| 0))& (0+255)
  4744     04DF  0020               	movlb	0	; select bank0
  4745     04E0  00A4               	movwf	I2C_ReadNBytes@data
  4746     04E1  3006               	movlw	6
  4747     04E2  00A5               	movwf	I2C_ReadNBytes@len
  4748     04E3  3000               	movlw	0
  4749     04E4  00A6               	movwf	I2C_ReadNBytes@len+1
  4750     04E5  3044               	movlw	68
  4751     04E6  318F  2703  3184   	fcall	_I2C_ReadNBytes
  4752     04E9                     l4534:
  4753                           
  4754                           ;I2C_SHT30.c: 35:     SensorAmbient.T._Byte[0] = aData[1];
  4755     04E9  0020               	movlb	0	; select bank0
  4756     04EA  0831               	movf	ReadData@aData+1,w
  4757     04EB  00E2               	movwf	_SensorAmbient
  4758     04EC                     l4536:
  4759                           
  4760                           ;I2C_SHT30.c: 36:     SensorAmbient.T._Byte[1] = aData[0];
  4761     04EC  0830               	movf	ReadData@aData,w
  4762     04ED  00E3               	movwf	_SensorAmbient+1
  4763     04EE                     l4538:
  4764                           
  4765                           ;I2C_SHT30.c: 38:     SensorAmbient.H._Byte[0] = aData[4];
  4766     04EE  0834               	movf	ReadData@aData+4,w
  4767     04EF  00E4               	movwf	_SensorAmbient+2
  4768     04F0                     l4540:
  4769                           
  4770                           ;I2C_SHT30.c: 39:     SensorAmbient.H._Byte[1] = aData[3];
  4771     04F0  0833               	movf	ReadData@aData+3,w
  4772     04F1  00E5               	movwf	_SensorAmbient+3
  4773     04F2                     l365:
  4774     04F2  0008               	return
  4775     04F3                     __end_of_ReadData:
  4776                           
  4777                           	psect	text17
  4778     073D                     __ptext17:	
  4779 ;; *************** function _I2C_WriteNBytes *****************
  4780 ;; Defined at:
  4781 ;;		line 111 in file "mcc_generated_files/examples/i2c_master_example.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  address         1    wreg     unsigned char 
  4784 ;;  data            1    8[BANK0 ] PTR unsigned char 
  4785 ;;		 -> SHT30_CMD_MEASURE_H_Enable(2), 
  4786 ;;  len             2    9[BANK0 ] unsigned int 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  address         1   11[BANK0 ] unsigned char 
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  1    wreg      void 
  4791 ;; Registers used:
  4792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4798 ;;      Params:         0       3       0       0       0       0       0       0
  4799 ;;      Locals:         0       1       0       0       0       0       0       0
  4800 ;;      Temps:          0       0       0       0       0       0       0       0
  4801 ;;      Totals:         0       4       0       0       0       0       0       0
  4802 ;;Total ram usage:        4 bytes
  4803 ;; Hardware stack levels used: 1
  4804 ;; Hardware stack levels required when called: 10
  4805 ;; This function calls:
  4806 ;;		_I2C_Close
  4807 ;;		_I2C_MasterWrite
  4808 ;;		_I2C_Open
  4809 ;;		_I2C_SetAddressNackCallback
  4810 ;;		_I2C_SetBuffer
  4811 ;; This function is called by:
  4812 ;;		_ReadData
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816     073D                     _I2C_WriteNBytes:	
  4817                           ;psect for function _I2C_WriteNBytes
  4818                           
  4819                           
  4820                           ;incstack = 0
  4821                           ; Regs used in _I2C_WriteNBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4822                           ;I2C_WriteNBytes@address stored from wreg
  4823     073D  0020               	movlb	0	; select bank0
  4824     073E  00AB               	movwf	I2C_WriteNBytes@address
  4825     073F                     l4426:
  4826     073F                     l4428:	
  4827                           ;mcc_generated_files/examples/i2c_master_example.c: 111: void I2C_WriteNBytes(i2c_addres
      +                          s_t address, uint8_t* data, size_t len);mcc_generated_files/examples/i2c_master_example.
      +                          c: 112: {;mcc_generated_files/examples/i2c_master_example.c: 113:     while(!I2C_Open(ad
      +                          dress));
  4828                           
  4829     073F  0020               	movlb	0	; select bank0
  4830     0740  082B               	movf	I2C_WriteNBytes@address,w
  4831     0741  3185  25DC  3187   	fcall	_I2C_Open
  4832     0744  3A00               	xorlw	0
  4833     0745  1903               	skipnz
  4834     0746  2F48               	goto	u1971
  4835     0747  2F49               	goto	u1970
  4836     0748                     u1971:
  4837     0748  2F3F               	goto	l4428
  4838     0749                     u1970:
  4839     0749                     l4430:
  4840                           
  4841                           ;mcc_generated_files/examples/i2c_master_example.c: 114:     I2C_SetBuffer(data,len);
  4842     0749  0020               	movlb	0	; select bank0
  4843     074A  082A               	movf	I2C_WriteNBytes@len+1,w
  4844     074B  00A1               	movwf	I2C_SetBuffer@bufferSize+1
  4845     074C  0829               	movf	I2C_WriteNBytes@len,w
  4846     074D  00A0               	movwf	I2C_SetBuffer@bufferSize
  4847     074E  0828               	movf	I2C_WriteNBytes@data,w
  4848     074F  318E  2653  3187   	fcall	_I2C_SetBuffer
  4849     0752                     l4432:
  4850                           
  4851                           ;mcc_generated_files/examples/i2c_master_example.c: 115:     I2C_SetAddressNackCallback(
      +                          ((void*)0),((void*)0));
  4852     0752  3000               	movlw	0
  4853     0753  0020               	movlb	0	; select bank0
  4854     0754  00A4               	movwf	I2C_SetAddressNackCallback@cb
  4855     0755  00A5               	movwf	I2C_SetAddressNackCallback@cb+1
  4856     0756  3000               	movlw	0
  4857     0757  00A6               	movwf	I2C_SetAddressNackCallback@ptr
  4858     0758  00A7               	movwf	I2C_SetAddressNackCallback@ptr+1
  4859     0759  318D  2554  3187   	fcall	_I2C_SetAddressNackCallback
  4860     075C                     l4434:
  4861                           
  4862                           ;mcc_generated_files/examples/i2c_master_example.c: 116:     I2C_MasterWrite();
  4863     075C  318C  24B2  3187   	fcall	_I2C_MasterWrite
  4864     075F                     l4436:	
  4865                           ;mcc_generated_files/examples/i2c_master_example.c: 117:     while(I2C_BUSY == I2C_Close
      +                          ());
  4866                           
  4867     075F  318E  26CA  3187   	fcall	_I2C_Close
  4868     0762  3A01               	xorlw	1
  4869     0763  1903               	skipnz
  4870     0764  2F66               	goto	u1981
  4871     0765  2F67               	goto	u1980
  4872     0766                     u1981:
  4873     0766  2F5F               	goto	l4436
  4874     0767                     u1980:
  4875     0767                     l972:
  4876     0767  0008               	return
  4877     0768                     __end_of_I2C_WriteNBytes:
  4878                           
  4879                           	psect	text18
  4880     0D54                     __ptext18:	
  4881 ;; *************** function _I2C_SetAddressNackCallback *****************
  4882 ;; Defined at:
  4883 ;;		line 284 in file "mcc_generated_files/i2c_master.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  cb              2    4[BANK0 ] PTR FTN(PTR void ,)enum 
  4886 ;;		 -> NULL(1), 
  4887 ;;  ptr             2    6[BANK0 ] PTR void 
  4888 ;;		 -> NULL(0), 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  1    wreg      void 
  4893 ;; Registers used:
  4894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4900 ;;      Params:         0       4       0       0       0       0       0       0
  4901 ;;      Locals:         0       0       0       0       0       0       0       0
  4902 ;;      Temps:          0       0       0       0       0       0       0       0
  4903 ;;      Totals:         0       4       0       0       0       0       0       0
  4904 ;;Total ram usage:        4 bytes
  4905 ;; Hardware stack levels used: 1
  4906 ;; Hardware stack levels required when called: 8
  4907 ;; This function calls:
  4908 ;;		_I2C_SetCallback
  4909 ;; This function is called by:
  4910 ;;		_I2C_WriteNBytes
  4911 ;;		_I2C_Read1ByteRegister
  4912 ;;		_I2C_Read2ByteRegister
  4913 ;;		_I2C_Write1ByteRegister
  4914 ;;		_I2C_Write2ByteRegister
  4915 ;;		_I2C_ReadDataBlock
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919     0D54                     _I2C_SetAddressNackCallback:	
  4920                           ;psect for function _I2C_SetAddressNackCallback
  4921                           
  4922     0D54                     l4424:	
  4923                           ;incstack = 0
  4924                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4925                           
  4926                           
  4927                           ;mcc_generated_files/i2c_master.c: 284: void I2C_SetAddressNackCallback(i2c_callback_t c
      +                          b, void *ptr);mcc_generated_files/i2c_master.c: 285: {;mcc_generated_files/i2c_master.c:
      +                           286:     I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  4928     0D54  0020               	movlb	0	; select bank0
  4929     0D55  0825               	movf	I2C_SetAddressNackCallback@cb+1,w
  4930     0D56  00A1               	movwf	I2C_SetCallback@cb+1
  4931     0D57  0824               	movf	I2C_SetAddressNackCallback@cb,w
  4932     0D58  00A0               	movwf	I2C_SetCallback@cb
  4933     0D59  0826               	movf	I2C_SetAddressNackCallback@ptr,w
  4934     0D5A  00A2               	movwf	I2C_SetCallback@ptr
  4935     0D5B  3002               	movlw	2
  4936     0D5C  318F  27B3  318D   	fcall	_I2C_SetCallback
  4937     0D5F                     l707:
  4938     0D5F  0008               	return
  4939     0D60                     __end_of_I2C_SetAddressNackCallback:
  4940                           
  4941                           	psect	text19
  4942     0FB3                     __ptext19:	
  4943 ;; *************** function _I2C_SetCallback *****************
  4944 ;; Defined at:
  4945 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;  idx             1    wreg     enum E3130
  4948 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
  4949 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  4950 ;;		 -> rd1RegCompleteHandler(1), NULL(1), 
  4951 ;;  ptr             1    2[BANK0 ] PTR void 
  4952 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  4953 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;  idx             1    3[BANK0 ] enum E3130
  4956 ;; Return value:  Size  Location     Type
  4957 ;;                  1    wreg      void 
  4958 ;; Registers used:
  4959 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4965 ;;      Params:         0       3       0       0       0       0       0       0
  4966 ;;      Locals:         0       1       0       0       0       0       0       0
  4967 ;;      Temps:          0       0       0       0       0       0       0       0
  4968 ;;      Totals:         0       4       0       0       0       0       0       0
  4969 ;;Total ram usage:        4 bytes
  4970 ;; Hardware stack levels used: 1
  4971 ;; Hardware stack levels required when called: 7
  4972 ;; This function calls:
  4973 ;;		Nothing
  4974 ;; This function is called by:
  4975 ;;		_I2C_SetAddressNackCallback
  4976 ;;		_I2C_SetWriteCollisionCallback
  4977 ;;		_I2C_SetDataNackCallback
  4978 ;;		_I2C_SetTimeoutCallback
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982     0FB3                     _I2C_SetCallback:	
  4983                           ;psect for function _I2C_SetCallback
  4984                           
  4985                           
  4986                           ;incstack = 0
  4987                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  4988                           ;I2C_SetCallback@idx stored from wreg
  4989     0FB3  0020               	movlb	0	; select bank0
  4990     0FB4  00A3               	movwf	I2C_SetCallback@idx
  4991     0FB5                     l4248:
  4992                           
  4993                           ;mcc_generated_files/i2c_master.c: 304: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 305: {;mcc_generate
      +                          d_files/i2c_master.c: 306:     if(cb)
  4994     0FB5  0820               	movf	I2C_SetCallback@cb,w
  4995     0FB6  0421               	iorwf	I2C_SetCallback@cb+1,w
  4996     0FB7  1903               	btfsc	3,2
  4997     0FB8  2FBA               	goto	u1851
  4998     0FB9  2FBB               	goto	u1850
  4999     0FBA                     u1851:
  5000     0FBA  2FCA               	goto	l4252
  5001     0FBB                     u1850:
  5002     0FBB                     l4250:
  5003                           
  5004                           ;mcc_generated_files/i2c_master.c: 307:     {;mcc_generated_files/i2c_master.c: 308:    
      +                               I2C_Status.callbackTable[idx] = cb;
  5005     0FBB  3523               	lslf	I2C_SetCallback@idx,w
  5006     0FBC  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  5007     0FBD  0086               	movwf	6
  5008     0FBE  0187               	clrf	7
  5009     0FBF  0820               	movf	I2C_SetCallback@cb,w
  5010     0FC0  3FC0               	movwi [0]fsr1
  5011     0FC1  0821               	movf	I2C_SetCallback@cb+1,w
  5012     0FC2  3FC1               	movwi [1]fsr1
  5013                           
  5014                           ;mcc_generated_files/i2c_master.c: 309:         I2C_Status.callbackPayload[idx] = ptr;
  5015     0FC3  0823               	movf	I2C_SetCallback@idx,w
  5016     0FC4  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  5017     0FC5  0086               	movwf	6
  5018     0FC6  0187               	clrf	7
  5019     0FC7  0822               	movf	I2C_SetCallback@ptr,w
  5020     0FC8  0081               	movwf	1
  5021                           
  5022                           ;mcc_generated_files/i2c_master.c: 310:     }
  5023     0FC9  2FD7               	goto	l721
  5024     0FCA                     l4252:
  5025                           
  5026                           ;mcc_generated_files/i2c_master.c: 312:     {;mcc_generated_files/i2c_master.c: 313:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  5027     0FCA  3523               	lslf	I2C_SetCallback@idx,w
  5028     0FCB  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  5029     0FCC  0086               	movwf	6
  5030     0FCD  0187               	clrf	7
  5031     0FCE  3039               	movlw	low _I2C_CallbackReturnStop
  5032     0FCF  3FC0               	movwi [0]fsr1
  5033     0FD0  300C               	movlw	high _I2C_CallbackReturnStop
  5034     0FD1  3FC1               	movwi [1]fsr1
  5035                           
  5036                           ;mcc_generated_files/i2c_master.c: 314:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
  5037     0FD2  0823               	movf	I2C_SetCallback@idx,w
  5038     0FD3  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  5039     0FD4  0086               	movwf	6
  5040     0FD5  0187               	clrf	7
  5041     0FD6  0181               	clrf	1
  5042     0FD7                     l721:
  5043     0FD7  0008               	return
  5044     0FD8                     __end_of_I2C_SetCallback:
  5045                           
  5046                           	psect	text20
  5047     0CB2                     __ptext20:	
  5048 ;; *************** function _I2C_MasterWrite *****************
  5049 ;; Defined at:
  5050 ;;		line 252 in file "mcc_generated_files/i2c_master.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;		None
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  1    wreg      enum E358
  5057 ;; Registers used:
  5058 ;;		wreg, status,2, status,0, pclath, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5064 ;;      Params:         0       0       0       0       0       0       0       0
  5065 ;;      Locals:         0       0       0       0       0       0       0       0
  5066 ;;      Temps:          0       0       0       0       0       0       0       0
  5067 ;;      Totals:         0       0       0       0       0       0       0       0
  5068 ;;Total ram usage:        0 bytes
  5069 ;; Hardware stack levels used: 1
  5070 ;; Hardware stack levels required when called: 9
  5071 ;; This function calls:
  5072 ;;		_I2C_MasterOperation
  5073 ;; This function is called by:
  5074 ;;		_I2C_WriteNBytes
  5075 ;;		_I2C_Read1ByteRegister
  5076 ;;		_I2C_Read2ByteRegister
  5077 ;;		_I2C_Write1ByteRegister
  5078 ;;		_I2C_Write2ByteRegister
  5079 ;;		_I2C_ReadDataBlock
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083     0CB2                     _I2C_MasterWrite:	
  5084                           ;psect for function _I2C_MasterWrite
  5085                           
  5086     0CB2                     l4414:	
  5087                           ;incstack = 0
  5088                           ; Regs used in _I2C_MasterWrite: [wreg+status,2+status,0+pclath+cstack]
  5089                           
  5090                           
  5091                           ;mcc_generated_files/i2c_master.c: 254:     return I2C_MasterOperation(0);;	Return value
      +                           of _I2C_MasterWrite is never used
  5092     0CB2  3000               	movlw	0
  5093     0CB3  318E  26E5  318C   	fcall	_I2C_MasterOperation
  5094     0CB6                     l691:
  5095     0CB6  0008               	return
  5096     0CB7                     __end_of_I2C_MasterWrite:
  5097                           
  5098                           	psect	text21
  5099     0F03                     __ptext21:	
  5100 ;; *************** function _I2C_ReadNBytes *****************
  5101 ;; Defined at:
  5102 ;;		line 120 in file "mcc_generated_files/examples/i2c_master_example.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  address         1    wreg     unsigned char 
  5105 ;;  data            1    4[BANK0 ] PTR unsigned char 
  5106 ;;		 -> ReadData@aData(6), 
  5107 ;;  len             2    5[BANK0 ] unsigned int 
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;  address         1    7[BANK0 ] unsigned char 
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  1    wreg      void 
  5112 ;; Registers used:
  5113 ;;		wreg, status,2, status,0, pclath, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5119 ;;      Params:         0       3       0       0       0       0       0       0
  5120 ;;      Locals:         0       1       0       0       0       0       0       0
  5121 ;;      Temps:          0       0       0       0       0       0       0       0
  5122 ;;      Totals:         0       4       0       0       0       0       0       0
  5123 ;;Total ram usage:        4 bytes
  5124 ;; Hardware stack levels used: 1
  5125 ;; Hardware stack levels required when called: 10
  5126 ;; This function calls:
  5127 ;;		_I2C_Close
  5128 ;;		_I2C_MasterRead
  5129 ;;		_I2C_Open
  5130 ;;		_I2C_SetBuffer
  5131 ;; This function is called by:
  5132 ;;		_ReadData
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136     0F03                     _I2C_ReadNBytes:	
  5137                           ;psect for function _I2C_ReadNBytes
  5138                           
  5139                           
  5140                           ;incstack = 0
  5141                           ; Regs used in _I2C_ReadNBytes: [wreg+status,2+status,0+pclath+cstack]
  5142                           ;I2C_ReadNBytes@address stored from wreg
  5143     0F03  0020               	movlb	0	; select bank0
  5144     0F04  00A7               	movwf	I2C_ReadNBytes@address
  5145     0F05                     l4438:
  5146     0F05                     l4440:	
  5147                           ;mcc_generated_files/examples/i2c_master_example.c: 120: void I2C_ReadNBytes(i2c_address
      +                          _t address, uint8_t *data, size_t len);mcc_generated_files/examples/i2c_master_example.c
      +                          : 121: {;mcc_generated_files/examples/i2c_master_example.c: 122:     while(!I2C_Open(add
      +                          ress));
  5148                           
  5149     0F05  0020               	movlb	0	; select bank0
  5150     0F06  0827               	movf	I2C_ReadNBytes@address,w
  5151     0F07  3185  25DC  318F   	fcall	_I2C_Open
  5152     0F0A  3A00               	xorlw	0
  5153     0F0B  1903               	skipnz
  5154     0F0C  2F0E               	goto	u1991
  5155     0F0D  2F0F               	goto	u1990
  5156     0F0E                     u1991:
  5157     0F0E  2F05               	goto	l4440
  5158     0F0F                     u1990:
  5159     0F0F                     l4442:
  5160                           
  5161                           ;mcc_generated_files/examples/i2c_master_example.c: 123:     I2C_SetBuffer(data,len);
  5162     0F0F  0020               	movlb	0	; select bank0
  5163     0F10  0826               	movf	I2C_ReadNBytes@len+1,w
  5164     0F11  00A1               	movwf	I2C_SetBuffer@bufferSize+1
  5165     0F12  0825               	movf	I2C_ReadNBytes@len,w
  5166     0F13  00A0               	movwf	I2C_SetBuffer@bufferSize
  5167     0F14  0824               	movf	I2C_ReadNBytes@data,w
  5168     0F15  318E  2653  318F   	fcall	_I2C_SetBuffer
  5169                           
  5170                           ;mcc_generated_files/examples/i2c_master_example.c: 124:     I2C_MasterRead();
  5171     0F18  318C  24AD  318F   	fcall	_I2C_MasterRead
  5172     0F1B                     l4444:	
  5173                           ;mcc_generated_files/examples/i2c_master_example.c: 125:     while(I2C_BUSY == I2C_Close
      +                          ());
  5174                           
  5175     0F1B  318E  26CA  318F   	fcall	_I2C_Close
  5176     0F1E  3A01               	xorlw	1
  5177     0F1F  1903               	skipnz
  5178     0F20  2F22               	goto	u2001
  5179     0F21  2F23               	goto	u2000
  5180     0F22                     u2001:
  5181     0F22  2F1B               	goto	l4444
  5182     0F23                     u2000:
  5183     0F23                     l981:
  5184     0F23  0008               	return
  5185     0F24                     __end_of_I2C_ReadNBytes:
  5186                           
  5187                           	psect	text22
  5188     0E53                     __ptext22:	
  5189 ;; *************** function _I2C_SetBuffer *****************
  5190 ;; Defined at:
  5191 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  buffer          1    wreg     PTR void 
  5194 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  5195 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  5196 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), NULL(0), ReadData@aData(6), 
  5197 ;;		 -> SHT30_CMD_MEASURE_H_Enable(2), 
  5198 ;;  bufferSize      2    0[BANK0 ] unsigned int 
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;  buffer          1    2[BANK0 ] PTR void 
  5201 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  5202 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  5203 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), NULL(0), ReadData@aData(6), 
  5204 ;;		 -> SHT30_CMD_MEASURE_H_Enable(2), 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5214 ;;      Params:         0       2       0       0       0       0       0       0
  5215 ;;      Locals:         0       1       0       0       0       0       0       0
  5216 ;;      Temps:          0       0       0       0       0       0       0       0
  5217 ;;      Totals:         0       3       0       0       0       0       0       0
  5218 ;;Total ram usage:        3 bytes
  5219 ;; Hardware stack levels used: 1
  5220 ;; Hardware stack levels required when called: 7
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		_I2C_WriteNBytes
  5225 ;;		_I2C_ReadNBytes
  5226 ;;		_I2C_Read1ByteRegister
  5227 ;;		_I2C_Read2ByteRegister
  5228 ;;		_I2C_Write1ByteRegister
  5229 ;;		_I2C_Write2ByteRegister
  5230 ;;		_I2C_ReadDataBlock
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234     0E53                     _I2C_SetBuffer:	
  5235                           ;psect for function _I2C_SetBuffer
  5236                           
  5237                           
  5238                           ;incstack = 0
  5239                           ; Regs used in _I2C_SetBuffer: [wreg]
  5240                           ;I2C_SetBuffer@buffer stored from wreg
  5241     0E53  0020               	movlb	0	; select bank0
  5242     0E54  00A2               	movwf	I2C_SetBuffer@buffer
  5243     0E55                     l4418:
  5244                           
  5245                           ;mcc_generated_files/i2c_master.c: 264: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 265: {;mcc_generated_files/i2c_master.c: 266:     
      +                          if(I2C_Status.bufferFree)
  5246     0E55  0021               	movlb	1	; select bank1
  5247     0E56  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
  5248     0E57  2E59               	goto	u1961
  5249     0E58  2E5A               	goto	u1960
  5250     0E59                     u1961:
  5251     0E59  2E67               	goto	l698
  5252     0E5A                     u1960:
  5253     0E5A                     l4420:
  5254                           
  5255                           ;mcc_generated_files/i2c_master.c: 267:     {;mcc_generated_files/i2c_master.c: 268:    
      +                               I2C_Status.data_ptr = buffer;
  5256     0E5A  0020               	movlb	0	; select bank0
  5257     0E5B  0822               	movf	I2C_SetBuffer@buffer,w
  5258     0E5C  0021               	movlb	1	; select bank1
  5259     0E5D  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
  5260                           
  5261                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.data_length = bufferSize;
  5262     0E5E  0020               	movlb	0	; select bank0
  5263     0E5F  0821               	movf	I2C_SetBuffer@bufferSize+1,w
  5264     0E60  0021               	movlb	1	; select bank1
  5265     0E61  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
  5266     0E62  0020               	movlb	0	; select bank0
  5267     0E63  0820               	movf	I2C_SetBuffer@bufferSize,w
  5268     0E64  0021               	movlb	1	; select bank1
  5269     0E65  00B8               	movwf	(_I2C_Status^(0+128)+24)
  5270     0E66                     l4422:
  5271                           
  5272                           ;mcc_generated_files/i2c_master.c: 270:         I2C_Status.bufferFree = 0;
  5273     0E66  11BC               	bcf	(_I2C_Status^(0+128)+28),3
  5274     0E67                     l698:
  5275     0E67  0008               	return
  5276     0E68                     __end_of_I2C_SetBuffer:
  5277                           
  5278                           	psect	text23
  5279     05DC                     __ptext23:	
  5280 ;; *************** function _I2C_Open *****************
  5281 ;; Defined at:
  5282 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;  address         1    wreg     unsigned char 
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  address         1    2[BANK0 ] unsigned char 
  5287 ;;  returnValue     1    3[BANK0 ] enum E358
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      enum E358
  5290 ;; Registers used:
  5291 ;;		wreg, status,2, status,0, pclath, cstack
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5297 ;;      Params:         0       0       0       0       0       0       0       0
  5298 ;;      Locals:         0       2       0       0       0       0       0       0
  5299 ;;      Temps:          0       0       0       0       0       0       0       0
  5300 ;;      Totals:         0       2       0       0       0       0       0       0
  5301 ;;Total ram usage:        2 bytes
  5302 ;; Hardware stack levels used: 1
  5303 ;; Hardware stack levels required when called: 8
  5304 ;; This function calls:
  5305 ;;		_I2C_MasterClearIrq
  5306 ;;		_I2C_MasterEnableIrq
  5307 ;;		_I2C_MasterOpen
  5308 ;;		_I2C_SetInterruptHandler
  5309 ;; This function is called by:
  5310 ;;		_I2C_WriteNBytes
  5311 ;;		_I2C_ReadNBytes
  5312 ;;		_I2C_Read1ByteRegister
  5313 ;;		_I2C_Read2ByteRegister
  5314 ;;		_I2C_Write1ByteRegister
  5315 ;;		_I2C_Write2ByteRegister
  5316 ;;		_I2C_ReadDataBlock
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320     05DC                     _I2C_Open:	
  5321                           ;psect for function _I2C_Open
  5322                           
  5323                           
  5324                           ;incstack = 0
  5325                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  5326                           ;I2C_Open@address stored from wreg
  5327     05DC  0020               	movlb	0	; select bank0
  5328     05DD  00A2               	movwf	I2C_Open@address
  5329     05DE                     l4356:
  5330                           
  5331                           ;mcc_generated_files/i2c_master.c: 176: i2c_error_t I2C_Open(i2c_address_t address);mcc_
      +                          generated_files/i2c_master.c: 177: {;mcc_generated_files/i2c_master.c: 178:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  5332     05DE  01A3               	clrf	I2C_Open@returnValue
  5333     05DF  0AA3               	incf	I2C_Open@returnValue,f
  5334                           
  5335                           ;mcc_generated_files/i2c_master.c: 180:     if(!I2C_Status.inUse)
  5336     05E0  0021               	movlb	1	; select bank1
  5337     05E1  193C               	btfsc	(_I2C_Status^(0+128)+28),2
  5338     05E2  2DE4               	goto	u1941
  5339     05E3  2DE5               	goto	u1940
  5340     05E4                     u1941:
  5341     05E4  2E1F               	goto	l4388
  5342     05E5                     u1940:
  5343     05E5                     l4358:
  5344                           
  5345                           ;mcc_generated_files/i2c_master.c: 181:     {;mcc_generated_files/i2c_master.c: 182:    
      +                               I2C_Status.address = address;
  5346     05E5  0020               	movlb	0	; select bank0
  5347     05E6  0822               	movf	I2C_Open@address,w
  5348     05E7  0021               	movlb	1	; select bank1
  5349     05E8  00B6               	movwf	(_I2C_Status^(0+128)+22)
  5350     05E9                     l4360:
  5351                           
  5352                           ;mcc_generated_files/i2c_master.c: 183:         I2C_Status.busy = 0;
  5353     05E9  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  5354     05EA                     l4362:
  5355                           
  5356                           ;mcc_generated_files/i2c_master.c: 184:         I2C_Status.inUse = 1;
  5357     05EA  153C               	bsf	(_I2C_Status^(0+128)+28),2
  5358     05EB                     l4364:
  5359                           
  5360                           ;mcc_generated_files/i2c_master.c: 185:         I2C_Status.addressNackCheck = 0;
  5361     05EB  103C               	bcf	(_I2C_Status^(0+128)+28),0
  5362                           
  5363                           ;mcc_generated_files/i2c_master.c: 186:         I2C_Status.state = I2C_RESET;
  5364     05EC  300E               	movlw	14
  5365     05ED  00BA               	movwf	(_I2C_Status^(0+128)+26)
  5366                           
  5367                           ;mcc_generated_files/i2c_master.c: 187:         I2C_Status.time_out_value = 500;
  5368     05EE  30F4               	movlw	244
  5369     05EF  00B4               	movwf	(_I2C_Status^(0+128)+20)
  5370     05F0  3001               	movlw	1
  5371     05F1  00B5               	movwf	(_I2C_Status^(0+128)+21)
  5372     05F2                     l4366:
  5373                           
  5374                           ;mcc_generated_files/i2c_master.c: 188:         I2C_Status.bufferFree = 1;
  5375     05F2  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  5376                           
  5377                           ;mcc_generated_files/i2c_master.c: 191:         I2C_Status.callbackTable[I2C_DATA_COMPLE
      +                          TE]=I2C_CallbackReturnStop;
  5378     05F3  3039               	movlw	low _I2C_CallbackReturnStop
  5379     05F4  00A0               	movwf	_I2C_Status^(0+128)
  5380     05F5  300C               	movlw	high _I2C_CallbackReturnStop
  5381     05F6  00A1               	movwf	(_I2C_Status^(0+128)+1)
  5382     05F7                     l4368:
  5383                           
  5384                           ;mcc_generated_files/i2c_master.c: 192:         I2C_Status.callbackPayload[I2C_DATA_COMP
      +                          LETE] = ((void*)0);
  5385     05F7  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
  5386     05F8                     l4370:
  5387                           
  5388                           ;mcc_generated_files/i2c_master.c: 193:         I2C_Status.callbackTable[I2C_WRITE_COLLI
      +                          SION]=I2C_CallbackReturnStop;
  5389     05F8  3039               	movlw	low _I2C_CallbackReturnStop
  5390     05F9  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
  5391     05FA  300C               	movlw	high _I2C_CallbackReturnStop
  5392     05FB  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
  5393                           
  5394                           ;mcc_generated_files/i2c_master.c: 194:         I2C_Status.callbackPayload[I2C_WRITE_COL
      +                          LISION] = ((void*)0);
  5395     05FC  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
  5396     05FD                     l4372:
  5397                           
  5398                           ;mcc_generated_files/i2c_master.c: 195:         I2C_Status.callbackTable[I2C_ADDR_NACK]=
      +                          I2C_CallbackReturnStop;
  5399     05FD  3039               	movlw	low _I2C_CallbackReturnStop
  5400     05FE  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
  5401     05FF  300C               	movlw	high _I2C_CallbackReturnStop
  5402     0600  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
  5403     0601                     l4374:
  5404                           
  5405                           ;mcc_generated_files/i2c_master.c: 196:         I2C_Status.callbackPayload[I2C_ADDR_NACK
      +                          ] = ((void*)0);
  5406     0601  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
  5407                           
  5408                           ;mcc_generated_files/i2c_master.c: 197:         I2C_Status.callbackTable[I2C_DATA_NACK]=
      +                          I2C_CallbackReturnStop;
  5409     0602  3039               	movlw	low _I2C_CallbackReturnStop
  5410     0603  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
  5411     0604  300C               	movlw	high _I2C_CallbackReturnStop
  5412     0605  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
  5413     0606                     l4376:
  5414                           
  5415                           ;mcc_generated_files/i2c_master.c: 198:         I2C_Status.callbackPayload[I2C_DATA_NACK
      +                          ] = ((void*)0);
  5416     0606  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
  5417     0607                     l4378:
  5418                           
  5419                           ;mcc_generated_files/i2c_master.c: 199:         I2C_Status.callbackTable[I2C_TIMEOUT]=I2
      +                          C_CallbackReturnReset;
  5420     0607  3002               	movlw	low _I2C_CallbackReturnReset
  5421     0608  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
  5422     0609  3000               	movlw	high _I2C_CallbackReturnReset
  5423     060A  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
  5424                           
  5425                           ;mcc_generated_files/i2c_master.c: 200:         I2C_Status.callbackPayload[I2C_TIMEOUT] 
      +                          = ((void*)0);
  5426     060B  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
  5427     060C                     l4380:
  5428                           
  5429                           ;mcc_generated_files/i2c_master.c: 202:         I2C_SetInterruptHandler(I2C_MasterIsr);
  5430     060C  306F               	movlw	low _I2C_MasterIsr
  5431     060D  0020               	movlb	0	; select bank0
  5432     060E  00A0               	movwf	I2C_SetInterruptHandler@InterruptHandler
  5433     060F  300C               	movlw	high _I2C_MasterIsr
  5434     0610  00A1               	movwf	I2C_SetInterruptHandler@InterruptHandler+1
  5435     0611  318C  24BD  3185   	fcall	_I2C_SetInterruptHandler
  5436     0614                     l4382:
  5437                           
  5438                           ;mcc_generated_files/i2c_master.c: 203:         I2C_MasterClearIrq();
  5439     0614  318C  2450  3185   	fcall	_I2C_MasterClearIrq
  5440     0617                     l4384:
  5441                           
  5442                           ;mcc_generated_files/i2c_master.c: 204:         I2C_MasterOpen();
  5443     0617  318D  259E  3185   	fcall	_I2C_MasterOpen
  5444     061A                     l4386:
  5445                           
  5446                           ;mcc_generated_files/i2c_master.c: 205:         I2C_MasterEnableIrq();
  5447     061A  318C  245C  3185   	fcall	_I2C_MasterEnableIrq
  5448                           
  5449                           ;mcc_generated_files/i2c_master.c: 206:         returnValue = I2C_NOERR;
  5450     061D  0020               	movlb	0	; select bank0
  5451     061E  01A3               	clrf	I2C_Open@returnValue
  5452     061F                     l4388:
  5453                           
  5454                           ;mcc_generated_files/i2c_master.c: 208:     return returnValue;
  5455     061F  0020               	movlb	0	; select bank0
  5456     0620  0823               	movf	I2C_Open@returnValue,w
  5457     0621                     l675:
  5458     0621  0008               	return
  5459     0622                     __end_of_I2C_Open:
  5460                           
  5461                           	psect	text24
  5462     0CBD                     __ptext24:	
  5463 ;; *************** function _I2C_SetInterruptHandler *****************
  5464 ;; Defined at:
  5465 ;;		line 299 in file "mcc_generated_files/i2c_master.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5468 ;;		 -> I2C_MasterIsr(1), 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5480 ;;      Params:         0       2       0       0       0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0
  5483 ;;      Totals:         0       2       0       0       0       0       0       0
  5484 ;;Total ram usage:        2 bytes
  5485 ;; Hardware stack levels used: 1
  5486 ;; Hardware stack levels required when called: 7
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_I2C_Open
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494     0CBD                     _I2C_SetInterruptHandler:	
  5495                           ;psect for function _I2C_SetInterruptHandler
  5496                           
  5497     0CBD                     l4208:	
  5498                           ;incstack = 0
  5499                           ; Regs used in _I2C_SetInterruptHandler: [wreg]
  5500                           
  5501                           
  5502                           ;mcc_generated_files/i2c_master.c: 299: void I2C_SetInterruptHandler(void (* InterruptHa
      +                          ndler)(void));mcc_generated_files/i2c_master.c: 300: {;mcc_generated_files/i2c_master.c:
      +                           301:     MSSP_InterruptHandler = InterruptHandler;
  5503     0CBD  0020               	movlb	0	; select bank0
  5504     0CBE  0821               	movf	I2C_SetInterruptHandler@InterruptHandler+1,w
  5505     0CBF  00E9               	movwf	_MSSP_InterruptHandler+1
  5506     0CC0  0820               	movf	I2C_SetInterruptHandler@InterruptHandler,w
  5507     0CC1  00E8               	movwf	_MSSP_InterruptHandler
  5508     0CC2                     l716:
  5509     0CC2  0008               	return
  5510     0CC3                     __end_of_I2C_SetInterruptHandler:
  5511                           
  5512                           	psect	text25
  5513     0D9E                     __ptext25:	
  5514 ;; *************** function _I2C_MasterOpen *****************
  5515 ;; Defined at:
  5516 ;;		line 544 in file "mcc_generated_files/i2c_master.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;		None
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;		None
  5521 ;; Return value:  Size  Location     Type
  5522 ;;                  1    wreg      _Bool 
  5523 ;; Registers used:
  5524 ;;		wreg, status,2
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5530 ;;      Params:         0       0       0       0       0       0       0       0
  5531 ;;      Locals:         0       0       0       0       0       0       0       0
  5532 ;;      Temps:          0       0       0       0       0       0       0       0
  5533 ;;      Totals:         0       0       0       0       0       0       0       0
  5534 ;;Total ram usage:        0 bytes
  5535 ;; Hardware stack levels used: 1
  5536 ;; Hardware stack levels required when called: 7
  5537 ;; This function calls:
  5538 ;;		Nothing
  5539 ;; This function is called by:
  5540 ;;		_I2C_Open
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544     0D9E                     _I2C_MasterOpen:	
  5545                           ;psect for function _I2C_MasterOpen
  5546                           
  5547     0D9E                     l4212:	
  5548                           ;incstack = 0
  5549                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  5550                           
  5551                           
  5552                           ;mcc_generated_files/i2c_master.c: 546:     if(!SSPCON1bits.SSPEN)
  5553     0D9E  0024               	movlb	4	; select bank4
  5554     0D9F  1A95               	btfsc	21,5	;volatile
  5555     0DA0  2DA2               	goto	u1821
  5556     0DA1  2DA3               	goto	u1820
  5557     0DA2                     u1821:
  5558     0DA2  2DAA               	goto	l840
  5559     0DA3                     u1820:
  5560     0DA3                     l4214:
  5561                           
  5562                           ;mcc_generated_files/i2c_master.c: 547:     {;mcc_generated_files/i2c_master.c: 548:    
      +                               SSPSTAT = 0x00;
  5563     0DA3  0194               	clrf	20	;volatile
  5564     0DA4                     l4216:
  5565                           
  5566                           ;mcc_generated_files/i2c_master.c: 549:         SSPCON1 = 0x08;
  5567     0DA4  3008               	movlw	8
  5568     0DA5  0095               	movwf	21	;volatile
  5569     0DA6                     l4218:
  5570                           
  5571                           ;mcc_generated_files/i2c_master.c: 550:         SSPCON2 = 0x00;
  5572     0DA6  0196               	clrf	22	;volatile
  5573                           
  5574                           ;mcc_generated_files/i2c_master.c: 551:         SSPADD = 0x13;
  5575     0DA7  3013               	movlw	19
  5576     0DA8  0092               	movwf	18	;volatile
  5577     0DA9                     l4220:
  5578                           
  5579                           ;mcc_generated_files/i2c_master.c: 552:         SSPCON1bits.SSPEN = 1;
  5580     0DA9  1695               	bsf	21,5	;volatile
  5581     0DAA                     l840:
  5582     0DAA  0008               	return
  5583     0DAB                     __end_of_I2C_MasterOpen:
  5584                           
  5585                           	psect	text26
  5586     0C5C                     __ptext26:	
  5587 ;; *************** function _I2C_MasterEnableIrq *****************
  5588 ;; Defined at:
  5589 ;;		line 627 in file "mcc_generated_files/i2c_master.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;                  1    wreg      void 
  5596 ;; Registers used:
  5597 ;;		None
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5603 ;;      Params:         0       0       0       0       0       0       0       0
  5604 ;;      Locals:         0       0       0       0       0       0       0       0
  5605 ;;      Temps:          0       0       0       0       0       0       0       0
  5606 ;;      Totals:         0       0       0       0       0       0       0       0
  5607 ;;Total ram usage:        0 bytes
  5608 ;; Hardware stack levels used: 1
  5609 ;; Hardware stack levels required when called: 7
  5610 ;; This function calls:
  5611 ;;		Nothing
  5612 ;; This function is called by:
  5613 ;;		_I2C_Open
  5614 ;;		_I2C_SetTimeOut
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618     0C5C                     _I2C_MasterEnableIrq:	
  5619                           ;psect for function _I2C_MasterEnableIrq
  5620                           
  5621     0C5C                     l4224:	
  5622                           ;incstack = 0
  5623                           ; Regs used in _I2C_MasterEnableIrq: []
  5624                           
  5625                           
  5626                           ;mcc_generated_files/i2c_master.c: 629:     PIE1bits.SSPIE = 1;
  5627     0C5C  0021               	movlb	1	; select bank1
  5628     0C5D  1591               	bsf	17,3	;volatile
  5629     0C5E                     l882:
  5630     0C5E  0008               	return
  5631     0C5F                     __end_of_I2C_MasterEnableIrq:
  5632                           
  5633                           	psect	text27
  5634     0CAD                     __ptext27:	
  5635 ;; *************** function _I2C_MasterRead *****************
  5636 ;; Defined at:
  5637 ;;		line 247 in file "mcc_generated_files/i2c_master.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;		None
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;		None
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      enum E358
  5644 ;; Registers used:
  5645 ;;		wreg, status,2, status,0, pclath, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5651 ;;      Params:         0       0       0       0       0       0       0       0
  5652 ;;      Locals:         0       0       0       0       0       0       0       0
  5653 ;;      Temps:          0       0       0       0       0       0       0       0
  5654 ;;      Totals:         0       0       0       0       0       0       0       0
  5655 ;;Total ram usage:        0 bytes
  5656 ;; Hardware stack levels used: 1
  5657 ;; Hardware stack levels required when called: 9
  5658 ;; This function calls:
  5659 ;;		_I2C_MasterOperation
  5660 ;; This function is called by:
  5661 ;;		_I2C_ReadNBytes
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665     0CAD                     _I2C_MasterRead:	
  5666                           ;psect for function _I2C_MasterRead
  5667                           
  5668     0CAD                     l4410:	
  5669                           ;incstack = 0
  5670                           ; Regs used in _I2C_MasterRead: [wreg+status,2+status,0+pclath+cstack]
  5671                           
  5672                           
  5673                           ;mcc_generated_files/i2c_master.c: 249:     return I2C_MasterOperation(1);;	Return value
      +                           of _I2C_MasterRead is never used
  5674     0CAD  3001               	movlw	1
  5675     0CAE  318E  26E5  318C   	fcall	_I2C_MasterOperation
  5676     0CB1                     l688:
  5677     0CB1  0008               	return
  5678     0CB2                     __end_of_I2C_MasterRead:
  5679                           
  5680                           	psect	text28
  5681     0EE5                     __ptext28:	
  5682 ;; *************** function _I2C_MasterOperation *****************
  5683 ;; Defined at:
  5684 ;;		line 226 in file "mcc_generated_files/i2c_master.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  read            1    wreg     _Bool 
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;  read            1    0[BANK0 ] _Bool 
  5689 ;;  returnValue     1    1[BANK0 ] enum E358
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      enum E358
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, pclath, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5699 ;;      Params:         0       0       0       0       0       0       0       0
  5700 ;;      Locals:         0       2       0       0       0       0       0       0
  5701 ;;      Temps:          0       0       0       0       0       0       0       0
  5702 ;;      Totals:         0       2       0       0       0       0       0       0
  5703 ;;Total ram usage:        2 bytes
  5704 ;; Hardware stack levels used: 1
  5705 ;; Hardware stack levels required when called: 8
  5706 ;; This function calls:
  5707 ;;		_I2C_MasterStart
  5708 ;; This function is called by:
  5709 ;;		_I2C_MasterRead
  5710 ;;		_I2C_MasterWrite
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714     0EE5                     _I2C_MasterOperation:	
  5715                           ;psect for function _I2C_MasterOperation
  5716                           
  5717                           
  5718                           ;incstack = 0
  5719                           ; Regs used in _I2C_MasterOperation: [wreg+status,2+status,0+pclath+cstack]
  5720                           ;I2C_MasterOperation@read stored from wreg
  5721     0EE5  0020               	movlb	0	; select bank0
  5722     0EE6  00A0               	movwf	I2C_MasterOperation@read
  5723     0EE7                     l4230:
  5724                           
  5725                           ;mcc_generated_files/i2c_master.c: 226: i2c_error_t I2C_MasterOperation(_Bool read);mcc_
      +                          generated_files/i2c_master.c: 227: {;mcc_generated_files/i2c_master.c: 228:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  5726     0EE7  01A1               	clrf	I2C_MasterOperation@returnValue
  5727     0EE8  0AA1               	incf	I2C_MasterOperation@returnValue,f
  5728                           
  5729                           ;mcc_generated_files/i2c_master.c: 229:     if(!I2C_Status.busy)
  5730     0EE9  0021               	movlb	1	; select bank1
  5731     0EEA  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  5732     0EEB  2EED               	goto	u1831
  5733     0EEC  2EEE               	goto	u1830
  5734     0EED                     u1831:
  5735     0EED  2F00               	goto	l4244
  5736     0EEE                     u1830:
  5737     0EEE                     l4232:
  5738                           
  5739                           ;mcc_generated_files/i2c_master.c: 230:     {;mcc_generated_files/i2c_master.c: 231:    
      +                               I2C_Status.busy = 1;
  5740     0EEE  14BC               	bsf	(_I2C_Status^(0+128)+28),1
  5741     0EEF                     l4234:
  5742                           
  5743                           ;mcc_generated_files/i2c_master.c: 232:         returnValue = I2C_NOERR;
  5744     0EEF  0020               	movlb	0	; select bank0
  5745     0EF0  01A1               	clrf	I2C_MasterOperation@returnValue
  5746     0EF1                     l4236:
  5747                           
  5748                           ;mcc_generated_files/i2c_master.c: 234:         if(read)
  5749     0EF1  0820               	movf	I2C_MasterOperation@read,w
  5750     0EF2  1903               	btfsc	3,2
  5751     0EF3  2EF5               	goto	u1841
  5752     0EF4  2EF6               	goto	u1840
  5753     0EF5                     u1841:
  5754     0EF5  2EFA               	goto	l4240
  5755     0EF6                     u1840:
  5756     0EF6                     l4238:
  5757                           
  5758                           ;mcc_generated_files/i2c_master.c: 235:         {;mcc_generated_files/i2c_master.c: 236:
      +                                       I2C_Status.state = I2C_SEND_ADR_READ;
  5759     0EF6  0021               	movlb	1	; select bank1
  5760     0EF7  01BA               	clrf	(_I2C_Status^(0+128)+26)
  5761     0EF8  0ABA               	incf	(_I2C_Status^(0+128)+26),f
  5762                           
  5763                           ;mcc_generated_files/i2c_master.c: 237:         }
  5764     0EF9  2EFD               	goto	l4242
  5765     0EFA                     l4240:
  5766                           
  5767                           ;mcc_generated_files/i2c_master.c: 239:         {;mcc_generated_files/i2c_master.c: 240:
      +                                       I2C_Status.state = I2C_SEND_ADR_WRITE;
  5768     0EFA  3002               	movlw	2
  5769     0EFB  0021               	movlb	1	; select bank1
  5770     0EFC  00BA               	movwf	(_I2C_Status^(0+128)+26)
  5771     0EFD                     l4242:
  5772                           
  5773                           ;mcc_generated_files/i2c_master.c: 242:         I2C_MasterStart();
  5774     0EFD  318C  2459  318E   	fcall	_I2C_MasterStart
  5775     0F00                     l4244:
  5776                           
  5777                           ;mcc_generated_files/i2c_master.c: 244:     return returnValue;
  5778     0F00  0020               	movlb	0	; select bank0
  5779     0F01  0821               	movf	I2C_MasterOperation@returnValue,w
  5780     0F02                     l685:
  5781     0F02  0008               	return
  5782     0F03                     __end_of_I2C_MasterOperation:
  5783                           
  5784                           	psect	text29
  5785     0C59                     __ptext29:	
  5786 ;; *************** function _I2C_MasterStart *****************
  5787 ;; Defined at:
  5788 ;;		line 589 in file "mcc_generated_files/i2c_master.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;		None
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;		None
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		None
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5802 ;;      Params:         0       0       0       0       0       0       0       0
  5803 ;;      Locals:         0       0       0       0       0       0       0       0
  5804 ;;      Temps:          0       0       0       0       0       0       0       0
  5805 ;;      Totals:         0       0       0       0       0       0       0       0
  5806 ;;Total ram usage:        0 bytes
  5807 ;; Hardware stack levels used: 1
  5808 ;; Hardware stack levels required when called: 7
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_I2C_MasterOperation
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816     0C59                     _I2C_MasterStart:	
  5817                           ;psect for function _I2C_MasterStart
  5818                           
  5819     0C59                     l4148:	
  5820                           ;incstack = 0
  5821                           ; Regs used in _I2C_MasterStart: []
  5822                           
  5823                           
  5824                           ;mcc_generated_files/i2c_master.c: 591:     SSPCON2bits.SEN = 1;
  5825     0C59  0024               	movlb	4	; select bank4
  5826     0C5A  1416               	bsf	22,0	;volatile
  5827     0C5B                     l861:
  5828     0C5B  0008               	return
  5829     0C5C                     __end_of_I2C_MasterStart:
  5830                           
  5831                           	psect	text30
  5832     0ECA                     __ptext30:	
  5833 ;; *************** function _I2C_Close *****************
  5834 ;; Defined at:
  5835 ;;		line 211 in file "mcc_generated_files/i2c_master.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;		None
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;  returnValue     1    0[BANK0 ] enum E358
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  1    wreg      enum E358
  5842 ;; Registers used:
  5843 ;;		wreg, status,2, status,0, pclath, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5849 ;;      Params:         0       0       0       0       0       0       0       0
  5850 ;;      Locals:         0       1       0       0       0       0       0       0
  5851 ;;      Temps:          0       0       0       0       0       0       0       0
  5852 ;;      Totals:         0       1       0       0       0       0       0       0
  5853 ;;Total ram usage:        1 bytes
  5854 ;; Hardware stack levels used: 1
  5855 ;; Hardware stack levels required when called: 8
  5856 ;; This function calls:
  5857 ;;		_I2C_MasterClearIrq
  5858 ;;		_I2C_MasterClose
  5859 ;;		_I2C_MasterDisableIrq
  5860 ;; This function is called by:
  5861 ;;		_I2C_WriteNBytes
  5862 ;;		_I2C_ReadNBytes
  5863 ;;		_I2C_Read1ByteRegister
  5864 ;;		_I2C_Read2ByteRegister
  5865 ;;		_I2C_Write1ByteRegister
  5866 ;;		_I2C_Write2ByteRegister
  5867 ;;		_I2C_ReadDataBlock
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871     0ECA                     _I2C_Close:	
  5872                           ;psect for function _I2C_Close
  5873                           
  5874     0ECA                     l4392:	
  5875                           ;incstack = 0
  5876                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  5877                           
  5878                           
  5879                           ;mcc_generated_files/i2c_master.c: 213:     i2c_error_t returnValue = I2C_BUSY;
  5880     0ECA  0020               	movlb	0	; select bank0
  5881     0ECB  01A0               	clrf	I2C_Close@returnValue
  5882     0ECC  0AA0               	incf	I2C_Close@returnValue,f
  5883                           
  5884                           ;mcc_generated_files/i2c_master.c: 214:     if(!I2C_Status.busy)
  5885     0ECD  0021               	movlb	1	; select bank1
  5886     0ECE  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  5887     0ECF  2ED1               	goto	u1951
  5888     0ED0  2ED2               	goto	u1950
  5889     0ED1                     u1951:
  5890     0ED1  2EE2               	goto	l4406
  5891     0ED2                     u1950:
  5892     0ED2                     l4394:
  5893                           
  5894                           ;mcc_generated_files/i2c_master.c: 215:     {;mcc_generated_files/i2c_master.c: 216:    
      +                               I2C_Status.inUse = 0;
  5895     0ED2  113C               	bcf	(_I2C_Status^(0+128)+28),2
  5896     0ED3                     l4396:
  5897                           
  5898                           ;mcc_generated_files/i2c_master.c: 217:         I2C_Status.address = 0xff;
  5899     0ED3  30FF               	movlw	255
  5900     0ED4  00B6               	movwf	(_I2C_Status^(0+128)+22)
  5901     0ED5                     l4398:
  5902                           
  5903                           ;mcc_generated_files/i2c_master.c: 218:         I2C_MasterClearIrq();
  5904     0ED5  318C  2450  318E   	fcall	_I2C_MasterClearIrq
  5905     0ED8                     l4400:
  5906                           
  5907                           ;mcc_generated_files/i2c_master.c: 219:         I2C_MasterDisableIrq();
  5908     0ED8  318C  2456  318E   	fcall	_I2C_MasterDisableIrq
  5909     0EDB                     l4402:
  5910                           
  5911                           ;mcc_generated_files/i2c_master.c: 220:         I2C_MasterClose();
  5912     0EDB  318C  2453  318E   	fcall	_I2C_MasterClose
  5913     0EDE                     l4404:
  5914                           
  5915                           ;mcc_generated_files/i2c_master.c: 221:         returnValue = I2C_Status.error;
  5916     0EDE  0021               	movlb	1	; select bank1
  5917     0EDF  083B               	movf	(_I2C_Status^(0+128)+27),w
  5918     0EE0  0020               	movlb	0	; select bank0
  5919     0EE1  00A0               	movwf	I2C_Close@returnValue
  5920     0EE2                     l4406:
  5921                           
  5922                           ;mcc_generated_files/i2c_master.c: 223:     return returnValue;
  5923     0EE2  0020               	movlb	0	; select bank0
  5924     0EE3  0820               	movf	I2C_Close@returnValue,w
  5925     0EE4                     l679:
  5926     0EE4  0008               	return
  5927     0EE5                     __end_of_I2C_Close:
  5928                           
  5929                           	psect	text31
  5930     0C56                     __ptext31:	
  5931 ;; *************** function _I2C_MasterDisableIrq *****************
  5932 ;; Defined at:
  5933 ;;		line 637 in file "mcc_generated_files/i2c_master.c"
  5934 ;; Parameters:    Size  Location     Type
  5935 ;;		None
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;		None
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  1    wreg      void 
  5940 ;; Registers used:
  5941 ;;		None
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5947 ;;      Params:         0       0       0       0       0       0       0       0
  5948 ;;      Locals:         0       0       0       0       0       0       0       0
  5949 ;;      Temps:          0       0       0       0       0       0       0       0
  5950 ;;      Totals:         0       0       0       0       0       0       0       0
  5951 ;;Total ram usage:        0 bytes
  5952 ;; Hardware stack levels used: 1
  5953 ;; Hardware stack levels required when called: 7
  5954 ;; This function calls:
  5955 ;;		Nothing
  5956 ;; This function is called by:
  5957 ;;		_I2C_Close
  5958 ;;		_I2C_SetTimeOut
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962     0C56                     _I2C_MasterDisableIrq:	
  5963                           ;psect for function _I2C_MasterDisableIrq
  5964                           
  5965     0C56                     l4226:	
  5966                           ;incstack = 0
  5967                           ; Regs used in _I2C_MasterDisableIrq: []
  5968                           
  5969                           
  5970                           ;mcc_generated_files/i2c_master.c: 639:     PIE1bits.SSPIE = 0;
  5971     0C56  0021               	movlb	1	; select bank1
  5972     0C57  1191               	bcf	17,3	;volatile
  5973     0C58                     l888:
  5974     0C58  0008               	return
  5975     0C59                     __end_of_I2C_MasterDisableIrq:
  5976                           
  5977                           	psect	text32
  5978     0C53                     __ptext32:	
  5979 ;; *************** function _I2C_MasterClose *****************
  5980 ;; Defined at:
  5981 ;;		line 558 in file "mcc_generated_files/i2c_master.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;		None
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      void 
  5988 ;; Registers used:
  5989 ;;		None
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5995 ;;      Params:         0       0       0       0       0       0       0       0
  5996 ;;      Locals:         0       0       0       0       0       0       0       0
  5997 ;;      Temps:          0       0       0       0       0       0       0       0
  5998 ;;      Totals:         0       0       0       0       0       0       0       0
  5999 ;;Total ram usage:        0 bytes
  6000 ;; Hardware stack levels used: 1
  6001 ;; Hardware stack levels required when called: 7
  6002 ;; This function calls:
  6003 ;;		Nothing
  6004 ;; This function is called by:
  6005 ;;		_I2C_Close
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009     0C53                     _I2C_MasterClose:	
  6010                           ;psect for function _I2C_MasterClose
  6011                           
  6012     0C53                     l4228:	
  6013                           ;incstack = 0
  6014                           ; Regs used in _I2C_MasterClose: []
  6015                           
  6016                           
  6017                           ;mcc_generated_files/i2c_master.c: 561:     SSPCON1bits.SSPEN = 0;
  6018     0C53  0024               	movlb	4	; select bank4
  6019     0C54  1295               	bcf	21,5	;volatile
  6020     0C55                     l843:
  6021     0C55  0008               	return
  6022     0C56                     __end_of_I2C_MasterClose:
  6023                           
  6024                           	psect	text33
  6025     0C50                     __ptext33:	
  6026 ;; *************** function _I2C_MasterClearIrq *****************
  6027 ;; Defined at:
  6028 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;		None
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;		None
  6033 ;; Return value:  Size  Location     Type
  6034 ;;                  1    wreg      void 
  6035 ;; Registers used:
  6036 ;;		None
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6042 ;;      Params:         0       0       0       0       0       0       0       0
  6043 ;;      Locals:         0       0       0       0       0       0       0       0
  6044 ;;      Temps:          0       0       0       0       0       0       0       0
  6045 ;;      Totals:         0       0       0       0       0       0       0       0
  6046 ;;Total ram usage:        0 bytes
  6047 ;; Hardware stack levels used: 1
  6048 ;; Hardware stack levels required when called: 7
  6049 ;; This function calls:
  6050 ;;		Nothing
  6051 ;; This function is called by:
  6052 ;;		_I2C_Open
  6053 ;;		_I2C_Close
  6054 ;; This function uses a non-reentrant model
  6055 ;;
  6056                           
  6057     0C50                     _I2C_MasterClearIrq:	
  6058                           ;psect for function _I2C_MasterClearIrq
  6059                           
  6060     0C50                     l4210:	
  6061                           ;incstack = 0
  6062                           ; Regs used in _I2C_MasterClearIrq: []
  6063                           
  6064                           
  6065                           ;mcc_generated_files/i2c_master.c: 644:     PIR1bits.SSPIF = 0;
  6066     0C50  0020               	movlb	0	; select bank0
  6067     0C51  1191               	bcf	17,3	;volatile
  6068     0C52                     l891:
  6069     0C52  0008               	return
  6070     0C53                     __end_of_I2C_MasterClearIrq:
  6071                           
  6072                           	psect	text34
  6073     0E2D                     __ptext34:	
  6074 ;; *************** function _Task_MB *****************
  6075 ;; Defined at:
  6076 ;;		line 256 in file "Mobbus_Slave.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;		None
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;		None
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      void 
  6083 ;; Registers used:
  6084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6090 ;;      Params:         0       0       0       0       0       0       0       0
  6091 ;;      Locals:         0       0       0       0       0       0       0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0       0
  6093 ;;      Totals:         0       0       0       0       0       0       0       0
  6094 ;;Total ram usage:        0 bytes
  6095 ;; Hardware stack levels used: 1
  6096 ;; Hardware stack levels required when called: 12
  6097 ;; This function calls:
  6098 ;;		_ModbusSlave_Init
  6099 ;;		_ModbusSlave_Process
  6100 ;; This function is called by:
  6101 ;;		_App_Process
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105     0E2D                     _Task_MB:	
  6106                           ;psect for function _Task_MB
  6107                           
  6108     0E2D                     l4686:	
  6109                           ;incstack = 0
  6110                           ; Regs used in _Task_MB: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6111                           
  6112                           
  6113                           ;Mobbus_Slave.c: 257:     static _Bool f_Modbus_Init = 0;;Mobbus_Slave.c: 258:     if (!
      +                          f_Modbus_Init) {
  6114     0E2D  0020               	movlb	0	; select bank0
  6115     0E2E  086A               	movf	Task_MB@f_Modbus_Init,w
  6116     0E2F  1D03               	btfss	3,2
  6117     0E30  2E32               	goto	u2131
  6118     0E31  2E33               	goto	u2130
  6119     0E32                     u2131:
  6120     0E32  2E3C               	goto	l4692
  6121     0E33                     u2130:
  6122     0E33                     l4688:
  6123                           
  6124                           ;Mobbus_Slave.c: 259:         ModbusSlave_Init(SW_Ad);
  6125     0E33  0021               	movlb	1	; select bank1
  6126     0E34  086F               	movf	_SW_Ad^(0+128),w
  6127     0E35  3185  2546  318E   	fcall	_ModbusSlave_Init
  6128     0E38                     l4690:
  6129                           
  6130                           ;Mobbus_Slave.c: 260:         f_Modbus_Init = 1;
  6131     0E38  0020               	movlb	0	; select bank0
  6132     0E39  01EA               	clrf	Task_MB@f_Modbus_Init
  6133     0E3A  0AEA               	incf	Task_MB@f_Modbus_Init,f
  6134                           
  6135                           ;Mobbus_Slave.c: 261:     } else {
  6136     0E3B  2E3F               	goto	l545
  6137     0E3C                     l4692:
  6138                           
  6139                           ;Mobbus_Slave.c: 262:         ModbusSlave_Process();
  6140     0E3C  318E  26B0  318E   	fcall	_ModbusSlave_Process
  6141     0E3F                     l545:
  6142     0E3F  0008               	return
  6143     0E40                     __end_of_Task_MB:
  6144                           
  6145                           	psect	text35
  6146     0EB0                     __ptext35:	
  6147 ;; *************** function _ModbusSlave_Process *****************
  6148 ;; Defined at:
  6149 ;;		line 247 in file "Mobbus_Slave.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;		None
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;  state           1    0        unsigned char 
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      void 
  6156 ;; Registers used:
  6157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6163 ;;      Params:         0       0       0       0       0       0       0       0
  6164 ;;      Locals:         0       0       0       0       0       0       0       0
  6165 ;;      Temps:          0       0       0       0       0       0       0       0
  6166 ;;      Totals:         0       0       0       0       0       0       0       0
  6167 ;;Total ram usage:        0 bytes
  6168 ;; Hardware stack levels used: 1
  6169 ;; Hardware stack levels required when called: 11
  6170 ;; This function calls:
  6171 ;;		_ModbusRTU_Slave_Poll
  6172 ;; This function is called by:
  6173 ;;		_Task_MB
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177     0EB0                     _ModbusSlave_Process:	
  6178                           ;psect for function _ModbusSlave_Process
  6179                           
  6180     0EB0                     l4554:	
  6181                           ;incstack = 0
  6182                           ; Regs used in _ModbusSlave_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6183                           
  6184     0EB0                     l4556:
  6185                           
  6186                           ;Mobbus_Slave.c: 250:     MB_Register[0] = (int16_t) SensorAmbient.T.Val16;
  6187     0EB0  0020               	movlb	0	; select bank0
  6188     0EB1  0863               	movf	_SensorAmbient+1,w
  6189     0EB2  0021               	movlb	1	; select bank1
  6190     0EB3  00DE               	movwf	(_MB_Register+1)^(0+128)
  6191     0EB4  0020               	movlb	0	; select bank0
  6192     0EB5  0862               	movf	_SensorAmbient,w
  6193     0EB6  0021               	movlb	1	; select bank1
  6194     0EB7  00DD               	movwf	_MB_Register^(0+128)
  6195     0EB8                     l4558:
  6196                           
  6197                           ;Mobbus_Slave.c: 251:     MB_Register[1] = (int16_t) SensorAmbient.H.Val16;
  6198     0EB8  0020               	movlb	0	; select bank0
  6199     0EB9  0865               	movf	_SensorAmbient+3,w
  6200     0EBA  0021               	movlb	1	; select bank1
  6201     0EBB  00E0               	movwf	((_MB_Register+1)^(0+128)+2)
  6202     0EBC  0020               	movlb	0	; select bank0
  6203     0EBD  0864               	movf	_SensorAmbient+2,w
  6204     0EBE  0021               	movlb	1	; select bank1
  6205     0EBF  00DF               	movwf	(_MB_Register^(0+128)+2)
  6206     0EC0                     l4560:
  6207     0EC0  3002               	movlw	2
  6208     0EC1  0020               	movlb	0	; select bank0
  6209     0EC2  00D4               	movwf	ModbusRTU_Slave_Poll@size
  6210     0EC3  3000               	movlw	0
  6211     0EC4  00D5               	movwf	ModbusRTU_Slave_Poll@size+1
  6212     0EC5  30DD               	movlw	(low (_MB_Register| 0))& (0+255)
  6213     0EC6  3181  2174  318E   	fcall	_ModbusRTU_Slave_Poll
  6214     0EC9                     l538:
  6215     0EC9  0008               	return
  6216     0ECA                     __end_of_ModbusSlave_Process:
  6217                           
  6218                           	psect	text36
  6219     0174                     __ptext36:	
  6220 ;; *************** function _ModbusRTU_Slave_Poll *****************
  6221 ;; Defined at:
  6222 ;;		line 125 in file "Mobbus_Slave.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;  reg             1    wreg     PTR short 
  6225 ;;		 -> MB_Register(4), 
  6226 ;;  size            2   52[BANK0 ] unsigned short 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  reg             1    0[BANK2 ] PTR short 
  6229 ;;		 -> MB_Register(4), 
  6230 ;;  u8exception     1    3[BANK2 ] unsigned char 
  6231 ;;  i8state         1    2[BANK2 ] unsigned char 
  6232 ;;  u8Current       1    1[BANK2 ] unsigned char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  1    wreg      unsigned char 
  6235 ;; Registers used:
  6236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6242 ;;      Params:         0       2       0       0       0       0       0       0
  6243 ;;      Locals:         0       0       0       4       0       0       0       0
  6244 ;;      Temps:          0       8       0       0       0       0       0       0
  6245 ;;      Totals:         0      10       0       4       0       0       0       0
  6246 ;;Total ram usage:       14 bytes
  6247 ;; Hardware stack levels used: 1
  6248 ;; Hardware stack levels required when called: 10
  6249 ;; This function calls:
  6250 ;;		_Get_millis
  6251 ;;		_ModbusSlaveF04
  6252 ;;		_Modbus_getRxBuff
  6253 ;;		_Modbus_sendTxBuff
  6254 ;;		_buildException
  6255 ;;		_validateRequest
  6256 ;; This function is called by:
  6257 ;;		_ModbusSlave_Process
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261     0174                     _ModbusRTU_Slave_Poll:	
  6262                           ;psect for function _ModbusRTU_Slave_Poll
  6263                           
  6264                           
  6265                           ;incstack = 0
  6266                           ; Regs used in _ModbusRTU_Slave_Poll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6267                           ;ModbusRTU_Slave_Poll@reg stored from wreg
  6268     0174  0022               	movlb	2	; select bank2
  6269     0175  00AE               	movwf	ModbusRTU_Slave_Poll@reg^(0+256)
  6270     0176                     l4446:
  6271                           
  6272                           ;Mobbus_Slave.c: 127:     SES_Modbus.u8regsize = size;
  6273     0176  30EA               	movlw	234
  6274     0177  0086               	movwf	6
  6275     0178  3021               	movlw	33
  6276     0179  0087               	movwf	7
  6277     017A  0020               	movlb	0	; select bank0
  6278     017B  0854               	movf	ModbusRTU_Slave_Poll@size,w
  6279     017C  3FC0               	movwi [0]fsr1
  6280     017D  0855               	movf	ModbusRTU_Slave_Poll@size+1,w
  6281     017E  3FC1               	movwi [1]fsr1
  6282     017F                     l4448:
  6283                           
  6284                           ;Mobbus_Slave.c: 128:     uint8_t u8Current;;Mobbus_Slave.c: 130:     u8Current = eusart
      +                          RxCount;
  6285     017F  0878               	movf	_eusartRxCount,w	;volatile
  6286     0180  0022               	movlb	2	; select bank2
  6287     0181  00AF               	movwf	ModbusRTU_Slave_Poll@u8Current^(0+256)
  6288     0182                     l4450:
  6289                           
  6290                           ;Mobbus_Slave.c: 132:     if (u8Current == 0) return 0;
  6291     0182  082F               	movf	ModbusRTU_Slave_Poll@u8Current^(0+256),w
  6292     0183  1D03               	btfss	3,2
  6293     0184  2986               	goto	u2011
  6294     0185  2987               	goto	u2010
  6295     0186                     u2011:
  6296     0186  2989               	goto	l4456
  6297     0187                     u2010:
  6298     0187                     l4452:
  6299     0187  3000               	movlw	0
  6300     0188  2A43               	goto	l493
  6301     0189                     l4456:
  6302                           
  6303                           ;Mobbus_Slave.c: 135:     if (u8Current != SES_Modbus.u8lastRec) {
  6304     0189  30D3               	movlw	211
  6305     018A  0086               	movwf	6
  6306     018B  3021               	movlw	33
  6307     018C  0087               	movwf	7
  6308     018D  0801               	movf	1,w
  6309     018E  062F               	xorwf	ModbusRTU_Slave_Poll@u8Current^(0+256),w
  6310     018F  1903               	skipnz
  6311     0190  2992               	goto	u2021
  6312     0191  2993               	goto	u2020
  6313     0192                     u2021:
  6314     0192  29AA               	goto	l4466
  6315     0193                     u2020:
  6316     0193                     l4458:
  6317                           
  6318                           ;Mobbus_Slave.c: 136:         SES_Modbus.u8lastRec = u8Current;
  6319     0193  30D3               	movlw	211
  6320     0194  0086               	movwf	6
  6321     0195  3021               	movlw	33
  6322     0196  0087               	movwf	7
  6323     0197  082F               	movf	ModbusRTU_Slave_Poll@u8Current^(0+256),w
  6324     0198  0081               	movwf	1
  6325     0199                     l4460:
  6326                           
  6327                           ;Mobbus_Slave.c: 137:         SES_Modbus.u32time = Get_millis();
  6328     0199  318D  2535  3181   	fcall	_Get_millis
  6329     019C  30DE               	movlw	222
  6330     019D  0086               	movwf	6
  6331     019E  3021               	movlw	33
  6332     019F  0087               	movwf	7
  6333     01A0  0020               	movlb	0	; select bank0
  6334     01A1  0820               	movf	?_Get_millis,w
  6335     01A2  3FC0               	movwi [0]fsr1
  6336     01A3  0821               	movf	?_Get_millis+1,w
  6337     01A4  3FC1               	movwi [1]fsr1
  6338     01A5  0822               	movf	?_Get_millis+2,w
  6339     01A6  3FC2               	movwi [2]fsr1
  6340     01A7  0823               	movf	?_Get_millis+3,w
  6341     01A8  3FC3               	movwi [3]fsr1
  6342     01A9  2987               	goto	l4452
  6343     01AA                     l4466:
  6344                           
  6345                           ;Mobbus_Slave.c: 140:     if ((unsigned long) (Get_millis() - SES_Modbus.u32time) < (uns
      +                          igned long) 3) return 0;
  6346     01AA  30DE               	movlw	222
  6347     01AB  0086               	movwf	6
  6348     01AC  3021               	movlw	33
  6349     01AD  0087               	movwf	7
  6350     01AE  3F40               	moviw [0]fsr1
  6351     01AF  0020               	movlb	0	; select bank0
  6352     01B0  00D6               	movwf	??_ModbusRTU_Slave_Poll
  6353     01B1  3F41               	moviw [1]fsr1
  6354     01B2  00D7               	movwf	??_ModbusRTU_Slave_Poll+1
  6355     01B3  3F42               	moviw [2]fsr1
  6356     01B4  00D8               	movwf	??_ModbusRTU_Slave_Poll+2
  6357     01B5  3F43               	moviw [3]fsr1
  6358     01B6  00D9               	movwf	??_ModbusRTU_Slave_Poll+3
  6359     01B7  318D  2535  3181   	fcall	_Get_millis
  6360     01BA  0020               	movlb	0	; select bank0
  6361     01BB  0820               	movf	?_Get_millis,w
  6362     01BC  00DA               	movwf	??_ModbusRTU_Slave_Poll+4
  6363     01BD  0821               	movf	?_Get_millis+1,w
  6364     01BE  00DB               	movwf	??_ModbusRTU_Slave_Poll+5
  6365     01BF  0822               	movf	?_Get_millis+2,w
  6366     01C0  00DC               	movwf	??_ModbusRTU_Slave_Poll+6
  6367     01C1  0823               	movf	?_Get_millis+3,w
  6368     01C2  00DD               	movwf	??_ModbusRTU_Slave_Poll+7
  6369     01C3  0856               	movf	??_ModbusRTU_Slave_Poll,w
  6370     01C4  02DA               	subwf	??_ModbusRTU_Slave_Poll+4,f
  6371     01C5  0857               	movf	??_ModbusRTU_Slave_Poll+1,w
  6372     01C6  3BDB               	subwfb	??_ModbusRTU_Slave_Poll+5,f
  6373     01C7  0858               	movf	??_ModbusRTU_Slave_Poll+2,w
  6374     01C8  3BDC               	subwfb	??_ModbusRTU_Slave_Poll+6,f
  6375     01C9  0859               	movf	??_ModbusRTU_Slave_Poll+3,w
  6376     01CA  3BDD               	subwfb	??_ModbusRTU_Slave_Poll+7,f
  6377     01CB  085D               	movf	??_ModbusRTU_Slave_Poll+7,w
  6378     01CC  1D03               	btfss	3,2
  6379     01CD  29D9               	goto	u2031
  6380     01CE  085C               	movf	??_ModbusRTU_Slave_Poll+6,w
  6381     01CF  1D03               	btfss	3,2
  6382     01D0  29D9               	goto	u2031
  6383     01D1  085B               	movf	??_ModbusRTU_Slave_Poll+5,w
  6384     01D2  1D03               	btfss	3,2
  6385     01D3  29D9               	goto	u2031
  6386     01D4  3003               	movlw	3
  6387     01D5  025A               	subwf	??_ModbusRTU_Slave_Poll+4,w
  6388     01D6  1803               	btfsc	3,0
  6389     01D7  29D9               	goto	u2031
  6390     01D8  29DA               	goto	u2030
  6391     01D9                     u2031:
  6392     01D9  29DB               	goto	l4472
  6393     01DA                     u2030:
  6394     01DA  2987               	goto	l4452
  6395     01DB                     l4472:
  6396                           
  6397                           ;Mobbus_Slave.c: 142:     SES_Modbus.u8lastRec = 0;
  6398     01DB  30D3               	movlw	211
  6399     01DC  0086               	movwf	6
  6400     01DD  3021               	movlw	33
  6401     01DE  0087               	movwf	7
  6402     01DF  0181               	clrf	1
  6403     01E0                     l4474:
  6404                           
  6405                           ;Mobbus_Slave.c: 143:     uint8_t i8state = Modbus_getRxBuff();
  6406     01E0  3184  243E  3181   	fcall	_Modbus_getRxBuff
  6407     01E3  0022               	movlb	2	; select bank2
  6408     01E4  00B0               	movwf	ModbusRTU_Slave_Poll@i8state^(0+256)
  6409     01E5                     l4476:
  6410                           
  6411                           ;Mobbus_Slave.c: 144:     SES_Modbus.u8lastError = i8state;
  6412     01E5  309F               	movlw	159
  6413     01E6  0086               	movwf	6
  6414     01E7  3021               	movlw	33
  6415     01E8  0087               	movwf	7
  6416     01E9  0830               	movf	ModbusRTU_Slave_Poll@i8state^(0+256),w
  6417     01EA  0081               	movwf	1
  6418     01EB                     l4478:
  6419                           
  6420                           ;Mobbus_Slave.c: 145:     if (i8state < 7) return i8state;
  6421     01EB  3007               	movlw	7
  6422     01EC  0230               	subwf	ModbusRTU_Slave_Poll@i8state^(0+256),w
  6423     01ED  1803               	skipnc
  6424     01EE  29F0               	goto	u2041
  6425     01EF  29F1               	goto	u2040
  6426     01F0                     u2041:
  6427     01F0  29F4               	goto	l4484
  6428     01F1                     u2040:
  6429     01F1                     l4480:
  6430     01F1  0022               	movlb	2	; select bank2
  6431     01F2  0830               	movf	ModbusRTU_Slave_Poll@i8state^(0+256),w
  6432     01F3  2A43               	goto	l493
  6433     01F4                     l4484:
  6434                           
  6435                           ;Mobbus_Slave.c: 148:     if (SES_Modbus.au8Buffer[ ID ] != SES_Modbus.u8id) return 0;
  6436     01F4  309C               	movlw	156
  6437     01F5  0086               	movwf	6
  6438     01F6  3021               	movlw	33
  6439     01F7  0087               	movwf	7
  6440     01F8  309C               	movlw	156
  6441     01F9  0084               	movwf	4
  6442     01FA  3021               	movlw	33
  6443     01FB  0085               	movwf	5
  6444     01FC  3104               	addfsr 0,4
  6445     01FD  0800               	movf	0,w
  6446     01FE  0601               	xorwf	1,w
  6447     01FF  1903               	skipnz
  6448     0200  2A02               	goto	u2051
  6449     0201  2A03               	goto	u2050
  6450     0202                     u2051:
  6451     0202  2A04               	goto	l4490
  6452     0203                     u2050:
  6453     0203  2987               	goto	l4452
  6454     0204                     l4490:
  6455                           
  6456                           ;Mobbus_Slave.c: 151:     uint8_t u8exception = validateRequest();
  6457     0204  3182  22E6  3181   	fcall	_validateRequest
  6458     0207  0022               	movlb	2	; select bank2
  6459     0208  00B1               	movwf	ModbusRTU_Slave_Poll@u8exception^(0+256)
  6460     0209                     l4492:
  6461                           
  6462                           ;Mobbus_Slave.c: 152:     if (u8exception > 0) {
  6463     0209  0831               	movf	ModbusRTU_Slave_Poll@u8exception^(0+256),w
  6464     020A  1903               	btfsc	3,2
  6465     020B  2A0D               	goto	u2061
  6466     020C  2A0E               	goto	u2060
  6467     020D                     u2061:
  6468     020D  2A23               	goto	l4504
  6469     020E                     u2060:
  6470     020E                     l4494:
  6471                           
  6472                           ;Mobbus_Slave.c: 153:         if (u8exception != NO_REPLY) {
  6473     020E  0A31               	incf	ModbusRTU_Slave_Poll@u8exception^(0+256),w
  6474     020F  1903               	btfsc	3,2
  6475     0210  2A12               	goto	u2071
  6476     0211  2A13               	goto	u2070
  6477     0212                     u2071:
  6478     0212  2A1A               	goto	l4498
  6479     0213                     u2070:
  6480     0213                     l4496:
  6481                           
  6482                           ;Mobbus_Slave.c: 154:             buildException(u8exception);
  6483     0213  0831               	movf	ModbusRTU_Slave_Poll@u8exception^(0+256),w
  6484     0214  3187  2768  3181   	fcall	_buildException
  6485                           
  6486                           ;Mobbus_Slave.c: 155:             Modbus_sendTxBuff();
  6487     0217  3180  2091  3181   	fcall	_Modbus_sendTxBuff
  6488     021A                     l4498:
  6489                           
  6490                           ;Mobbus_Slave.c: 157:         SES_Modbus.u8lastError = u8exception;
  6491     021A  309F               	movlw	159
  6492     021B  0086               	movwf	6
  6493     021C  3021               	movlw	33
  6494     021D  0087               	movwf	7
  6495     021E  0022               	movlb	2	; select bank2
  6496     021F  0831               	movf	ModbusRTU_Slave_Poll@u8exception^(0+256),w
  6497     0220  0081               	movwf	1
  6498     0221                     l4500:
  6499                           
  6500                           ;Mobbus_Slave.c: 158:         return u8exception;
  6501     0221  0831               	movf	ModbusRTU_Slave_Poll@u8exception^(0+256),w
  6502     0222  2A43               	goto	l493
  6503     0223                     l4504:
  6504                           
  6505                           ;Mobbus_Slave.c: 161:     SES_Modbus.u32timeOut = Get_millis();
  6506     0223  318D  2535  3181   	fcall	_Get_millis
  6507     0226  30E2               	movlw	226
  6508     0227  0086               	movwf	6
  6509     0228  3021               	movlw	33
  6510     0229  0087               	movwf	7
  6511     022A  0020               	movlb	0	; select bank0
  6512     022B  0820               	movf	?_Get_millis,w
  6513     022C  3FC0               	movwi [0]fsr1
  6514     022D  0821               	movf	?_Get_millis+1,w
  6515     022E  3FC1               	movwi [1]fsr1
  6516     022F  0822               	movf	?_Get_millis+2,w
  6517     0230  3FC2               	movwi [2]fsr1
  6518     0231  0823               	movf	?_Get_millis+3,w
  6519     0232  3FC3               	movwi [3]fsr1
  6520     0233                     l4506:
  6521                           
  6522                           ;Mobbus_Slave.c: 162:     SES_Modbus.u8lastError = 0;
  6523     0233  309C               	movlw	156
  6524     0234  0086               	movwf	6
  6525     0235  3021               	movlw	33
  6526     0236  0087               	movwf	7
  6527     0237  3143               	addfsr 1,3
  6528     0238  0181               	clrf	1
  6529     0239                     l4508:
  6530                           
  6531                           ;Mobbus_Slave.c: 164:     ModbusSlaveF04(reg, size);
  6532     0239  0855               	movf	ModbusRTU_Slave_Poll@size+1,w
  6533     023A  00BF               	movwf	ModbusSlaveF04@size+1
  6534     023B  0854               	movf	ModbusRTU_Slave_Poll@size,w
  6535     023C  00BE               	movwf	ModbusSlaveF04@size
  6536     023D  0022               	movlb	2	; select bank2
  6537     023E  082E               	movf	ModbusRTU_Slave_Poll@reg^(0+256),w
  6538     023F  3182  2244  3181   	fcall	_ModbusSlaveF04
  6539     0242  29F1               	goto	l4480
  6540     0243                     l493:
  6541     0243  0008               	return
  6542     0244                     __end_of_ModbusRTU_Slave_Poll:
  6543                           
  6544                           	psect	text37
  6545     02E6                     __ptext37:	
  6546 ;; *************** function _validateRequest *****************
  6547 ;; Defined at:
  6548 ;;		line 98 in file "Mobbus_Slave.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;		None
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;  u16MsgCRC       2   28[BANK0 ] unsigned short 
  6553 ;;  i               1   31[BANK0 ] unsigned char 
  6554 ;;  isSupported     1   30[BANK0 ] _Bool 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  1    wreg      unsigned char 
  6557 ;; Registers used:
  6558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6564 ;;      Params:         0       0       0       0       0       0       0       0
  6565 ;;      Locals:         0       4       0       0       0       0       0       0
  6566 ;;      Temps:          0      13       0       0       0       0       0       0
  6567 ;;      Totals:         0      17       0       0       0       0       0       0
  6568 ;;Total ram usage:       17 bytes
  6569 ;; Hardware stack levels used: 1
  6570 ;; Hardware stack levels required when called: 8
  6571 ;; This function calls:
  6572 ;;		_Modbus_calcCRC
  6573 ;; This function is called by:
  6574 ;;		_ModbusRTU_Slave_Poll
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578     02E6                     _validateRequest:	
  6579                           ;psect for function _validateRequest
  6580                           
  6581     02E6                     l4320:	
  6582                           ;incstack = 0
  6583                           ; Regs used in _validateRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6584                           
  6585                           
  6586                           ;Mobbus_Slave.c: 100:     uint16_t u16MsgCRC = (uint16_t)
  6587     02E6  30D2               	movlw	210
  6588     02E7  0086               	movwf	6
  6589     02E8  3021               	movlw	33
  6590     02E9  0087               	movwf	7
  6591     02EA  0801               	movf	1,w
  6592     02EB  0020               	movlb	0	; select bank0
  6593     02EC  00AF               	movwf	??_validateRequest
  6594     02ED  01B0               	clrf	??_validateRequest+1
  6595     02EE  309F               	movlw	159
  6596     02EF  00B1               	movwf	??_validateRequest+2
  6597     02F0  3021               	movlw	33
  6598     02F1  00B2               	movwf	??_validateRequest+3
  6599     02F2  082F               	movf	??_validateRequest,w
  6600     02F3  0731               	addwf	??_validateRequest+2,w
  6601     02F4  0086               	movwf	6
  6602     02F5  0830               	movf	??_validateRequest+1,w
  6603     02F6  3D32               	addwfc	??_validateRequest+3,w
  6604     02F7  0087               	movwf	7
  6605     02F8  0801               	movf	1,w
  6606     02F9  00B3               	movwf	??_validateRequest+4
  6607     02FA  01B4               	clrf	??_validateRequest+5
  6608     02FB  30D2               	movlw	210
  6609     02FC  0086               	movwf	6
  6610     02FD  3021               	movlw	33
  6611     02FE  0087               	movwf	7
  6612     02FF  0801               	movf	1,w
  6613     0300  00B5               	movwf	??_validateRequest+6
  6614     0301  01B6               	clrf	??_validateRequest+7
  6615     0302  309E               	movlw	158
  6616     0303  00B7               	movwf	??_validateRequest+8
  6617     0304  3021               	movlw	33
  6618     0305  00B8               	movwf	??_validateRequest+9
  6619     0306  0835               	movf	??_validateRequest+6,w
  6620     0307  0737               	addwf	??_validateRequest+8,w
  6621     0308  0086               	movwf	6
  6622     0309  0836               	movf	??_validateRequest+7,w
  6623     030A  3D38               	addwfc	??_validateRequest+9,w
  6624     030B  0087               	movwf	7
  6625     030C  0801               	movf	1,w
  6626     030D  00B9               	movwf	??_validateRequest+10
  6627     030E  01BA               	clrf	??_validateRequest+11
  6628     030F  0839               	movf	??_validateRequest+10,w
  6629     0310  00BA               	movwf	??_validateRequest+11
  6630     0311  01B9               	clrf	??_validateRequest+10
  6631     0312  0833               	movf	??_validateRequest+4,w
  6632     0313  0439               	iorwf	??_validateRequest+10,w
  6633     0314  00BC               	movwf	validateRequest@u16MsgCRC
  6634     0315  0834               	movf	??_validateRequest+5,w
  6635     0316  043A               	iorwf	??_validateRequest+11,w
  6636     0317  00BD               	movwf	validateRequest@u16MsgCRC+1
  6637     0318                     l4322:
  6638                           
  6639                           ;Mobbus_Slave.c: 103:     if (Modbus_calcCRC(SES_Modbus.u8BufferSize - 2) != u16MsgCRC) 
      +                          {
  6640     0318  30D2               	movlw	210
  6641     0319  0086               	movwf	6
  6642     031A  3021               	movlw	33
  6643     031B  0087               	movwf	7
  6644     031C  0801               	movf	1,w
  6645     031D  3EFE               	addlw	254
  6646     031E  3183  23DF  3182   	fcall	_Modbus_calcCRC
  6647     0321  0020               	movlb	0	; select bank0
  6648     0322  083D               	movf	validateRequest@u16MsgCRC+1,w
  6649     0323  0621               	xorwf	?_Modbus_calcCRC+1,w
  6650     0324  1D03               	skipz
  6651     0325  2B28               	goto	u1905
  6652     0326  083C               	movf	validateRequest@u16MsgCRC,w
  6653     0327  0620               	xorwf	?_Modbus_calcCRC,w
  6654     0328                     u1905:
  6655     0328  1903               	skipnz
  6656     0329  2B2B               	goto	u1901
  6657     032A  2B2C               	goto	u1900
  6658     032B                     u1901:
  6659     032B  2B37               	goto	l4330
  6660     032C                     u1900:
  6661     032C                     l4324:
  6662                           
  6663                           ;Mobbus_Slave.c: 104:         SES_Modbus.u16errCnt++;
  6664     032C  30DA               	movlw	218
  6665     032D  0086               	movwf	6
  6666     032E  3021               	movlw	33
  6667     032F  0087               	movwf	7
  6668     0330  3001               	movlw	1
  6669     0331  0781               	addwf	1,f
  6670     0332  3141               	addfsr 1,1
  6671     0333  1803               	skipnc
  6672     0334  0A81               	incf	1,f
  6673     0335                     l4326:
  6674                           
  6675                           ;Mobbus_Slave.c: 105:         return NO_REPLY;
  6676     0335  30FF               	movlw	255
  6677     0336  2B6A               	goto	l485
  6678     0337                     l4330:
  6679                           
  6680                           ;Mobbus_Slave.c: 109:     _Bool isSupported = 0;
  6681     0337  01BE               	clrf	validateRequest@isSupported
  6682                           
  6683                           ;Mobbus_Slave.c: 110:     uint8_t i = 0;
  6684     0338  01BF               	clrf	validateRequest@i
  6685                           
  6686                           ;Mobbus_Slave.c: 111:     for (i = 0; i< sizeof ( fctsupported); i++) {
  6687     0339  01BF               	clrf	validateRequest@i
  6688     033A                     l4336:
  6689                           
  6690                           ;Mobbus_Slave.c: 112:         if (fctsupported[i] == SES_Modbus.au8Buffer[FUNC]) {
  6691     033A  309C               	movlw	156
  6692     033B  0086               	movwf	6
  6693     033C  3021               	movlw	33
  6694     033D  0087               	movwf	7
  6695     033E  3145               	addfsr 1,5
  6696     033F  083F               	movf	validateRequest@i,w
  6697     0340  3E20               	addlw	low (_fctsupported| (0+32768))
  6698     0341  0084               	movwf	4
  6699     0342  3090               	movlw	high (_fctsupported| (0+32768))
  6700     0343  1803               	skipnc
  6701     0344  3E01               	addlw	1
  6702     0345  0085               	movwf	5
  6703     0346  0800               	movf	0,w	;code access
  6704     0347  0601               	xorwf	1,w
  6705     0348  1D03               	skipz
  6706     0349  2B4B               	goto	u1911
  6707     034A  2B4C               	goto	u1910
  6708     034B                     u1911:
  6709     034B  2B4F               	goto	l4340
  6710     034C                     u1910:
  6711     034C                     l4338:
  6712                           
  6713                           ;Mobbus_Slave.c: 113:             isSupported = 1;
  6714     034C  01BE               	clrf	validateRequest@isSupported
  6715     034D  0ABE               	incf	validateRequest@isSupported,f
  6716                           
  6717                           ;Mobbus_Slave.c: 114:             break;
  6718     034E  2B59               	goto	l4344
  6719     034F                     l4340:
  6720                           
  6721                           ;Mobbus_Slave.c: 116:     }
  6722     034F  3001               	movlw	1
  6723     0350  00AF               	movwf	??_validateRequest
  6724     0351  082F               	movf	??_validateRequest,w
  6725     0352  07BF               	addwf	validateRequest@i,f
  6726     0353                     l4342:
  6727     0353  3008               	movlw	8
  6728     0354  023F               	subwf	validateRequest@i,w
  6729     0355  1C03               	skipc
  6730     0356  2B58               	goto	u1921
  6731     0357  2B59               	goto	u1920
  6732     0358                     u1921:
  6733     0358  2B3A               	goto	l4336
  6734     0359                     u1920:
  6735     0359                     l4344:
  6736                           
  6737                           ;Mobbus_Slave.c: 117:     if (!isSupported) {
  6738     0359  083E               	movf	validateRequest@isSupported,w
  6739     035A  1D03               	btfss	3,2
  6740     035B  2B5D               	goto	u1931
  6741     035C  2B5E               	goto	u1930
  6742     035D                     u1931:
  6743     035D  2B69               	goto	l4352
  6744     035E                     u1930:
  6745     035E                     l4346:
  6746                           
  6747                           ;Mobbus_Slave.c: 118:         SES_Modbus.u16errCnt++;
  6748     035E  30DA               	movlw	218
  6749     035F  0086               	movwf	6
  6750     0360  3021               	movlw	33
  6751     0361  0087               	movwf	7
  6752     0362  3001               	movlw	1
  6753     0363  0781               	addwf	1,f
  6754     0364  3141               	addfsr 1,1
  6755     0365  1803               	skipnc
  6756     0366  0A81               	incf	1,f
  6757     0367                     l4348:
  6758                           
  6759                           ;Mobbus_Slave.c: 119:         return EXC_FUNC_CODE;
  6760     0367  3001               	movlw	1
  6761     0368  2B6A               	goto	l485
  6762     0369                     l4352:
  6763                           
  6764                           ;Mobbus_Slave.c: 122:     return 0;
  6765     0369  3000               	movlw	0
  6766     036A                     l485:
  6767     036A  0008               	return
  6768     036B                     __end_of_validateRequest:
  6769                           
  6770                           	psect	text38
  6771     0768                     __ptext38:	
  6772 ;; *************** function _buildException *****************
  6773 ;; Defined at:
  6774 ;;		line 64 in file "Mobbus_Slave.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;  exception       1    wreg     unsigned char 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  exception       1    1[BANK0 ] unsigned char 
  6779 ;;  u8func          1    2[BANK0 ] unsigned char 
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  1    wreg      void 
  6782 ;; Registers used:
  6783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6789 ;;      Params:         0       0       0       0       0       0       0       0
  6790 ;;      Locals:         0       2       0       0       0       0       0       0
  6791 ;;      Temps:          0       1       0       0       0       0       0       0
  6792 ;;      Totals:         0       3       0       0       0       0       0       0
  6793 ;;Total ram usage:        3 bytes
  6794 ;; Hardware stack levels used: 1
  6795 ;; Hardware stack levels required when called: 7
  6796 ;; This function calls:
  6797 ;;		Nothing
  6798 ;; This function is called by:
  6799 ;;		_ModbusRTU_Slave_Poll
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803     0768                     _buildException:	
  6804                           ;psect for function _buildException
  6805                           
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in _buildException: [wreg+fsr1l+fsr1h+status,2+status,0]
  6809                           ;buildException@exception stored from wreg
  6810     0768  0020               	movlb	0	; select bank0
  6811     0769  00A1               	movwf	buildException@exception
  6812     076A                     l4282:
  6813                           
  6814                           ;Mobbus_Slave.c: 66:     uint8_t u8func = SES_Modbus.au8Buffer[ FUNC ];
  6815     076A  309C               	movlw	156
  6816     076B  0086               	movwf	6
  6817     076C  3021               	movlw	33
  6818     076D  0087               	movwf	7
  6819     076E  3145               	addfsr 1,5
  6820     076F  0801               	movf	1,w
  6821     0770  00A2               	movwf	buildException@u8func
  6822                           
  6823                           ;Mobbus_Slave.c: 68:     SES_Modbus.au8Buffer[ ID ] = SES_Modbus.u8id;
  6824     0771  309C               	movlw	156
  6825     0772  0086               	movwf	6
  6826     0773  3021               	movlw	33
  6827     0774  0087               	movwf	7
  6828     0775  0801               	movf	1,w
  6829     0776  00A0               	movwf	??_buildException
  6830     0777  30A0               	movlw	160
  6831     0778  0086               	movwf	6
  6832     0779  3021               	movlw	33
  6833     077A  0087               	movwf	7
  6834     077B  0820               	movf	??_buildException,w
  6835     077C  0081               	movwf	1
  6836     077D                     l4284:
  6837                           
  6838                           ;Mobbus_Slave.c: 69:     SES_Modbus.au8Buffer[ FUNC ] = u8func + 0x80;
  6839     077D  0822               	movf	buildException@u8func,w
  6840     077E  3E80               	addlw	128
  6841     077F  00A0               	movwf	??_buildException
  6842     0780  30A1               	movlw	161
  6843     0781  0086               	movwf	6
  6844     0782  3021               	movlw	33
  6845     0783  0087               	movwf	7
  6846     0784  0820               	movf	??_buildException,w
  6847     0785  0081               	movwf	1
  6848     0786                     l4286:
  6849                           
  6850                           ;Mobbus_Slave.c: 70:     SES_Modbus.au8Buffer[ 2 ] = exception;
  6851     0786  30A2               	movlw	162
  6852     0787  0086               	movwf	6
  6853     0788  3021               	movlw	33
  6854     0789  0087               	movwf	7
  6855     078A  0821               	movf	buildException@exception,w
  6856     078B  0081               	movwf	1
  6857     078C                     l4288:
  6858                           
  6859                           ;Mobbus_Slave.c: 71:     SES_Modbus.u8BufferSize = EXCEPTION_SIZE;
  6860     078C  30D2               	movlw	210
  6861     078D  0086               	movwf	6
  6862     078E  3021               	movlw	33
  6863     078F  0087               	movwf	7
  6864     0790  3003               	movlw	3
  6865     0791  0081               	movwf	1
  6866     0792                     l472:
  6867     0792  0008               	return
  6868     0793                     __end_of_buildException:
  6869                           
  6870                           	psect	text39
  6871     043E                     __ptext39:	
  6872 ;; *************** function _Modbus_getRxBuff *****************
  6873 ;; Defined at:
  6874 ;;		line 74 in file "Mobbus_Slave.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;		None
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;  bBuffOverflo    1    9[BANK0 ] _Bool 
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  1    wreg      unsigned char 
  6881 ;; Registers used:
  6882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6888 ;;      Params:         0       0       0       0       0       0       0       0
  6889 ;;      Locals:         0       1       0       0       0       0       0       0
  6890 ;;      Temps:          0       7       0       0       0       0       0       0
  6891 ;;      Totals:         0       8       0       0       0       0       0       0
  6892 ;;Total ram usage:        8 bytes
  6893 ;; Hardware stack levels used: 1
  6894 ;; Hardware stack levels required when called: 8
  6895 ;; This function calls:
  6896 ;;		_EUSART_Read
  6897 ;; This function is called by:
  6898 ;;		_ModbusRTU_Slave_Poll
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902     043E                     _Modbus_getRxBuff:	
  6903                           ;psect for function _Modbus_getRxBuff
  6904                           
  6905     043E                     l4290:	
  6906                           ;incstack = 0
  6907                           ; Regs used in _Modbus_getRxBuff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6908                           
  6909                           
  6910                           ;Mobbus_Slave.c: 75:     _Bool bBuffOverflow = 0;
  6911     043E  0020               	movlb	0	; select bank0
  6912     043F  01A9               	clrf	Modbus_getRxBuff@bBuffOverflow
  6913     0440                     l4294:
  6914                           
  6915                           ;Mobbus_Slave.c: 81:     SES_Modbus.u8BufferSize = 0;
  6916     0440  30D2               	movlw	210
  6917     0441  0086               	movwf	6
  6918     0442  3021               	movlw	33
  6919     0443  0087               	movwf	7
  6920     0444  0181               	clrf	1
  6921                           
  6922                           ;Mobbus_Slave.c: 82:     while (eusartRxCount) {
  6923     0445  2C76               	goto	l4304
  6924     0446                     l4296:
  6925                           
  6926                           ;Mobbus_Slave.c: 83:         SES_Modbus.au8Buffer [SES_Modbus.u8BufferSize] = EUSART_Rea
      +                          d();
  6927     0446  318F  278E  3184   	fcall	_EUSART_Read
  6928     0449  0020               	movlb	0	; select bank0
  6929     044A  00A2               	movwf	??_Modbus_getRxBuff
  6930     044B  30D2               	movlw	210
  6931     044C  0086               	movwf	6
  6932     044D  3021               	movlw	33
  6933     044E  0087               	movwf	7
  6934     044F  0801               	movf	1,w
  6935     0450  00A3               	movwf	??_Modbus_getRxBuff+1
  6936     0451  01A4               	clrf	??_Modbus_getRxBuff+2
  6937     0452  30A0               	movlw	160
  6938     0453  00A5               	movwf	??_Modbus_getRxBuff+3
  6939     0454  3021               	movlw	33
  6940     0455  00A6               	movwf	??_Modbus_getRxBuff+4
  6941     0456  0823               	movf	??_Modbus_getRxBuff+1,w
  6942     0457  0725               	addwf	??_Modbus_getRxBuff+3,w
  6943     0458  00A7               	movwf	??_Modbus_getRxBuff+5
  6944     0459  0824               	movf	??_Modbus_getRxBuff+2,w
  6945     045A  3D26               	addwfc	??_Modbus_getRxBuff+4,w
  6946     045B  00A8               	movwf	??_Modbus_getRxBuff+6
  6947     045C  0827               	movf	??_Modbus_getRxBuff+5,w
  6948     045D  0086               	movwf	6
  6949     045E  0828               	movf	??_Modbus_getRxBuff+6,w
  6950     045F  0087               	movwf	7
  6951     0460  0822               	movf	??_Modbus_getRxBuff,w
  6952     0461  0081               	movwf	1
  6953     0462                     l4298:
  6954                           
  6955                           ;Mobbus_Slave.c: 84:         SES_Modbus.u8BufferSize++;
  6956     0462  3001               	movlw	1
  6957     0463  00A2               	movwf	??_Modbus_getRxBuff
  6958     0464  30D2               	movlw	210
  6959     0465  0086               	movwf	6
  6960     0466  3021               	movlw	33
  6961     0467  0087               	movwf	7
  6962     0468  0822               	movf	??_Modbus_getRxBuff,w
  6963     0469  0781               	addwf	1,f
  6964     046A                     l4300:
  6965                           
  6966                           ;Mobbus_Slave.c: 86:         if (SES_Modbus.u8BufferSize >= 50) bBuffOverflow = 1;
  6967     046A  30D2               	movlw	210
  6968     046B  0086               	movwf	6
  6969     046C  3021               	movlw	33
  6970     046D  0087               	movwf	7
  6971     046E  3032               	movlw	50
  6972     046F  0201               	subwf	1,w
  6973     0470  1C03               	skipc
  6974     0471  2C73               	goto	u1871
  6975     0472  2C74               	goto	u1870
  6976     0473                     u1871:
  6977     0473  2C76               	goto	l4304
  6978     0474                     u1870:
  6979     0474                     l4302:
  6980     0474  01A9               	clrf	Modbus_getRxBuff@bBuffOverflow
  6981     0475  0AA9               	incf	Modbus_getRxBuff@bBuffOverflow,f
  6982     0476                     l4304:
  6983                           
  6984                           ;Mobbus_Slave.c: 82:     while (eusartRxCount) {
  6985     0476  0878               	movf	_eusartRxCount,w	;volatile
  6986     0477  1D03               	btfss	3,2
  6987     0478  2C7A               	goto	u1881
  6988     0479  2C7B               	goto	u1880
  6989     047A                     u1881:
  6990     047A  2C46               	goto	l4296
  6991     047B                     u1880:
  6992     047B                     l4306:
  6993                           
  6994                           ;Mobbus_Slave.c: 88:     SES_Modbus.u16InCnt++;
  6995     047B  30D6               	movlw	214
  6996     047C  0086               	movwf	6
  6997     047D  3021               	movlw	33
  6998     047E  0087               	movwf	7
  6999     047F  3001               	movlw	1
  7000     0480  0781               	addwf	1,f
  7001     0481  3141               	addfsr 1,1
  7002     0482  1803               	skipnc
  7003     0483  0A81               	incf	1,f
  7004     0484                     l4308:
  7005                           
  7006                           ;Mobbus_Slave.c: 90:     if (bBuffOverflow) {
  7007     0484  0829               	movf	Modbus_getRxBuff@bBuffOverflow,w
  7008     0485  1903               	btfsc	3,2
  7009     0486  2C88               	goto	u1891
  7010     0487  2C89               	goto	u1890
  7011     0488                     u1891:
  7012     0488  2C94               	goto	l4316
  7013     0489                     u1890:
  7014     0489                     l4310:
  7015                           
  7016                           ;Mobbus_Slave.c: 91:         SES_Modbus.u16errCnt++;
  7017     0489  30DA               	movlw	218
  7018     048A  0086               	movwf	6
  7019     048B  3021               	movlw	33
  7020     048C  0087               	movwf	7
  7021     048D  3001               	movlw	1
  7022     048E  0781               	addwf	1,f
  7023     048F  3141               	addfsr 1,1
  7024     0490  1803               	skipnc
  7025     0491  0A81               	incf	1,f
  7026     0492                     l4312:
  7027                           
  7028                           ;Mobbus_Slave.c: 92:         return (uint8_t) ERR_BUFF_OVERFLOW;
  7029     0492  30FD               	movlw	253
  7030     0493  2C99               	goto	l481
  7031     0494                     l4316:
  7032                           
  7033                           ;Mobbus_Slave.c: 95:     return SES_Modbus.u8BufferSize;
  7034     0494  30D2               	movlw	210
  7035     0495  0086               	movwf	6
  7036     0496  3021               	movlw	33
  7037     0497  0087               	movwf	7
  7038     0498  0801               	movf	1,w
  7039     0499                     l481:
  7040     0499  0008               	return
  7041     049A                     __end_of_Modbus_getRxBuff:
  7042                           
  7043                           	psect	text40
  7044     0F8E                     __ptext40:	
  7045 ;; *************** function _EUSART_Read *****************
  7046 ;; Defined at:
  7047 ;;		line 151 in file "mcc_generated_files/eusart.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;		None
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  readValue       1    1[BANK0 ] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      unsigned char 
  7054 ;; Registers used:
  7055 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7061 ;;      Params:         0       0       0       0       0       0       0       0
  7062 ;;      Locals:         0       1       0       0       0       0       0       0
  7063 ;;      Temps:          0       1       0       0       0       0       0       0
  7064 ;;      Totals:         0       2       0       0       0       0       0       0
  7065 ;;Total ram usage:        2 bytes
  7066 ;; Hardware stack levels used: 1
  7067 ;; Hardware stack levels required when called: 7
  7068 ;; This function calls:
  7069 ;;		Nothing
  7070 ;; This function is called by:
  7071 ;;		_Modbus_getRxBuff
  7072 ;;		_getch
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076     0F8E                     _EUSART_Read:	
  7077                           ;psect for function _EUSART_Read
  7078                           
  7079     0F8E                     l4150:	
  7080                           ;incstack = 0
  7081                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7082                           
  7083     0F8E                     l4152:	
  7084                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  7085                           
  7086                           
  7087                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  7088     0F8E  0878               	movf	_eusartRxCount,w	;volatile
  7089     0F8F  1903               	btfsc	3,2
  7090     0F90  2F92               	goto	u1751
  7091     0F91  2F93               	goto	u1750
  7092     0F92                     u1751:
  7093     0F92  2F8E               	goto	l4152
  7094     0F93                     u1750:
  7095     0F93                     l4154:
  7096                           
  7097                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  7098     0F93  0879               	movf	_eusartRxTail,w	;volatile
  7099     0F94  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  7100     0F95  0086               	movwf	6
  7101     0F96  0187               	clrf	7
  7102     0F97  0801               	movf	1,w
  7103     0F98  0020               	movlb	0	; select bank0
  7104     0F99  00EC               	movwf	_eusartRxLastError	;volatile
  7105                           
  7106                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  7107     0F9A  0879               	movf	_eusartRxTail,w
  7108     0F9B  3EC5               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7109     0F9C  0086               	movwf	6
  7110     0F9D  0187               	clrf	7
  7111     0F9E  0801               	movf	1,w
  7112     0F9F  00A1               	movwf	EUSART_Read@readValue
  7113     0FA0                     l4156:
  7114     0FA0  3001               	movlw	1
  7115     0FA1  00A0               	movwf	??_EUSART_Read
  7116     0FA2  0820               	movf	??_EUSART_Read,w
  7117     0FA3  07F9               	addwf	_eusartRxTail,f	;volatile
  7118     0FA4                     l4158:
  7119                           
  7120                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  7121     0FA4  3008               	movlw	8
  7122     0FA5  0279               	subwf	_eusartRxTail,w	;volatile
  7123     0FA6  1C03               	skipc
  7124     0FA7  2FA9               	goto	u1761
  7125     0FA8  2FAA               	goto	u1760
  7126     0FA9                     u1761:
  7127     0FA9  2FAB               	goto	l4162
  7128     0FAA                     u1760:
  7129     0FAA                     l4160:
  7130                           
  7131                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  7132     0FAA  01F9               	clrf	_eusartRxTail	;volatile
  7133     0FAB                     l4162:
  7134                           
  7135                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  7136     0FAB  0021               	movlb	1	; select bank1
  7137     0FAC  1291               	bcf	17,5	;volatile
  7138     0FAD                     l4164:
  7139                           
  7140                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  7141     0FAD  3001               	movlw	1
  7142     0FAE  02F8               	subwf	_eusartRxCount,f	;volatile
  7143     0FAF                     l4166:
  7144                           
  7145                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  7146     0FAF  1691               	bsf	17,5	;volatile
  7147     0FB0                     l4168:
  7148                           
  7149                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  7150     0FB0  0020               	movlb	0	; select bank0
  7151     0FB1  0821               	movf	EUSART_Read@readValue,w
  7152     0FB2                     l194:
  7153     0FB2  0008               	return
  7154     0FB3                     __end_of_EUSART_Read:
  7155                           
  7156                           	psect	text41
  7157     0244                     __ptext41:	
  7158 ;; *************** function _ModbusSlaveF04 *****************
  7159 ;; Defined at:
  7160 ;;		line 36 in file "Mobbus_Slave.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;  reg             1    wreg     PTR short 
  7163 ;;		 -> MB_Register(4), 
  7164 ;;  size            2   30[BANK0 ] unsigned short 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  reg             1   44[BANK0 ] PTR short 
  7167 ;;		 -> MB_Register(4), 
  7168 ;;  i               2   50[BANK0 ] unsigned short 
  7169 ;;  valueRegsno     2   48[BANK0 ] struct .
  7170 ;;  valueAdd        2   46[BANK0 ] struct .
  7171 ;;  u8StartAdd      2   42[BANK0 ] unsigned short 
  7172 ;;  u8regsno        1   45[BANK0 ] unsigned char 
  7173 ;;  u8CopyBuffer    1    0        unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      unsigned char 
  7176 ;; Registers used:
  7177 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7183 ;;      Params:         0       2       0       0       0       0       0       0
  7184 ;;      Locals:         0      10       0       0       0       0       0       0
  7185 ;;      Temps:          0      10       0       0       0       0       0       0
  7186 ;;      Totals:         0      22       0       0       0       0       0       0
  7187 ;;Total ram usage:       22 bytes
  7188 ;; Hardware stack levels used: 1
  7189 ;; Hardware stack levels required when called: 9
  7190 ;; This function calls:
  7191 ;;		_Modbus_sendTxBuff
  7192 ;; This function is called by:
  7193 ;;		_ModbusRTU_Slave_Poll
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197     0244                     _ModbusSlaveF04:	
  7198                           ;psect for function _ModbusSlaveF04
  7199                           
  7200                           
  7201                           ;incstack = 0
  7202                           ; Regs used in _ModbusSlaveF04: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7203                           ;ModbusSlaveF04@reg stored from wreg
  7204     0244  0020               	movlb	0	; select bank0
  7205     0245  00CC               	movwf	ModbusSlaveF04@reg
  7206     0246                     l4254:
  7207                           
  7208                           ;Mobbus_Slave.c: 37:     VALUE16 valueAdd, valueRegsno;;Mobbus_Slave.c: 38:     valueAdd
      +                          ._Byte[1] = SES_Modbus.au8Buffer[ADD_HI];
  7209     0246  309C               	movlw	156
  7210     0247  0086               	movwf	6
  7211     0248  3021               	movlw	33
  7212     0249  0087               	movwf	7
  7213     024A  3146               	addfsr 1,6
  7214     024B  0801               	movf	1,w
  7215     024C  00CF               	movwf	ModbusSlaveF04@valueAdd+1
  7216                           
  7217                           ;Mobbus_Slave.c: 39:     valueAdd._Byte[0] = SES_Modbus.au8Buffer[ADD_LO];
  7218     024D  309C               	movlw	156
  7219     024E  0086               	movwf	6
  7220     024F  3021               	movlw	33
  7221     0250  0087               	movwf	7
  7222     0251  3147               	addfsr 1,7
  7223     0252  0801               	movf	1,w
  7224     0253  00CE               	movwf	ModbusSlaveF04@valueAdd
  7225     0254                     l4256:
  7226                           
  7227                           ;Mobbus_Slave.c: 40:     uint16_t u8StartAdd = (uint16_t) valueAdd.Val16;
  7228     0254  084F               	movf	ModbusSlaveF04@valueAdd+1,w
  7229     0255  00CB               	movwf	ModbusSlaveF04@u8StartAdd+1
  7230     0256  084E               	movf	ModbusSlaveF04@valueAdd,w
  7231     0257  00CA               	movwf	ModbusSlaveF04@u8StartAdd
  7232     0258                     l4258:
  7233                           
  7234                           ;Mobbus_Slave.c: 42:     valueRegsno._Byte[1] = SES_Modbus.au8Buffer[ NB_HI];
  7235     0258  309C               	movlw	156
  7236     0259  0086               	movwf	6
  7237     025A  3021               	movlw	33
  7238     025B  0087               	movwf	7
  7239     025C  3148               	addfsr 1,8
  7240     025D  0801               	movf	1,w
  7241     025E  00D1               	movwf	ModbusSlaveF04@valueRegsno+1
  7242     025F                     l4260:
  7243                           
  7244                           ;Mobbus_Slave.c: 43:     valueRegsno._Byte[0] = SES_Modbus.au8Buffer[ NB_LO];
  7245     025F  309C               	movlw	156
  7246     0260  0086               	movwf	6
  7247     0261  3021               	movlw	33
  7248     0262  0087               	movwf	7
  7249     0263  3149               	addfsr 1,9
  7250     0264  0801               	movf	1,w
  7251     0265  00D0               	movwf	ModbusSlaveF04@valueRegsno
  7252     0266                     l4262:
  7253                           
  7254                           ;Mobbus_Slave.c: 44:     uint8_t u8regsno = (uint8_t) valueRegsno.Val16;
  7255     0266  0850               	movf	ModbusSlaveF04@valueRegsno,w
  7256     0267  00CD               	movwf	ModbusSlaveF04@u8regsno
  7257     0268                     l4264:
  7258                           
  7259                           ;Mobbus_Slave.c: 46:     uint8_t u8CopyBufferSize;;Mobbus_Slave.c: 47:     uint16_t i;;M
      +                          obbus_Slave.c: 49:     SES_Modbus.au8Buffer[ 2 ] = u8regsno * 2;
  7260     0268  354D               	lslf	ModbusSlaveF04@u8regsno,w
  7261     0269  00C0               	movwf	??_ModbusSlaveF04
  7262     026A  30A2               	movlw	162
  7263     026B  0086               	movwf	6
  7264     026C  3021               	movlw	33
  7265     026D  0087               	movwf	7
  7266     026E  0840               	movf	??_ModbusSlaveF04,w
  7267     026F  0081               	movwf	1
  7268     0270                     l4266:
  7269                           
  7270                           ;Mobbus_Slave.c: 50:     SES_Modbus.u8BufferSize = 3;
  7271     0270  30D2               	movlw	210
  7272     0271  0086               	movwf	6
  7273     0272  3021               	movlw	33
  7274     0273  0087               	movwf	7
  7275     0274  3003               	movlw	3
  7276     0275  0081               	movwf	1
  7277     0276                     l4268:
  7278                           
  7279                           ;Mobbus_Slave.c: 52:     for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++) {
  7280     0276  084B               	movf	ModbusSlaveF04@u8StartAdd+1,w
  7281     0277  00D3               	movwf	ModbusSlaveF04@i+1
  7282     0278  084A               	movf	ModbusSlaveF04@u8StartAdd,w
  7283     0279  00D2               	movwf	ModbusSlaveF04@i
  7284     027A  2AD1               	goto	l4274
  7285     027B                     l4270:
  7286                           
  7287                           ;Mobbus_Slave.c: 53:         SES_Modbus.au8Buffer[SES_Modbus.u8BufferSize ] = ((uint8_t)
      +                           ((reg[i]) >> 8));
  7288     027B  3552               	lslf	ModbusSlaveF04@i,w
  7289     027C  074C               	addwf	ModbusSlaveF04@reg,w
  7290     027D  00C0               	movwf	??_ModbusSlaveF04
  7291     027E  0840               	movf	??_ModbusSlaveF04,w
  7292     027F  0086               	movwf	6
  7293     0280  0187               	clrf	7
  7294     0281  3F40               	moviw [0]fsr1
  7295     0282  00C1               	movwf	??_ModbusSlaveF04+1
  7296     0283  3F41               	moviw [1]fsr1
  7297     0284  00C2               	movwf	??_ModbusSlaveF04+2
  7298     0285  0842               	movf	??_ModbusSlaveF04+2,w
  7299     0286  00C3               	movwf	??_ModbusSlaveF04+3
  7300     0287  30D2               	movlw	210
  7301     0288  0086               	movwf	6
  7302     0289  3021               	movlw	33
  7303     028A  0087               	movwf	7
  7304     028B  0801               	movf	1,w
  7305     028C  00C4               	movwf	??_ModbusSlaveF04+4
  7306     028D  01C5               	clrf	??_ModbusSlaveF04+5
  7307     028E  30A0               	movlw	160
  7308     028F  00C6               	movwf	??_ModbusSlaveF04+6
  7309     0290  3021               	movlw	33
  7310     0291  00C7               	movwf	??_ModbusSlaveF04+7
  7311     0292  0844               	movf	??_ModbusSlaveF04+4,w
  7312     0293  0746               	addwf	??_ModbusSlaveF04+6,w
  7313     0294  00C8               	movwf	??_ModbusSlaveF04+8
  7314     0295  0845               	movf	??_ModbusSlaveF04+5,w
  7315     0296  3D47               	addwfc	??_ModbusSlaveF04+7,w
  7316     0297  00C9               	movwf	??_ModbusSlaveF04+9
  7317     0298  0848               	movf	??_ModbusSlaveF04+8,w
  7318     0299  0086               	movwf	6
  7319     029A  0849               	movf	??_ModbusSlaveF04+9,w
  7320     029B  0087               	movwf	7
  7321     029C  0843               	movf	??_ModbusSlaveF04+3,w
  7322     029D  0081               	movwf	1
  7323                           
  7324                           ;Mobbus_Slave.c: 54:         SES_Modbus.u8BufferSize++;
  7325     029E  3001               	movlw	1
  7326     029F  00C0               	movwf	??_ModbusSlaveF04
  7327     02A0  30D2               	movlw	210
  7328     02A1  0086               	movwf	6
  7329     02A2  3021               	movlw	33
  7330     02A3  0087               	movwf	7
  7331     02A4  0840               	movf	??_ModbusSlaveF04,w
  7332     02A5  0781               	addwf	1,f
  7333                           
  7334                           ;Mobbus_Slave.c: 55:         SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = ((uint8_t
      +                          ) ((reg[i]) & 0xff));
  7335     02A6  3552               	lslf	ModbusSlaveF04@i,w
  7336     02A7  074C               	addwf	ModbusSlaveF04@reg,w
  7337     02A8  00C0               	movwf	??_ModbusSlaveF04
  7338     02A9  0840               	movf	??_ModbusSlaveF04,w
  7339     02AA  0086               	movwf	6
  7340     02AB  0187               	clrf	7
  7341     02AC  0801               	movf	1,w
  7342     02AD  00C1               	movwf	??_ModbusSlaveF04+1
  7343     02AE  30D2               	movlw	210
  7344     02AF  0086               	movwf	6
  7345     02B0  3021               	movlw	33
  7346     02B1  0087               	movwf	7
  7347     02B2  0801               	movf	1,w
  7348     02B3  00C2               	movwf	??_ModbusSlaveF04+2
  7349     02B4  01C3               	clrf	??_ModbusSlaveF04+3
  7350     02B5  30A0               	movlw	160
  7351     02B6  00C4               	movwf	??_ModbusSlaveF04+4
  7352     02B7  3021               	movlw	33
  7353     02B8  00C5               	movwf	??_ModbusSlaveF04+5
  7354     02B9  0842               	movf	??_ModbusSlaveF04+2,w
  7355     02BA  0744               	addwf	??_ModbusSlaveF04+4,w
  7356     02BB  00C6               	movwf	??_ModbusSlaveF04+6
  7357     02BC  0843               	movf	??_ModbusSlaveF04+3,w
  7358     02BD  3D45               	addwfc	??_ModbusSlaveF04+5,w
  7359     02BE  00C7               	movwf	??_ModbusSlaveF04+7
  7360     02BF  0846               	movf	??_ModbusSlaveF04+6,w
  7361     02C0  0086               	movwf	6
  7362     02C1  0847               	movf	??_ModbusSlaveF04+7,w
  7363     02C2  0087               	movwf	7
  7364     02C3  0841               	movf	??_ModbusSlaveF04+1,w
  7365     02C4  0081               	movwf	1
  7366                           
  7367                           ;Mobbus_Slave.c: 56:         SES_Modbus.u8BufferSize++;
  7368     02C5  3001               	movlw	1
  7369     02C6  00C0               	movwf	??_ModbusSlaveF04
  7370     02C7  30D2               	movlw	210
  7371     02C8  0086               	movwf	6
  7372     02C9  3021               	movlw	33
  7373     02CA  0087               	movwf	7
  7374     02CB  0840               	movf	??_ModbusSlaveF04,w
  7375     02CC  0781               	addwf	1,f
  7376     02CD                     l4272:
  7377                           
  7378                           ;Mobbus_Slave.c: 57:     }
  7379     02CD  3001               	movlw	1
  7380     02CE  07D2               	addwf	ModbusSlaveF04@i,f
  7381     02CF  3000               	movlw	0
  7382     02D0  3DD3               	addwfc	ModbusSlaveF04@i+1,f
  7383     02D1                     l4274:
  7384     02D1  084D               	movf	ModbusSlaveF04@u8regsno,w
  7385     02D2  074A               	addwf	ModbusSlaveF04@u8StartAdd,w
  7386     02D3  00C0               	movwf	??_ModbusSlaveF04
  7387     02D4  084B               	movf	ModbusSlaveF04@u8StartAdd+1,w
  7388     02D5  1803               	skipnc
  7389     02D6  0A4B               	incf	ModbusSlaveF04@u8StartAdd+1,w
  7390     02D7  00C1               	movwf	??_ModbusSlaveF04+1
  7391     02D8  0841               	movf	??_ModbusSlaveF04+1,w
  7392     02D9  0253               	subwf	ModbusSlaveF04@i+1,w
  7393     02DA  1D03               	skipz
  7394     02DB  2ADE               	goto	u1865
  7395     02DC  0840               	movf	??_ModbusSlaveF04,w
  7396     02DD  0252               	subwf	ModbusSlaveF04@i,w
  7397     02DE                     u1865:
  7398     02DE  1C03               	skipc
  7399     02DF  2AE1               	goto	u1861
  7400     02E0  2AE2               	goto	u1860
  7401     02E1                     u1861:
  7402     02E1  2A7B               	goto	l4270
  7403     02E2                     u1860:
  7404     02E2                     l4276:
  7405     02E2                     l4278:
  7406                           
  7407                           ;Mobbus_Slave.c: 59:     Modbus_sendTxBuff();
  7408     02E2  3180  2091  3182   	fcall	_Modbus_sendTxBuff
  7409     02E5                     l469:
  7410     02E5  0008               	return
  7411     02E6                     __end_of_ModbusSlaveF04:
  7412                           
  7413                           	psect	text42
  7414     0091                     __ptext42:	
  7415 ;; *************** function _Modbus_sendTxBuff *****************
  7416 ;; Defined at:
  7417 ;;		line 169 in file "Mobbus_Slave.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;		None
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;  u32overTimec    4   26[BANK0 ] volatile unsigned long 
  7422 ;;  index           2   24[BANK0 ] int 
  7423 ;;  u16crc          2   22[BANK0 ] unsigned short 
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  1    wreg      void 
  7426 ;; Registers used:
  7427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7433 ;;      Params:         0       0       0       0       0       0       0       0
  7434 ;;      Locals:         0       8       0       0       0       0       0       0
  7435 ;;      Temps:          0       7       0       0       0       0       0       0
  7436 ;;      Totals:         0      15       0       0       0       0       0       0
  7437 ;;Total ram usage:       15 bytes
  7438 ;; Hardware stack levels used: 1
  7439 ;; Hardware stack levels required when called: 8
  7440 ;; This function calls:
  7441 ;;		_EUSART_Write
  7442 ;;		_EUSART_is_tx_done
  7443 ;;		_Get_millis
  7444 ;;		_Modbus_calcCRC
  7445 ;; This function is called by:
  7446 ;;		_ModbusSlaveF04
  7447 ;;		_ModbusRTU_Slave_Poll
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451     0091                     _Modbus_sendTxBuff:	
  7452                           ;psect for function _Modbus_sendTxBuff
  7453                           
  7454     0091                     l4172:	
  7455                           ;incstack = 0
  7456                           ; Regs used in _Modbus_sendTxBuff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7457                           
  7458                           
  7459                           ;Mobbus_Slave.c: 170:     uint16_t u16crc = Modbus_calcCRC(SES_Modbus.u8BufferSize);
  7460     0091  30D2               	movlw	210
  7461     0092  0086               	movwf	6
  7462     0093  3021               	movlw	33
  7463     0094  0087               	movwf	7
  7464     0095  0801               	movf	1,w
  7465     0096  3183  23DF  3180   	fcall	_Modbus_calcCRC
  7466     0099  0020               	movlb	0	; select bank0
  7467     009A  0821               	movf	?_Modbus_calcCRC+1,w
  7468     009B  00B7               	movwf	Modbus_sendTxBuff@u16crc+1
  7469     009C  0820               	movf	?_Modbus_calcCRC,w
  7470     009D  00B6               	movwf	Modbus_sendTxBuff@u16crc
  7471     009E                     l4174:
  7472                           
  7473                           ;Mobbus_Slave.c: 171:     SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = u16crc >> 8;
  7474     009E  0837               	movf	Modbus_sendTxBuff@u16crc+1,w
  7475     009F  00AF               	movwf	??_Modbus_sendTxBuff
  7476     00A0  30D2               	movlw	210
  7477     00A1  0086               	movwf	6
  7478     00A2  3021               	movlw	33
  7479     00A3  0087               	movwf	7
  7480     00A4  0801               	movf	1,w
  7481     00A5  00B0               	movwf	??_Modbus_sendTxBuff+1
  7482     00A6  01B1               	clrf	??_Modbus_sendTxBuff+2
  7483     00A7  30A0               	movlw	160
  7484     00A8  00B2               	movwf	??_Modbus_sendTxBuff+3
  7485     00A9  3021               	movlw	33
  7486     00AA  00B3               	movwf	??_Modbus_sendTxBuff+4
  7487     00AB  0830               	movf	??_Modbus_sendTxBuff+1,w
  7488     00AC  0732               	addwf	??_Modbus_sendTxBuff+3,w
  7489     00AD  00B4               	movwf	??_Modbus_sendTxBuff+5
  7490     00AE  0831               	movf	??_Modbus_sendTxBuff+2,w
  7491     00AF  3D33               	addwfc	??_Modbus_sendTxBuff+4,w
  7492     00B0  00B5               	movwf	??_Modbus_sendTxBuff+6
  7493     00B1  0834               	movf	??_Modbus_sendTxBuff+5,w
  7494     00B2  0086               	movwf	6
  7495     00B3  0835               	movf	??_Modbus_sendTxBuff+6,w
  7496     00B4  0087               	movwf	7
  7497     00B5  082F               	movf	??_Modbus_sendTxBuff,w
  7498     00B6  0081               	movwf	1
  7499     00B7                     l4176:
  7500                           
  7501                           ;Mobbus_Slave.c: 172:     SES_Modbus.u8BufferSize++;
  7502     00B7  3001               	movlw	1
  7503     00B8  00AF               	movwf	??_Modbus_sendTxBuff
  7504     00B9  30D2               	movlw	210
  7505     00BA  0086               	movwf	6
  7506     00BB  3021               	movlw	33
  7507     00BC  0087               	movwf	7
  7508     00BD  082F               	movf	??_Modbus_sendTxBuff,w
  7509     00BE  0781               	addwf	1,f
  7510     00BF                     l4178:
  7511                           
  7512                           ;Mobbus_Slave.c: 173:     SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = u16crc & 0x0
      +                          0ff;
  7513     00BF  30D2               	movlw	210
  7514     00C0  0086               	movwf	6
  7515     00C1  3021               	movlw	33
  7516     00C2  0087               	movwf	7
  7517     00C3  0801               	movf	1,w
  7518     00C4  00AF               	movwf	??_Modbus_sendTxBuff
  7519     00C5  01B0               	clrf	??_Modbus_sendTxBuff+1
  7520     00C6  30A0               	movlw	160
  7521     00C7  00B1               	movwf	??_Modbus_sendTxBuff+2
  7522     00C8  3021               	movlw	33
  7523     00C9  00B2               	movwf	??_Modbus_sendTxBuff+3
  7524     00CA  082F               	movf	??_Modbus_sendTxBuff,w
  7525     00CB  0731               	addwf	??_Modbus_sendTxBuff+2,w
  7526     00CC  00B3               	movwf	??_Modbus_sendTxBuff+4
  7527     00CD  0830               	movf	??_Modbus_sendTxBuff+1,w
  7528     00CE  3D32               	addwfc	??_Modbus_sendTxBuff+3,w
  7529     00CF  00B4               	movwf	??_Modbus_sendTxBuff+5
  7530     00D0  0833               	movf	??_Modbus_sendTxBuff+4,w
  7531     00D1  0086               	movwf	6
  7532     00D2  0834               	movf	??_Modbus_sendTxBuff+5,w
  7533     00D3  0087               	movwf	7
  7534     00D4  0836               	movf	Modbus_sendTxBuff@u16crc,w
  7535     00D5  0081               	movwf	1
  7536     00D6                     l4180:
  7537                           
  7538                           ;Mobbus_Slave.c: 174:     SES_Modbus.u8BufferSize++;
  7539     00D6  3001               	movlw	1
  7540     00D7  00AF               	movwf	??_Modbus_sendTxBuff
  7541     00D8  30D2               	movlw	210
  7542     00D9  0086               	movwf	6
  7543     00DA  3021               	movlw	33
  7544     00DB  0087               	movwf	7
  7545     00DC  082F               	movf	??_Modbus_sendTxBuff,w
  7546     00DD  0781               	addwf	1,f
  7547     00DE                     l4182:
  7548                           
  7549                           ;Mobbus_Slave.c: 177:     if (SES_Modbus.u8txenpin > 1) {
  7550     00DE  309C               	movlw	156
  7551     00DF  0086               	movwf	6
  7552     00E0  3021               	movlw	33
  7553     00E1  0087               	movwf	7
  7554     00E2  3141               	addfsr 1,1
  7555     00E3  3002               	movlw	2
  7556     00E4  0201               	subwf	1,w
  7557     00E5  1C03               	skipc
  7558     00E6  28E8               	goto	u1771
  7559     00E7  28E9               	goto	u1770
  7560     00E8                     u1771:
  7561     00E8  28EB               	goto	l4184
  7562     00E9                     u1770:
  7563     00E9                     l503:	
  7564                           ;Mobbus_Slave.c: 178:         do { LATCbits.LATC5 = 1; } while(0);
  7565                           
  7566     00E9  0022               	movlb	2	; select bank2
  7567     00EA  168E               	bsf	14,5	;volatile
  7568     00EB                     l4184:
  7569                           
  7570                           ;Mobbus_Slave.c: 184:     for (int index = 0; index < SES_Modbus.u8BufferSize; index++) 
      +                          {
  7571     00EB  0020               	movlb	0	; select bank0
  7572     00EC  01B8               	clrf	Modbus_sendTxBuff@index
  7573     00ED  01B9               	clrf	Modbus_sendTxBuff@index+1
  7574     00EE  2903               	goto	l4190
  7575     00EF                     l4186:
  7576                           
  7577                           ;Mobbus_Slave.c: 185:         EUSART_Write(SES_Modbus.au8Buffer[index]);
  7578     00EF  30A0               	movlw	160
  7579     00F0  0020               	movlb	0	; select bank0
  7580     00F1  00AF               	movwf	??_Modbus_sendTxBuff
  7581     00F2  3021               	movlw	33
  7582     00F3  00B0               	movwf	??_Modbus_sendTxBuff+1
  7583     00F4  0838               	movf	Modbus_sendTxBuff@index,w
  7584     00F5  072F               	addwf	??_Modbus_sendTxBuff,w
  7585     00F6  0086               	movwf	6
  7586     00F7  0839               	movf	Modbus_sendTxBuff@index+1,w
  7587     00F8  3D30               	addwfc	??_Modbus_sendTxBuff+1,w
  7588     00F9  0087               	movwf	7
  7589     00FA  0801               	movf	1,w
  7590     00FB  3187  2793  3180   	fcall	_EUSART_Write
  7591     00FE                     l4188:
  7592                           
  7593                           ;Mobbus_Slave.c: 186:     }
  7594     00FE  3001               	movlw	1
  7595     00FF  0020               	movlb	0	; select bank0
  7596     0100  07B8               	addwf	Modbus_sendTxBuff@index,f
  7597     0101  3000               	movlw	0
  7598     0102  3DB9               	addwfc	Modbus_sendTxBuff@index+1,f
  7599     0103                     l4190:
  7600     0103  30D2               	movlw	210
  7601     0104  0086               	movwf	6
  7602     0105  3021               	movlw	33
  7603     0106  0087               	movwf	7
  7604     0107  0839               	movf	Modbus_sendTxBuff@index+1,w
  7605     0108  3A80               	xorlw	128
  7606     0109  00AF               	movwf	??_Modbus_sendTxBuff
  7607     010A  3080               	movlw	128
  7608     010B  022F               	subwf	??_Modbus_sendTxBuff,w
  7609     010C  1D03               	skipz
  7610     010D  2910               	goto	u1785
  7611     010E  0801               	movf	1,w
  7612     010F  0238               	subwf	Modbus_sendTxBuff@index,w
  7613     0110                     u1785:
  7614     0110  1C03               	skipc
  7615     0111  2913               	goto	u1781
  7616     0112  2914               	goto	u1780
  7617     0113                     u1781:
  7618     0113  28EF               	goto	l4186
  7619     0114                     u1780:
  7620     0114                     l4192:
  7621                           
  7622                           ;Mobbus_Slave.c: 188:     if (SES_Modbus.u8txenpin > 1) {
  7623     0114  309C               	movlw	156
  7624     0115  0086               	movwf	6
  7625     0116  3021               	movlw	33
  7626     0117  0087               	movwf	7
  7627     0118  3141               	addfsr 1,1
  7628     0119  3002               	movlw	2
  7629     011A  0201               	subwf	1,w
  7630     011B  1C03               	skipc
  7631     011C  291E               	goto	u1791
  7632     011D  291F               	goto	u1790
  7633     011E                     u1791:
  7634     011E  2955               	goto	l4202
  7635     011F                     u1790:
  7636     011F                     l4196:
  7637     011F  318C  2473  3180   	fcall	_EUSART_is_tx_done
  7638     0122  3A00               	xorlw	0
  7639     0123  1903               	skipnz
  7640     0124  2926               	goto	u1801
  7641     0125  2927               	goto	u1800
  7642     0126                     u1801:
  7643     0126  291F               	goto	l4196
  7644     0127                     u1800:
  7645     0127                     l4198:
  7646                           
  7647                           ;Mobbus_Slave.c: 196:         volatile uint32_t u32overTimecountDown = SES_Modbus.u32ove
      +                          rTime;
  7648     0127  30E6               	movlw	230
  7649     0128  0086               	movwf	6
  7650     0129  3021               	movlw	33
  7651     012A  0087               	movwf	7
  7652     012B  3F40               	moviw [0]fsr1
  7653     012C  0020               	movlb	0	; select bank0
  7654     012D  00BA               	movwf	Modbus_sendTxBuff@u32overTimecountDown	;volatile
  7655     012E  3F41               	moviw [1]fsr1
  7656     012F  00BB               	movwf	Modbus_sendTxBuff@u32overTimecountDown+1	;volatile
  7657     0130  3F42               	moviw [2]fsr1
  7658     0131  00BC               	movwf	Modbus_sendTxBuff@u32overTimecountDown+2	;volatile
  7659     0132  3F43               	moviw [3]fsr1
  7660     0133  00BD               	movwf	Modbus_sendTxBuff@u32overTimecountDown+3	;volatile
  7661     0134                     l4200:	
  7662                           ;Mobbus_Slave.c: 198:         while (u32overTimecountDown-- > 0);
  7663                           
  7664     0134  3001               	movlw	1
  7665     0135  0020               	movlb	0	; select bank0
  7666     0136  00AF               	movwf	??_Modbus_sendTxBuff
  7667     0137  3000               	movlw	0
  7668     0138  00B0               	movwf	??_Modbus_sendTxBuff+1
  7669     0139  3000               	movlw	0
  7670     013A  00B1               	movwf	??_Modbus_sendTxBuff+2
  7671     013B  3000               	movlw	0
  7672     013C  00B2               	movwf	??_Modbus_sendTxBuff+3
  7673     013D  082F               	movf	??_Modbus_sendTxBuff,w
  7674     013E  02BA               	subwf	Modbus_sendTxBuff@u32overTimecountDown,f	;volatile
  7675     013F  0830               	movf	??_Modbus_sendTxBuff+1,w
  7676     0140  3BBB               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+1,f	;volatile
  7677     0141  0831               	movf	??_Modbus_sendTxBuff+2,w
  7678     0142  3BBC               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+2,f	;volatile
  7679     0143  0832               	movf	??_Modbus_sendTxBuff+3,w
  7680     0144  3BBD               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+3,f	;volatile
  7681     0145  0A3A               	incf	Modbus_sendTxBuff@u32overTimecountDown,w	;volatile
  7682     0146  1D03               	skipz
  7683     0147  2952               	goto	u1811
  7684     0148  0A3B               	incf	Modbus_sendTxBuff@u32overTimecountDown+1,w	;volatile
  7685     0149  1D03               	skipz
  7686     014A  2952               	goto	u1811
  7687     014B  0A3C               	incf	Modbus_sendTxBuff@u32overTimecountDown+2,w	;volatile
  7688     014C  1D03               	skipz
  7689     014D  2952               	goto	u1811
  7690     014E  0A3D               	incf	Modbus_sendTxBuff@u32overTimecountDown+3,w	;volatile
  7691     014F  1D03               	btfss	3,2
  7692     0150  2952               	goto	u1811
  7693     0151  2953               	goto	u1810
  7694     0152                     u1811:
  7695     0152  2934               	goto	l4200
  7696     0153                     u1810:
  7697     0153                     l515:	
  7698                           ;Mobbus_Slave.c: 199:         do { LATCbits.LATC5 = 0; } while(0);
  7699                           
  7700     0153  0022               	movlb	2	; select bank2
  7701     0154  128E               	bcf	14,5	;volatile
  7702     0155                     l4202:
  7703                           
  7704                           ;Mobbus_Slave.c: 202:     SES_Modbus.u8BufferSize = 0;
  7705     0155  30D2               	movlw	210
  7706     0156  0086               	movwf	6
  7707     0157  3021               	movlw	33
  7708     0158  0087               	movwf	7
  7709     0159  0181               	clrf	1
  7710     015A                     l4204:
  7711                           
  7712                           ;Mobbus_Slave.c: 205:     SES_Modbus.u32timeOut = Get_millis();
  7713     015A  318D  2535  3180   	fcall	_Get_millis
  7714     015D  30E2               	movlw	226
  7715     015E  0086               	movwf	6
  7716     015F  3021               	movlw	33
  7717     0160  0087               	movwf	7
  7718     0161  0020               	movlb	0	; select bank0
  7719     0162  0820               	movf	?_Get_millis,w
  7720     0163  3FC0               	movwi [0]fsr1
  7721     0164  0821               	movf	?_Get_millis+1,w
  7722     0165  3FC1               	movwi [1]fsr1
  7723     0166  0822               	movf	?_Get_millis+2,w
  7724     0167  3FC2               	movwi [2]fsr1
  7725     0168  0823               	movf	?_Get_millis+3,w
  7726     0169  3FC3               	movwi [3]fsr1
  7727     016A                     l4206:
  7728                           
  7729                           ;Mobbus_Slave.c: 208:     SES_Modbus.u16OutCnt++;
  7730     016A  30D8               	movlw	216
  7731     016B  0086               	movwf	6
  7732     016C  3021               	movlw	33
  7733     016D  0087               	movwf	7
  7734     016E  3001               	movlw	1
  7735     016F  0781               	addwf	1,f
  7736     0170  3141               	addfsr 1,1
  7737     0171  1803               	skipnc
  7738     0172  0A81               	incf	1,f
  7739     0173                     l517:
  7740     0173  0008               	return
  7741     0174                     __end_of_Modbus_sendTxBuff:
  7742                           
  7743                           	psect	text43
  7744     03DF                     __ptext43:	
  7745 ;; *************** function _Modbus_calcCRC *****************
  7746 ;; Defined at:
  7747 ;;		line 211 in file "Mobbus_Slave.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  len             1    wreg     unsigned char 
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  len             1    6[BANK0 ] unsigned char 
  7752 ;;  j               1   12[BANK0 ] unsigned char 
  7753 ;;  temp            2   13[BANK0 ] unsigned int 
  7754 ;;  flag            2    9[BANK0 ] unsigned int 
  7755 ;;  temp2           2    7[BANK0 ] unsigned int 
  7756 ;;  i               1   11[BANK0 ] unsigned char 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  2    0[BANK0 ] unsigned short 
  7759 ;; Registers used:
  7760 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7766 ;;      Params:         0       2       0       0       0       0       0       0
  7767 ;;      Locals:         0       9       0       0       0       0       0       0
  7768 ;;      Temps:          0       4       0       0       0       0       0       0
  7769 ;;      Totals:         0      15       0       0       0       0       0       0
  7770 ;;Total ram usage:       15 bytes
  7771 ;; Hardware stack levels used: 1
  7772 ;; Hardware stack levels required when called: 7
  7773 ;; This function calls:
  7774 ;;		Nothing
  7775 ;; This function is called by:
  7776 ;;		_validateRequest
  7777 ;;		_Modbus_sendTxBuff
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781     03DF                     _Modbus_calcCRC:	
  7782                           ;psect for function _Modbus_calcCRC
  7783                           
  7784                           
  7785                           ;incstack = 0
  7786                           ; Regs used in _Modbus_calcCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
  7787                           ;Modbus_calcCRC@len stored from wreg
  7788     03DF  0020               	movlb	0	; select bank0
  7789     03E0  00A6               	movwf	Modbus_calcCRC@len
  7790     03E1                     l4110:
  7791                           
  7792                           ;Mobbus_Slave.c: 212:     unsigned int temp, temp2, flag;;Mobbus_Slave.c: 213:     temp 
      +                          = 0xFFFF;
  7793     03E1  30FF               	movlw	255
  7794     03E2  00AD               	movwf	Modbus_calcCRC@temp
  7795     03E3  30FF               	movlw	255
  7796     03E4  00AE               	movwf	Modbus_calcCRC@temp+1
  7797     03E5                     l4112:
  7798                           
  7799                           ;Mobbus_Slave.c: 214:     unsigned char i = 0;
  7800     03E5  01AB               	clrf	Modbus_calcCRC@i
  7801                           
  7802                           ;Mobbus_Slave.c: 215:     for (i = 0; i < len; i++) {
  7803     03E6  01AB               	clrf	Modbus_calcCRC@i
  7804     03E7  2C1F               	goto	l4138
  7805     03E8                     l4114:
  7806                           
  7807                           ;Mobbus_Slave.c: 216:         temp = temp ^ SES_Modbus.au8Buffer[i];
  7808     03E8  082B               	movf	Modbus_calcCRC@i,w
  7809     03E9  00A2               	movwf	??_Modbus_calcCRC
  7810     03EA  01A3               	clrf	??_Modbus_calcCRC+1
  7811     03EB  30A0               	movlw	160
  7812     03EC  00A4               	movwf	??_Modbus_calcCRC+2
  7813     03ED  3021               	movlw	33
  7814     03EE  00A5               	movwf	??_Modbus_calcCRC+3
  7815     03EF  0822               	movf	??_Modbus_calcCRC,w
  7816     03F0  0724               	addwf	??_Modbus_calcCRC+2,w
  7817     03F1  0086               	movwf	6
  7818     03F2  0823               	movf	??_Modbus_calcCRC+1,w
  7819     03F3  3D25               	addwfc	??_Modbus_calcCRC+3,w
  7820     03F4  0087               	movwf	7
  7821     03F5  082D               	movf	Modbus_calcCRC@temp,w
  7822     03F6  0601               	xorwf	1,w
  7823     03F7  00AD               	movwf	Modbus_calcCRC@temp
  7824     03F8  082E               	movf	Modbus_calcCRC@temp+1,w
  7825     03F9  00AE               	movwf	Modbus_calcCRC@temp+1
  7826     03FA                     l4116:
  7827     03FA                     l4118:
  7828                           
  7829                           ;Mobbus_Slave.c: 218:         for (j = 1; j <= 8; j++) {
  7830     03FA  01AC               	clrf	Modbus_calcCRC@j
  7831     03FB  0AAC               	incf	Modbus_calcCRC@j,f
  7832     03FC                     l4124:
  7833                           
  7834                           ;Mobbus_Slave.c: 219:             flag = temp & 0x0001;
  7835     03FC  3001               	movlw	1
  7836     03FD  052D               	andwf	Modbus_calcCRC@temp,w
  7837     03FE  00A9               	movwf	Modbus_calcCRC@flag
  7838     03FF  3000               	movlw	0
  7839     0400  052E               	andwf	Modbus_calcCRC@temp+1,w
  7840     0401  00AA               	movwf	Modbus_calcCRC@flag+1
  7841     0402                     l4126:
  7842                           
  7843                           ;Mobbus_Slave.c: 220:             temp >>= 1;
  7844     0402  3001               	movlw	1
  7845     0403                     u1715:
  7846     0403  36AE               	lsrf	Modbus_calcCRC@temp+1,f
  7847     0404  0CAD               	rrf	Modbus_calcCRC@temp,f
  7848     0405  0B89               	decfsz	9,f
  7849     0406  2C03               	goto	u1715
  7850     0407                     l4128:
  7851                           
  7852                           ;Mobbus_Slave.c: 221:             if (flag)
  7853     0407  0829               	movf	Modbus_calcCRC@flag,w
  7854     0408  042A               	iorwf	Modbus_calcCRC@flag+1,w
  7855     0409  1903               	btfsc	3,2
  7856     040A  2C0C               	goto	u1721
  7857     040B  2C0D               	goto	u1720
  7858     040C                     u1721:
  7859     040C  2C11               	goto	l4132
  7860     040D                     u1720:
  7861     040D                     l4130:
  7862                           
  7863                           ;Mobbus_Slave.c: 222:                 temp ^= 0xA001;
  7864     040D  3001               	movlw	1
  7865     040E  06AD               	xorwf	Modbus_calcCRC@temp,f
  7866     040F  30A0               	movlw	160
  7867     0410  06AE               	xorwf	Modbus_calcCRC@temp+1,f
  7868     0411                     l4132:
  7869                           
  7870                           ;Mobbus_Slave.c: 223:         }
  7871     0411  3001               	movlw	1
  7872     0412  00A2               	movwf	??_Modbus_calcCRC
  7873     0413  0822               	movf	??_Modbus_calcCRC,w
  7874     0414  07AC               	addwf	Modbus_calcCRC@j,f
  7875     0415                     l4134:
  7876     0415  3009               	movlw	9
  7877     0416  022C               	subwf	Modbus_calcCRC@j,w
  7878     0417  1C03               	skipc
  7879     0418  2C1A               	goto	u1731
  7880     0419  2C1B               	goto	u1730
  7881     041A                     u1731:
  7882     041A  2BFC               	goto	l4124
  7883     041B                     u1730:
  7884     041B                     l4136:
  7885                           
  7886                           ;Mobbus_Slave.c: 224:     }
  7887     041B  3001               	movlw	1
  7888     041C  00A2               	movwf	??_Modbus_calcCRC
  7889     041D  0822               	movf	??_Modbus_calcCRC,w
  7890     041E  07AB               	addwf	Modbus_calcCRC@i,f
  7891     041F                     l4138:
  7892     041F  0826               	movf	Modbus_calcCRC@len,w
  7893     0420  022B               	subwf	Modbus_calcCRC@i,w
  7894     0421  1C03               	skipc
  7895     0422  2C24               	goto	u1741
  7896     0423  2C25               	goto	u1740
  7897     0424                     u1741:
  7898     0424  2BE8               	goto	l4114
  7899     0425                     u1740:
  7900     0425                     l4140:
  7901                           
  7902                           ;Mobbus_Slave.c: 226:     temp2 = temp >> 8;
  7903     0425  082E               	movf	Modbus_calcCRC@temp+1,w
  7904     0426  00A3               	movwf	??_Modbus_calcCRC+1
  7905     0427  082D               	movf	Modbus_calcCRC@temp,w
  7906     0428  00A2               	movwf	??_Modbus_calcCRC
  7907     0429  0823               	movf	??_Modbus_calcCRC+1,w
  7908     042A  00A2               	movwf	??_Modbus_calcCRC
  7909     042B  01A3               	clrf	??_Modbus_calcCRC+1
  7910     042C  0822               	movf	??_Modbus_calcCRC,w
  7911     042D  00A7               	movwf	Modbus_calcCRC@temp2
  7912     042E  0823               	movf	??_Modbus_calcCRC+1,w
  7913     042F  00A8               	movwf	Modbus_calcCRC@temp2+1
  7914     0430                     l4142:
  7915                           
  7916                           ;Mobbus_Slave.c: 227:     temp = (temp << 8) | temp2;
  7917     0430  082D               	movf	Modbus_calcCRC@temp,w
  7918     0431  00A3               	movwf	??_Modbus_calcCRC+1
  7919     0432  01A2               	clrf	??_Modbus_calcCRC
  7920     0433  0827               	movf	Modbus_calcCRC@temp2,w
  7921     0434  0422               	iorwf	??_Modbus_calcCRC,w
  7922     0435  00AD               	movwf	Modbus_calcCRC@temp
  7923     0436  0828               	movf	Modbus_calcCRC@temp2+1,w
  7924     0437  0423               	iorwf	??_Modbus_calcCRC+1,w
  7925     0438  00AE               	movwf	Modbus_calcCRC@temp+1
  7926     0439                     l4144:
  7927                           
  7928                           ;Mobbus_Slave.c: 231:     return temp;
  7929     0439  082E               	movf	Modbus_calcCRC@temp+1,w
  7930     043A  00A1               	movwf	?_Modbus_calcCRC+1
  7931     043B  082D               	movf	Modbus_calcCRC@temp,w
  7932     043C  00A0               	movwf	?_Modbus_calcCRC
  7933     043D                     l526:
  7934     043D  0008               	return
  7935     043E                     __end_of_Modbus_calcCRC:
  7936                           
  7937                           	psect	text44
  7938     0D35                     __ptext44:	
  7939 ;; *************** function _Get_millis *****************
  7940 ;; Defined at:
  7941 ;;		line 15 in file "tick.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;		None
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;		None
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  4    0[BANK0 ] unsigned long 
  7948 ;; Registers used:
  7949 ;;		wreg
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7955 ;;      Params:         0       4       0       0       0       0       0       0
  7956 ;;      Locals:         0       0       0       0       0       0       0       0
  7957 ;;      Temps:          0       0       0       0       0       0       0       0
  7958 ;;      Totals:         0       4       0       0       0       0       0       0
  7959 ;;Total ram usage:        4 bytes
  7960 ;; Hardware stack levels used: 1
  7961 ;; Hardware stack levels required when called: 7
  7962 ;; This function calls:
  7963 ;;		Nothing
  7964 ;; This function is called by:
  7965 ;;		_ReadData
  7966 ;;		_Task_Sensor
  7967 ;;		_ModbusRTU_Slave_Poll
  7968 ;;		_Modbus_sendTxBuff
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972     0D35                     _Get_millis:	
  7973                           ;psect for function _Get_millis
  7974                           
  7975     0D35                     l4106:	
  7976                           ;incstack = 0
  7977                           ; Regs used in _Get_millis: [wreg]
  7978                           
  7979                           
  7980                           ;tick.c: 16:     return device_time;
  7981     0D35  0020               	movlb	0	; select bank0
  7982     0D36  0861               	movf	_device_time+3,w	;volatile
  7983     0D37  00A3               	movwf	?_Get_millis+3
  7984     0D38  0860               	movf	_device_time+2,w	;volatile
  7985     0D39  00A2               	movwf	?_Get_millis+2
  7986     0D3A  085F               	movf	_device_time+1,w	;volatile
  7987     0D3B  00A1               	movwf	?_Get_millis+1
  7988     0D3C  085E               	movf	_device_time,w	;volatile
  7989     0D3D  00A0               	movwf	?_Get_millis
  7990     0D3E                     l562:
  7991     0D3E  0008               	return
  7992     0D3F                     __end_of_Get_millis:
  7993                           
  7994                           	psect	text45
  7995     0C73                     __ptext45:	
  7996 ;; *************** function _EUSART_is_tx_done *****************
  7997 ;; Defined at:
  7998 ;;		line 142 in file "mcc_generated_files/eusart.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;		None
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;		None
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  1    wreg      _Bool 
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, status,0
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8012 ;;      Params:         0       0       0       0       0       0       0       0
  8013 ;;      Locals:         0       0       0       0       0       0       0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0
  8015 ;;      Totals:         0       0       0       0       0       0       0       0
  8016 ;;Total ram usage:        0 bytes
  8017 ;; Hardware stack levels used: 1
  8018 ;; Hardware stack levels required when called: 7
  8019 ;; This function calls:
  8020 ;;		Nothing
  8021 ;; This function is called by:
  8022 ;;		_Modbus_sendTxBuff
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026     0C73                     _EUSART_is_tx_done:	
  8027                           ;psect for function _EUSART_is_tx_done
  8028                           
  8029     0C73                     l4084:	
  8030                           ;incstack = 0
  8031                           ; Regs used in _EUSART_is_tx_done: [wreg+status,2+status,0]
  8032                           
  8033                           
  8034                           ;mcc_generated_files/eusart.c: 144:     return TXSTAbits.TRMT;
  8035     0C73  0023               	movlb	3	; select bank3
  8036     0C74  0C1E               	rrf	30,w	;volatile
  8037     0C75  3901               	andlw	1
  8038     0C76                     l184:
  8039     0C76  0008               	return
  8040     0C77                     __end_of_EUSART_is_tx_done:
  8041                           
  8042                           	psect	text46
  8043     0793                     __ptext46:	
  8044 ;; *************** function _EUSART_Write *****************
  8045 ;; Defined at:
  8046 ;;		line 173 in file "mcc_generated_files/eusart.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;  txData          1    wreg     unsigned char 
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;  txData          1    1[BANK0 ] unsigned char 
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      void 
  8053 ;; Registers used:
  8054 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8060 ;;      Params:         0       0       0       0       0       0       0       0
  8061 ;;      Locals:         0       1       0       0       0       0       0       0
  8062 ;;      Temps:          0       1       0       0       0       0       0       0
  8063 ;;      Totals:         0       2       0       0       0       0       0       0
  8064 ;;Total ram usage:        2 bytes
  8065 ;; Hardware stack levels used: 1
  8066 ;; Hardware stack levels required when called: 7
  8067 ;; This function calls:
  8068 ;;		Nothing
  8069 ;; This function is called by:
  8070 ;;		_Modbus_sendTxBuff
  8071 ;;		_putch
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075     0793                     _EUSART_Write:	
  8076                           ;psect for function _EUSART_Write
  8077                           
  8078                           
  8079                           ;incstack = 0
  8080                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8081                           ;EUSART_Write@txData stored from wreg
  8082     0793  0020               	movlb	0	; select bank0
  8083     0794  00A1               	movwf	EUSART_Write@txData
  8084     0795                     l4088:
  8085     0795                     l4090:	
  8086                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  8087                           
  8088                           
  8089                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  8090     0795  086D               	movf	_eusartTxBufferRemaining,w	;volatile
  8091     0796  1903               	btfsc	3,2
  8092     0797  2F99               	goto	u1681
  8093     0798  2F9A               	goto	u1680
  8094     0799                     u1681:
  8095     0799  2F95               	goto	l4090
  8096     079A                     u1680:
  8097     079A                     l199:
  8098                           
  8099                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  8100     079A  0021               	movlb	1	; select bank1
  8101     079B  1A11               	btfsc	17,4	;volatile
  8102     079C  2F9E               	goto	u1691
  8103     079D  2F9F               	goto	u1690
  8104     079E                     u1691:
  8105     079E  2FA4               	goto	l200
  8106     079F                     u1690:
  8107     079F                     l4092:
  8108                           
  8109                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  8110     079F  0020               	movlb	0	; select bank0
  8111     07A0  0821               	movf	EUSART_Write@txData,w
  8112     07A1  0023               	movlb	3	; select bank3
  8113     07A2  009A               	movwf	26	;volatile
  8114                           
  8115                           ;mcc_generated_files/eusart.c: 182:     }
  8116     07A3  2FB9               	goto	l4104
  8117     07A4                     l200:	
  8118                           ;mcc_generated_files/eusart.c: 183:     else
  8119                           
  8120                           
  8121                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  8122     07A4  1211               	bcf	17,4	;volatile
  8123     07A5                     l4094:
  8124                           
  8125                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  8126     07A5  087C               	movf	_eusartTxHead,w
  8127     07A6  3ECD               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8128     07A7  0086               	movwf	6
  8129     07A8  0187               	clrf	7
  8130     07A9  0020               	movlb	0	; select bank0
  8131     07AA  0821               	movf	EUSART_Write@txData,w
  8132     07AB  0081               	movwf	1
  8133     07AC                     l4096:
  8134     07AC  3001               	movlw	1
  8135     07AD  00A0               	movwf	??_EUSART_Write
  8136     07AE  0820               	movf	??_EUSART_Write,w
  8137     07AF  07FC               	addwf	_eusartTxHead,f	;volatile
  8138     07B0                     l4098:
  8139                           
  8140                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8141     07B0  3008               	movlw	8
  8142     07B1  027C               	subwf	_eusartTxHead,w	;volatile
  8143     07B2  1C03               	skipc
  8144     07B3  2FB5               	goto	u1701
  8145     07B4  2FB6               	goto	u1700
  8146     07B5                     u1701:
  8147     07B5  2FB7               	goto	l4102
  8148     07B6                     u1700:
  8149     07B6                     l4100:
  8150                           
  8151                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  8152     07B6  01FC               	clrf	_eusartTxHead	;volatile
  8153     07B7                     l4102:
  8154                           
  8155                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  8156     07B7  3001               	movlw	1
  8157     07B8  02ED               	subwf	_eusartTxBufferRemaining,f	;volatile
  8158     07B9                     l4104:
  8159                           
  8160                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  8161     07B9  0021               	movlb	1	; select bank1
  8162     07BA  1611               	bsf	17,4	;volatile
  8163     07BB                     l203:
  8164     07BB  0008               	return
  8165     07BC                     __end_of_EUSART_Write:
  8166                           
  8167                           	psect	text47
  8168     0546                     __ptext47:	
  8169 ;; *************** function _ModbusSlave_Init *****************
  8170 ;; Defined at:
  8171 ;;		line 234 in file "Mobbus_Slave.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;  _SW_Ad          1    wreg     char 
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;  _SW_Ad          1    0[BANK0 ] char 
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  1    wreg      void 
  8178 ;; Registers used:
  8179 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8185 ;;      Params:         0       0       0       0       0       0       0       0
  8186 ;;      Locals:         0       1       0       0       0       0       0       0
  8187 ;;      Temps:          0       0       0       0       0       0       0       0
  8188 ;;      Totals:         0       1       0       0       0       0       0       0
  8189 ;;Total ram usage:        1 bytes
  8190 ;; Hardware stack levels used: 1
  8191 ;; Hardware stack levels required when called: 7
  8192 ;; This function calls:
  8193 ;;		Nothing
  8194 ;; This function is called by:
  8195 ;;		_Task_MB
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199     0546                     _ModbusSlave_Init:	
  8200                           ;psect for function _ModbusSlave_Init
  8201                           
  8202                           
  8203                           ;incstack = 0
  8204                           ; Regs used in _ModbusSlave_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  8205                           ;ModbusSlave_Init@_SW_Ad stored from wreg
  8206     0546  0020               	movlb	0	; select bank0
  8207     0547  00A0               	movwf	ModbusSlave_Init@_SW_Ad
  8208     0548                     l4546:
  8209                           
  8210                           ;Mobbus_Slave.c: 235:     SES_Modbus.u8id = (uint8_t) _SW_Ad;
  8211     0548  309C               	movlw	156
  8212     0549  0086               	movwf	6
  8213     054A  3021               	movlw	33
  8214     054B  0087               	movwf	7
  8215     054C  0820               	movf	ModbusSlave_Init@_SW_Ad,w
  8216     054D  3FC0               	movwi [0]fsr1
  8217                           
  8218                           ;Mobbus_Slave.c: 236:     SES_Modbus.u8txenpin = RS485;
  8219     054E  309D               	movlw	157
  8220     054F  0086               	movwf	6
  8221     0550  3021               	movlw	33
  8222     0551  0087               	movwf	7
  8223     0552  3002               	movlw	2
  8224     0553  0081               	movwf	1
  8225     0554                     l4548:
  8226                           
  8227                           ;Mobbus_Slave.c: 237:     SES_Modbus.u16timeOut = 1000;
  8228     0554  30DC               	movlw	220
  8229     0555  0086               	movwf	6
  8230     0556  3021               	movlw	33
  8231     0557  0087               	movwf	7
  8232     0558  30E8               	movlw	232
  8233     0559  3FC0               	movwi [0]fsr1
  8234     055A  3003               	movlw	3
  8235     055B  3FC1               	movwi [1]fsr1
  8236     055C                     l4550:
  8237                           
  8238                           ;Mobbus_Slave.c: 238:     SES_Modbus.u32overTime = 0;
  8239     055C  30E6               	movlw	230
  8240     055D  0086               	movwf	6
  8241     055E  3021               	movlw	33
  8242     055F  0087               	movwf	7
  8243     0560  3000               	movlw	0
  8244     0561  3FC0               	movwi [0]fsr1
  8245     0562  3FC1               	movwi [1]fsr1
  8246     0563  3FC2               	movwi [2]fsr1
  8247     0564  3FC3               	movwi [3]fsr1
  8248                           
  8249                           ;Mobbus_Slave.c: 240:     if (SES_Modbus.u8txenpin > 1) do { LATCbits.LATC5 = 0; } while
      +                          (0);
  8250     0565  309C               	movlw	156
  8251     0566  0086               	movwf	6
  8252     0567  3021               	movlw	33
  8253     0568  0087               	movwf	7
  8254     0569  3141               	addfsr 1,1
  8255     056A  3002               	movlw	2
  8256     056B  0201               	subwf	1,w
  8257     056C  1C03               	skipc
  8258     056D  2D6F               	goto	u2111
  8259     056E  2D70               	goto	u2110
  8260     056F                     u2111:
  8261     056F  2D73               	goto	l533
  8262     0570                     u2110:
  8263     0570                     l530:
  8264     0570  0022               	movlb	2	; select bank2
  8265     0571  128E               	bcf	14,5	;volatile
  8266     0572  2D75               	goto	l4552
  8267     0573                     l533:
  8268     0573  0022               	movlb	2	; select bank2
  8269     0574  168E               	bsf	14,5	;volatile
  8270     0575                     l4552:
  8271                           
  8272                           ;Mobbus_Slave.c: 243:     SES_Modbus.u8lastRec = SES_Modbus.u8BufferSize = 0;
  8273     0575  30D2               	movlw	210
  8274     0576  0086               	movwf	6
  8275     0577  3021               	movlw	33
  8276     0578  0087               	movwf	7
  8277     0579  0181               	clrf	1
  8278     057A  30D3               	movlw	211
  8279     057B  0086               	movwf	6
  8280     057C  3021               	movlw	33
  8281     057D  0087               	movwf	7
  8282     057E  0181               	clrf	1
  8283                           
  8284                           ;Mobbus_Slave.c: 244:     SES_Modbus.u16InCnt = SES_Modbus.u16OutCnt = SES_Modbus.u16err
      +                          Cnt = 0;
  8285     057F  30DA               	movlw	218
  8286     0580  0086               	movwf	6
  8287     0581  3021               	movlw	33
  8288     0582  0087               	movwf	7
  8289     0583  3000               	movlw	0
  8290     0584  3FC0               	movwi [0]fsr1
  8291     0585  3FC1               	movwi [1]fsr1
  8292     0586  30D8               	movlw	216
  8293     0587  0086               	movwf	6
  8294     0588  3021               	movlw	33
  8295     0589  0087               	movwf	7
  8296     058A  3000               	movlw	0
  8297     058B  3FC0               	movwi [0]fsr1
  8298     058C  3FC1               	movwi [1]fsr1
  8299     058D  30D6               	movlw	214
  8300     058E  0086               	movwf	6
  8301     058F  3021               	movlw	33
  8302     0590  0087               	movwf	7
  8303     0591  3000               	movlw	0
  8304     0592  3FC0               	movwi [0]fsr1
  8305     0593  3FC1               	movwi [1]fsr1
  8306     0594                     l535:
  8307     0594  0008               	return
  8308     0595                     __end_of_ModbusSlave_Init:
  8309                           
  8310                           	psect	text48
  8311     0F6A                     __ptext48:	
  8312 ;; *************** function _Task_Indicator *****************
  8313 ;; Defined at:
  8314 ;;		line 7 in file "MCU.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;		None
  8317 ;; Auto vars:     Size  Location     Type
  8318 ;;		None
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  1    wreg      void 
  8321 ;; Registers used:
  8322 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8328 ;;      Params:         0       0       0       0       0       0       0       0
  8329 ;;      Locals:         0       0       0       0       0       0       0       0
  8330 ;;      Temps:          0       2       0       0       0       0       0       0
  8331 ;;      Totals:         0       2       0       0       0       0       0       0
  8332 ;;Total ram usage:        2 bytes
  8333 ;; Hardware stack levels used: 1
  8334 ;; Hardware stack levels required when called: 7
  8335 ;; This function calls:
  8336 ;;		Nothing
  8337 ;; This function is called by:
  8338 ;;		_App_Process
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342     0F6A                     _Task_Indicator:	
  8343                           ;psect for function _Task_Indicator
  8344                           
  8345     0F6A                     l4668:	
  8346                           ;incstack = 0
  8347                           ; Regs used in _Task_Indicator: [wreg-fsr0h+status,2+status,0]
  8348                           
  8349                           
  8350                           ;MCU.c: 8:     switch (f_Indicator) {
  8351     0F6A  2F77               	goto	l4672
  8352     0F6B                     l401:	
  8353                           ;MCU.c: 10:         {;MCU.c: 11:             do { LATCbits.LATC1 = 1; } while(0);
  8354                           
  8355     0F6B  0022               	movlb	2	; select bank2
  8356     0F6C  148E               	bsf	14,1	;volatile
  8357     0F6D                     l403:	
  8358                           ;MCU.c: 12:             do { LATCbits.LATC0 = 1; } while(0);
  8359                           
  8360     0F6D  140E               	bsf	14,0	;volatile
  8361     0F6E  2F8D               	goto	l416
  8362     0F6F                     l407:	
  8363                           ;MCU.c: 16:         {;MCU.c: 17:             do { LATCbits.LATC1 = 0; } while(0);
  8364                           
  8365     0F6F  0022               	movlb	2	; select bank2
  8366     0F70  108E               	bcf	14,1	;volatile
  8367     0F71                     l409:	
  8368                           ;MCU.c: 18:             do { LATCbits.LATC0 = 1; } while(0);
  8369                           
  8370     0F71  140E               	bsf	14,0	;volatile
  8371     0F72  2F8D               	goto	l416
  8372     0F73                     l412:	
  8373                           ;MCU.c: 22:         {;MCU.c: 23:             do { LATCbits.LATC1 = 1; } while(0);
  8374                           
  8375     0F73  0022               	movlb	2	; select bank2
  8376     0F74  148E               	bsf	14,1	;volatile
  8377     0F75                     l414:	
  8378                           ;MCU.c: 24:             do { LATCbits.LATC0 = 0; } while(0);
  8379                           
  8380     0F75  100E               	bcf	14,0	;volatile
  8381     0F76  2F8D               	goto	l416
  8382     0F77                     l4672:
  8383     0F77  0020               	movlb	0	; select bank0
  8384     0F78  086B               	movf	_f_Indicator,w
  8385     0F79  00A0               	movwf	??_Task_Indicator
  8386     0F7A  01A1               	clrf	??_Task_Indicator+1
  8387     0F7B  1BA0               	btfsc	??_Task_Indicator,7
  8388     0F7C  03A1               	decf	??_Task_Indicator+1,f
  8389                           
  8390                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8391                           ; Switch size 1, requested type "simple"
  8392                           ; Number of cases is 1, Range of values is 0 to 0
  8393                           ; switch strategies available:
  8394                           ; Name         Instructions Cycles
  8395                           ; simple_byte            4     3 (average)
  8396                           ; direct_byte            8     6 (fixed)
  8397                           ; jumptable            260     6 (fixed)
  8398                           ;	Chosen strategy is simple_byte
  8399     0F7D  0821               	movf	??_Task_Indicator+1,w
  8400     0F7E  3A00               	xorlw	0	; case 0
  8401     0F7F  1903               	skipnz
  8402     0F80  2F82               	goto	l4924
  8403     0F81  2F8D               	goto	l416
  8404     0F82                     l4924:
  8405                           
  8406                           ; Switch size 1, requested type "simple"
  8407                           ; Number of cases is 3, Range of values is 0 to 2
  8408                           ; switch strategies available:
  8409                           ; Name         Instructions Cycles
  8410                           ; simple_byte           10     6 (average)
  8411                           ; direct_byte           12     6 (fixed)
  8412                           ; jumptable            260     6 (fixed)
  8413                           ;	Chosen strategy is simple_byte
  8414     0F82  0820               	movf	??_Task_Indicator,w
  8415     0F83  3A00               	xorlw	0	; case 0
  8416     0F84  1903               	skipnz
  8417     0F85  2F6B               	goto	l401
  8418     0F86  3A01               	xorlw	1	; case 1
  8419     0F87  1903               	skipnz
  8420     0F88  2F6F               	goto	l407
  8421     0F89  3A03               	xorlw	3	; case 2
  8422     0F8A  1903               	skipnz
  8423     0F8B  2F73               	goto	l412
  8424     0F8C  2F8D               	goto	l416
  8425     0F8D                     l416:
  8426     0F8D  0008               	return
  8427     0F8E                     __end_of_Task_Indicator:
  8428                           
  8429                           	psect	text49
  8430     0D2B                     __ptext49:	
  8431 ;; *************** function _App_Init *****************
  8432 ;; Defined at:
  8433 ;;		line 42 in file "MCU.c"
  8434 ;; Parameters:    Size  Location     Type
  8435 ;;		None
  8436 ;; Auto vars:     Size  Location     Type
  8437 ;;		None
  8438 ;; Return value:  Size  Location     Type
  8439 ;;                  1    wreg      void 
  8440 ;; Registers used:
  8441 ;;		wreg, status,2, status,0, pclath, cstack
  8442 ;; Tracked objects:
  8443 ;;		On entry : 0/0
  8444 ;;		On exit  : 0/0
  8445 ;;		Unchanged: 0/0
  8446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8447 ;;      Params:         0       0       0       0       0       0       0       0
  8448 ;;      Locals:         0       0       0       0       0       0       0       0
  8449 ;;      Temps:          0       0       0       0       0       0       0       0
  8450 ;;      Totals:         0       0       0       0       0       0       0       0
  8451 ;;Total ram usage:        0 bytes
  8452 ;; Hardware stack levels used: 1
  8453 ;; Hardware stack levels required when called: 9
  8454 ;; This function calls:
  8455 ;;		_Device_Init
  8456 ;;		_TMR1_StartTimer
  8457 ;;		_Tick_Init_SES
  8458 ;; This function is called by:
  8459 ;;		_main
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463     0D2B                     _App_Init:	
  8464                           ;psect for function _App_Init
  8465                           
  8466     0D2B                     l4696:	
  8467                           ;incstack = 0
  8468                           ; Regs used in _App_Init: [wreg+status,2+status,0+pclath+cstack]
  8469                           
  8470                           
  8471                           ;MCU.c: 43:     Device_Init();
  8472     0D2B  3186  26E0  318D   	fcall	_Device_Init
  8473     0D2E                     l4698:
  8474                           
  8475                           ;MCU.c: 44:     TMR1_StartTimer();
  8476     0D2E  318C  244D  318D   	fcall	_TMR1_StartTimer
  8477     0D31                     l4700:
  8478                           
  8479                           ;MCU.c: 45:     Tick_Init_SES();
  8480     0D31  318E  261C  318D   	fcall	_Tick_Init_SES
  8481     0D34                     l430:
  8482     0D34  0008               	return
  8483     0D35                     __end_of_App_Init:
  8484                           
  8485                           	psect	text50
  8486     0E1C                     __ptext50:	
  8487 ;; *************** function _Tick_Init_SES *****************
  8488 ;; Defined at:
  8489 ;;		line 6 in file "tick.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;		None
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;		None
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  1    wreg      void 
  8496 ;; Registers used:
  8497 ;;		wreg, status,2, status,0, pclath, cstack
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/0
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8503 ;;      Params:         0       0       0       0       0       0       0       0
  8504 ;;      Locals:         0       0       0       0       0       0       0       0
  8505 ;;      Temps:          0       0       0       0       0       0       0       0
  8506 ;;      Totals:         0       0       0       0       0       0       0       0
  8507 ;;Total ram usage:        0 bytes
  8508 ;; Hardware stack levels used: 1
  8509 ;; Hardware stack levels required when called: 8
  8510 ;; This function calls:
  8511 ;;		_TMR1_SetInterruptHandler
  8512 ;; This function is called by:
  8513 ;;		_App_Init
  8514 ;; This function uses a non-reentrant model
  8515 ;;
  8516                           
  8517     0E1C                     _Tick_Init_SES:	
  8518                           ;psect for function _Tick_Init_SES
  8519                           
  8520     0E1C                     l4682:	
  8521                           ;incstack = 0
  8522                           ; Regs used in _Tick_Init_SES: [wreg+status,2+status,0+pclath+cstack]
  8523                           
  8524                           
  8525                           ;tick.c: 7:     device_time = 0;
  8526     0E1C  3000               	movlw	0
  8527     0E1D  0020               	movlb	0	; select bank0
  8528     0E1E  00E1               	movwf	_device_time+3	;volatile
  8529     0E1F  3000               	movlw	0
  8530     0E20  00E0               	movwf	_device_time+2	;volatile
  8531     0E21  3000               	movlw	0
  8532     0E22  00DF               	movwf	_device_time+1	;volatile
  8533     0E23  3000               	movlw	0
  8534     0E24  00DE               	movwf	_device_time	;volatile
  8535     0E25                     l4684:
  8536                           
  8537                           ;tick.c: 8:     TMR1_SetInterruptHandler(rtcc_handle);
  8538     0E25  3021               	movlw	low _rtcc_handle
  8539     0E26  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  8540     0E27  300D               	movlw	high _rtcc_handle
  8541     0E28  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  8542     0E29  318C  24E2  318E   	fcall	_TMR1_SetInterruptHandler
  8543     0E2C                     l556:
  8544     0E2C  0008               	return
  8545     0E2D                     __end_of_Tick_Init_SES:
  8546                           
  8547                           	psect	text51
  8548     0CE2                     __ptext51:	
  8549 ;; *************** function _TMR1_SetInterruptHandler *****************
  8550 ;; Defined at:
  8551 ;;		line 188 in file "mcc_generated_files/tmr1.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  8554 ;;		 -> rtcc_handle(1), TMR1_DefaultInterruptHandler(1), 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;		None
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  1    wreg      void 
  8559 ;; Registers used:
  8560 ;;		wreg
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8566 ;;      Params:         0       2       0       0       0       0       0       0
  8567 ;;      Locals:         0       0       0       0       0       0       0       0
  8568 ;;      Temps:          0       0       0       0       0       0       0       0
  8569 ;;      Totals:         0       2       0       0       0       0       0       0
  8570 ;;Total ram usage:        2 bytes
  8571 ;; Hardware stack levels used: 1
  8572 ;; Hardware stack levels required when called: 7
  8573 ;; This function calls:
  8574 ;;		Nothing
  8575 ;; This function is called by:
  8576 ;;		_TMR1_Initialize
  8577 ;;		_Tick_Init_SES
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581     0CE2                     _TMR1_SetInterruptHandler:	
  8582                           ;psect for function _TMR1_SetInterruptHandler
  8583                           
  8584     0CE2                     l4524:	
  8585                           ;incstack = 0
  8586                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  8587                           
  8588                           
  8589                           ;mcc_generated_files/tmr1.c: 189:     TMR1_InterruptHandler = InterruptHandler;
  8590     0CE2  0020               	movlb	0	; select bank0
  8591     0CE3  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  8592     0CE4  0021               	movlb	1	; select bank1
  8593     0CE5  00EE               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  8594     0CE6  0020               	movlb	0	; select bank0
  8595     0CE7  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  8596     0CE8  0021               	movlb	1	; select bank1
  8597     0CE9  00ED               	movwf	_TMR1_InterruptHandler^(0+128)
  8598     0CEA                     l298:
  8599     0CEA  0008               	return
  8600     0CEB                     __end_of_TMR1_SetInterruptHandler:
  8601                           
  8602                           	psect	text52
  8603     0C4D                     __ptext52:	
  8604 ;; *************** function _TMR1_StartTimer *****************
  8605 ;; Defined at:
  8606 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;		None
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      void 
  8613 ;; Registers used:
  8614 ;;		None
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8620 ;;      Params:         0       0       0       0       0       0       0       0
  8621 ;;      Locals:         0       0       0       0       0       0       0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0
  8623 ;;      Totals:         0       0       0       0       0       0       0       0
  8624 ;;Total ram usage:        0 bytes
  8625 ;; Hardware stack levels used: 1
  8626 ;; Hardware stack levels required when called: 7
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_App_Init
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634     0C4D                     _TMR1_StartTimer:	
  8635                           ;psect for function _TMR1_StartTimer
  8636                           
  8637     0C4D                     l4650:	
  8638                           ;incstack = 0
  8639                           ; Regs used in _TMR1_StartTimer: []
  8640                           
  8641                           
  8642                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  8643     0C4D  0020               	movlb	0	; select bank0
  8644     0C4E  1418               	bsf	24,0	;volatile
  8645     0C4F                     l280:
  8646     0C4F  0008               	return
  8647     0C50                     __end_of_TMR1_StartTimer:
  8648                           
  8649                           	psect	text53
  8650     06E0                     __ptext53:	
  8651 ;; *************** function _Device_Init *****************
  8652 ;; Defined at:
  8653 ;;		line 30 in file "MCU.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;		None
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;		None
  8658 ;; Return value:  Size  Location     Type
  8659 ;;                  1    wreg      void 
  8660 ;; Registers used:
  8661 ;;		wreg, status,2, status,0
  8662 ;; Tracked objects:
  8663 ;;		On entry : 0/0
  8664 ;;		On exit  : 0/0
  8665 ;;		Unchanged: 0/0
  8666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8667 ;;      Params:         0       0       0       0       0       0       0       0
  8668 ;;      Locals:         0       0       0       0       0       0       0       0
  8669 ;;      Temps:          0       3       0       0       0       0       0       0
  8670 ;;      Totals:         0       3       0       0       0       0       0       0
  8671 ;;Total ram usage:        3 bytes
  8672 ;; Hardware stack levels used: 1
  8673 ;; Hardware stack levels required when called: 7
  8674 ;; This function calls:
  8675 ;;		Nothing
  8676 ;; This function is called by:
  8677 ;;		_App_Init
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681     06E0                     _Device_Init:	
  8682                           ;psect for function _Device_Init
  8683                           
  8684     06E0                     l4678:	
  8685                           ;incstack = 0
  8686                           ; Regs used in _Device_Init: [wreg+status,2+status,0]
  8687                           
  8688                           
  8689                           ;MCU.c: 31:     static int8_t value_SW1, value_SW2, value_SW3, value_SW4;;MCU.c: 33:    
      +                           value_SW1 = PORTAbits.RA0;
  8690     06E0  3000               	movlw	0
  8691     06E1  0020               	movlb	0	; select bank0
  8692     06E2  180C               	btfsc	12,0	;volatile
  8693     06E3  3001               	movlw	1
  8694     06E4  0022               	movlb	2	; select bank2
  8695     06E5  00AD               	movwf	Device_Init@value_SW1^(0+256)
  8696                           
  8697                           ;MCU.c: 34:     value_SW2 = PORTAbits.RA1;
  8698     06E6  3000               	movlw	0
  8699     06E7  0020               	movlb	0	; select bank0
  8700     06E8  188C               	btfsc	12,1	;volatile
  8701     06E9  3001               	movlw	1
  8702     06EA  0022               	movlb	2	; select bank2
  8703     06EB  00AC               	movwf	Device_Init@value_SW2^(0+256)
  8704                           
  8705                           ;MCU.c: 35:     value_SW3 = PORTAbits.RA2;
  8706     06EC  3000               	movlw	0
  8707     06ED  0020               	movlb	0	; select bank0
  8708     06EE  190C               	btfsc	12,2	;volatile
  8709     06EF  3001               	movlw	1
  8710     06F0  0022               	movlb	2	; select bank2
  8711     06F1  00AB               	movwf	Device_Init@value_SW3^(0+256)
  8712                           
  8713                           ;MCU.c: 36:     value_SW4 = PORTAbits.RA3;
  8714     06F2  3000               	movlw	0
  8715     06F3  0020               	movlb	0	; select bank0
  8716     06F4  198C               	btfsc	12,3	;volatile
  8717     06F5  3001               	movlw	1
  8718     06F6  0022               	movlb	2	; select bank2
  8719     06F7  00AA               	movwf	Device_Init@value_SW4^(0+256)
  8720     06F8                     l4680:
  8721                           
  8722                           ;MCU.c: 39:     SW_Ad = (((value_SW1 & 0x01) | (value_SW2 & 0x02) | (value_SW3 & 0x04) |
      +                           (value_SW4 & 0x08)) & (0xFF));
  8723     06F8  3008               	movlw	8
  8724     06F9  052A               	andwf	Device_Init@value_SW4^(0+256),w
  8725     06FA  0020               	movlb	0	; select bank0
  8726     06FB  00A0               	movwf	??_Device_Init
  8727     06FC  3004               	movlw	4
  8728     06FD  0022               	movlb	2	; select bank2
  8729     06FE  052B               	andwf	Device_Init@value_SW3^(0+256),w
  8730     06FF  0020               	movlb	0	; select bank0
  8731     0700  00A1               	movwf	??_Device_Init+1
  8732     0701  3002               	movlw	2
  8733     0702  0022               	movlb	2	; select bank2
  8734     0703  052C               	andwf	Device_Init@value_SW2^(0+256),w
  8735     0704  0020               	movlb	0	; select bank0
  8736     0705  00A2               	movwf	??_Device_Init+2
  8737     0706  0022               	movlb	2	; select bank2
  8738     0707  082D               	movf	Device_Init@value_SW1^(0+256),w
  8739     0708  3901               	andlw	1
  8740     0709  0020               	movlb	0	; select bank0
  8741     070A  0422               	iorwf	??_Device_Init+2,w
  8742     070B  0421               	iorwf	??_Device_Init+1,w
  8743     070C  0420               	iorwf	??_Device_Init,w
  8744     070D  0021               	movlb	1	; select bank1
  8745     070E  00EF               	movwf	_SW_Ad^(0+128)
  8746     070F                     l427:
  8747     070F  0008               	return
  8748     0710                     __end_of_Device_Init:
  8749                           
  8750                           	psect	intentry
  8751     0004                     __pintentry:	
  8752 ;; *************** function _INTERRUPT_InterruptManager *****************
  8753 ;; Defined at:
  8754 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;		None
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;		None
  8759 ;; Return value:  Size  Location     Type
  8760 ;;                  1    wreg      void 
  8761 ;; Registers used:
  8762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8768 ;;      Params:         0       0       0       0       0       0       0       0
  8769 ;;      Locals:         0       0       0       0       0       0       0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0       0
  8771 ;;      Totals:         0       0       0       0       0       0       0       0
  8772 ;;Total ram usage:        0 bytes
  8773 ;; Hardware stack levels used: 1
  8774 ;; Hardware stack levels required when called: 6
  8775 ;; This function calls:
  8776 ;;		NULL
  8777 ;;		_EUSART_Receive_ISR
  8778 ;;		_EUSART_Transmit_ISR
  8779 ;;		_I2C_MasterIsr
  8780 ;;		_TMR1_ISR
  8781 ;; This function is called by:
  8782 ;;		Interrupt level 1
  8783 ;; This function uses a non-reentrant model
  8784 ;;
  8785                           
  8786     0004                     _INTERRUPT_InterruptManager:
  8787                           
  8788                           ;incstack = 0
  8789     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  8790                           
  8791                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8792     0005  3180               	pagesel	$
  8793     0006                     i1l3810:
  8794                           
  8795                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  8796     0006  1F0B               	btfss	11,6	;volatile
  8797     0007  2809               	goto	u146_21
  8798     0008  280A               	goto	u146_20
  8799     0009                     u146_21:
  8800     0009  2855               	goto	i1l100
  8801     000A                     u146_20:
  8802     000A                     i1l3812:
  8803                           
  8804                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  8805     000A  0021               	movlb	1	; select bank1
  8806     000B  1E11               	btfss	17,4	;volatile
  8807     000C  280E               	goto	u147_21
  8808     000D  280F               	goto	u147_20
  8809     000E                     u147_21:
  8810     000E  281B               	goto	i1l89
  8811     000F                     u147_20:
  8812     000F                     i1l3814:
  8813     000F  0020               	movlb	0	; select bank0
  8814     0010  1E11               	btfss	17,4	;volatile
  8815     0011  2813               	goto	u148_21
  8816     0012  2814               	goto	u148_20
  8817     0013                     u148_21:
  8818     0013  281B               	goto	i1l89
  8819     0014                     u148_20:
  8820     0014                     i1l3816:
  8821                           
  8822                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  8823     0014  0022               	movlb	2	; select bank2
  8824     0015  0829               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
  8825     0016  008A               	movwf	10
  8826     0017  0828               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
  8827     0018  000A               	callw
  8828     0019  3180               	pagesel	$
  8829                           
  8830                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  8831     001A  2855               	goto	i1l100
  8832     001B                     i1l89:	
  8833                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  8834                           
  8835     001B  0021               	movlb	1	; select bank1
  8836     001C  1E91               	btfss	17,5	;volatile
  8837     001D  281F               	goto	u149_21
  8838     001E  2820               	goto	u149_20
  8839     001F                     u149_21:
  8840     001F  282C               	goto	i1l91
  8841     0020                     u149_20:
  8842     0020                     i1l3818:
  8843     0020  0020               	movlb	0	; select bank0
  8844     0021  1E91               	btfss	17,5	;volatile
  8845     0022  2824               	goto	u150_21
  8846     0023  2825               	goto	u150_20
  8847     0024                     u150_21:
  8848     0024  282C               	goto	i1l91
  8849     0025                     u150_20:
  8850     0025                     i1l3820:
  8851                           
  8852                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  8853     0025  0022               	movlb	2	; select bank2
  8854     0026  0827               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
  8855     0027  008A               	movwf	10
  8856     0028  0826               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
  8857     0029  000A               	callw
  8858     002A  3180               	pagesel	$
  8859                           
  8860                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  8861     002B  2855               	goto	i1l100
  8862     002C                     i1l91:	
  8863                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE2bits.BCLIE == 1 && PIR
      +                          2bits.BCLIF == 1)
  8864                           
  8865     002C  0021               	movlb	1	; select bank1
  8866     002D  1D92               	btfss	18,3	;volatile
  8867     002E  2830               	goto	u151_21
  8868     002F  2831               	goto	u151_20
  8869     0030                     u151_21:
  8870     0030  283C               	goto	i1l93
  8871     0031                     u151_20:
  8872     0031                     i1l3822:
  8873     0031  0020               	movlb	0	; select bank0
  8874     0032  1D92               	btfss	18,3	;volatile
  8875     0033  2835               	goto	u152_21
  8876     0034  2836               	goto	u152_20
  8877     0035                     u152_21:
  8878     0035  283C               	goto	i1l93
  8879     0036                     u152_20:
  8880     0036                     i1l3824:
  8881                           
  8882                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             MSSP_InterruptHandler();
  8883     0036  0869               	movf	_MSSP_InterruptHandler+1,w
  8884     0037  008A               	movwf	10
  8885     0038  0868               	movf	_MSSP_InterruptHandler,w
  8886     0039  000A               	callw
  8887     003A  3180               	pagesel	$
  8888                           
  8889                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  8890     003B  2855               	goto	i1l100
  8891     003C                     i1l93:	
  8892                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.SSPIE == 1 && PIR
      +                          1bits.SSPIF == 1)
  8893                           
  8894     003C  0021               	movlb	1	; select bank1
  8895     003D  1D91               	btfss	17,3	;volatile
  8896     003E  2840               	goto	u153_21
  8897     003F  2841               	goto	u153_20
  8898     0040                     u153_21:
  8899     0040  2847               	goto	i1l95
  8900     0041                     u153_20:
  8901     0041                     i1l3826:
  8902     0041  0020               	movlb	0	; select bank0
  8903     0042  1D91               	btfss	17,3	;volatile
  8904     0043  2845               	goto	u154_21
  8905     0044  2846               	goto	u154_20
  8906     0045                     u154_21:
  8907     0045  2847               	goto	i1l95
  8908     0046                     u154_20:
  8909     0046  2836               	goto	i1l3824
  8910     0047                     i1l95:	
  8911                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
  8912                           
  8913     0047  0021               	movlb	1	; select bank1
  8914     0048  1C11               	btfss	17,0	;volatile
  8915     0049  284B               	goto	u155_21
  8916     004A  284C               	goto	u155_20
  8917     004B                     u155_21:
  8918     004B  2855               	goto	i1l94
  8919     004C                     u155_20:
  8920     004C                     i1l3830:
  8921     004C  0020               	movlb	0	; select bank0
  8922     004D  1C11               	btfss	17,0	;volatile
  8923     004E  2850               	goto	u156_21
  8924     004F  2851               	goto	u156_20
  8925     0050                     u156_21:
  8926     0050  2855               	goto	i1l94
  8927     0051                     u156_20:
  8928     0051                     i1l3832:
  8929                           
  8930                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR1_ISR();
  8931     0051  318D  2591  3180   	fcall	_TMR1_ISR
  8932                           
  8933                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  8934     0054  2855               	goto	i1l100
  8935     0055                     i1l94:
  8936     0055                     i1l100:
  8937     0055  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8938     0056  0009               	retfie
  8939     0057                     __end_of_INTERRUPT_InterruptManager:
  8940                           
  8941                           	psect	text55
  8942     0D91                     __ptext55:	
  8943 ;; *************** function _TMR1_ISR *****************
  8944 ;; Defined at:
  8945 ;;		line 167 in file "mcc_generated_files/tmr1.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;		None
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;		None
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, status,2, status,0, pclath, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8959 ;;      Params:         0       0       0       0       0       0       0       0
  8960 ;;      Locals:         0       0       0       0       0       0       0       0
  8961 ;;      Temps:          0       0       0       0       0       0       0       0
  8962 ;;      Totals:         0       0       0       0       0       0       0       0
  8963 ;;Total ram usage:        0 bytes
  8964 ;; Hardware stack levels used: 1
  8965 ;; Hardware stack levels required when called: 2
  8966 ;; This function calls:
  8967 ;;		_TMR1_CallBack
  8968 ;;		_TMR1_WriteTimer
  8969 ;; This function is called by:
  8970 ;;		_INTERRUPT_InterruptManager
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974     0D91                     _TMR1_ISR:	
  8975                           ;psect for function _TMR1_ISR
  8976                           
  8977     0D91                     i1l3760:	
  8978                           ;incstack = 0
  8979                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  8980                           
  8981                           
  8982                           ;mcc_generated_files/tmr1.c: 171:     PIR1bits.TMR1IF = 0;
  8983     0D91  0020               	movlb	0	; select bank0
  8984     0D92  1011               	bcf	17,0	;volatile
  8985     0D93                     i1l3762:
  8986                           
  8987                           ;mcc_generated_files/tmr1.c: 172:     TMR1_WriteTimer(timer1ReloadVal);
  8988     0D93  0867               	movf	_timer1ReloadVal+1,w	;volatile
  8989     0D94  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  8990     0D95  0866               	movf	_timer1ReloadVal,w	;volatile
  8991     0D96  00F0               	movwf	TMR1_WriteTimer@timerVal
  8992     0D97  318E  260B  318D   	fcall	_TMR1_WriteTimer
  8993                           
  8994                           ;mcc_generated_files/tmr1.c: 176:     TMR1_CallBack();
  8995     0D9A  318D  2584  318D   	fcall	_TMR1_CallBack
  8996     0D9D                     i1l291:
  8997     0D9D  0008               	return
  8998     0D9E                     __end_of_TMR1_ISR:
  8999                           
  9000                           	psect	text56
  9001     0E0B                     __ptext56:	
  9002 ;; *************** function _TMR1_WriteTimer *****************
  9003 ;; Defined at:
  9004 ;;		line 133 in file "mcc_generated_files/tmr1.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;  timerVal        2    0[COMMON] unsigned short 
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;		None
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  1    wreg      void 
  9011 ;; Registers used:
  9012 ;;		wreg, status,2
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9018 ;;      Params:         2       0       0       0       0       0       0       0
  9019 ;;      Locals:         0       0       0       0       0       0       0       0
  9020 ;;      Temps:          0       0       0       0       0       0       0       0
  9021 ;;      Totals:         2       0       0       0       0       0       0       0
  9022 ;;Total ram usage:        2 bytes
  9023 ;; Hardware stack levels used: 1
  9024 ;; This function calls:
  9025 ;;		Nothing
  9026 ;; This function is called by:
  9027 ;;		_TMR1_ISR
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031     0E0B                     _TMR1_WriteTimer:	
  9032                           ;psect for function _TMR1_WriteTimer
  9033                           
  9034     0E0B                     i1l3688:	
  9035                           ;incstack = 0
  9036                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  9037                           
  9038                           
  9039                           ;mcc_generated_files/tmr1.c: 133: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 134: {;mcc_generated_files/tmr1.c: 135:     if (T1CONbits.nT1SYNC == 1)
  9040     0E0B  0020               	movlb	0	; select bank0
  9041     0E0C  1D18               	btfss	24,2	;volatile
  9042     0E0D  2E0F               	goto	u135_21
  9043     0E0E  2E10               	goto	u135_20
  9044     0E0F                     u135_21:
  9045     0E0F  2E17               	goto	i1l3698
  9046     0E10                     u135_20:
  9047     0E10                     i1l3690:
  9048                           
  9049                           ;mcc_generated_files/tmr1.c: 136:     {;mcc_generated_files/tmr1.c: 138:         T1CONbi
      +                          ts.TMR1ON = 0;
  9050     0E10  1018               	bcf	24,0	;volatile
  9051     0E11                     i1l3692:
  9052                           
  9053                           ;mcc_generated_files/tmr1.c: 141:         TMR1H = (uint8_t)(timerVal >> 8);
  9054     0E11  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  9055     0E12  0097               	movwf	23	;volatile
  9056     0E13                     i1l3694:
  9057                           
  9058                           ;mcc_generated_files/tmr1.c: 142:         TMR1L = (uint8_t)timerVal;
  9059     0E13  0870               	movf	TMR1_WriteTimer@timerVal,w
  9060     0E14  0096               	movwf	22	;volatile
  9061     0E15                     i1l3696:
  9062                           
  9063                           ;mcc_generated_files/tmr1.c: 145:         T1CONbits.TMR1ON =1;
  9064     0E15  1418               	bsf	24,0	;volatile
  9065                           
  9066                           ;mcc_generated_files/tmr1.c: 146:     }
  9067     0E16  2E1B               	goto	i1l288
  9068     0E17                     i1l3698:
  9069                           
  9070                           ;mcc_generated_files/tmr1.c: 148:     {;mcc_generated_files/tmr1.c: 150:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
  9071     0E17  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  9072     0E18  0097               	movwf	23	;volatile
  9073     0E19                     i1l3700:
  9074                           
  9075                           ;mcc_generated_files/tmr1.c: 151:         TMR1L = (uint8_t)timerVal;
  9076     0E19  0870               	movf	TMR1_WriteTimer@timerVal,w
  9077     0E1A  0096               	movwf	22	;volatile
  9078     0E1B                     i1l288:
  9079     0E1B  0008               	return
  9080     0E1C                     __end_of_TMR1_WriteTimer:
  9081                           
  9082                           	psect	text57
  9083     0D84                     __ptext57:	
  9084 ;; *************** function _TMR1_CallBack *****************
  9085 ;; Defined at:
  9086 ;;		line 179 in file "mcc_generated_files/tmr1.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;		None
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;		None
  9091 ;; Return value:  Size  Location     Type
  9092 ;;                  1    wreg      void 
  9093 ;; Registers used:
  9094 ;;		wreg, status,2, status,0, pclath, cstack
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9100 ;;      Params:         0       0       0       0       0       0       0       0
  9101 ;;      Locals:         0       0       0       0       0       0       0       0
  9102 ;;      Temps:          0       0       0       0       0       0       0       0
  9103 ;;      Totals:         0       0       0       0       0       0       0       0
  9104 ;;Total ram usage:        0 bytes
  9105 ;; Hardware stack levels used: 1
  9106 ;; Hardware stack levels required when called: 1
  9107 ;; This function calls:
  9108 ;;		NULL
  9109 ;;		_TMR1_DefaultInterruptHandler
  9110 ;;		_rtcc_handle
  9111 ;; This function is called by:
  9112 ;;		_TMR1_ISR
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116     0D84                     _TMR1_CallBack:	
  9117                           ;psect for function _TMR1_CallBack
  9118                           
  9119     0D84                     i1l3702:	
  9120                           ;incstack = 0
  9121                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  9122                           
  9123                           
  9124                           ;mcc_generated_files/tmr1.c: 182:     if(TMR1_InterruptHandler)
  9125     0D84  0021               	movlb	1	; select bank1
  9126     0D85  086D               	movf	_TMR1_InterruptHandler^(0+128),w
  9127     0D86  046E               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  9128     0D87  1903               	btfsc	3,2
  9129     0D88  2D8A               	goto	u136_21
  9130     0D89  2D8B               	goto	u136_20
  9131     0D8A                     u136_21:
  9132     0D8A  2D90               	goto	i1l295
  9133     0D8B                     u136_20:
  9134     0D8B                     i1l3704:
  9135                           
  9136                           ;mcc_generated_files/tmr1.c: 183:     {;mcc_generated_files/tmr1.c: 184:         TMR1_In
      +                          terruptHandler();
  9137     0D8B  086E               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  9138     0D8C  008A               	movwf	10
  9139     0D8D  086D               	movf	_TMR1_InterruptHandler^(0+128),w
  9140     0D8E  000A               	callw
  9141     0D8F  318D               	pagesel	$
  9142     0D90                     i1l295:
  9143     0D90  0008               	return
  9144     0D91                     __end_of_TMR1_CallBack:
  9145                           
  9146                           	psect	text58
  9147     0C38                     __ptext58:	
  9148 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  9149 ;; Defined at:
  9150 ;;		line 192 in file "mcc_generated_files/tmr1.c"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;		None
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;		None
  9155 ;; Return value:  Size  Location     Type
  9156 ;;                  1    wreg      void 
  9157 ;; Registers used:
  9158 ;;		None
  9159 ;; Tracked objects:
  9160 ;;		On entry : 0/0
  9161 ;;		On exit  : 0/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9164 ;;      Params:         0       0       0       0       0       0       0       0
  9165 ;;      Locals:         0       0       0       0       0       0       0       0
  9166 ;;      Temps:          0       0       0       0       0       0       0       0
  9167 ;;      Totals:         0       0       0       0       0       0       0       0
  9168 ;;Total ram usage:        0 bytes
  9169 ;; Hardware stack levels used: 1
  9170 ;; This function calls:
  9171 ;;		Nothing
  9172 ;; This function is called by:
  9173 ;;		_TMR1_Initialize
  9174 ;;		_TMR1_CallBack
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178     0C38                     _TMR1_DefaultInterruptHandler:	
  9179                           ;psect for function _TMR1_DefaultInterruptHandler
  9180                           
  9181     0C38                     i1l301:	
  9182                           ;incstack = 0
  9183                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  9184                           
  9185     0C38  0008               	return
  9186     0C39                     __end_of_TMR1_DefaultInterruptHandler:
  9187                           
  9188                           	psect	text59
  9189     0D21                     __ptext59:	
  9190 ;; *************** function _rtcc_handle *****************
  9191 ;; Defined at:
  9192 ;;		line 11 in file "tick.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;		None
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;		None
  9197 ;; Return value:  Size  Location     Type
  9198 ;;                  1    wreg      void 
  9199 ;; Registers used:
  9200 ;;		wreg
  9201 ;; Tracked objects:
  9202 ;;		On entry : 0/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9206 ;;      Params:         0       0       0       0       0       0       0       0
  9207 ;;      Locals:         0       0       0       0       0       0       0       0
  9208 ;;      Temps:          0       0       0       0       0       0       0       0
  9209 ;;      Totals:         0       0       0       0       0       0       0       0
  9210 ;;Total ram usage:        0 bytes
  9211 ;; Hardware stack levels used: 1
  9212 ;; This function calls:
  9213 ;;		Nothing
  9214 ;; This function is called by:
  9215 ;;		_Tick_Init_SES
  9216 ;;		_TMR1_CallBack
  9217 ;; This function uses a non-reentrant model
  9218 ;;
  9219                           
  9220     0D21                     _rtcc_handle:	
  9221                           ;psect for function _rtcc_handle
  9222                           
  9223     0D21                     i1l3472:	
  9224                           ;incstack = 0
  9225                           ; Regs used in _rtcc_handle: [wreg]
  9226                           
  9227                           
  9228                           ;tick.c: 12:     device_time++;
  9229     0D21  3001               	movlw	1
  9230     0D22  0020               	movlb	0	; select bank0
  9231     0D23  07DE               	addwf	_device_time,f	;volatile
  9232     0D24  3000               	movlw	0
  9233     0D25  3DDF               	addwfc	_device_time+1,f	;volatile
  9234     0D26  3000               	movlw	0
  9235     0D27  3DE0               	addwfc	_device_time+2,f	;volatile
  9236     0D28  3000               	movlw	0
  9237     0D29  3DE1               	addwfc	_device_time+3,f	;volatile
  9238     0D2A                     i1l559:
  9239     0D2A  0008               	return
  9240     0D2B                     __end_of_rtcc_handle:
  9241                           
  9242                           	psect	text60
  9243     0C6F                     __ptext60:	
  9244 ;; *************** function _I2C_MasterIsr *****************
  9245 ;; Defined at:
  9246 ;;		line 318 in file "mcc_generated_files/i2c_master.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;		None
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;		None
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  1    wreg      void 
  9253 ;; Registers used:
  9254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9260 ;;      Params:         0       0       0       0       0       0       0       0
  9261 ;;      Locals:         0       0       0       0       0       0       0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0       0
  9263 ;;      Totals:         0       0       0       0       0       0       0       0
  9264 ;;Total ram usage:        0 bytes
  9265 ;; Hardware stack levels used: 1
  9266 ;; Hardware stack levels required when called: 5
  9267 ;; This function calls:
  9268 ;;		_I2C_MasterFsm
  9269 ;; This function is called by:
  9270 ;;		_I2C_Open
  9271 ;;		_INTERRUPT_InterruptManager
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275     0C6F                     _I2C_MasterIsr:	
  9276                           ;psect for function _I2C_MasterIsr
  9277                           
  9278     0C6F                     i1l3808:	
  9279                           ;incstack = 0
  9280                           ; Regs used in _I2C_MasterIsr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9281                           
  9282                           
  9283                           ;mcc_generated_files/i2c_master.c: 320:     I2C_MasterFsm();
  9284     0C6F  3187  27BC  318C   	fcall	_I2C_MasterFsm
  9285     0C72                     i1l724:
  9286     0C72  0008               	return
  9287     0C73                     __end_of_I2C_MasterIsr:
  9288                           
  9289                           	psect	text61
  9290     07BC                     __ptext61:	
  9291 ;; *************** function _I2C_MasterFsm *****************
  9292 ;; Defined at:
  9293 ;;		line 323 in file "mcc_generated_files/i2c_master.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      void 
  9300 ;; Registers used:
  9301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9307 ;;      Params:         0       0       0       0       0       0       0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0       0
  9309 ;;      Temps:          2       0       0       0       0       0       0       0
  9310 ;;      Totals:         2       0       0       0       0       0       0       0
  9311 ;;Total ram usage:        2 bytes
  9312 ;; Hardware stack levels used: 1
  9313 ;; Hardware stack levels required when called: 4
  9314 ;; This function calls:
  9315 ;;		_I2C_DO_ADDRESS_NACK
  9316 ;;		_I2C_DO_IDLE
  9317 ;;		_I2C_DO_RCEN
  9318 ;;		_I2C_DO_RESET
  9319 ;;		_I2C_DO_RX
  9320 ;;		_I2C_DO_RX_ACK
  9321 ;;		_I2C_DO_RX_NACK_RESTART
  9322 ;;		_I2C_DO_RX_NACK_STOP
  9323 ;;		_I2C_DO_SEND_ADR_READ
  9324 ;;		_I2C_DO_SEND_ADR_WRITE
  9325 ;;		_I2C_DO_SEND_RESTART
  9326 ;;		_I2C_DO_SEND_RESTART_READ
  9327 ;;		_I2C_DO_SEND_RESTART_WRITE
  9328 ;;		_I2C_DO_SEND_STOP
  9329 ;;		_I2C_DO_TX
  9330 ;;		_I2C_DO_TX_EMPTY
  9331 ;;		_I2C_MasterIsNack
  9332 ;;		i1_I2C_MasterClearIrq
  9333 ;; This function is called by:
  9334 ;;		_I2C_MasterIsr
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338     07BC                     _I2C_MasterFsm:	
  9339                           ;psect for function _I2C_MasterFsm
  9340                           
  9341     07BC                     i1l3748:	
  9342                           ;incstack = 0
  9343                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9344                           
  9345                           
  9346                           ;mcc_generated_files/i2c_master.c: 325:     I2C_MasterClearIrq();
  9347     07BC  318C  244A  3187   	fcall	i1_I2C_MasterClearIrq
  9348     07BF                     i1l3750:
  9349                           
  9350                           ;mcc_generated_files/i2c_master.c: 327:     if(I2C_Status.addressNackCheck && I2C_Master
      +                          IsNack())
  9351     07BF  0021               	movlb	1	; select bank1
  9352     07C0  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
  9353     07C1  2FC3               	goto	u139_21
  9354     07C2  2FC4               	goto	u139_20
  9355     07C3                     u139_21:
  9356     07C3  2FCF               	goto	i1l3756
  9357     07C4                     u139_20:
  9358     07C4                     i1l3752:
  9359     07C4  318C  24B7  3187   	fcall	_I2C_MasterIsNack
  9360     07C7  3A00               	xorlw	0
  9361     07C8  1903               	skipnz
  9362     07C9  2FCB               	goto	u140_21
  9363     07CA  2FCC               	goto	u140_20
  9364     07CB                     u140_21:
  9365     07CB  2FCF               	goto	i1l3756
  9366     07CC                     u140_20:
  9367     07CC                     i1l3754:
  9368                           
  9369                           ;mcc_generated_files/i2c_master.c: 328:     {;mcc_generated_files/i2c_master.c: 329:    
      +                               I2C_Status.state = I2C_ADDRESS_NACK;
  9370     07CC  300F               	movlw	15
  9371     07CD  0021               	movlb	1	; select bank1
  9372     07CE  00BA               	movwf	(_I2C_Status^(0+128)+26)
  9373     07CF                     i1l3756:
  9374                           
  9375                           ;mcc_generated_files/i2c_master.c: 331:     I2C_Status.state = i2c_fsmStateTable[I2C_Sta
      +                          tus.state]();
  9376     07CF  0021               	movlb	1	; select bank1
  9377     07D0  083A               	movf	(_I2C_Status^(0+128)+26),w
  9378     07D1  00F3               	movwf	??_I2C_MasterFsm
  9379     07D2  01F4               	clrf	??_I2C_MasterFsm+1
  9380     07D3  35F3               	lslf	??_I2C_MasterFsm,f
  9381     07D4  0DF4               	rlf	??_I2C_MasterFsm+1,f
  9382     07D5  3000               	movlw	low _i2c_fsmStateTable
  9383     07D6  0773               	addwf	??_I2C_MasterFsm,w
  9384     07D7  0084               	movwf	4
  9385     07D8  3010               	movlw	high _i2c_fsmStateTable
  9386     07D9  3D74               	addwfc	??_I2C_MasterFsm+1,w
  9387     07DA  3880               	iorlw	128
  9388     07DB  0085               	movwf	5
  9389     07DC  3F01               	moviw [1]fsr0
  9390     07DD  008A               	movwf	10
  9391     07DE  3F00               	moviw [0]fsr0
  9392     07DF  000A               	callw
  9393     07E0  3187               	pagesel	$
  9394     07E1  0021               	movlb	1	; select bank1
  9395     07E2  00BA               	movwf	(_I2C_Status^(0+128)+26)
  9396     07E3                     i1l728:
  9397     07E3  0008               	return
  9398     07E4                     __end_of_I2C_MasterFsm:
  9399                           
  9400                           	psect	text62
  9401     0C4A                     __ptext62:	
  9402 ;; *************** function i1_I2C_MasterClearIrq *****************
  9403 ;; Defined at:
  9404 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;		None
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;		None
  9409 ;; Return value:  Size  Location     Type
  9410 ;;                  1    wreg      void 
  9411 ;; Registers used:
  9412 ;;		None
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9418 ;;      Params:         0       0       0       0       0       0       0       0
  9419 ;;      Locals:         0       0       0       0       0       0       0       0
  9420 ;;      Temps:          0       0       0       0       0       0       0       0
  9421 ;;      Totals:         0       0       0       0       0       0       0       0
  9422 ;;Total ram usage:        0 bytes
  9423 ;; Hardware stack levels used: 1
  9424 ;; This function calls:
  9425 ;;		Nothing
  9426 ;; This function is called by:
  9427 ;;		_I2C_MasterFsm
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431     0C4A                     i1_I2C_MasterClearIrq:	
  9432                           ;psect for function i1_I2C_MasterClearIrq
  9433                           
  9434     0C4A                     i1l3634:	
  9435                           ;incstack = 0
  9436                           ; Regs used in i1_I2C_MasterClearIrq: []
  9437                           
  9438                           
  9439                           ;mcc_generated_files/i2c_master.c: 644:     PIR1bits.SSPIF = 0;
  9440     0C4A  0020               	movlb	0	; select bank0
  9441     0C4B  1191               	bcf	17,3	;volatile
  9442     0C4C                     i1l891:
  9443     0C4C  0008               	return
  9444     0C4D                     __end_ofi1_I2C_MasterClearIrq:
  9445                           
  9446                           	psect	text63
  9447     0FD8                     __ptext63:	
  9448 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  9449 ;; Defined at:
  9450 ;;		line 501 in file "mcc_generated_files/i2c_master.c"
  9451 ;; Parameters:    Size  Location     Type
  9452 ;;		None
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;		None
  9455 ;; Return value:  Size  Location     Type
  9456 ;;                  1    wreg      enum E3112
  9457 ;; Registers used:
  9458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9459 ;; Tracked objects:
  9460 ;;		On entry : 0/0
  9461 ;;		On exit  : 0/0
  9462 ;;		Unchanged: 0/0
  9463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9464 ;;      Params:         0       0       0       0       0       0       0       0
  9465 ;;      Locals:         0       0       0       0       0       0       0       0
  9466 ;;      Temps:          2       0       0       0       0       0       0       0
  9467 ;;      Totals:         2       0       0       0       0       0       0       0
  9468 ;;Total ram usage:        2 bytes
  9469 ;; Hardware stack levels used: 1
  9470 ;; Hardware stack levels required when called: 3
  9471 ;; This function calls:
  9472 ;;		NULL
  9473 ;;		_I2C_CallbackReturnReset
  9474 ;;		_I2C_CallbackReturnStop
  9475 ;;		_I2C_DO_SEND_RESTART
  9476 ;;		_I2C_DO_SEND_STOP
  9477 ;;		_rd1RegCompleteHandler
  9478 ;;		_rd2RegCompleteHandler
  9479 ;;		_rdBlkRegCompleteHandler
  9480 ;;		_wr1RegCompleteHandler
  9481 ;;		_wr2RegCompleteHandler
  9482 ;; This function is called by:
  9483 ;;		_I2C_MasterFsm
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487     0FD8                     _I2C_DO_ADDRESS_NACK:	
  9488                           ;psect for function _I2C_DO_ADDRESS_NACK
  9489                           
  9490     0FD8                     i1l3612:	
  9491                           ;incstack = 0
  9492                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9493                           
  9494                           
  9495                           ;mcc_generated_files/i2c_master.c: 503:     I2C_Status.addressNackCheck = 0;
  9496     0FD8  0021               	movlb	1	; select bank1
  9497     0FD9  103C               	bcf	(_I2C_Status^(0+128)+28),0
  9498     0FDA                     i1l3614:
  9499                           
  9500                           ;mcc_generated_files/i2c_master.c: 504:     I2C_Status.error = I2C_FAIL;
  9501     0FDA  3002               	movlw	2
  9502     0FDB  00BB               	movwf	(_I2C_Status^(0+128)+27)
  9503                           
  9504                           ;mcc_generated_files/i2c_master.c: 505:     switch(I2C_Status.callbackTable[I2C_ADDR_NAC
      +                          K](I2C_Status.callbackPayload[I2C_ADDR_NACK]))
  9505     0FDC  2FE5               	goto	i1l3626
  9506     0FDD                     i1l3616:
  9507                           
  9508                           ;mcc_generated_files/i2c_master.c: 509:             return I2C_DO_SEND_RESTART();
  9509     0FDD  318C  248F  318F   	fcall	_I2C_DO_SEND_RESTART
  9510     0FE0  2FFF               	goto	i1l819
  9511     0FE1                     i1l3620:
  9512                           
  9513                           ;mcc_generated_files/i2c_master.c: 511:             return I2C_DO_SEND_STOP();
  9514     0FE1  318C  2494  318F   	fcall	_I2C_DO_SEND_STOP
  9515     0FE4  2FFF               	goto	i1l819
  9516     0FE5                     i1l3626:
  9517     0FE5  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
  9518     0FE6  00F7               	movwf	rdBlkRegCompleteHandler@ptr
  9519     0FE7  3004               	movlw	4
  9520     0FE8  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  9521     0FE9  0086               	movwf	6
  9522     0FEA  0187               	clrf	7
  9523     0FEB  3F41               	moviw [1]fsr1
  9524     0FEC  008A               	movwf	10
  9525     0FED  3F40               	moviw [0]fsr1
  9526     0FEE  000A               	callw
  9527     0FEF  318F               	pagesel	$
  9528     0FF0  00F0               	movwf	??_I2C_DO_ADDRESS_NACK
  9529     0FF1  01F1               	clrf	??_I2C_DO_ADDRESS_NACK+1
  9530                           
  9531                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9532                           ; Switch size 1, requested type "simple"
  9533                           ; Number of cases is 1, Range of values is 0 to 0
  9534                           ; switch strategies available:
  9535                           ; Name         Instructions Cycles
  9536                           ; simple_byte            4     3 (average)
  9537                           ; direct_byte            8     6 (fixed)
  9538                           ; jumptable            260     6 (fixed)
  9539                           ;	Chosen strategy is simple_byte
  9540     0FF2  0871               	movf	??_I2C_DO_ADDRESS_NACK+1,w
  9541     0FF3  3A00               	xorlw	0	; case 0
  9542     0FF4  1903               	skipnz
  9543     0FF5  2FF7               	goto	i1l4926
  9544     0FF6  2FE1               	goto	i1l3620
  9545     0FF7                     i1l4926:
  9546                           
  9547                           ; Switch size 1, requested type "simple"
  9548                           ; Number of cases is 2, Range of values is 2 to 3
  9549                           ; switch strategies available:
  9550                           ; Name         Instructions Cycles
  9551                           ; simple_byte            7     4 (average)
  9552                           ; direct_byte           13     9 (fixed)
  9553                           ; jumptable            263     9 (fixed)
  9554                           ;	Chosen strategy is simple_byte
  9555     0FF7  0870               	movf	??_I2C_DO_ADDRESS_NACK,w
  9556     0FF8  3A02               	xorlw	2	; case 2
  9557     0FF9  1903               	skipnz
  9558     0FFA  2FDD               	goto	i1l3616
  9559     0FFB  3A01               	xorlw	1	; case 3
  9560     0FFC  1903               	skipnz
  9561     0FFD  2FDD               	goto	i1l3616
  9562     0FFE  2FE1               	goto	i1l3620
  9563     0FFF                     i1l819:
  9564     0FFF  0008               	return
  9565     1000                     __end_of_I2C_DO_ADDRESS_NACK:
  9566                           
  9567                           	psect	text64
  9568     0CA8                     __ptext64:	
  9569 ;; *************** function _I2C_DO_RESET *****************
  9570 ;; Defined at:
  9571 ;;		line 495 in file "mcc_generated_files/i2c_master.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;		None
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;		None
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  1    wreg      enum E3112
  9578 ;; Registers used:
  9579 ;;		wreg, status,2
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9585 ;;      Params:         0       0       0       0       0       0       0       0
  9586 ;;      Locals:         0       0       0       0       0       0       0       0
  9587 ;;      Temps:          0       0       0       0       0       0       0       0
  9588 ;;      Totals:         0       0       0       0       0       0       0       0
  9589 ;;Total ram usage:        0 bytes
  9590 ;; Hardware stack levels used: 1
  9591 ;; This function calls:
  9592 ;;		Nothing
  9593 ;; This function is called by:
  9594 ;;		_I2C_MasterFsm
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598     0CA8                     _I2C_DO_RESET:	
  9599                           ;psect for function _I2C_DO_RESET
  9600                           
  9601     0CA8                     i1l3604:	
  9602                           ;incstack = 0
  9603                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  9604                           
  9605                           
  9606                           ;mcc_generated_files/i2c_master.c: 497:     I2C_Status.busy = 0;
  9607     0CA8  0021               	movlb	1	; select bank1
  9608     0CA9  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  9609     0CAA                     i1l3606:
  9610                           
  9611                           ;mcc_generated_files/i2c_master.c: 498:     I2C_Status.error = I2C_NOERR;
  9612     0CAA  01BB               	clrf	(_I2C_Status^(0+128)+27)
  9613     0CAB                     i1l3608:
  9614                           
  9615                           ;mcc_generated_files/i2c_master.c: 499:     return I2C_RESET;
  9616     0CAB  300E               	movlw	14
  9617     0CAC                     i1l813:
  9618     0CAC  0008               	return
  9619     0CAD                     __end_of_I2C_DO_RESET:
  9620                           
  9621                           	psect	text65
  9622     0CA3                     __ptext65:	
  9623 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  9624 ;; Defined at:
  9625 ;;		line 489 in file "mcc_generated_files/i2c_master.c"
  9626 ;; Parameters:    Size  Location     Type
  9627 ;;		None
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;		None
  9630 ;; Return value:  Size  Location     Type
  9631 ;;                  1    wreg      enum E3112
  9632 ;; Registers used:
  9633 ;;		wreg, status,2, status,0, pclath, cstack
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9639 ;;      Params:         0       0       0       0       0       0       0       0
  9640 ;;      Locals:         0       0       0       0       0       0       0       0
  9641 ;;      Temps:          0       0       0       0       0       0       0       0
  9642 ;;      Totals:         0       0       0       0       0       0       0       0
  9643 ;;Total ram usage:        0 bytes
  9644 ;; Hardware stack levels used: 1
  9645 ;; Hardware stack levels required when called: 1
  9646 ;; This function calls:
  9647 ;;		_I2C_MasterSendNack
  9648 ;; This function is called by:
  9649 ;;		_I2C_DO_RX
  9650 ;;		_I2C_MasterFsm
  9651 ;; This function uses a non-reentrant model
  9652 ;;
  9653                           
  9654     0CA3                     _I2C_DO_RX_NACK_RESTART:	
  9655                           ;psect for function _I2C_DO_RX_NACK_RESTART
  9656                           
  9657     0CA3                     i1l3346:	
  9658                           ;incstack = 0
  9659                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9660                           
  9661                           
  9662                           ;mcc_generated_files/i2c_master.c: 491:     I2C_MasterSendNack();
  9663     0CA3  318C  2467  318C   	fcall	_I2C_MasterSendNack
  9664     0CA6                     i1l3348:
  9665                           
  9666                           ;mcc_generated_files/i2c_master.c: 492:     return I2C_SEND_RESTART;
  9667     0CA6  3009               	movlw	9
  9668     0CA7                     i1l810:
  9669     0CA7  0008               	return
  9670     0CA8                     __end_of_I2C_DO_RX_NACK_RESTART:
  9671                           
  9672                           	psect	text66
  9673     0C9E                     __ptext66:	
  9674 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  9675 ;; Defined at:
  9676 ;;		line 483 in file "mcc_generated_files/i2c_master.c"
  9677 ;; Parameters:    Size  Location     Type
  9678 ;;		None
  9679 ;; Auto vars:     Size  Location     Type
  9680 ;;		None
  9681 ;; Return value:  Size  Location     Type
  9682 ;;                  1    wreg      enum E3112
  9683 ;; Registers used:
  9684 ;;		wreg, status,2, status,0, pclath, cstack
  9685 ;; Tracked objects:
  9686 ;;		On entry : 0/0
  9687 ;;		On exit  : 0/0
  9688 ;;		Unchanged: 0/0
  9689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9690 ;;      Params:         0       0       0       0       0       0       0       0
  9691 ;;      Locals:         0       0       0       0       0       0       0       0
  9692 ;;      Temps:          0       0       0       0       0       0       0       0
  9693 ;;      Totals:         0       0       0       0       0       0       0       0
  9694 ;;Total ram usage:        0 bytes
  9695 ;; Hardware stack levels used: 1
  9696 ;; Hardware stack levels required when called: 1
  9697 ;; This function calls:
  9698 ;;		_I2C_MasterSendNack
  9699 ;; This function is called by:
  9700 ;;		_I2C_DO_RX
  9701 ;;		_I2C_MasterFsm
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705     0C9E                     _I2C_DO_RX_NACK_STOP:	
  9706                           ;psect for function _I2C_DO_RX_NACK_STOP
  9707                           
  9708     0C9E                     i1l3352:	
  9709                           ;incstack = 0
  9710                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  9711                           
  9712                           
  9713                           ;mcc_generated_files/i2c_master.c: 485:     I2C_MasterSendNack();
  9714     0C9E  318C  2467  318C   	fcall	_I2C_MasterSendNack
  9715     0CA1                     i1l3354:
  9716                           
  9717                           ;mcc_generated_files/i2c_master.c: 486:     return I2C_SEND_STOP;
  9718     0CA1  300A               	movlw	10
  9719     0CA2                     i1l807:
  9720     0CA2  0008               	return
  9721     0CA3                     __end_of_I2C_DO_RX_NACK_STOP:
  9722                           
  9723                           	psect	text67
  9724     0C99                     __ptext67:	
  9725 ;; *************** function _I2C_DO_RX_ACK *****************
  9726 ;; Defined at:
  9727 ;;		line 476 in file "mcc_generated_files/i2c_master.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;		None
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;		None
  9732 ;; Return value:  Size  Location     Type
  9733 ;;                  1    wreg      enum E3112
  9734 ;; Registers used:
  9735 ;;		wreg, status,2, status,0, pclath, cstack
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9741 ;;      Params:         0       0       0       0       0       0       0       0
  9742 ;;      Locals:         0       0       0       0       0       0       0       0
  9743 ;;      Temps:          0       0       0       0       0       0       0       0
  9744 ;;      Totals:         0       0       0       0       0       0       0       0
  9745 ;;Total ram usage:        0 bytes
  9746 ;; Hardware stack levels used: 1
  9747 ;; Hardware stack levels required when called: 1
  9748 ;; This function calls:
  9749 ;;		_I2C_MasterSendAck
  9750 ;; This function is called by:
  9751 ;;		_I2C_MasterFsm
  9752 ;; This function uses a non-reentrant model
  9753 ;;
  9754                           
  9755     0C99                     _I2C_DO_RX_ACK:	
  9756                           ;psect for function _I2C_DO_RX_ACK
  9757                           
  9758     0C99                     i1l3598:	
  9759                           ;incstack = 0
  9760                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  9761                           
  9762                           
  9763                           ;mcc_generated_files/i2c_master.c: 478:     I2C_MasterSendAck();
  9764     0C99  318C  246B  318C   	fcall	_I2C_MasterSendAck
  9765     0C9C                     i1l3600:
  9766                           
  9767                           ;mcc_generated_files/i2c_master.c: 479:     return I2C_RCEN;
  9768     0C9C  3005               	movlw	5
  9769     0C9D                     i1l804:
  9770     0C9D  0008               	return
  9771     0C9E                     __end_of_I2C_DO_RX_ACK:
  9772                           
  9773                           	psect	text68
  9774     0C94                     __ptext68:	
  9775 ;; *************** function _I2C_DO_SEND_STOP *****************
  9776 ;; Defined at:
  9777 ;;		line 470 in file "mcc_generated_files/i2c_master.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;		None
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  1    wreg      enum E3112
  9784 ;; Registers used:
  9785 ;;		wreg, status,2, status,0, pclath, cstack
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9791 ;;      Params:         0       0       0       0       0       0       0       0
  9792 ;;      Locals:         0       0       0       0       0       0       0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0       0
  9794 ;;      Totals:         0       0       0       0       0       0       0       0
  9795 ;;Total ram usage:        0 bytes
  9796 ;; Hardware stack levels used: 1
  9797 ;; Hardware stack levels required when called: 1
  9798 ;; This function calls:
  9799 ;;		_I2C_MasterStop
  9800 ;; This function is called by:
  9801 ;;		_I2C_DO_TX
  9802 ;;		_I2C_DO_TX_EMPTY
  9803 ;;		_I2C_DO_ADDRESS_NACK
  9804 ;;		_I2C_MasterFsm
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808     0C94                     _I2C_DO_SEND_STOP:	
  9809                           ;psect for function _I2C_DO_SEND_STOP
  9810                           
  9811     0C94                     i1l3334:	
  9812                           ;incstack = 0
  9813                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  9814                           
  9815                           
  9816                           ;mcc_generated_files/i2c_master.c: 472:     I2C_MasterStop();
  9817     0C94  318C  243E  318C   	fcall	_I2C_MasterStop
  9818     0C97                     i1l3336:
  9819                           
  9820                           ;mcc_generated_files/i2c_master.c: 473:     return I2C_IDLE;
  9821     0C97  3000               	movlw	0
  9822     0C98                     i1l801:
  9823     0C98  0008               	return
  9824     0C99                     __end_of_I2C_DO_SEND_STOP:
  9825                           
  9826                           	psect	text69
  9827     0C8F                     __ptext69:	
  9828 ;; *************** function _I2C_DO_SEND_RESTART *****************
  9829 ;; Defined at:
  9830 ;;		line 464 in file "mcc_generated_files/i2c_master.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;		None
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;		None
  9835 ;; Return value:  Size  Location     Type
  9836 ;;                  1    wreg      enum E3112
  9837 ;; Registers used:
  9838 ;;		wreg, status,2, status,0, pclath, cstack
  9839 ;; Tracked objects:
  9840 ;;		On entry : 0/0
  9841 ;;		On exit  : 0/0
  9842 ;;		Unchanged: 0/0
  9843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9844 ;;      Params:         0       0       0       0       0       0       0       0
  9845 ;;      Locals:         0       0       0       0       0       0       0       0
  9846 ;;      Temps:          0       0       0       0       0       0       0       0
  9847 ;;      Totals:         0       0       0       0       0       0       0       0
  9848 ;;Total ram usage:        0 bytes
  9849 ;; Hardware stack levels used: 1
  9850 ;; Hardware stack levels required when called: 1
  9851 ;; This function calls:
  9852 ;;		_I2C_MasterEnableRestart
  9853 ;; This function is called by:
  9854 ;;		_I2C_DO_TX_EMPTY
  9855 ;;		_I2C_DO_ADDRESS_NACK
  9856 ;;		_I2C_MasterFsm
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860     0C8F                     _I2C_DO_SEND_RESTART:	
  9861                           ;psect for function _I2C_DO_SEND_RESTART
  9862                           
  9863     0C8F                     i1l3360:	
  9864                           ;incstack = 0
  9865                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9866                           
  9867                           
  9868                           ;mcc_generated_files/i2c_master.c: 466:     I2C_MasterEnableRestart();
  9869     0C8F  318C  243B  318C   	fcall	_I2C_MasterEnableRestart
  9870     0C92                     i1l3362:
  9871                           
  9872                           ;mcc_generated_files/i2c_master.c: 467:     return I2C_SEND_ADR_READ;
  9873     0C92  3001               	movlw	1
  9874     0C93                     i1l798:
  9875     0C93  0008               	return
  9876     0C94                     __end_of_I2C_DO_SEND_RESTART:
  9877                           
  9878                           	psect	text70
  9879     0C8A                     __ptext70:	
  9880 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  9881 ;; Defined at:
  9882 ;;		line 457 in file "mcc_generated_files/i2c_master.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;		None
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;		None
  9887 ;; Return value:  Size  Location     Type
  9888 ;;                  1    wreg      enum E3112
  9889 ;; Registers used:
  9890 ;;		wreg, status,2, status,0, pclath, cstack
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9896 ;;      Params:         0       0       0       0       0       0       0       0
  9897 ;;      Locals:         0       0       0       0       0       0       0       0
  9898 ;;      Temps:          0       0       0       0       0       0       0       0
  9899 ;;      Totals:         0       0       0       0       0       0       0       0
  9900 ;;Total ram usage:        0 bytes
  9901 ;; Hardware stack levels used: 1
  9902 ;; Hardware stack levels required when called: 1
  9903 ;; This function calls:
  9904 ;;		_I2C_MasterEnableRestart
  9905 ;; This function is called by:
  9906 ;;		_I2C_DO_TX
  9907 ;;		_I2C_MasterFsm
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911     0C8A                     _I2C_DO_SEND_RESTART_WRITE:	
  9912                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  9913                           
  9914     0C8A                     i1l3328:	
  9915                           ;incstack = 0
  9916                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9917                           
  9918                           
  9919                           ;mcc_generated_files/i2c_master.c: 459:     I2C_MasterEnableRestart();
  9920     0C8A  318C  243B  318C   	fcall	_I2C_MasterEnableRestart
  9921     0C8D                     i1l3330:
  9922                           
  9923                           ;mcc_generated_files/i2c_master.c: 460:     return I2C_SEND_ADR_WRITE;
  9924     0C8D  3002               	movlw	2
  9925     0C8E                     i1l795:
  9926     0C8E  0008               	return
  9927     0C8F                     __end_of_I2C_DO_SEND_RESTART_WRITE:
  9928                           
  9929                           	psect	text71
  9930     0C85                     __ptext71:	
  9931 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  9932 ;; Defined at:
  9933 ;;		line 451 in file "mcc_generated_files/i2c_master.c"
  9934 ;; Parameters:    Size  Location     Type
  9935 ;;		None
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;		None
  9938 ;; Return value:  Size  Location     Type
  9939 ;;                  1    wreg      enum E3112
  9940 ;; Registers used:
  9941 ;;		wreg, status,2, status,0, pclath, cstack
  9942 ;; Tracked objects:
  9943 ;;		On entry : 0/0
  9944 ;;		On exit  : 0/0
  9945 ;;		Unchanged: 0/0
  9946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9947 ;;      Params:         0       0       0       0       0       0       0       0
  9948 ;;      Locals:         0       0       0       0       0       0       0       0
  9949 ;;      Temps:          0       0       0       0       0       0       0       0
  9950 ;;      Totals:         0       0       0       0       0       0       0       0
  9951 ;;Total ram usage:        0 bytes
  9952 ;; Hardware stack levels used: 1
  9953 ;; Hardware stack levels required when called: 1
  9954 ;; This function calls:
  9955 ;;		_I2C_MasterEnableRestart
  9956 ;; This function is called by:
  9957 ;;		_I2C_DO_TX
  9958 ;;		_I2C_MasterFsm
  9959 ;; This function uses a non-reentrant model
  9960 ;;
  9961                           
  9962     0C85                     _I2C_DO_SEND_RESTART_READ:	
  9963                           ;psect for function _I2C_DO_SEND_RESTART_READ
  9964                           
  9965     0C85                     i1l3322:	
  9966                           ;incstack = 0
  9967                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  9968                           
  9969                           
  9970                           ;mcc_generated_files/i2c_master.c: 453:     I2C_MasterEnableRestart();
  9971     0C85  318C  243B  318C   	fcall	_I2C_MasterEnableRestart
  9972     0C88                     i1l3324:
  9973                           
  9974                           ;mcc_generated_files/i2c_master.c: 454:     return I2C_SEND_ADR_READ;
  9975     0C88  3001               	movlw	1
  9976     0C89                     i1l792:
  9977     0C89  0008               	return
  9978     0C8A                     __end_of_I2C_DO_SEND_RESTART_READ:
  9979                           
  9980                           	psect	text72
  9981     0CC3                     __ptext72:	
  9982 ;; *************** function _I2C_DO_RCEN *****************
  9983 ;; Defined at:
  9984 ;;		line 404 in file "mcc_generated_files/i2c_master.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;		None
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;		None
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  1    wreg      enum E3112
  9991 ;; Registers used:
  9992 ;;		wreg, status,2, status,0, pclath, cstack
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9998 ;;      Params:         0       0       0       0       0       0       0       0
  9999 ;;      Locals:         0       0       0       0       0       0       0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0
 10001 ;;      Totals:         0       0       0       0       0       0       0       0
 10002 ;;Total ram usage:        0 bytes
 10003 ;; Hardware stack levels used: 1
 10004 ;; Hardware stack levels required when called: 1
 10005 ;; This function calls:
 10006 ;;		_I2C_MasterStartRx
 10007 ;; This function is called by:
 10008 ;;		_I2C_MasterFsm
 10009 ;; This function uses a non-reentrant model
 10010 ;;
 10011                           
 10012     0CC3                     _I2C_DO_RCEN:	
 10013                           ;psect for function _I2C_DO_RCEN
 10014                           
 10015     0CC3                     i1l3564:	
 10016                           ;incstack = 0
 10017                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 10018                           
 10019                           
 10020                           ;mcc_generated_files/i2c_master.c: 406:     I2C_Status.addressNackCheck = 0;
 10021     0CC3  0021               	movlb	1	; select bank1
 10022     0CC4  103C               	bcf	(_I2C_Status^(0+128)+28),0
 10023     0CC5                     i1l3566:
 10024                           
 10025                           ;mcc_generated_files/i2c_master.c: 407:     I2C_MasterStartRx();
 10026     0CC5  318C  2441  318C   	fcall	_I2C_MasterStartRx
 10027     0CC8                     i1l3568:
 10028                           
 10029                           ;mcc_generated_files/i2c_master.c: 408:     return I2C_RX;
 10030     0CC8  3004               	movlw	4
 10031     0CC9                     i1l768:
 10032     0CC9  0008               	return
 10033     0CCA                     __end_of_I2C_DO_RCEN:
 10034                           
 10035                           	psect	text73
 10036     0622                     __ptext73:	
 10037 ;; *************** function _I2C_DO_RX *****************
 10038 ;; Defined at:
 10039 ;;		line 380 in file "mcc_generated_files/i2c_master.c"
 10040 ;; Parameters:    Size  Location     Type
 10041 ;;		None
 10042 ;; Auto vars:     Size  Location     Type
 10043 ;;		None
 10044 ;; Return value:  Size  Location     Type
 10045 ;;                  1    wreg      enum E3112
 10046 ;; Registers used:
 10047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10048 ;; Tracked objects:
 10049 ;;		On entry : 0/0
 10050 ;;		On exit  : 0/0
 10051 ;;		Unchanged: 0/0
 10052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10053 ;;      Params:         0       0       0       0       0       0       0       0
 10054 ;;      Locals:         0       0       0       0       0       0       0       0
 10055 ;;      Temps:          2       0       0       0       0       0       0       0
 10056 ;;      Totals:         2       0       0       0       0       0       0       0
 10057 ;;Total ram usage:        2 bytes
 10058 ;; Hardware stack levels used: 1
 10059 ;; Hardware stack levels required when called: 3
 10060 ;; This function calls:
 10061 ;;		NULL
 10062 ;;		_I2C_CallbackReturnReset
 10063 ;;		_I2C_CallbackReturnStop
 10064 ;;		_I2C_DO_RX_NACK_RESTART
 10065 ;;		_I2C_DO_RX_NACK_STOP
 10066 ;;		_I2C_MasterGetRxData
 10067 ;;		_I2C_MasterSendAck
 10068 ;;		_rd1RegCompleteHandler
 10069 ;;		_rd2RegCompleteHandler
 10070 ;;		_rdBlkRegCompleteHandler
 10071 ;;		_wr1RegCompleteHandler
 10072 ;;		_wr2RegCompleteHandler
 10073 ;; This function is called by:
 10074 ;;		_I2C_MasterFsm
 10075 ;; This function uses a non-reentrant model
 10076 ;;
 10077                           
 10078     0622                     _I2C_DO_RX:	
 10079                           ;psect for function _I2C_DO_RX
 10080                           
 10081     0622                     i1l3532:	
 10082                           ;incstack = 0
 10083                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10084                           
 10085                           
 10086                           ;mcc_generated_files/i2c_master.c: 382:     *I2C_Status.data_ptr++ = I2C_MasterGetRxData
      +                          ();
 10087     0622  0021               	movlb	1	; select bank1
 10088     0623  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
 10089     0624  0086               	movwf	6
 10090     0625  0187               	clrf	7
 10091     0626  318C  2444  3186   	fcall	_I2C_MasterGetRxData
 10092     0629  0081               	movwf	1
 10093     062A                     i1l3534:
 10094     062A  3001               	movlw	1
 10095     062B  00F0               	movwf	??_I2C_DO_RX
 10096     062C  0870               	movf	??_I2C_DO_RX,w
 10097     062D  0021               	movlb	1	; select bank1
 10098     062E  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
 10099     062F                     i1l3536:
 10100                           
 10101                           ;mcc_generated_files/i2c_master.c: 383:     if(--I2C_Status.data_length)
 10102     062F  3001               	movlw	1
 10103     0630  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 10104     0631  3000               	movlw	0
 10105     0632  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 10106     0633  0838               	movf	(_I2C_Status^(0+128)+24),w
 10107     0634  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 10108     0635  1903               	btfsc	3,2
 10109     0636  2E38               	goto	u134_21
 10110     0637  2E39               	goto	u134_20
 10111     0638                     u134_21:
 10112     0638  2E3E               	goto	i1l756
 10113     0639                     u134_20:
 10114     0639                     i1l3538:
 10115                           
 10116                           ;mcc_generated_files/i2c_master.c: 384:     {;mcc_generated_files/i2c_master.c: 385:    
      +                               I2C_MasterSendAck();
 10117     0639  318C  246B  3186   	fcall	_I2C_MasterSendAck
 10118     063C                     i1l3540:
 10119                           
 10120                           ;mcc_generated_files/i2c_master.c: 386:         return I2C_RCEN;
 10121     063C  3005               	movlw	5
 10122     063D  2E64               	goto	i1l757
 10123     063E                     i1l756:	
 10124                           ;mcc_generated_files/i2c_master.c: 388:     else
 10125                           
 10126                           
 10127                           ;mcc_generated_files/i2c_master.c: 389:     {;mcc_generated_files/i2c_master.c: 390:    
      +                               I2C_Status.bufferFree = 1;
 10128     063E  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 10129                           
 10130                           ;mcc_generated_files/i2c_master.c: 391:         switch(I2C_Status.callbackTable[I2C_DATA
      +                          _COMPLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
 10131     063F  2E48               	goto	i1l3556
 10132     0640                     i1l3546:
 10133                           
 10134                           ;mcc_generated_files/i2c_master.c: 395:                 return I2C_DO_RX_NACK_RESTART();
 10135     0640  318C  24A3  3186   	fcall	_I2C_DO_RX_NACK_RESTART
 10136     0643  2E64               	goto	i1l757
 10137     0644                     i1l3550:
 10138                           
 10139                           ;mcc_generated_files/i2c_master.c: 399:                 return I2C_DO_RX_NACK_STOP();
 10140     0644  318C  249E  3186   	fcall	_I2C_DO_RX_NACK_STOP
 10141     0647  2E64               	goto	i1l757
 10142     0648                     i1l3556:
 10143     0648  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 10144     0649  00F7               	movwf	rdBlkRegCompleteHandler@ptr
 10145     064A  0821               	movf	(_I2C_Status+1)^(0+128),w
 10146     064B  008A               	movwf	10
 10147     064C  0820               	movf	_I2C_Status^(0+128),w
 10148     064D  000A               	callw
 10149     064E  3186               	pagesel	$
 10150     064F  00F0               	movwf	??_I2C_DO_RX
 10151     0650  01F1               	clrf	??_I2C_DO_RX+1
 10152                           
 10153                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10154                           ; Switch size 1, requested type "simple"
 10155                           ; Number of cases is 1, Range of values is 0 to 0
 10156                           ; switch strategies available:
 10157                           ; Name         Instructions Cycles
 10158                           ; simple_byte            4     3 (average)
 10159                           ; direct_byte            8     6 (fixed)
 10160                           ; jumptable            260     6 (fixed)
 10161                           ;	Chosen strategy is simple_byte
 10162     0651  0871               	movf	??_I2C_DO_RX+1,w
 10163     0652  3A00               	xorlw	0	; case 0
 10164     0653  1903               	skipnz
 10165     0654  2E56               	goto	i1l4928
 10166     0655  2E44               	goto	i1l3550
 10167     0656                     i1l4928:
 10168                           
 10169                           ; Switch size 1, requested type "simple"
 10170                           ; Number of cases is 4, Range of values is 1 to 4
 10171                           ; switch strategies available:
 10172                           ; Name         Instructions Cycles
 10173                           ; simple_byte           13     7 (average)
 10174                           ; direct_byte           17     9 (fixed)
 10175                           ; jumptable            263     9 (fixed)
 10176                           ;	Chosen strategy is simple_byte
 10177     0656  0870               	movf	??_I2C_DO_RX,w
 10178     0657  3A01               	xorlw	1	; case 1
 10179     0658  1903               	skipnz
 10180     0659  2E44               	goto	i1l3550
 10181     065A  3A03               	xorlw	3	; case 2
 10182     065B  1903               	skipnz
 10183     065C  2E40               	goto	i1l3546
 10184     065D  3A01               	xorlw	1	; case 3
 10185     065E  1903               	skipnz
 10186     065F  2E40               	goto	i1l3546
 10187     0660  3A07               	xorlw	7	; case 4
 10188     0661  1903               	skipnz
 10189     0662  2E44               	goto	i1l3550
 10190     0663  2E44               	goto	i1l3550
 10191     0664                     i1l757:
 10192     0664  0008               	return
 10193     0665                     __end_of_I2C_DO_RX:
 10194                           
 10195                           	psect	text74
 10196     04F3                     __ptext74:	
 10197 ;; *************** function _I2C_DO_TX *****************
 10198 ;; Defined at:
 10199 ;;		line 356 in file "mcc_generated_files/i2c_master.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;		None
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;		None
 10204 ;; Return value:  Size  Location     Type
 10205 ;;                  1    wreg      enum E3112
 10206 ;; Registers used:
 10207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10208 ;; Tracked objects:
 10209 ;;		On entry : 0/0
 10210 ;;		On exit  : 0/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10213 ;;      Params:         0       0       0       0       0       0       0       0
 10214 ;;      Locals:         0       0       0       0       0       0       0       0
 10215 ;;      Temps:          2       0       0       0       0       0       0       0
 10216 ;;      Totals:         2       0       0       0       0       0       0       0
 10217 ;;Total ram usage:        2 bytes
 10218 ;; Hardware stack levels used: 1
 10219 ;; Hardware stack levels required when called: 3
 10220 ;; This function calls:
 10221 ;;		NULL
 10222 ;;		_I2C_CallbackReturnReset
 10223 ;;		_I2C_CallbackReturnStop
 10224 ;;		_I2C_DO_SEND_RESTART_READ
 10225 ;;		_I2C_DO_SEND_RESTART_WRITE
 10226 ;;		_I2C_DO_SEND_STOP
 10227 ;;		_I2C_MasterIsNack
 10228 ;;		_I2C_MasterSendTxData
 10229 ;;		_rd1RegCompleteHandler
 10230 ;;		_rd2RegCompleteHandler
 10231 ;;		_rdBlkRegCompleteHandler
 10232 ;;		_wr1RegCompleteHandler
 10233 ;;		_wr2RegCompleteHandler
 10234 ;; This function is called by:
 10235 ;;		_I2C_MasterFsm
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239     04F3                     _I2C_DO_TX:	
 10240                           ;psect for function _I2C_DO_TX
 10241                           
 10242     04F3                     i1l3498:	
 10243                           ;incstack = 0
 10244                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10245                           
 10246                           
 10247                           ;mcc_generated_files/i2c_master.c: 358:     if(I2C_MasterIsNack())
 10248     04F3  318C  24B7  3184   	fcall	_I2C_MasterIsNack
 10249     04F6  3A00               	xorlw	0
 10250     04F7  1903               	skipnz
 10251     04F8  2CFA               	goto	u132_21
 10252     04F9  2CFB               	goto	u132_20
 10253     04FA                     u132_21:
 10254     04FA  2D29               	goto	i1l740
 10255     04FB                     u132_20:
 10256     04FB  2D08               	goto	i1l3516
 10257     04FC                     i1l3502:
 10258                           
 10259                           ;mcc_generated_files/i2c_master.c: 363:                 return I2C_DO_SEND_RESTART_READ(
      +                          );
 10260     04FC  318C  2485  3184   	fcall	_I2C_DO_SEND_RESTART_READ
 10261     04FF  2D45               	goto	i1l743
 10262     0500                     i1l3506:
 10263                           
 10264                           ;mcc_generated_files/i2c_master.c: 365:                   return I2C_DO_SEND_RESTART_WRI
      +                          TE();
 10265     0500  318C  248A  3184   	fcall	_I2C_DO_SEND_RESTART_WRITE
 10266     0503  2D45               	goto	i1l743
 10267     0504                     i1l3510:
 10268                           
 10269                           ;mcc_generated_files/i2c_master.c: 369:                 return I2C_DO_SEND_STOP();
 10270     0504  318C  2494  3184   	fcall	_I2C_DO_SEND_STOP
 10271     0507  2D45               	goto	i1l743
 10272     0508                     i1l3516:
 10273     0508  0021               	movlb	1	; select bank1
 10274     0509  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
 10275     050A  00F7               	movwf	rdBlkRegCompleteHandler@ptr
 10276     050B  3006               	movlw	6
 10277     050C  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 10278     050D  0086               	movwf	6
 10279     050E  0187               	clrf	7
 10280     050F  3F41               	moviw [1]fsr1
 10281     0510  008A               	movwf	10
 10282     0511  3F40               	moviw [0]fsr1
 10283     0512  000A               	callw
 10284     0513  3184               	pagesel	$
 10285     0514  00F1               	movwf	??_I2C_DO_TX
 10286     0515  01F2               	clrf	??_I2C_DO_TX+1
 10287                           
 10288                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10289                           ; Switch size 1, requested type "simple"
 10290                           ; Number of cases is 1, Range of values is 0 to 0
 10291                           ; switch strategies available:
 10292                           ; Name         Instructions Cycles
 10293                           ; simple_byte            4     3 (average)
 10294                           ; direct_byte            8     6 (fixed)
 10295                           ; jumptable            260     6 (fixed)
 10296                           ;	Chosen strategy is simple_byte
 10297     0516  0872               	movf	??_I2C_DO_TX+1,w
 10298     0517  3A00               	xorlw	0	; case 0
 10299     0518  1903               	skipnz
 10300     0519  2D1B               	goto	i1l4930
 10301     051A  2D04               	goto	i1l3510
 10302     051B                     i1l4930:
 10303                           
 10304                           ; Switch size 1, requested type "simple"
 10305                           ; Number of cases is 4, Range of values is 1 to 4
 10306                           ; switch strategies available:
 10307                           ; Name         Instructions Cycles
 10308                           ; simple_byte           13     7 (average)
 10309                           ; direct_byte           17     9 (fixed)
 10310                           ; jumptable            263     9 (fixed)
 10311                           ;	Chosen strategy is simple_byte
 10312     051B  0871               	movf	??_I2C_DO_TX,w
 10313     051C  3A01               	xorlw	1	; case 1
 10314     051D  1903               	skipnz
 10315     051E  2D04               	goto	i1l3510
 10316     051F  3A03               	xorlw	3	; case 2
 10317     0520  1903               	skipnz
 10318     0521  2CFC               	goto	i1l3502
 10319     0522  3A01               	xorlw	1	; case 3
 10320     0523  1903               	skipnz
 10321     0524  2D00               	goto	i1l3506
 10322     0525  3A07               	xorlw	7	; case 4
 10323     0526  1903               	skipnz
 10324     0527  2D04               	goto	i1l3510
 10325     0528  2D04               	goto	i1l3510
 10326     0529                     i1l740:	
 10327                           ;mcc_generated_files/i2c_master.c: 372:     else
 10328                           
 10329                           
 10330                           ;mcc_generated_files/i2c_master.c: 373:     {;mcc_generated_files/i2c_master.c: 374:    
      +                               I2C_Status.addressNackCheck = 0;
 10331     0529  0021               	movlb	1	; select bank1
 10332     052A  103C               	bcf	(_I2C_Status^(0+128)+28),0
 10333     052B                     i1l3518:
 10334                           
 10335                           ;mcc_generated_files/i2c_master.c: 375:         I2C_MasterSendTxData(*I2C_Status.data_pt
      +                          r++);
 10336     052B  3017               	movlw	23
 10337     052C  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 10338     052D  0086               	movwf	6
 10339     052E  0187               	clrf	7
 10340     052F  3F40               	moviw [0]fsr1
 10341     0530  0084               	movwf	4
 10342     0531  0185               	clrf	5
 10343     0532  0A81               	incf	1,f
 10344     0533  0800               	movf	0,w
 10345     0534  318C  247B  3184   	fcall	_I2C_MasterSendTxData
 10346     0537                     i1l3520:
 10347                           
 10348                           ;mcc_generated_files/i2c_master.c: 376:         return (--I2C_Status.data_length)?I2C_TX
      +                          :I2C_TX_EMPTY;
 10349     0537  3001               	movlw	1
 10350     0538  0021               	movlb	1	; select bank1
 10351     0539  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 10352     053A  3000               	movlw	0
 10353     053B  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 10354     053C  0838               	movf	(_I2C_Status^(0+128)+24),w
 10355     053D  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 10356     053E  1D03               	btfss	3,2
 10357     053F  2D41               	goto	u133_21
 10358     0540  2D42               	goto	u133_20
 10359     0541                     u133_21:
 10360     0541  2D44               	goto	i1l3524
 10361     0542                     u133_20:
 10362     0542                     i1l3522:
 10363     0542  3006               	movlw	6
 10364     0543  2D45               	goto	i1l743
 10365     0544                     i1l3524:
 10366     0544  3003               	movlw	3
 10367     0545                     i1l743:
 10368     0545  0008               	return
 10369     0546                     __end_of_I2C_DO_TX:
 10370                           
 10371                           	psect	text75
 10372     0CD1                     __ptext75:	
 10373 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
 10374 ;; Defined at:
 10375 ;;		line 349 in file "mcc_generated_files/i2c_master.c"
 10376 ;; Parameters:    Size  Location     Type
 10377 ;;		None
 10378 ;; Auto vars:     Size  Location     Type
 10379 ;;		None
 10380 ;; Return value:  Size  Location     Type
 10381 ;;                  1    wreg      enum E3112
 10382 ;; Registers used:
 10383 ;;		wreg, status,2, status,0, pclath, cstack
 10384 ;; Tracked objects:
 10385 ;;		On entry : 0/0
 10386 ;;		On exit  : 0/0
 10387 ;;		Unchanged: 0/0
 10388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10389 ;;      Params:         0       0       0       0       0       0       0       0
 10390 ;;      Locals:         0       0       0       0       0       0       0       0
 10391 ;;      Temps:          0       0       0       0       0       0       0       0
 10392 ;;      Totals:         0       0       0       0       0       0       0       0
 10393 ;;Total ram usage:        0 bytes
 10394 ;; Hardware stack levels used: 1
 10395 ;; Hardware stack levels required when called: 1
 10396 ;; This function calls:
 10397 ;;		_I2C_MasterSendTxData
 10398 ;; This function is called by:
 10399 ;;		_I2C_MasterFsm
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403     0CD1                     _I2C_DO_SEND_ADR_WRITE:	
 10404                           ;psect for function _I2C_DO_SEND_ADR_WRITE
 10405                           
 10406     0CD1                     i1l3490:	
 10407                           ;incstack = 0
 10408                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 10409                           
 10410                           
 10411                           ;mcc_generated_files/i2c_master.c: 351:     I2C_Status.addressNackCheck = 1;
 10412     0CD1  0021               	movlb	1	; select bank1
 10413     0CD2  143C               	bsf	(_I2C_Status^(0+128)+28),0
 10414     0CD3                     i1l3492:
 10415                           
 10416                           ;mcc_generated_files/i2c_master.c: 352:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1));
 10417     0CD3  3536               	lslf	(_I2C_Status^(0+128)+22),w
 10418     0CD4  318C  247B  318C   	fcall	_I2C_MasterSendTxData
 10419     0CD7                     i1l3494:
 10420                           
 10421                           ;mcc_generated_files/i2c_master.c: 353:     return I2C_TX;
 10422     0CD7  3003               	movlw	3
 10423     0CD8                     i1l737:
 10424     0CD8  0008               	return
 10425     0CD9                     __end_of_I2C_DO_SEND_ADR_WRITE:
 10426                           
 10427                           	psect	text76
 10428     0CD9                     __ptext76:	
 10429 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
 10430 ;; Defined at:
 10431 ;;		line 342 in file "mcc_generated_files/i2c_master.c"
 10432 ;; Parameters:    Size  Location     Type
 10433 ;;		None
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;		None
 10436 ;; Return value:  Size  Location     Type
 10437 ;;                  1    wreg      enum E3112
 10438 ;; Registers used:
 10439 ;;		wreg, status,2, status,0, pclath, cstack
 10440 ;; Tracked objects:
 10441 ;;		On entry : 0/0
 10442 ;;		On exit  : 0/0
 10443 ;;		Unchanged: 0/0
 10444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10445 ;;      Params:         0       0       0       0       0       0       0       0
 10446 ;;      Locals:         0       0       0       0       0       0       0       0
 10447 ;;      Temps:          0       0       0       0       0       0       0       0
 10448 ;;      Totals:         0       0       0       0       0       0       0       0
 10449 ;;Total ram usage:        0 bytes
 10450 ;; Hardware stack levels used: 1
 10451 ;; Hardware stack levels required when called: 1
 10452 ;; This function calls:
 10453 ;;		_I2C_MasterSendTxData
 10454 ;; This function is called by:
 10455 ;;		_I2C_MasterFsm
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459     0CD9                     _I2C_DO_SEND_ADR_READ:	
 10460                           ;psect for function _I2C_DO_SEND_ADR_READ
 10461                           
 10462     0CD9                     i1l3482:	
 10463                           ;incstack = 0
 10464                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 10465                           
 10466                           
 10467                           ;mcc_generated_files/i2c_master.c: 344:     I2C_Status.addressNackCheck = 1;
 10468     0CD9  0021               	movlb	1	; select bank1
 10469     0CDA  143C               	bsf	(_I2C_Status^(0+128)+28),0
 10470     0CDB                     i1l3484:
 10471                           
 10472                           ;mcc_generated_files/i2c_master.c: 345:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1 | 1));
 10473     0CDB  1403               	setc
 10474     0CDC  0D36               	rlf	(_I2C_Status^(0+128)+22),w
 10475     0CDD  318C  247B  318C   	fcall	_I2C_MasterSendTxData
 10476     0CE0                     i1l3486:
 10477                           
 10478                           ;mcc_generated_files/i2c_master.c: 346:     return I2C_RCEN;
 10479     0CE0  3005               	movlw	5
 10480     0CE1                     i1l734:
 10481     0CE1  0008               	return
 10482     0CE2                     __end_of_I2C_DO_SEND_ADR_READ:
 10483                           
 10484                           	psect	text77
 10485     0C80                     __ptext77:	
 10486 ;; *************** function _I2C_DO_IDLE *****************
 10487 ;; Defined at:
 10488 ;;		line 335 in file "mcc_generated_files/i2c_master.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;		None
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  1    wreg      enum E3112
 10495 ;; Registers used:
 10496 ;;		wreg, status,2
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10502 ;;      Params:         0       0       0       0       0       0       0       0
 10503 ;;      Locals:         0       0       0       0       0       0       0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0
 10505 ;;      Totals:         0       0       0       0       0       0       0       0
 10506 ;;Total ram usage:        0 bytes
 10507 ;; Hardware stack levels used: 1
 10508 ;; This function calls:
 10509 ;;		Nothing
 10510 ;; This function is called by:
 10511 ;;		_I2C_MasterFsm
 10512 ;; This function uses a non-reentrant model
 10513 ;;
 10514                           
 10515     0C80                     _I2C_DO_IDLE:	
 10516                           ;psect for function _I2C_DO_IDLE
 10517                           
 10518     0C80                     i1l3474:	
 10519                           ;incstack = 0
 10520                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
 10521                           
 10522                           
 10523                           ;mcc_generated_files/i2c_master.c: 337:     I2C_Status.busy = 0;
 10524     0C80  0021               	movlb	1	; select bank1
 10525     0C81  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 10526     0C82                     i1l3476:
 10527                           
 10528                           ;mcc_generated_files/i2c_master.c: 338:     I2C_Status.error = I2C_NOERR;
 10529     0C82  01BB               	clrf	(_I2C_Status^(0+128)+27)
 10530     0C83                     i1l3478:
 10531                           
 10532                           ;mcc_generated_files/i2c_master.c: 339:     return I2C_RESET;
 10533     0C83  300E               	movlw	14
 10534     0C84                     i1l731:
 10535     0C84  0008               	return
 10536     0C85                     __end_of_I2C_DO_IDLE:
 10537                           
 10538                           	psect	text78
 10539     0710                     __ptext78:	
 10540 ;; *************** function _I2C_DO_TX_EMPTY *****************
 10541 ;; Defined at:
 10542 ;;		line 411 in file "mcc_generated_files/i2c_master.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;		None
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;		None
 10547 ;; Return value:  Size  Location     Type
 10548 ;;                  1    wreg      enum E3112
 10549 ;; Registers used:
 10550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10551 ;; Tracked objects:
 10552 ;;		On entry : 0/0
 10553 ;;		On exit  : 0/0
 10554 ;;		Unchanged: 0/0
 10555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10556 ;;      Params:         0       0       0       0       0       0       0       0
 10557 ;;      Locals:         0       0       0       0       0       0       0       0
 10558 ;;      Temps:          2       0       0       0       0       0       0       0
 10559 ;;      Totals:         2       0       0       0       0       0       0       0
 10560 ;;Total ram usage:        2 bytes
 10561 ;; Hardware stack levels used: 1
 10562 ;; Hardware stack levels required when called: 3
 10563 ;; This function calls:
 10564 ;;		NULL
 10565 ;;		_I2C_CallbackReturnReset
 10566 ;;		_I2C_CallbackReturnStop
 10567 ;;		_I2C_DO_SEND_RESTART
 10568 ;;		_I2C_DO_SEND_STOP
 10569 ;;		_I2C_MasterSetIrq
 10570 ;;		_rd1RegCompleteHandler
 10571 ;;		_rd2RegCompleteHandler
 10572 ;;		_rdBlkRegCompleteHandler
 10573 ;;		_wr1RegCompleteHandler
 10574 ;;		_wr2RegCompleteHandler
 10575 ;; This function is called by:
 10576 ;;		_I2C_MasterFsm
 10577 ;; This function uses a non-reentrant model
 10578 ;;
 10579                           
 10580     0710                     _I2C_DO_TX_EMPTY:	
 10581                           ;psect for function _I2C_DO_TX_EMPTY
 10582                           
 10583     0710                     i1l3572:	
 10584                           ;incstack = 0
 10585                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10586                           
 10587                           
 10588                           ;mcc_generated_files/i2c_master.c: 413:     I2C_Status.bufferFree = 1;
 10589     0710  0021               	movlb	1	; select bank1
 10590     0711  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 10591                           
 10592                           ;mcc_generated_files/i2c_master.c: 414:     switch(I2C_Status.callbackTable[I2C_DATA_COM
      +                          PLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
 10593     0712  2F20               	goto	i1l3590
 10594     0713                     i1l3574:
 10595                           
 10596                           ;mcc_generated_files/i2c_master.c: 418:             return I2C_DO_SEND_RESTART();
 10597     0713  318C  248F  3187   	fcall	_I2C_DO_SEND_RESTART
 10598     0716  2F3C               	goto	i1l774
 10599     0717                     i1l3578:
 10600                           
 10601                           ;mcc_generated_files/i2c_master.c: 420:             I2C_MasterSetIrq();
 10602     0717  318C  2447  3187   	fcall	_I2C_MasterSetIrq
 10603     071A                     i1l3580:
 10604                           
 10605                           ;mcc_generated_files/i2c_master.c: 421:             return I2C_TX;
 10606     071A  3003               	movlw	3
 10607     071B  2F3C               	goto	i1l774
 10608     071C                     i1l3584:
 10609                           
 10610                           ;mcc_generated_files/i2c_master.c: 424:             return I2C_DO_SEND_STOP();
 10611     071C  318C  2494  3187   	fcall	_I2C_DO_SEND_STOP
 10612     071F  2F3C               	goto	i1l774
 10613     0720                     i1l3590:
 10614     0720  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 10615     0721  00F7               	movwf	rdBlkRegCompleteHandler@ptr
 10616     0722  0821               	movf	(_I2C_Status+1)^(0+128),w
 10617     0723  008A               	movwf	10
 10618     0724  0820               	movf	_I2C_Status^(0+128),w
 10619     0725  000A               	callw
 10620     0726  3187               	pagesel	$
 10621     0727  00F0               	movwf	??_I2C_DO_TX_EMPTY
 10622     0728  01F1               	clrf	??_I2C_DO_TX_EMPTY+1
 10623                           
 10624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10625                           ; Switch size 1, requested type "simple"
 10626                           ; Number of cases is 1, Range of values is 0 to 0
 10627                           ; switch strategies available:
 10628                           ; Name         Instructions Cycles
 10629                           ; simple_byte            4     3 (average)
 10630                           ; direct_byte            8     6 (fixed)
 10631                           ; jumptable            260     6 (fixed)
 10632                           ;	Chosen strategy is simple_byte
 10633     0729  0871               	movf	??_I2C_DO_TX_EMPTY+1,w
 10634     072A  3A00               	xorlw	0	; case 0
 10635     072B  1903               	skipnz
 10636     072C  2F2E               	goto	i1l4932
 10637     072D  2F1C               	goto	i1l3584
 10638     072E                     i1l4932:
 10639                           
 10640                           ; Switch size 1, requested type "simple"
 10641                           ; Number of cases is 4, Range of values is 1 to 4
 10642                           ; switch strategies available:
 10643                           ; Name         Instructions Cycles
 10644                           ; simple_byte           13     7 (average)
 10645                           ; direct_byte           17     9 (fixed)
 10646                           ; jumptable            263     9 (fixed)
 10647                           ;	Chosen strategy is simple_byte
 10648     072E  0870               	movf	??_I2C_DO_TX_EMPTY,w
 10649     072F  3A01               	xorlw	1	; case 1
 10650     0730  1903               	skipnz
 10651     0731  2F1C               	goto	i1l3584
 10652     0732  3A03               	xorlw	3	; case 2
 10653     0733  1903               	skipnz
 10654     0734  2F13               	goto	i1l3574
 10655     0735  3A01               	xorlw	1	; case 3
 10656     0736  1903               	skipnz
 10657     0737  2F13               	goto	i1l3574
 10658     0738  3A07               	xorlw	7	; case 4
 10659     0739  1903               	skipnz
 10660     073A  2F17               	goto	i1l3578
 10661     073B  2F1C               	goto	i1l3584
 10662     073C                     i1l774:
 10663     073C  0008               	return
 10664     073D                     __end_of_I2C_DO_TX_EMPTY:
 10665                           
 10666                           	psect	text79
 10667     0C47                     __ptext79:	
 10668 ;; *************** function _I2C_MasterSetIrq *****************
 10669 ;; Defined at:
 10670 ;;		line 647 in file "mcc_generated_files/i2c_master.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;		None
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;		None
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  1    wreg      void 
 10677 ;; Registers used:
 10678 ;;		None
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10684 ;;      Params:         0       0       0       0       0       0       0       0
 10685 ;;      Locals:         0       0       0       0       0       0       0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0       0
 10687 ;;      Totals:         0       0       0       0       0       0       0       0
 10688 ;;Total ram usage:        0 bytes
 10689 ;; Hardware stack levels used: 1
 10690 ;; This function calls:
 10691 ;;		Nothing
 10692 ;; This function is called by:
 10693 ;;		_I2C_DO_TX_EMPTY
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697     0C47                     _I2C_MasterSetIrq:	
 10698                           ;psect for function _I2C_MasterSetIrq
 10699                           
 10700     0C47                     i1l3366:	
 10701                           ;incstack = 0
 10702                           ; Regs used in _I2C_MasterSetIrq: []
 10703                           
 10704                           
 10705                           ;mcc_generated_files/i2c_master.c: 649:     PIR1bits.SSPIF = 1;
 10706     0C47  0020               	movlb	0	; select bank0
 10707     0C48  1591               	bsf	17,3	;volatile
 10708     0C49                     i1l894:
 10709     0C49  0008               	return
 10710     0C4A                     __end_of_I2C_MasterSetIrq:
 10711                           
 10712                           	psect	text80
 10713     0CB7                     __ptext80:	
 10714 ;; *************** function _I2C_MasterIsNack *****************
 10715 ;; Defined at:
 10716 ;;		line 599 in file "mcc_generated_files/i2c_master.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;		None
 10719 ;; Auto vars:     Size  Location     Type
 10720 ;;		None
 10721 ;; Return value:  Size  Location     Type
 10722 ;;                  1    wreg      _Bool 
 10723 ;; Registers used:
 10724 ;;		wreg, status,2, status,0
 10725 ;; Tracked objects:
 10726 ;;		On entry : 0/0
 10727 ;;		On exit  : 0/0
 10728 ;;		Unchanged: 0/0
 10729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10730 ;;      Params:         0       0       0       0       0       0       0       0
 10731 ;;      Locals:         0       0       0       0       0       0       0       0
 10732 ;;      Temps:          0       0       0       0       0       0       0       0
 10733 ;;      Totals:         0       0       0       0       0       0       0       0
 10734 ;;Total ram usage:        0 bytes
 10735 ;; Hardware stack levels used: 1
 10736 ;; This function calls:
 10737 ;;		Nothing
 10738 ;; This function is called by:
 10739 ;;		_I2C_MasterFsm
 10740 ;;		_I2C_DO_TX
 10741 ;; This function uses a non-reentrant model
 10742 ;;
 10743                           
 10744     0CB7                     _I2C_MasterIsNack:	
 10745                           ;psect for function _I2C_MasterIsNack
 10746                           
 10747     0CB7                     i1l3316:	
 10748                           ;incstack = 0
 10749                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
 10750                           
 10751                           
 10752                           ;mcc_generated_files/i2c_master.c: 601:     return SSPCON2bits.ACKSTAT;
 10753     0CB7  0024               	movlb	4	; select bank4
 10754     0CB8  0E16               	swapf	22,w	;volatile
 10755     0CB9  0C89               	rrf	9,f
 10756     0CBA  0C89               	rrf	9,f
 10757     0CBB  3901               	andlw	1
 10758     0CBC                     i1l867:
 10759     0CBC  0008               	return
 10760     0CBD                     __end_of_I2C_MasterIsNack:
 10761                           
 10762                           	psect	text81
 10763     0C7B                     __ptext81:	
 10764 ;; *************** function _I2C_MasterSendTxData *****************
 10765 ;; Defined at:
 10766 ;;		line 569 in file "mcc_generated_files/i2c_master.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;  data            1    wreg     unsigned char 
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  data            1    0[COMMON] unsigned char 
 10771 ;; Return value:  Size  Location     Type
 10772 ;;                  1    wreg      void 
 10773 ;; Registers used:
 10774 ;;		wreg
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10780 ;;      Params:         0       0       0       0       0       0       0       0
 10781 ;;      Locals:         1       0       0       0       0       0       0       0
 10782 ;;      Temps:          0       0       0       0       0       0       0       0
 10783 ;;      Totals:         1       0       0       0       0       0       0       0
 10784 ;;Total ram usage:        1 bytes
 10785 ;; Hardware stack levels used: 1
 10786 ;; This function calls:
 10787 ;;		Nothing
 10788 ;; This function is called by:
 10789 ;;		_I2C_DO_SEND_ADR_READ
 10790 ;;		_I2C_DO_SEND_ADR_WRITE
 10791 ;;		_I2C_DO_TX
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795     0C7B                     _I2C_MasterSendTxData:	
 10796                           ;psect for function _I2C_MasterSendTxData
 10797                           
 10798                           
 10799                           ;incstack = 0
 10800                           ; Regs used in _I2C_MasterSendTxData: [wreg]
 10801                           ;I2C_MasterSendTxData@data stored from wreg
 10802     0C7B  00F0               	movwf	I2C_MasterSendTxData@data
 10803     0C7C                     i1l3320:
 10804                           
 10805                           ;mcc_generated_files/i2c_master.c: 569: static __attribute__((inline)) void I2C_MasterSe
      +                          ndTxData(uint8_t data);mcc_generated_files/i2c_master.c: 570: {;mcc_generated_files/i2c_
      +                          master.c: 571:     SSPBUF = data;
 10806     0C7C  0870               	movf	I2C_MasterSendTxData@data,w
 10807     0C7D  0024               	movlb	4	; select bank4
 10808     0C7E  0091               	movwf	17	;volatile
 10809     0C7F                     i1l849:
 10810     0C7F  0008               	return
 10811     0C80                     __end_of_I2C_MasterSendTxData:
 10812                           
 10813                           	psect	text82
 10814     0C6B                     __ptext82:	
 10815 ;; *************** function _I2C_MasterSendAck *****************
 10816 ;; Defined at:
 10817 ;;		line 604 in file "mcc_generated_files/i2c_master.c"
 10818 ;; Parameters:    Size  Location     Type
 10819 ;;		None
 10820 ;; Auto vars:     Size  Location     Type
 10821 ;;		None
 10822 ;; Return value:  Size  Location     Type
 10823 ;;                  1    wreg      void 
 10824 ;; Registers used:
 10825 ;;		None
 10826 ;; Tracked objects:
 10827 ;;		On entry : 0/0
 10828 ;;		On exit  : 0/0
 10829 ;;		Unchanged: 0/0
 10830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10831 ;;      Params:         0       0       0       0       0       0       0       0
 10832 ;;      Locals:         0       0       0       0       0       0       0       0
 10833 ;;      Temps:          0       0       0       0       0       0       0       0
 10834 ;;      Totals:         0       0       0       0       0       0       0       0
 10835 ;;Total ram usage:        0 bytes
 10836 ;; Hardware stack levels used: 1
 10837 ;; This function calls:
 10838 ;;		Nothing
 10839 ;; This function is called by:
 10840 ;;		_I2C_DO_RX
 10841 ;;		_I2C_DO_RX_ACK
 10842 ;; This function uses a non-reentrant model
 10843 ;;
 10844                           
 10845     0C6B                     _I2C_MasterSendAck:	
 10846                           ;psect for function _I2C_MasterSendAck
 10847                           
 10848     0C6B                     i1l3344:	
 10849                           ;incstack = 0
 10850                           ; Regs used in _I2C_MasterSendAck: []
 10851                           
 10852                           
 10853                           ;mcc_generated_files/i2c_master.c: 606:     SSPCON2bits.ACKDT = 0;
 10854     0C6B  0024               	movlb	4	; select bank4
 10855     0C6C  1296               	bcf	22,5	;volatile
 10856                           
 10857                           ;mcc_generated_files/i2c_master.c: 607:     SSPCON2bits.ACKEN = 1;
 10858     0C6D  1616               	bsf	22,4	;volatile
 10859     0C6E                     i1l870:
 10860     0C6E  0008               	return
 10861     0C6F                     __end_of_I2C_MasterSendAck:
 10862                           
 10863                           	psect	text83
 10864     0C44                     __ptext83:	
 10865 ;; *************** function _I2C_MasterGetRxData *****************
 10866 ;; Defined at:
 10867 ;;		line 564 in file "mcc_generated_files/i2c_master.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;		None
 10870 ;; Auto vars:     Size  Location     Type
 10871 ;;		None
 10872 ;; Return value:  Size  Location     Type
 10873 ;;                  1    wreg      unsigned char 
 10874 ;; Registers used:
 10875 ;;		wreg
 10876 ;; Tracked objects:
 10877 ;;		On entry : 0/0
 10878 ;;		On exit  : 0/0
 10879 ;;		Unchanged: 0/0
 10880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10881 ;;      Params:         0       0       0       0       0       0       0       0
 10882 ;;      Locals:         0       0       0       0       0       0       0       0
 10883 ;;      Temps:          0       0       0       0       0       0       0       0
 10884 ;;      Totals:         0       0       0       0       0       0       0       0
 10885 ;;Total ram usage:        0 bytes
 10886 ;; Hardware stack levels used: 1
 10887 ;; This function calls:
 10888 ;;		Nothing
 10889 ;; This function is called by:
 10890 ;;		_I2C_DO_RX
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894     0C44                     _I2C_MasterGetRxData:	
 10895                           ;psect for function _I2C_MasterGetRxData
 10896                           
 10897     0C44                     i1l3340:	
 10898                           ;incstack = 0
 10899                           ; Regs used in _I2C_MasterGetRxData: [wreg]
 10900                           
 10901                           
 10902                           ;mcc_generated_files/i2c_master.c: 566:     return SSPBUF;
 10903     0C44  0024               	movlb	4	; select bank4
 10904     0C45  0811               	movf	17,w	;volatile
 10905     0C46                     i1l846:
 10906     0C46  0008               	return
 10907     0C47                     __end_of_I2C_MasterGetRxData:
 10908                           
 10909                           	psect	text84
 10910     0C67                     __ptext84:	
 10911 ;; *************** function _I2C_MasterSendNack *****************
 10912 ;; Defined at:
 10913 ;;		line 610 in file "mcc_generated_files/i2c_master.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;		None
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;		None
 10918 ;; Return value:  Size  Location     Type
 10919 ;;                  1    wreg      void 
 10920 ;; Registers used:
 10921 ;;		None
 10922 ;; Tracked objects:
 10923 ;;		On entry : 0/0
 10924 ;;		On exit  : 0/0
 10925 ;;		Unchanged: 0/0
 10926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10927 ;;      Params:         0       0       0       0       0       0       0       0
 10928 ;;      Locals:         0       0       0       0       0       0       0       0
 10929 ;;      Temps:          0       0       0       0       0       0       0       0
 10930 ;;      Totals:         0       0       0       0       0       0       0       0
 10931 ;;Total ram usage:        0 bytes
 10932 ;; Hardware stack levels used: 1
 10933 ;; This function calls:
 10934 ;;		Nothing
 10935 ;; This function is called by:
 10936 ;;		_I2C_DO_RX_NACK_STOP
 10937 ;;		_I2C_DO_RX_NACK_RESTART
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941     0C67                     _I2C_MasterSendNack:	
 10942                           ;psect for function _I2C_MasterSendNack
 10943                           
 10944     0C67                     i1l3220:	
 10945                           ;incstack = 0
 10946                           ; Regs used in _I2C_MasterSendNack: []
 10947                           
 10948                           
 10949                           ;mcc_generated_files/i2c_master.c: 612:     SSPCON2bits.ACKDT = 1;
 10950     0C67  0024               	movlb	4	; select bank4
 10951     0C68  1696               	bsf	22,5	;volatile
 10952                           
 10953                           ;mcc_generated_files/i2c_master.c: 613:     SSPCON2bits.ACKEN = 1;
 10954     0C69  1616               	bsf	22,4	;volatile
 10955     0C6A                     i1l873:
 10956     0C6A  0008               	return
 10957     0C6B                     __end_of_I2C_MasterSendNack:
 10958                           
 10959                           	psect	text85
 10960     0C41                     __ptext85:	
 10961 ;; *************** function _I2C_MasterStartRx *****************
 10962 ;; Defined at:
 10963 ;;		line 584 in file "mcc_generated_files/i2c_master.c"
 10964 ;; Parameters:    Size  Location     Type
 10965 ;;		None
 10966 ;; Auto vars:     Size  Location     Type
 10967 ;;		None
 10968 ;; Return value:  Size  Location     Type
 10969 ;;                  1    wreg      void 
 10970 ;; Registers used:
 10971 ;;		None
 10972 ;; Tracked objects:
 10973 ;;		On entry : 0/0
 10974 ;;		On exit  : 0/0
 10975 ;;		Unchanged: 0/0
 10976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10977 ;;      Params:         0       0       0       0       0       0       0       0
 10978 ;;      Locals:         0       0       0       0       0       0       0       0
 10979 ;;      Temps:          0       0       0       0       0       0       0       0
 10980 ;;      Totals:         0       0       0       0       0       0       0       0
 10981 ;;Total ram usage:        0 bytes
 10982 ;; Hardware stack levels used: 1
 10983 ;; This function calls:
 10984 ;;		Nothing
 10985 ;; This function is called by:
 10986 ;;		_I2C_DO_RCEN
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990     0C41                     _I2C_MasterStartRx:	
 10991                           ;psect for function _I2C_MasterStartRx
 10992                           
 10993     0C41                     i1l3358:	
 10994                           ;incstack = 0
 10995                           ; Regs used in _I2C_MasterStartRx: []
 10996                           
 10997                           
 10998                           ;mcc_generated_files/i2c_master.c: 586:     SSPCON2bits.RCEN = 1;
 10999     0C41  0024               	movlb	4	; select bank4
 11000     0C42  1596               	bsf	22,3	;volatile
 11001     0C43                     i1l858:
 11002     0C43  0008               	return
 11003     0C44                     __end_of_I2C_MasterStartRx:
 11004                           
 11005                           	psect	text86
 11006     0E7F                     __ptext86:	
 11007 ;; *************** function _rdBlkRegCompleteHandler *****************
 11008 ;; Defined at:
 11009 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;  ptr             1    7[COMMON] PTR void 
 11012 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11013 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
 11014 ;; Auto vars:     Size  Location     Type
 11015 ;;		None
 11016 ;; Return value:  Size  Location     Type
 11017 ;;                  1    wreg      enum E363
 11018 ;; Registers used:
 11019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11020 ;; Tracked objects:
 11021 ;;		On entry : 0/0
 11022 ;;		On exit  : 0/0
 11023 ;;		Unchanged: 0/0
 11024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11025 ;;      Params:         1       0       0       0       0       0       0       0
 11026 ;;      Locals:         0       0       0       0       0       0       0       0
 11027 ;;      Temps:          0       0       0       0       0       0       0       0
 11028 ;;      Totals:         1       0       0       0       0       0       0       0
 11029 ;;Total ram usage:        1 bytes
 11030 ;; Hardware stack levels used: 1
 11031 ;; Hardware stack levels required when called: 2
 11032 ;; This function calls:
 11033 ;;		_I2C_SetDataCompleteCallback
 11034 ;;		i1_I2C_SetBuffer
 11035 ;; This function is called by:
 11036 ;;		_I2C_ReadDataBlock
 11037 ;;		_I2C_DO_TX
 11038 ;;		_I2C_DO_RX
 11039 ;;		_I2C_DO_TX_EMPTY
 11040 ;;		_I2C_DO_ADDRESS_NACK
 11041 ;;		_I2C_DO_RX_EMPTY
 11042 ;; This function uses a non-reentrant model
 11043 ;;
 11044                           
 11045     0E7F                     _rdBlkRegCompleteHandler:	
 11046                           ;psect for function _rdBlkRegCompleteHandler
 11047                           
 11048     0E7F                     i1l3408:	
 11049                           ;incstack = 0
 11050                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11051                           
 11052                           
 11053                           ;mcc_generated_files/examples/i2c_master_example.c: 170: static i2c_operations_t rdBlkRe
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 171: {;mc
      +                          c_generated_files/examples/i2c_master_example.c: 172:     I2C_SetBuffer(((i2c_buffer_t *
      +                          )ptr)->data,((i2c_buffer_t*)ptr)->len);
 11054     0E7F  0877               	movf	rdBlkRegCompleteHandler@ptr,w
 11055     0E80  0086               	movwf	6
 11056     0E81  0187               	clrf	7
 11057     0E82  3F40               	moviw [0]fsr1
 11058     0E83  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11059     0E84  3F41               	moviw [1]fsr1
 11060     0E85  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11061     0E86  0877               	movf	rdBlkRegCompleteHandler@ptr,w
 11062     0E87  3E02               	addlw	2
 11063     0E88  0086               	movwf	6
 11064     0E89  0187               	clrf	7
 11065     0E8A  0801               	movf	1,w
 11066     0E8B  318D  25AB  318E   	fcall	i1_I2C_SetBuffer
 11067                           
 11068                           ;mcc_generated_files/examples/i2c_master_example.c: 173:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11069     0E8E  3000               	movlw	0
 11070     0E8F  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11071     0E90  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11072     0E91  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11073     0E92  318D  2549  318E   	fcall	_I2C_SetDataCompleteCallback
 11074     0E95                     i1l3410:
 11075                           
 11076                           ;mcc_generated_files/examples/i2c_master_example.c: 174:     return I2C_RESTART_READ;
 11077     0E95  3002               	movlw	2
 11078     0E96                     i1l1005:
 11079     0E96  0008               	return
 11080     0E97                     __end_of_rdBlkRegCompleteHandler:
 11081                           
 11082                           	psect	text87
 11083     0DFA                     __ptext87:	
 11084 ;; *************** function _wr1RegCompleteHandler *****************
 11085 ;; Defined at:
 11086 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  ptr             1    7[COMMON] PTR void 
 11089 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11090 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
 11091 ;; Auto vars:     Size  Location     Type
 11092 ;;		None
 11093 ;; Return value:  Size  Location     Type
 11094 ;;                  1    wreg      enum E363
 11095 ;; Registers used:
 11096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11097 ;; Tracked objects:
 11098 ;;		On entry : 0/0
 11099 ;;		On exit  : 0/0
 11100 ;;		Unchanged: 0/0
 11101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11102 ;;      Params:         1       0       0       0       0       0       0       0
 11103 ;;      Locals:         0       0       0       0       0       0       0       0
 11104 ;;      Temps:          0       0       0       0       0       0       0       0
 11105 ;;      Totals:         1       0       0       0       0       0       0       0
 11106 ;;Total ram usage:        1 bytes
 11107 ;; Hardware stack levels used: 1
 11108 ;; Hardware stack levels required when called: 2
 11109 ;; This function calls:
 11110 ;;		_I2C_SetDataCompleteCallback
 11111 ;;		i1_I2C_SetBuffer
 11112 ;; This function is called by:
 11113 ;;		_I2C_Write1ByteRegister
 11114 ;;		_I2C_DO_TX
 11115 ;;		_I2C_DO_RX
 11116 ;;		_I2C_DO_TX_EMPTY
 11117 ;;		_I2C_DO_ADDRESS_NACK
 11118 ;;		_I2C_DO_RX_EMPTY
 11119 ;; This function uses a non-reentrant model
 11120 ;;
 11121                           
 11122     0DFA                     _wr1RegCompleteHandler:	
 11123                           ;psect for function _wr1RegCompleteHandler
 11124                           
 11125     0DFA                     i1l3392:	
 11126                           ;incstack = 0
 11127                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11128                           
 11129                           
 11130                           ;mcc_generated_files/examples/i2c_master_example.c: 156: static i2c_operations_t wr1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 157: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 158:     I2C_SetBuffer(ptr,1);
 11131     0DFA  3001               	movlw	1
 11132     0DFB  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11133     0DFC  3000               	movlw	0
 11134     0DFD  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11135     0DFE  0877               	movf	wr1RegCompleteHandler@ptr,w
 11136     0DFF  318D  25AB  318D   	fcall	i1_I2C_SetBuffer
 11137     0E02                     i1l3394:
 11138                           
 11139                           ;mcc_generated_files/examples/i2c_master_example.c: 159:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11140     0E02  3000               	movlw	0
 11141     0E03  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11142     0E04  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11143     0E05  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11144     0E06  318D  2549  318D   	fcall	_I2C_SetDataCompleteCallback
 11145     0E09                     i1l3396:
 11146                           
 11147                           ;mcc_generated_files/examples/i2c_master_example.c: 160:     return I2C_CONTINUE;
 11148     0E09  3004               	movlw	4
 11149     0E0A                     i1l999:
 11150     0E0A  0008               	return
 11151     0E0B                     __end_of_wr1RegCompleteHandler:
 11152                           
 11153                           	psect	text88
 11154     0DE9                     __ptext88:	
 11155 ;; *************** function _rd2RegCompleteHandler *****************
 11156 ;; Defined at:
 11157 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 11158 ;; Parameters:    Size  Location     Type
 11159 ;;  ptr             1    7[COMMON] PTR void 
 11160 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11161 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;		None
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  1    wreg      enum E363
 11166 ;; Registers used:
 11167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11168 ;; Tracked objects:
 11169 ;;		On entry : 0/0
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11173 ;;      Params:         1       0       0       0       0       0       0       0
 11174 ;;      Locals:         0       0       0       0       0       0       0       0
 11175 ;;      Temps:          0       0       0       0       0       0       0       0
 11176 ;;      Totals:         1       0       0       0       0       0       0       0
 11177 ;;Total ram usage:        1 bytes
 11178 ;; Hardware stack levels used: 1
 11179 ;; Hardware stack levels required when called: 2
 11180 ;; This function calls:
 11181 ;;		_I2C_SetDataCompleteCallback
 11182 ;;		i1_I2C_SetBuffer
 11183 ;; This function is called by:
 11184 ;;		_I2C_Read2ByteRegister
 11185 ;;		_I2C_DO_TX
 11186 ;;		_I2C_DO_RX
 11187 ;;		_I2C_DO_TX_EMPTY
 11188 ;;		_I2C_DO_ADDRESS_NACK
 11189 ;;		_I2C_DO_RX_EMPTY
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193     0DE9                     _rd2RegCompleteHandler:	
 11194                           ;psect for function _rd2RegCompleteHandler
 11195                           
 11196     0DE9                     i1l3384:	
 11197                           ;incstack = 0
 11198                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11199                           
 11200                           
 11201                           ;mcc_generated_files/examples/i2c_master_example.c: 149: static i2c_operations_t rd2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 150: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 151:     I2C_SetBuffer(ptr,2);
 11202     0DE9  3002               	movlw	2
 11203     0DEA  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11204     0DEB  3000               	movlw	0
 11205     0DEC  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11206     0DED  0877               	movf	rd2RegCompleteHandler@ptr,w
 11207     0DEE  318D  25AB  318D   	fcall	i1_I2C_SetBuffer
 11208     0DF1                     i1l3386:
 11209                           
 11210                           ;mcc_generated_files/examples/i2c_master_example.c: 152:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11211     0DF1  3000               	movlw	0
 11212     0DF2  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11213     0DF3  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11214     0DF4  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11215     0DF5  318D  2549  318D   	fcall	_I2C_SetDataCompleteCallback
 11216     0DF8                     i1l3388:
 11217                           
 11218                           ;mcc_generated_files/examples/i2c_master_example.c: 153:     return I2C_RESTART_READ;
 11219     0DF8  3002               	movlw	2
 11220     0DF9                     i1l996:
 11221     0DF9  0008               	return
 11222     0DFA                     __end_of_rd2RegCompleteHandler:
 11223                           
 11224                           	psect	text89
 11225     0DD8                     __ptext89:	
 11226 ;; *************** function _rd1RegCompleteHandler *****************
 11227 ;; Defined at:
 11228 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  ptr             1    7[COMMON] PTR void 
 11231 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11232 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
 11233 ;; Auto vars:     Size  Location     Type
 11234 ;;		None
 11235 ;; Return value:  Size  Location     Type
 11236 ;;                  1    wreg      enum E363
 11237 ;; Registers used:
 11238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11239 ;; Tracked objects:
 11240 ;;		On entry : 0/0
 11241 ;;		On exit  : 0/0
 11242 ;;		Unchanged: 0/0
 11243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11244 ;;      Params:         1       0       0       0       0       0       0       0
 11245 ;;      Locals:         0       0       0       0       0       0       0       0
 11246 ;;      Temps:          0       0       0       0       0       0       0       0
 11247 ;;      Totals:         1       0       0       0       0       0       0       0
 11248 ;;Total ram usage:        1 bytes
 11249 ;; Hardware stack levels used: 1
 11250 ;; Hardware stack levels required when called: 2
 11251 ;; This function calls:
 11252 ;;		_I2C_SetDataCompleteCallback
 11253 ;;		i1_I2C_SetBuffer
 11254 ;; This function is called by:
 11255 ;;		_I2C_Read1ByteRegister
 11256 ;;		_I2C_DO_TX
 11257 ;;		_I2C_DO_RX
 11258 ;;		_I2C_DO_TX_EMPTY
 11259 ;;		_I2C_DO_ADDRESS_NACK
 11260 ;;		_I2C_DO_RX_EMPTY
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264     0DD8                     _rd1RegCompleteHandler:	
 11265                           ;psect for function _rd1RegCompleteHandler
 11266                           
 11267     0DD8                     i1l3376:	
 11268                           ;incstack = 0
 11269                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11270                           
 11271                           
 11272                           ;mcc_generated_files/examples/i2c_master_example.c: 142: static i2c_operations_t rd1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 143: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 144:     I2C_SetBuffer(ptr,1);
 11273     0DD8  3001               	movlw	1
 11274     0DD9  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11275     0DDA  3000               	movlw	0
 11276     0DDB  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11277     0DDC  0877               	movf	rd1RegCompleteHandler@ptr,w
 11278     0DDD  318D  25AB  318D   	fcall	i1_I2C_SetBuffer
 11279     0DE0                     i1l3378:
 11280                           
 11281                           ;mcc_generated_files/examples/i2c_master_example.c: 145:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11282     0DE0  3000               	movlw	0
 11283     0DE1  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11284     0DE2  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11285     0DE3  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11286     0DE4  318D  2549  318D   	fcall	_I2C_SetDataCompleteCallback
 11287     0DE7                     i1l3380:
 11288                           
 11289                           ;mcc_generated_files/examples/i2c_master_example.c: 146:     return I2C_RESTART_READ;
 11290     0DE7  3002               	movlw	2
 11291     0DE8                     i1l993:
 11292     0DE8  0008               	return
 11293     0DE9                     __end_of_rd1RegCompleteHandler:
 11294                           
 11295                           	psect	text90
 11296     0002                     __ptext90:	
 11297 ;; *************** function _I2C_CallbackReturnReset *****************
 11298 ;; Defined at:
 11299 ;;		line 526 in file "mcc_generated_files/i2c_master.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;  funPtr          1    7[COMMON] PTR void 
 11302 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11303 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;		None
 11306 ;; Return value:  Size  Location     Type
 11307 ;;                  1    wreg      enum E363
 11308 ;; Registers used:
 11309 ;;		wreg
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11315 ;;      Params:         1       0       0       0       0       0       0       0
 11316 ;;      Locals:         0       0       0       0       0       0       0       0
 11317 ;;      Temps:          0       0       0       0       0       0       0       0
 11318 ;;      Totals:         1       0       0       0       0       0       0       0
 11319 ;;Total ram usage:        1 bytes
 11320 ;; Hardware stack levels used: 1
 11321 ;; This function calls:
 11322 ;;		Nothing
 11323 ;; This function is called by:
 11324 ;;		_I2C_Open
 11325 ;;		_I2C_DO_TX
 11326 ;;		_I2C_DO_RX
 11327 ;;		_I2C_DO_TX_EMPTY
 11328 ;;		_I2C_DO_ADDRESS_NACK
 11329 ;;		_I2C_DO_RX_EMPTY
 11330 ;; This function uses a non-reentrant model
 11331 ;;
 11332                           
 11333     0002                     _I2C_CallbackReturnReset:	
 11334                           ;psect for function _I2C_CallbackReturnReset
 11335                           
 11336     0002                     i1l3372:	
 11337                           ;incstack = 0
 11338                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
 11339                           
 11340                           
 11341                           ;mcc_generated_files/i2c_master.c: 526: i2c_operations_t I2C_CallbackReturnReset(void *f
      +                          unPtr);mcc_generated_files/i2c_master.c: 527: {;mcc_generated_files/i2c_master.c: 528:  
      +                             return I2C_RESET_LINK;
 11342     0002  3005               	movlw	5
 11343     0003                     i1l830:
 11344     0003  0008               	return
 11345     0004                     __end_of_I2C_CallbackReturnReset:
 11346                           
 11347                           	psect	text91
 11348     0C39                     __ptext91:	
 11349 ;; *************** function _I2C_CallbackReturnStop *****************
 11350 ;; Defined at:
 11351 ;;		line 521 in file "mcc_generated_files/i2c_master.c"
 11352 ;; Parameters:    Size  Location     Type
 11353 ;;  funPtr          1    7[COMMON] PTR void 
 11354 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11355 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
 11356 ;; Auto vars:     Size  Location     Type
 11357 ;;		None
 11358 ;; Return value:  Size  Location     Type
 11359 ;;                  1    wreg      enum E363
 11360 ;; Registers used:
 11361 ;;		wreg
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11367 ;;      Params:         1       0       0       0       0       0       0       0
 11368 ;;      Locals:         0       0       0       0       0       0       0       0
 11369 ;;      Temps:          0       0       0       0       0       0       0       0
 11370 ;;      Totals:         1       0       0       0       0       0       0       0
 11371 ;;Total ram usage:        1 bytes
 11372 ;; Hardware stack levels used: 1
 11373 ;; This function calls:
 11374 ;;		Nothing
 11375 ;; This function is called by:
 11376 ;;		_I2C_Open
 11377 ;;		_I2C_SetCallback
 11378 ;;		i1_I2C_SetCallback
 11379 ;;		_I2C_DO_TX
 11380 ;;		_I2C_DO_RX
 11381 ;;		_I2C_DO_TX_EMPTY
 11382 ;;		_I2C_DO_ADDRESS_NACK
 11383 ;;		_I2C_DO_RX_EMPTY
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387     0C39                     _I2C_CallbackReturnStop:	
 11388                           ;psect for function _I2C_CallbackReturnStop
 11389                           
 11390     0C39                     i1l3368:	
 11391                           ;incstack = 0
 11392                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
 11393                           
 11394                           
 11395                           ;mcc_generated_files/i2c_master.c: 521: i2c_operations_t I2C_CallbackReturnStop(void *fu
      +                          nPtr);mcc_generated_files/i2c_master.c: 522: {;mcc_generated_files/i2c_master.c: 523:   
      +                            return I2C_STOP;
 11396     0C39  3001               	movlw	1
 11397     0C3A                     i1l827:
 11398     0C3A  0008               	return
 11399     0C3B                     __end_of_I2C_CallbackReturnStop:
 11400                           
 11401                           	psect	text92
 11402     0DC7                     __ptext92:	
 11403 ;; *************** function _wr2RegCompleteHandler *****************
 11404 ;; Defined at:
 11405 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 11406 ;; Parameters:    Size  Location     Type
 11407 ;;  ptr             1    7[COMMON] PTR void 
 11408 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11409 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
 11410 ;; Auto vars:     Size  Location     Type
 11411 ;;		None
 11412 ;; Return value:  Size  Location     Type
 11413 ;;                  1    wreg      enum E363
 11414 ;; Registers used:
 11415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11416 ;; Tracked objects:
 11417 ;;		On entry : 0/0
 11418 ;;		On exit  : 0/0
 11419 ;;		Unchanged: 0/0
 11420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11421 ;;      Params:         1       0       0       0       0       0       0       0
 11422 ;;      Locals:         0       0       0       0       0       0       0       0
 11423 ;;      Temps:          0       0       0       0       0       0       0       0
 11424 ;;      Totals:         1       0       0       0       0       0       0       0
 11425 ;;Total ram usage:        1 bytes
 11426 ;; Hardware stack levels used: 1
 11427 ;; Hardware stack levels required when called: 2
 11428 ;; This function calls:
 11429 ;;		_I2C_SetDataCompleteCallback
 11430 ;;		i1_I2C_SetBuffer
 11431 ;; This function is called by:
 11432 ;;		_I2C_Write2ByteRegister
 11433 ;;		_I2C_DO_TX
 11434 ;;		_I2C_DO_RX
 11435 ;;		_I2C_DO_TX_EMPTY
 11436 ;;		_I2C_DO_ADDRESS_NACK
 11437 ;;		_I2C_DO_RX_EMPTY
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441     0DC7                     _wr2RegCompleteHandler:	
 11442                           ;psect for function _wr2RegCompleteHandler
 11443                           
 11444     0DC7                     i1l3400:	
 11445                           ;incstack = 0
 11446                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11447                           
 11448                           
 11449                           ;mcc_generated_files/examples/i2c_master_example.c: 163: static i2c_operations_t wr2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 164: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 165:     I2C_SetBuffer(ptr,2);
 11450     0DC7  3002               	movlw	2
 11451     0DC8  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11452     0DC9  3000               	movlw	0
 11453     0DCA  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11454     0DCB  0877               	movf	wr2RegCompleteHandler@ptr,w
 11455     0DCC  318D  25AB  318D   	fcall	i1_I2C_SetBuffer
 11456     0DCF                     i1l3402:
 11457                           
 11458                           ;mcc_generated_files/examples/i2c_master_example.c: 166:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11459     0DCF  3000               	movlw	0
 11460     0DD0  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11461     0DD1  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11462     0DD2  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11463     0DD3  318D  2549  318D   	fcall	_I2C_SetDataCompleteCallback
 11464     0DD6                     i1l3404:
 11465                           
 11466                           ;mcc_generated_files/examples/i2c_master_example.c: 167:     return I2C_CONTINUE;
 11467     0DD6  3004               	movlw	4
 11468     0DD7                     i1l1002:
 11469     0DD7  0008               	return
 11470     0DD8                     __end_of_wr2RegCompleteHandler:
 11471                           
 11472                           	psect	text93
 11473     0DAB                     __ptext93:	
 11474 ;; *************** function i1_I2C_SetBuffer *****************
 11475 ;; Defined at:
 11476 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;  buffer          1    wreg     PTR void 
 11479 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
 11480 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), 
 11481 ;;		 -> I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegi
      +ster@reg(1), 
 11482 ;;		 -> I2C_Read2ByteRegister@returnValue(2), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), NULL(0
      +), 
 11483 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Enable(2), 
 11484 ;;  bufferSize      2    0[COMMON] unsigned int 
 11485 ;; Auto vars:     Size  Location     Type
 11486 ;;  buffer          1    2[COMMON] PTR void 
 11487 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
 11488 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), 
 11489 ;;		 -> I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegi
      +ster@reg(1), 
 11490 ;;		 -> I2C_Read2ByteRegister@returnValue(2), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), NULL(0
      +), 
 11491 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Enable(2), 
 11492 ;; Return value:  Size  Location     Type
 11493 ;;                  1    wreg      void 
 11494 ;; Registers used:
 11495 ;;		wreg
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11501 ;;      Params:         2       0       0       0       0       0       0       0
 11502 ;;      Locals:         1       0       0       0       0       0       0       0
 11503 ;;      Temps:          0       0       0       0       0       0       0       0
 11504 ;;      Totals:         3       0       0       0       0       0       0       0
 11505 ;;Total ram usage:        3 bytes
 11506 ;; Hardware stack levels used: 1
 11507 ;; This function calls:
 11508 ;;		Nothing
 11509 ;; This function is called by:
 11510 ;;		_rd1RegCompleteHandler
 11511 ;;		_rd2RegCompleteHandler
 11512 ;;		_wr1RegCompleteHandler
 11513 ;;		_wr2RegCompleteHandler
 11514 ;;		_rdBlkRegCompleteHandler
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518     0DAB                     i1_I2C_SetBuffer:	
 11519                           ;psect for function i1_I2C_SetBuffer
 11520                           
 11521                           
 11522                           ;incstack = 0
 11523                           ; Regs used in i1_I2C_SetBuffer: [wreg]
 11524                           ;i1I2C_SetBuffer@buffer stored from wreg
 11525     0DAB  00F2               	movwf	i1I2C_SetBuffer@buffer
 11526     0DAC                     i1l3222:
 11527                           
 11528                           ;mcc_generated_files/i2c_master.c: 264: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 265: {;mcc_generated_files/i2c_master.c: 266:     
      +                          if(I2C_Status.bufferFree)
 11529     0DAC  0021               	movlb	1	; select bank1
 11530     0DAD  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
 11531     0DAE  2DB0               	goto	u115_21
 11532     0DAF  2DB1               	goto	u115_20
 11533     0DB0                     u115_21:
 11534     0DB0  2DB8               	goto	i1l698
 11535     0DB1                     u115_20:
 11536     0DB1                     i1l3224:
 11537                           
 11538                           ;mcc_generated_files/i2c_master.c: 267:     {;mcc_generated_files/i2c_master.c: 268:    
      +                               I2C_Status.data_ptr = buffer;
 11539     0DB1  0872               	movf	i1I2C_SetBuffer@buffer,w
 11540     0DB2  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
 11541                           
 11542                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.data_length = bufferSize;
 11543     0DB3  0871               	movf	i1I2C_SetBuffer@bufferSize+1,w
 11544     0DB4  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
 11545     0DB5  0870               	movf	i1I2C_SetBuffer@bufferSize,w
 11546     0DB6  00B8               	movwf	(_I2C_Status^(0+128)+24)
 11547     0DB7                     i1l3226:
 11548                           
 11549                           ;mcc_generated_files/i2c_master.c: 270:         I2C_Status.bufferFree = 0;
 11550     0DB7  11BC               	bcf	(_I2C_Status^(0+128)+28),3
 11551     0DB8                     i1l698:
 11552     0DB8  0008               	return
 11553     0DB9                     __end_ofi1_I2C_SetBuffer:
 11554                           
 11555                           	psect	text94
 11556     0D49                     __ptext94:	
 11557 ;; *************** function _I2C_SetDataCompleteCallback *****************
 11558 ;; Defined at:
 11559 ;;		line 274 in file "mcc_generated_files/i2c_master.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;  cb              2    4[COMMON] PTR FTN(PTR void ,)enum 
 11562 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 11563 ;;		 -> rd1RegCompleteHandler(1), NULL(1), 
 11564 ;;  ptr             1    6[COMMON] PTR void 
 11565 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11566 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;		None
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  1    wreg      void 
 11571 ;; Registers used:
 11572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11578 ;;      Params:         3       0       0       0       0       0       0       0
 11579 ;;      Locals:         0       0       0       0       0       0       0       0
 11580 ;;      Temps:          0       0       0       0       0       0       0       0
 11581 ;;      Totals:         3       0       0       0       0       0       0       0
 11582 ;;Total ram usage:        3 bytes
 11583 ;; Hardware stack levels used: 1
 11584 ;; Hardware stack levels required when called: 1
 11585 ;; This function calls:
 11586 ;;		i1_I2C_SetCallback
 11587 ;; This function is called by:
 11588 ;;		_rd1RegCompleteHandler
 11589 ;;		_rd2RegCompleteHandler
 11590 ;;		_wr1RegCompleteHandler
 11591 ;;		_wr2RegCompleteHandler
 11592 ;;		_rdBlkRegCompleteHandler
 11593 ;;		_I2C_Read1ByteRegister
 11594 ;;		_I2C_Read2ByteRegister
 11595 ;;		_I2C_Write1ByteRegister
 11596 ;;		_I2C_Write2ByteRegister
 11597 ;;		_I2C_ReadDataBlock
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601     0D49                     _I2C_SetDataCompleteCallback:	
 11602                           ;psect for function _I2C_SetDataCompleteCallback
 11603                           
 11604     0D49                     i1l3212:	
 11605                           ;incstack = 0
 11606                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11607                           
 11608                           
 11609                           ;mcc_generated_files/i2c_master.c: 274: void I2C_SetDataCompleteCallback(i2c_callback_t 
      +                          cb, void *ptr);mcc_generated_files/i2c_master.c: 275: {;mcc_generated_files/i2c_master.c
      +                          : 276:     I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 11610     0D49  0875               	movf	I2C_SetDataCompleteCallback@cb+1,w
 11611     0D4A  00F1               	movwf	i1I2C_SetCallback@cb+1
 11612     0D4B  0874               	movf	I2C_SetDataCompleteCallback@cb,w
 11613     0D4C  00F0               	movwf	i1I2C_SetCallback@cb
 11614     0D4D  0876               	movf	I2C_SetDataCompleteCallback@ptr,w
 11615     0D4E  00F2               	movwf	i1I2C_SetCallback@ptr
 11616     0D4F  3000               	movlw	0
 11617     0D50  318F  2746  318D   	fcall	i1_I2C_SetCallback
 11618     0D53                     i1l701:
 11619     0D53  0008               	return
 11620     0D54                     __end_of_I2C_SetDataCompleteCallback:
 11621                           
 11622                           	psect	text95
 11623     0F46                     __ptext95:	
 11624 ;; *************** function i1_I2C_SetCallback *****************
 11625 ;; Defined at:
 11626 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;  idx             1    wreg     enum E3130
 11629 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 11630 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 11631 ;;		 -> rd1RegCompleteHandler(1), NULL(1), 
 11632 ;;  ptr             1    2[COMMON] PTR void 
 11633 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11634 ;;		 -> I2C_Read1ByteRegister@returnValue(1), NULL(0), 
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  idx             1    3[COMMON] enum E3130
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      void 
 11639 ;; Registers used:
 11640 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11646 ;;      Params:         3       0       0       0       0       0       0       0
 11647 ;;      Locals:         1       0       0       0       0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0
 11649 ;;      Totals:         4       0       0       0       0       0       0       0
 11650 ;;Total ram usage:        4 bytes
 11651 ;; Hardware stack levels used: 1
 11652 ;; This function calls:
 11653 ;;		Nothing
 11654 ;; This function is called by:
 11655 ;;		_I2C_SetDataCompleteCallback
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659     0F46                     i1_I2C_SetCallback:	
 11660                           ;psect for function i1_I2C_SetCallback
 11661                           
 11662                           
 11663                           ;incstack = 0
 11664                           ; Regs used in i1_I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 11665                           ;i1I2C_SetCallback@idx stored from wreg
 11666     0F46  00F3               	movwf	i1I2C_SetCallback@idx
 11667     0F47                     i1l3036:
 11668                           
 11669                           ;mcc_generated_files/i2c_master.c: 304: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 305: {;mcc_generate
      +                          d_files/i2c_master.c: 306:     if(cb)
 11670     0F47  0870               	movf	i1I2C_SetCallback@cb,w
 11671     0F48  0471               	iorwf	i1I2C_SetCallback@cb+1,w
 11672     0F49  1903               	btfsc	3,2
 11673     0F4A  2F4C               	goto	u103_21
 11674     0F4B  2F4D               	goto	u103_20
 11675     0F4C                     u103_21:
 11676     0F4C  2F5C               	goto	i1l3040
 11677     0F4D                     u103_20:
 11678     0F4D                     i1l3038:
 11679                           
 11680                           ;mcc_generated_files/i2c_master.c: 307:     {;mcc_generated_files/i2c_master.c: 308:    
      +                               I2C_Status.callbackTable[idx] = cb;
 11681     0F4D  3573               	lslf	i1I2C_SetCallback@idx,w
 11682     0F4E  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11683     0F4F  0086               	movwf	6
 11684     0F50  0187               	clrf	7
 11685     0F51  0870               	movf	i1I2C_SetCallback@cb,w
 11686     0F52  3FC0               	movwi [0]fsr1
 11687     0F53  0871               	movf	i1I2C_SetCallback@cb+1,w
 11688     0F54  3FC1               	movwi [1]fsr1
 11689                           
 11690                           ;mcc_generated_files/i2c_master.c: 309:         I2C_Status.callbackPayload[idx] = ptr;
 11691     0F55  0873               	movf	i1I2C_SetCallback@idx,w
 11692     0F56  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 11693     0F57  0086               	movwf	6
 11694     0F58  0187               	clrf	7
 11695     0F59  0872               	movf	i1I2C_SetCallback@ptr,w
 11696     0F5A  0081               	movwf	1
 11697                           
 11698                           ;mcc_generated_files/i2c_master.c: 310:     }
 11699     0F5B  2F69               	goto	i1l721
 11700     0F5C                     i1l3040:
 11701                           
 11702                           ;mcc_generated_files/i2c_master.c: 312:     {;mcc_generated_files/i2c_master.c: 313:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 11703     0F5C  3573               	lslf	i1I2C_SetCallback@idx,w
 11704     0F5D  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11705     0F5E  0086               	movwf	6
 11706     0F5F  0187               	clrf	7
 11707     0F60  3039               	movlw	low _I2C_CallbackReturnStop
 11708     0F61  3FC0               	movwi [0]fsr1
 11709     0F62  300C               	movlw	high _I2C_CallbackReturnStop
 11710     0F63  3FC1               	movwi [1]fsr1
 11711                           
 11712                           ;mcc_generated_files/i2c_master.c: 314:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
 11713     0F64  0873               	movf	i1I2C_SetCallback@idx,w
 11714     0F65  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 11715     0F66  0086               	movwf	6
 11716     0F67  0187               	clrf	7
 11717     0F68  0181               	clrf	1
 11718     0F69                     i1l721:
 11719     0F69  0008               	return
 11720     0F6A                     __end_ofi1_I2C_SetCallback:
 11721                           
 11722                           	psect	text96
 11723     0C3E                     __ptext96:	
 11724 ;; *************** function _I2C_MasterStop *****************
 11725 ;; Defined at:
 11726 ;;		line 594 in file "mcc_generated_files/i2c_master.c"
 11727 ;; Parameters:    Size  Location     Type
 11728 ;;		None
 11729 ;; Auto vars:     Size  Location     Type
 11730 ;;		None
 11731 ;; Return value:  Size  Location     Type
 11732 ;;                  1    wreg      void 
 11733 ;; Registers used:
 11734 ;;		None
 11735 ;; Tracked objects:
 11736 ;;		On entry : 0/0
 11737 ;;		On exit  : 0/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11740 ;;      Params:         0       0       0       0       0       0       0       0
 11741 ;;      Locals:         0       0       0       0       0       0       0       0
 11742 ;;      Temps:          0       0       0       0       0       0       0       0
 11743 ;;      Totals:         0       0       0       0       0       0       0       0
 11744 ;;Total ram usage:        0 bytes
 11745 ;; Hardware stack levels used: 1
 11746 ;; This function calls:
 11747 ;;		Nothing
 11748 ;; This function is called by:
 11749 ;;		_I2C_DO_SEND_STOP
 11750 ;; This function uses a non-reentrant model
 11751 ;;
 11752                           
 11753     0C3E                     _I2C_MasterStop:	
 11754                           ;psect for function _I2C_MasterStop
 11755                           
 11756     0C3E                     i1l3218:	
 11757                           ;incstack = 0
 11758                           ; Regs used in _I2C_MasterStop: []
 11759                           
 11760                           
 11761                           ;mcc_generated_files/i2c_master.c: 596:     SSPCON2bits.PEN = 1;
 11762     0C3E  0024               	movlb	4	; select bank4
 11763     0C3F  1516               	bsf	22,2	;volatile
 11764     0C40                     i1l864:
 11765     0C40  0008               	return
 11766     0C41                     __end_of_I2C_MasterStop:
 11767                           
 11768                           	psect	text97
 11769     0C3B                     __ptext97:	
 11770 ;; *************** function _I2C_MasterEnableRestart *****************
 11771 ;; Defined at:
 11772 ;;		line 574 in file "mcc_generated_files/i2c_master.c"
 11773 ;; Parameters:    Size  Location     Type
 11774 ;;		None
 11775 ;; Auto vars:     Size  Location     Type
 11776 ;;		None
 11777 ;; Return value:  Size  Location     Type
 11778 ;;                  1    wreg      void 
 11779 ;; Registers used:
 11780 ;;		None
 11781 ;; Tracked objects:
 11782 ;;		On entry : 0/0
 11783 ;;		On exit  : 0/0
 11784 ;;		Unchanged: 0/0
 11785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11786 ;;      Params:         0       0       0       0       0       0       0       0
 11787 ;;      Locals:         0       0       0       0       0       0       0       0
 11788 ;;      Temps:          0       0       0       0       0       0       0       0
 11789 ;;      Totals:         0       0       0       0       0       0       0       0
 11790 ;;Total ram usage:        0 bytes
 11791 ;; Hardware stack levels used: 1
 11792 ;; This function calls:
 11793 ;;		Nothing
 11794 ;; This function is called by:
 11795 ;;		_I2C_DO_SEND_RESTART_READ
 11796 ;;		_I2C_DO_SEND_RESTART_WRITE
 11797 ;;		_I2C_DO_SEND_RESTART
 11798 ;;		_I2C_DO_RX_EMPTY
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802     0C3B                     _I2C_MasterEnableRestart:	
 11803                           ;psect for function _I2C_MasterEnableRestart
 11804                           
 11805     0C3B                     i1l3216:	
 11806                           ;incstack = 0
 11807                           ; Regs used in _I2C_MasterEnableRestart: []
 11808                           
 11809                           
 11810                           ;mcc_generated_files/i2c_master.c: 576:     SSPCON2bits.RSEN = 1;
 11811     0C3B  0024               	movlb	4	; select bank4
 11812     0C3C  1496               	bsf	22,1	;volatile
 11813     0C3D                     i1l852:
 11814     0C3D  0008               	return
 11815     0C3E                     __end_of_I2C_MasterEnableRestart:
 11816                           
 11817                           	psect	text98
 11818     0F24                     __ptext98:	
 11819 ;; *************** function _EUSART_Transmit_ISR *****************
 11820 ;; Defined at:
 11821 ;;		line 206 in file "mcc_generated_files/eusart.c"
 11822 ;; Parameters:    Size  Location     Type
 11823 ;;		None
 11824 ;; Auto vars:     Size  Location     Type
 11825 ;;		None
 11826 ;; Return value:  Size  Location     Type
 11827 ;;                  1    wreg      void 
 11828 ;; Registers used:
 11829 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11830 ;; Tracked objects:
 11831 ;;		On entry : 0/0
 11832 ;;		On exit  : 0/0
 11833 ;;		Unchanged: 0/0
 11834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11835 ;;      Params:         0       0       0       0       0       0       0       0
 11836 ;;      Locals:         0       0       0       0       0       0       0       0
 11837 ;;      Temps:          1       0       0       0       0       0       0       0
 11838 ;;      Totals:         1       0       0       0       0       0       0       0
 11839 ;;Total ram usage:        1 bytes
 11840 ;; Hardware stack levels used: 1
 11841 ;; This function calls:
 11842 ;;		Nothing
 11843 ;; This function is called by:
 11844 ;;		_EUSART_Initialize
 11845 ;;		_INTERRUPT_InterruptManager
 11846 ;; This function uses a non-reentrant model
 11847 ;;
 11848                           
 11849     0F24                     _EUSART_Transmit_ISR:	
 11850                           ;psect for function _EUSART_Transmit_ISR
 11851                           
 11852     0F24                     i1l3764:	
 11853                           ;incstack = 0
 11854                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11855                           
 11856                           
 11857                           ;mcc_generated_files/eusart.c: 210:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 11858     0F24  3008               	movlw	8
 11859     0F25  0020               	movlb	0	; select bank0
 11860     0F26  026D               	subwf	_eusartTxBufferRemaining,w	;volatile
 11861     0F27  1803               	skipnc
 11862     0F28  2F2A               	goto	u141_21
 11863     0F29  2F2B               	goto	u141_20
 11864     0F2A                     u141_21:
 11865     0F2A  2F43               	goto	i1l212
 11866     0F2B                     u141_20:
 11867     0F2B                     i1l3766:
 11868                           
 11869                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 11870     0F2B  087B               	movf	_eusartTxTail,w
 11871     0F2C  3ECD               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 11872     0F2D  0086               	movwf	6
 11873     0F2E  0187               	clrf	7
 11874     0F2F  0801               	movf	1,w
 11875     0F30  0023               	movlb	3	; select bank3
 11876     0F31  009A               	movwf	26	;volatile
 11877     0F32                     i1l3768:
 11878     0F32  3001               	movlw	1
 11879     0F33  00F0               	movwf	??_EUSART_Transmit_ISR
 11880     0F34  0870               	movf	??_EUSART_Transmit_ISR,w
 11881     0F35  07FB               	addwf	_eusartTxTail,f	;volatile
 11882     0F36                     i1l3770:
 11883                           
 11884                           ;mcc_generated_files/eusart.c: 213:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 11885     0F36  3008               	movlw	8
 11886     0F37  027B               	subwf	_eusartTxTail,w	;volatile
 11887     0F38  1C03               	skipc
 11888     0F39  2F3B               	goto	u142_21
 11889     0F3A  2F3C               	goto	u142_20
 11890     0F3B                     u142_21:
 11891     0F3B  2F3D               	goto	i1l3774
 11892     0F3C                     u142_20:
 11893     0F3C                     i1l3772:
 11894                           
 11895                           ;mcc_generated_files/eusart.c: 214:         {;mcc_generated_files/eusart.c: 215:        
      +                               eusartTxTail = 0;
 11896     0F3C  01FB               	clrf	_eusartTxTail	;volatile
 11897     0F3D                     i1l3774:
 11898                           
 11899                           ;mcc_generated_files/eusart.c: 217:         eusartTxBufferRemaining++;
 11900     0F3D  3001               	movlw	1
 11901     0F3E  00F0               	movwf	??_EUSART_Transmit_ISR
 11902     0F3F  0870               	movf	??_EUSART_Transmit_ISR,w
 11903     0F40  0020               	movlb	0	; select bank0
 11904     0F41  07ED               	addwf	_eusartTxBufferRemaining,f	;volatile
 11905                           
 11906                           ;mcc_generated_files/eusart.c: 218:     }
 11907     0F42  2F45               	goto	i1l215
 11908     0F43                     i1l212:	
 11909                           ;mcc_generated_files/eusart.c: 219:     else
 11910                           
 11911                           
 11912                           ;mcc_generated_files/eusart.c: 220:     {;mcc_generated_files/eusart.c: 221:         PIE
      +                          1bits.TXIE = 0;
 11913     0F43  0021               	movlb	1	; select bank1
 11914     0F44  1211               	bcf	17,4	;volatile
 11915     0F45                     i1l215:
 11916     0F45  0008               	return
 11917     0F46                     __end_of_EUSART_Transmit_ISR:
 11918                           
 11919                           	psect	text99
 11920     06A7                     __ptext99:	
 11921 ;; *************** function _EUSART_Receive_ISR *****************
 11922 ;; Defined at:
 11923 ;;		line 225 in file "mcc_generated_files/eusart.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;		None
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;		None
 11928 ;; Return value:  Size  Location     Type
 11929 ;;                  1    wreg      void 
 11930 ;; Registers used:
 11931 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11932 ;; Tracked objects:
 11933 ;;		On entry : 0/0
 11934 ;;		On exit  : 0/0
 11935 ;;		Unchanged: 0/0
 11936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11937 ;;      Params:         0       0       0       0       0       0       0       0
 11938 ;;      Locals:         0       0       0       0       0       0       0       0
 11939 ;;      Temps:          0       0       0       0       0       0       0       0
 11940 ;;      Totals:         0       0       0       0       0       0       0       0
 11941 ;;Total ram usage:        0 bytes
 11942 ;; Hardware stack levels used: 1
 11943 ;; Hardware stack levels required when called: 2
 11944 ;; This function calls:
 11945 ;;		NULL
 11946 ;;		_EUSART_DefaultErrorHandler
 11947 ;;		_EUSART_DefaultFramingErrorHandler
 11948 ;;		_EUSART_DefaultOverrunErrorHandler
 11949 ;;		_EUSART_RxDataHandler
 11950 ;; This function is called by:
 11951 ;;		_EUSART_Initialize
 11952 ;;		_INTERRUPT_InterruptManager
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956     06A7                     _EUSART_Receive_ISR:	
 11957                           ;psect for function _EUSART_Receive_ISR
 11958                           
 11959     06A7                     i1l3776:	
 11960                           ;incstack = 0
 11961                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11962                           
 11963                           
 11964                           ;mcc_generated_files/eusart.c: 228:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 11965     06A7  087A               	movf	_eusartRxHead,w	;volatile
 11966     06A8  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 11967     06A9  0086               	movwf	6
 11968     06AA  0187               	clrf	7
 11969     06AB  0181               	clrf	1
 11970     06AC                     i1l3778:
 11971                           
 11972                           ;mcc_generated_files/eusart.c: 230:     if(RCSTAbits.FERR){
 11973     06AC  0023               	movlb	3	; select bank3
 11974     06AD  1D1D               	btfss	29,2	;volatile
 11975     06AE  2EB0               	goto	u143_21
 11976     06AF  2EB1               	goto	u143_20
 11977     06B0                     u143_21:
 11978     06B0  2EBC               	goto	i1l3784
 11979     06B1                     u143_20:
 11980     06B1                     i1l3780:
 11981                           
 11982                           ;mcc_generated_files/eusart.c: 231:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 11983     06B1  087A               	movf	_eusartRxHead,w	;volatile
 11984     06B2  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 11985     06B3  0086               	movwf	6
 11986     06B4  0187               	clrf	7
 11987     06B5  1481               	bsf	1,1
 11988     06B6                     i1l3782:
 11989                           
 11990                           ;mcc_generated_files/eusart.c: 232:         EUSART_FramingErrorHandler();
 11991     06B6  0022               	movlb	2	; select bank2
 11992     06B7  0825               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 11993     06B8  008A               	movwf	10
 11994     06B9  0824               	movf	_EUSART_FramingErrorHandler^(0+256),w
 11995     06BA  000A               	callw
 11996     06BB  3186               	pagesel	$
 11997     06BC                     i1l3784:
 11998                           
 11999                           ;mcc_generated_files/eusart.c: 235:     if(RCSTAbits.OERR){
 12000     06BC  0023               	movlb	3	; select bank3
 12001     06BD  1C9D               	btfss	29,1	;volatile
 12002     06BE  2EC0               	goto	u144_21
 12003     06BF  2EC1               	goto	u144_20
 12004     06C0                     u144_21:
 12005     06C0  2ECC               	goto	i1l3790
 12006     06C1                     u144_20:
 12007     06C1                     i1l3786:
 12008                           
 12009                           ;mcc_generated_files/eusart.c: 236:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 12010     06C1  087A               	movf	_eusartRxHead,w	;volatile
 12011     06C2  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 12012     06C3  0086               	movwf	6
 12013     06C4  0187               	clrf	7
 12014     06C5  1501               	bsf	1,2
 12015     06C6                     i1l3788:
 12016                           
 12017                           ;mcc_generated_files/eusart.c: 237:         EUSART_OverrunErrorHandler();
 12018     06C6  0022               	movlb	2	; select bank2
 12019     06C7  0823               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 12020     06C8  008A               	movwf	10
 12021     06C9  0822               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 12022     06CA  000A               	callw
 12023     06CB  3186               	pagesel	$
 12024     06CC                     i1l3790:
 12025                           
 12026                           ;mcc_generated_files/eusart.c: 240:     if(eusartRxStatusBuffer[eusartRxHead].status){
 12027     06CC  087A               	movf	_eusartRxHead,w	;volatile
 12028     06CD  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 12029     06CE  0086               	movwf	6
 12030     06CF  0187               	clrf	7
 12031     06D0  0801               	movf	1,w
 12032     06D1  1903               	btfsc	3,2
 12033     06D2  2ED4               	goto	u145_21
 12034     06D3  2ED5               	goto	u145_20
 12035     06D4                     u145_21:
 12036     06D4  2EDC               	goto	i1l3794
 12037     06D5                     u145_20:
 12038     06D5                     i1l3792:
 12039                           
 12040                           ;mcc_generated_files/eusart.c: 241:         EUSART_ErrorHandler();
 12041     06D5  0022               	movlb	2	; select bank2
 12042     06D6  0821               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 12043     06D7  008A               	movwf	10
 12044     06D8  0820               	movf	_EUSART_ErrorHandler^(0+256),w
 12045     06D9  000A               	callw
 12046     06DA  3186               	pagesel	$
 12047                           
 12048                           ;mcc_generated_files/eusart.c: 242:     } else {
 12049     06DB  2EDF               	goto	i1l222
 12050     06DC                     i1l3794:
 12051                           
 12052                           ;mcc_generated_files/eusart.c: 243:         EUSART_RxDataHandler();
 12053     06DC  318E  2668  3186   	fcall	_EUSART_RxDataHandler
 12054     06DF                     i1l222:
 12055     06DF  0008               	return
 12056     06E0                     __end_of_EUSART_Receive_ISR:
 12057                           
 12058                           	psect	text100
 12059     0C63                     __ptext100:	
 12060 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 12061 ;; Defined at:
 12062 ;;		line 261 in file "mcc_generated_files/eusart.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;		None
 12065 ;; Auto vars:     Size  Location     Type
 12066 ;;		None
 12067 ;; Return value:  Size  Location     Type
 12068 ;;                  1    wreg      void 
 12069 ;; Registers used:
 12070 ;;		None
 12071 ;; Tracked objects:
 12072 ;;		On entry : 0/0
 12073 ;;		On exit  : 0/0
 12074 ;;		Unchanged: 0/0
 12075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12076 ;;      Params:         0       0       0       0       0       0       0       0
 12077 ;;      Locals:         0       0       0       0       0       0       0       0
 12078 ;;      Temps:          0       0       0       0       0       0       0       0
 12079 ;;      Totals:         0       0       0       0       0       0       0       0
 12080 ;;Total ram usage:        0 bytes
 12081 ;; Hardware stack levels used: 1
 12082 ;; This function calls:
 12083 ;;		Nothing
 12084 ;; This function is called by:
 12085 ;;		_EUSART_Initialize
 12086 ;;		_EUSART_Receive_ISR
 12087 ;; This function uses a non-reentrant model
 12088 ;;
 12089                           
 12090     0C63                     _EUSART_DefaultOverrunErrorHandler:	
 12091                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 12092                           
 12093     0C63                     i1l3684:	
 12094                           ;incstack = 0
 12095                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 12096                           
 12097                           
 12098                           ;mcc_generated_files/eusart.c: 264:     RCSTAbits.CREN = 0;
 12099     0C63  0023               	movlb	3	; select bank3
 12100     0C64  121D               	bcf	29,4	;volatile
 12101                           
 12102                           ;mcc_generated_files/eusart.c: 265:     RCSTAbits.CREN = 1;
 12103     0C65  161D               	bsf	29,4	;volatile
 12104     0C66                     i1l232:
 12105     0C66  0008               	return
 12106     0C67                     __end_of_EUSART_DefaultOverrunErrorHandler:
 12107                           
 12108                           	psect	text101
 12109     0C37                     __ptext101:	
 12110 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 12111 ;; Defined at:
 12112 ;;		line 259 in file "mcc_generated_files/eusart.c"
 12113 ;; Parameters:    Size  Location     Type
 12114 ;;		None
 12115 ;; Auto vars:     Size  Location     Type
 12116 ;;		None
 12117 ;; Return value:  Size  Location     Type
 12118 ;;                  1    wreg      void 
 12119 ;; Registers used:
 12120 ;;		None
 12121 ;; Tracked objects:
 12122 ;;		On entry : 0/0
 12123 ;;		On exit  : 0/0
 12124 ;;		Unchanged: 0/0
 12125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12126 ;;      Params:         0       0       0       0       0       0       0       0
 12127 ;;      Locals:         0       0       0       0       0       0       0       0
 12128 ;;      Temps:          0       0       0       0       0       0       0       0
 12129 ;;      Totals:         0       0       0       0       0       0       0       0
 12130 ;;Total ram usage:        0 bytes
 12131 ;; Hardware stack levels used: 1
 12132 ;; This function calls:
 12133 ;;		Nothing
 12134 ;; This function is called by:
 12135 ;;		_EUSART_Initialize
 12136 ;;		_EUSART_Receive_ISR
 12137 ;; This function uses a non-reentrant model
 12138 ;;
 12139                           
 12140     0C37                     _EUSART_DefaultFramingErrorHandler:	
 12141                           ;psect for function _EUSART_DefaultFramingErrorHandler
 12142                           
 12143     0C37                     i1l229:	
 12144                           ;incstack = 0
 12145                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 12146                           
 12147     0C37  0008               	return
 12148     0C38                     __end_of_EUSART_DefaultFramingErrorHandler:
 12149                           
 12150                           	psect	text102
 12151     0C5F                     __ptext102:	
 12152 ;; *************** function _EUSART_DefaultErrorHandler *****************
 12153 ;; Defined at:
 12154 ;;		line 269 in file "mcc_generated_files/eusart.c"
 12155 ;; Parameters:    Size  Location     Type
 12156 ;;		None
 12157 ;; Auto vars:     Size  Location     Type
 12158 ;;		None
 12159 ;; Return value:  Size  Location     Type
 12160 ;;                  1    wreg      void 
 12161 ;; Registers used:
 12162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12163 ;; Tracked objects:
 12164 ;;		On entry : 0/0
 12165 ;;		On exit  : 0/0
 12166 ;;		Unchanged: 0/0
 12167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12168 ;;      Params:         0       0       0       0       0       0       0       0
 12169 ;;      Locals:         0       0       0       0       0       0       0       0
 12170 ;;      Temps:          0       0       0       0       0       0       0       0
 12171 ;;      Totals:         0       0       0       0       0       0       0       0
 12172 ;;Total ram usage:        0 bytes
 12173 ;; Hardware stack levels used: 1
 12174 ;; Hardware stack levels required when called: 1
 12175 ;; This function calls:
 12176 ;;		_EUSART_RxDataHandler
 12177 ;; This function is called by:
 12178 ;;		_EUSART_Initialize
 12179 ;;		_EUSART_Receive_ISR
 12180 ;; This function uses a non-reentrant model
 12181 ;;
 12182                           
 12183     0C5F                     _EUSART_DefaultErrorHandler:	
 12184                           ;psect for function _EUSART_DefaultErrorHandler
 12185                           
 12186     0C5F                     i1l3686:	
 12187                           ;incstack = 0
 12188                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12189                           
 12190                           
 12191                           ;mcc_generated_files/eusart.c: 270:     EUSART_RxDataHandler();
 12192     0C5F  318E  2668  318C   	fcall	_EUSART_RxDataHandler
 12193     0C62                     i1l235:
 12194     0C62  0008               	return
 12195     0C63                     __end_of_EUSART_DefaultErrorHandler:
 12196                           
 12197                           	psect	text103
 12198     0E68                     __ptext103:	
 12199 ;; *************** function _EUSART_RxDataHandler *****************
 12200 ;; Defined at:
 12201 ;;		line 249 in file "mcc_generated_files/eusart.c"
 12202 ;; Parameters:    Size  Location     Type
 12203 ;;		None
 12204 ;; Auto vars:     Size  Location     Type
 12205 ;;		None
 12206 ;; Return value:  Size  Location     Type
 12207 ;;                  1    wreg      void 
 12208 ;; Registers used:
 12209 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12210 ;; Tracked objects:
 12211 ;;		On entry : 0/0
 12212 ;;		On exit  : 0/0
 12213 ;;		Unchanged: 0/0
 12214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12215 ;;      Params:         0       0       0       0       0       0       0       0
 12216 ;;      Locals:         0       0       0       0       0       0       0       0
 12217 ;;      Temps:          1       0       0       0       0       0       0       0
 12218 ;;      Totals:         1       0       0       0       0       0       0       0
 12219 ;;Total ram usage:        1 bytes
 12220 ;; Hardware stack levels used: 1
 12221 ;; This function calls:
 12222 ;;		Nothing
 12223 ;; This function is called by:
 12224 ;;		_EUSART_Receive_ISR
 12225 ;;		_EUSART_DefaultErrorHandler
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229     0E68                     _EUSART_RxDataHandler:	
 12230                           ;psect for function _EUSART_RxDataHandler
 12231                           
 12232     0E68                     i1l3424:	
 12233                           ;incstack = 0
 12234                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 12235                           
 12236                           
 12237                           ;mcc_generated_files/eusart.c: 251:     eusartRxBuffer[eusartRxHead++] = RCREG;
 12238     0E68  087A               	movf	_eusartRxHead,w
 12239     0E69  3EC5               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 12240     0E6A  0086               	movwf	6
 12241     0E6B  0187               	clrf	7
 12242     0E6C  0023               	movlb	3	; select bank3
 12243     0E6D  0819               	movf	25,w	;volatile
 12244     0E6E  0081               	movwf	1
 12245     0E6F                     i1l3426:
 12246     0E6F  3001               	movlw	1
 12247     0E70  00F0               	movwf	??_EUSART_RxDataHandler
 12248     0E71  0870               	movf	??_EUSART_RxDataHandler,w
 12249     0E72  07FA               	addwf	_eusartRxHead,f	;volatile
 12250     0E73                     i1l3428:
 12251                           
 12252                           ;mcc_generated_files/eusart.c: 252:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 12253     0E73  3008               	movlw	8
 12254     0E74  027A               	subwf	_eusartRxHead,w	;volatile
 12255     0E75  1C03               	skipc
 12256     0E76  2E78               	goto	u127_21
 12257     0E77  2E79               	goto	u127_20
 12258     0E78                     u127_21:
 12259     0E78  2E7A               	goto	i1l3432
 12260     0E79                     u127_20:
 12261     0E79                     i1l3430:
 12262                           
 12263                           ;mcc_generated_files/eusart.c: 253:     {;mcc_generated_files/eusart.c: 254:         eus
      +                          artRxHead = 0;
 12264     0E79  01FA               	clrf	_eusartRxHead	;volatile
 12265     0E7A                     i1l3432:
 12266                           
 12267                           ;mcc_generated_files/eusart.c: 256:     eusartRxCount++;
 12268     0E7A  3001               	movlw	1
 12269     0E7B  00F0               	movwf	??_EUSART_RxDataHandler
 12270     0E7C  0870               	movf	??_EUSART_RxDataHandler,w
 12271     0E7D  07F8               	addwf	_eusartRxCount,f	;volatile
 12272     0E7E                     i1l226:
 12273     0E7E  0008               	return
 12274     0E7F                     __end_of_EUSART_RxDataHandler:
 12275     007E                     btemp	set	126	;btemp
 12276     007E                     int$flags	set	126
 12277     007E                     wtemp0	set	126
 12278     219C                     
 12279                           	psect	idloc
 12280                           
 12281                           ;Config register IDLOC0 @ 0x8000
 12282                           ;	unspecified, using default values
 12283     8000                     	org	32768
 12284     8000  3FFF               	dw	16383
 12285                           
 12286                           ;Config register IDLOC1 @ 0x8001
 12287                           ;	unspecified, using default values
 12288     8001                     	org	32769
 12289     8001  3FFF               	dw	16383
 12290                           
 12291                           ;Config register IDLOC2 @ 0x8002
 12292                           ;	unspecified, using default values
 12293     8002                     	org	32770
 12294     8002  3FFF               	dw	16383
 12295                           
 12296                           ;Config register IDLOC3 @ 0x8003
 12297                           ;	unspecified, using default values
 12298     8003                     	org	32771
 12299     8003  3FFF               	dw	16383
 12300                           
 12301                           	psect	config
 12302                           
 12303                           ;Config register CONFIG1 @ 0x8007
 12304                           ;	Oscillator Selection
 12305                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 12306                           ;	Watchdog Timer Enable
 12307                           ;	WDTE = ON, WDT enabled
 12308                           ;	Power-up Timer Enable
 12309                           ;	PWRTE = OFF, PWRT disabled
 12310                           ;	MCLR Pin Function Select
 12311                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 12312                           ;	Flash Program Memory Code Protection
 12313                           ;	CP = OFF, Program memory code protection is disabled
 12314                           ;	Data Memory Code Protection
 12315                           ;	CPD = OFF, Data memory code protection is disabled
 12316                           ;	Brown-out Reset Enable
 12317                           ;	BOREN = ON, Brown-out Reset enabled
 12318                           ;	Clock Out Enable
 12319                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 12320                           ;	Internal/External Switchover
 12321                           ;	IESO = ON, Internal/External Switchover mode is enabled
 12322                           ;	Fail-Safe Clock Monitor Enable
 12323                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 12324     8007                     	org	32775
 12325     8007  3FFC               	dw	16380
 12326                           
 12327                           ;Config register CONFIG2 @ 0x8008
 12328                           ;	Flash Memory Self-Write Protection
 12329                           ;	WRT = OFF, Write protection off
 12330                           ;	Voltage Regulator Capacitor Enable
 12331                           ;	VCAPEN = RA5, VCAP functionality is enabled on RA5
 12332                           ;	PLL Enable
 12333                           ;	PLLEN = OFF, 4x PLL disabled
 12334                           ;	Stack Overflow/Underflow Reset Enable
 12335                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 12336                           ;	Brown-out Reset Voltage Selection
 12337                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 12338                           ;	Low-Voltage Programming Enable
 12339                           ;	LVP = ON, Low-voltage programming enabled
 12340     8008                     	org	32776
 12341     8008  3EDF               	dw	16095

Data Sizes:
    Strings     0
    Constant    40
    Data        12
    BSS         86
    Persistent  49
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     62      78
    BANK1            80      0      80
    BANK2            80      4      18
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            12      0       0
    BANK6             0      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_DO_TX$2359$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    I2C_DO_TX$2364	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    I2C_DO_TX$2359	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), 

    I2C_MasterFsm$2358	const PTR FTN()enum E3112 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    S1071$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(2) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    S1563$data	PTR unsigned char  size(2) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(2) Largest target is 0

    I2C_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 6
		 -> ReadData@aData(BANK0[6]), 

    I2C_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 2
		 -> SHT30_CMD_MEASURE_H_Enable(BANK1[2]), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), NULL(), 

    I2C_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), NULL(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 6
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), ReadData@aData(BANK0[6]), 
		 -> SHT30_CMD_MEASURE_H_Enable(BANK1[2]), 

    S1071$data_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), ReadData@aData(BANK0[6]), 
		 -> SHT30_CMD_MEASURE_H_Enable(BANK1[2]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> I2C_Read1ByteRegister@returnValue.data(COMMON[2]), I2C_Read2ByteRegister@returnValue.data(COMMON[2]), I2C_Write1ByteRegister@data.data(COMMON[2]), I2C_Write2ByteRegister@data.data(COMMON[2]), 
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), bufferBlock.data(COMMON[2]), I2C_Write2ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Enable(BANK1[2]), 

    S1071$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), NULL(NULL[0]), 

    S1071$callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), 

    i2c_fsmStateTable	const PTR FTN()enum E3112[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    ModbusRTU_Slave_Poll@reg	PTR short  size(1) Largest target is 4
		 -> MB_Register(BANK1[4]), 

    ModbusSlaveF04@reg	PTR short  size(1) Largest target is 4
		 -> MB_Register(BANK1[4]), 

    S814$INPUT_REGS	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.INPUT_REGS	PTR unsigned short  size(2) Largest target is 0

    S814$HOLDING_REGS	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.HOLDING_REGS	PTR unsigned short  size(2) Largest target is 0

    S814$au16regs	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.au16regs	PTR unsigned short  size(2) Largest target is 0

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> rtcc_handle(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> rtcc_handle(), NULL(), TMR1_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_DefaultFramingErrorHandler(), 

    MSSP_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_Receive_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_Transmit_ISR(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _I2C_MasterIsr->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX->_I2C_MasterSendTxData
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->i1_I2C_SetCallback
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _Task_Sensor->_ReadData
    _llabs->_Get_millis
    _ReadData->_I2C_WriteNBytes
    _I2C_WriteNBytes->_I2C_SetAddressNackCallback
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_ReadNBytes->_I2C_Open
    _I2C_Open->_I2C_SetInterruptHandler
    _I2C_MasterRead->_I2C_MasterOperation
    _ModbusSlave_Process->_ModbusRTU_Slave_Poll
    _ModbusRTU_Slave_Poll->_ModbusSlaveF04
    _validateRequest->_Modbus_calcCRC
    _Modbus_getRxBuff->_EUSART_Read
    _ModbusSlaveF04->_Modbus_sendTxBuff
    _Modbus_sendTxBuff->_Modbus_calcCRC
    _App_Init->_Device_Init
    _Tick_Init_SES->_TMR1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _ModbusSlave_Process->_ModbusRTU_Slave_Poll

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10713
                           _App_Init
                        _App_Process
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     816
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     211
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     605
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _App_Process                                          0     0      0    9686
                     _Task_Indicator
                            _Task_MB
                        _Task_Sensor
 ---------------------------------------------------------------------------------
 (2) _Task_Sensor                                         12    12      0    6477
                                             22 BANK0     12    12      0
                         _Get_millis
                           _ReadData
                              _llabs
 ---------------------------------------------------------------------------------
 (3) _llabs                                                8     0      8     183
                                              4 BANK0      8     0      8
                         _Get_millis (ARG)
 ---------------------------------------------------------------------------------
 (3) _ReadData                                            10    10      0    6294
                                             12 BANK0     10    10      0
                         _Get_millis
                     _I2C_ReadNBytes
                    _I2C_WriteNBytes
 ---------------------------------------------------------------------------------
 (4) _I2C_WriteNBytes                                      4     1      3    4155
                                              8 BANK0      4     1      3
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C_SetAddressNackCallback                           4     0      4    2189
                                              4 BANK0      4     0      4
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (6) _I2C_SetCallback                                      4     1      3    1047
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWrite                                      0     0      0      68
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (4) _I2C_ReadNBytes                                       4     1      3    1966
                                              4 BANK0      4     1      3
                          _I2C_Close
                     _I2C_MasterRead
                           _I2C_Open
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C_SetBuffer                                        3     1      2    1399
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _I2C_Open                                             2     2      0     189
                                              2 BANK0      2     2      0
                 _I2C_MasterClearIrq
                _I2C_MasterEnableIrq
                     _I2C_MasterOpen
            _I2C_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (6) _I2C_SetInterruptHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterEnableIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterRead                                       0     0      0      68
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterOperation                                  2     2      0      68
                                              0 BANK0      2     2      0
                    _I2C_MasterStart
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_Close                                            1     1      0      37
                                              0 BANK0      1     1      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Task_MB                                              0     0      0    3209
                   _ModbusSlave_Init
                _ModbusSlave_Process
 ---------------------------------------------------------------------------------
 (3) _ModbusSlave_Process                                  1     1      0    3178
               _ModbusRTU_Slave_Poll
 ---------------------------------------------------------------------------------
 (4) _ModbusRTU_Slave_Poll                                14    12      2    3172
                                             52 BANK0     10     8      2
                                              0 BANK2      4     4      0
                         _Get_millis
                     _ModbusSlaveF04
                   _Modbus_getRxBuff
                  _Modbus_sendTxBuff
                     _buildException
                    _validateRequest
 ---------------------------------------------------------------------------------
 (5) _validateRequest                                     17    17      0     584
                                             15 BANK0     17    17      0
                     _Modbus_calcCRC
 ---------------------------------------------------------------------------------
 (5) _buildException                                       3     3      0      65
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _Modbus_getRxBuff                                     8     8      0      74
                                              2 BANK0      8     8      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _ModbusSlaveF04                                      23    21      2    1209
                                             30 BANK0     22    20      2
                  _Modbus_sendTxBuff
 ---------------------------------------------------------------------------------
 (5) _Modbus_sendTxBuff                                   15    15      0     640
                                             15 BANK0     15    15      0
                       _EUSART_Write
                  _EUSART_is_tx_done
                         _Get_millis
                     _Modbus_calcCRC
 ---------------------------------------------------------------------------------
 (6) _Modbus_calcCRC                                      15    13      2     411
                                              0 BANK0     15    13      2
 ---------------------------------------------------------------------------------
 (4) _Get_millis                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) _EUSART_is_tx_done                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ModbusSlave_Init                                     1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Task_Indicator                                       2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _App_Init                                             0     0      0     211
                        _Device_Init
                    _TMR1_StartTimer
                      _Tick_Init_SES
 ---------------------------------------------------------------------------------
 (2) _Tick_Init_SES                                        0     0      0     211
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Device_Init                                          3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0   40698
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                      _I2C_MasterIsr *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     164
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     164
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                                NULL *
       _TMR1_DefaultInterruptHandler *
                        _rtcc_handle *
 ---------------------------------------------------------------------------------
 (11) _rtcc_handle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterIsr                                        0     0      0   40534
                      _I2C_MasterFsm
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterFsm                                       2     2      0   40534
                                              3 COMMON     2     2      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                   _I2C_MasterIsNack
               i1_I2C_MasterClearIrq
 ---------------------------------------------------------------------------------
 (11) i1_I2C_MasterClearIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_TX_EMPTY                                     2     2      0   10117
                                              0 COMMON     2     2      0
                                NULL *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_TX                                           2     2      0   10139
                                              1 COMMON     2     2      0
                                NULL *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_RESTART_WRITE                           0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_RESTART_READ                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_ADR_WRITE                               0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_ADR_READ                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterSendTxData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RX_ACK                                       0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RX                                           2     2      0   10117
                                              0 COMMON     2     2      0
                                NULL *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterSendAck                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RX_NACK_STOP                                 0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RX_NACK_RESTART                              0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterSendNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RCEN                                         0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_ADDRESS_NACK                                 2     2      0   10117
                                              0 COMMON     2     2      0
                                NULL *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _wr2RegCompleteHandler                               1     0      1    1966
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) _wr1RegCompleteHandler                               1     0      1    1966
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) _rdBlkRegCompleteHandler                             1     0      1    2253
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) _rd2RegCompleteHandler                               1     0      1    1966
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) _rd1RegCompleteHandler                               1     0      1    1966
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (13) i1_I2C_SetBuffer                                     3     1      2     174
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (13) _I2C_SetDataCompleteCallback                         3     0      3    1770
                                              4 COMMON     3     0      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (14) i1_I2C_SetCallback                                   4     1      3     206
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_STOP                                    0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_RESTART                                 0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_CallbackReturnStop                              1     0      1       0
                                              7 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (12) _I2C_CallbackReturnReset                             1     0      1       0
                                              7 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _App_Init
     _Device_Init
     _TMR1_StartTimer
     _Tick_Init_SES
       _TMR1_SetInterruptHandler
   _App_Process
     _Task_Indicator
     _Task_MB
       _ModbusSlave_Init
       _ModbusSlave_Process
         _ModbusRTU_Slave_Poll
           _Get_millis
           _ModbusSlaveF04
             _Modbus_sendTxBuff
               _EUSART_Write
               _EUSART_is_tx_done
               _Get_millis
               _Modbus_calcCRC
           _Modbus_getRxBuff
             _EUSART_Read
           _Modbus_sendTxBuff
           _buildException
           _validateRequest
             _Modbus_calcCRC
     _Task_Sensor
       _Get_millis
       _ReadData
         _Get_millis
         _I2C_ReadNBytes
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterRead
             _I2C_MasterOperation
               _I2C_MasterStart
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterEnableIrq
             _I2C_MasterOpen
             _I2C_SetInterruptHandler
           _I2C_SetBuffer
         _I2C_WriteNBytes
           _I2C_Close
           _I2C_MasterWrite
             _I2C_MasterOperation
           _I2C_Open
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
       _llabs
         _Get_millis (ARG)
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _I2C_MasterIsr *
     _I2C_MasterFsm
       _I2C_DO_ADDRESS_NACK *
         NULL(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_STOP *
           _I2C_MasterStop
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
           i1_I2C_SetBuffer
       _I2C_DO_IDLE *
       _I2C_DO_RCEN *
         _I2C_MasterStartRx
       _I2C_DO_RESET *
       _I2C_DO_RX *
         NULL(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_RX_NACK_RESTART *
           _I2C_MasterSendNack
         _I2C_DO_RX_NACK_STOP *
           _I2C_MasterSendNack
         _I2C_MasterGetRxData *
         _I2C_MasterSendAck *
         _rd1RegCompleteHandler *
         _rd2RegCompleteHandler *
         _rdBlkRegCompleteHandler *
         _wr1RegCompleteHandler *
         _wr2RegCompleteHandler *
       _I2C_DO_RX_ACK *
         _I2C_MasterSendAck
       _I2C_DO_RX_NACK_RESTART *
       _I2C_DO_RX_NACK_STOP *
       _I2C_DO_SEND_ADR_READ *
         _I2C_MasterSendTxData
       _I2C_DO_SEND_ADR_WRITE *
         _I2C_MasterSendTxData
       _I2C_DO_SEND_RESTART *
       _I2C_DO_SEND_RESTART_READ *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_RESTART_WRITE *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_STOP *
       _I2C_DO_TX *
         NULL(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART_READ *
         _I2C_DO_SEND_RESTART_WRITE *
         _I2C_DO_SEND_STOP *
         _I2C_MasterIsNack *
         _I2C_MasterSendTxData *
         _rd1RegCompleteHandler *
         _rd2RegCompleteHandler *
         _rdBlkRegCompleteHandler *
         _wr1RegCompleteHandler *
         _wr2RegCompleteHandler *
       _I2C_DO_TX_EMPTY *
         NULL(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART *
         _I2C_DO_SEND_STOP *
         _I2C_MasterSetIrq *
         _rd1RegCompleteHandler *
         _rd2RegCompleteHandler *
         _rdBlkRegCompleteHandler *
         _wr1RegCompleteHandler *
         _wr2RegCompleteHandler *
       _I2C_MasterIsNack *
       i1_I2C_MasterClearIrq *
   _TMR1_ISR *
     _TMR1_CallBack
       NULL(Fake) *
       _TMR1_DefaultInterruptHandler *
       _rtcc_handle *
     _TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      BA       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3E      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      4      12      10       22.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5                C      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      BA      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Apr 26 08:58:31 2023

                            _Modbus_sendTxBuff 0091                           ?_ModbusSlave_Process 0070  
                ?_EUSART_SetRxInterruptHandler 0020                         ??_I2C_DO_SEND_ADR_READ 0070  
                      ??_I2C_DO_SEND_ADR_WRITE 0071                                    _SSPSTATbits 0214  
                           ?_Modbus_sendTxBuff 0070                                             l31 07FF  
                                           l62 0CD0                                             l65 0C7A  
                                           l59 0E52                        buildException@exception 0021  
                        ??_I2C_DO_SEND_RESTART 0070                                            l200 07A4  
                                          l203 07BB                                            l401 0F6B  
                                          l241 0D05                                            l250 0D0E  
                                          l403 0F6D                                            l412 0F73  
                                          l244 0CF3                                            l430 0D34  
                                          l414 0F75                                            l238 0CFC  
                                          l407 0F6F                                            l503 00E9  
                                          l247 0D17                                            l175 06A6  
                                          l280 0C4F                                            l416 0F8D  
                                          l184 0C76                                            l409 0F71  
                                          l433 0D48                                            l530 0570  
                                          l194 0FB2                                            l427 070F  
                                          l515 0153                                            l533 0573  
                                          l517 0173                                            l365 04F2  
                                          l277 0EAF                                            l526 043D  
                                          l374 03DE                                            l535 0594  
                                          l199 079A                                            l472 0792  
                                          l481 0499                                            l545 0E3F  
                                          l721 0FD7                                            l298 0CEA  
                                          l562 0D3E                                            l538 0EC9  
                                          l707 0D5F                                            l556 0E2C  
                                          l716 0CC2                                            l469 02E5  
                                          l485 036A                                            l493 0243  
                                          l671 0D20                                            l840 0DAA  
                                          l843 0C55                                            l675 0621  
                                          l691 0CB6                                            l861 0C5B  
                                          l685 0F02                                            l679 0EE4  
                                          l688 0CB1                                            l882 0C5E  
                                          l698 0E67                                            l891 0C52  
                                          l972 0767                                            l981 0F23  
                                          l888 0C58                            __end_of_App_Process 0D49  
                              _timer1ReloadVal 0066                         ??_EUSART_RxDataHandler 0070  
                          ??_Modbus_sendTxBuff 002F                 ?_EUSART_SetFramingErrorHandler 0020  
                                          wreg 0009                            __end_of_Device_Init 0710  
                 ??_I2C_SetAddressNackCallback 0028                                   ?_EUSART_Read 0070  
                     ??_I2C_CallbackReturnStop 0078                                   _I2C_DO_RESET 0CA8  
                              ?_buildException 0070                        ??_rd2RegCompleteHandler 0078  
                                         l4100 07B6                                           l4102 07B7  
                                         l4110 03E1                                           l1615 05DB  
                                         l4104 07B9                                           l4112 03E5  
                                         l4200 0134                                           l4106 0D35  
                                         l4130 040D                                           l4114 03E8  
                                         l4202 0155                                           l4210 0C50  
                                         l1618 05DB                                           l4140 0425  
                                         l4132 0411                                           l4124 03FC  
                                         l4116 03FA                                           l4204 015A  
                                         l4300 046A                                           l4220 0DA9  
                                         l4212 0D9E                                           l4142 0430  
                                         l4134 0415                                           l4126 0402  
                                         l4118 03FA                                           l4206 016A  
                                         l4150 0F8E                                           l4310 0489  
                                         l4302 0474                                           l4230 0EE7  
                                         l4214 0DA3                                           l4144 0439  
                                         l4136 041B                                           l4128 0407  
                                         l4160 0FAA                                           l4152 0F8E  
                                         l4312 0492                                           l4304 0476  
                                         l4320 02E6                                           l4400 0ED8  
                                         l4240 0EFA                                           l4232 0EEE  
                                         l4224 0C5C                                           l4216 0DA4  
                                         l4208 0CBD                                           l4090 0795  
                                         l4138 041F                                           l4162 0FAB  
                                         l4154 0F93                                           l4306 047B  
                                         l4330 0337                                           l4322 0318  
                                         l4226 0C56                                           l4402 0EDB  
                                         l4242 0EFD                                           l4234 0EEF  
                                         l4410 0CAD                                           l4218 0DA6  
                                         l4250 0FBB                                           l4092 079F  
                                         l4084 0C73                                           l4180 00D6  
                                         l4172 0091                                           l4260 025F  
                                         l4164 0FAD                                           l4156 0FA0  
                                         l4316 0494                                           l4308 0484  
                                         l4340 034F                                           l4324 032C  
                                         l4500 0221                                           l4228 0C53  
                                         l4404 0EDE                                           l4148 0C59  
                                         l4236 0EF1                                           l4244 0F00  
                                         l4420 0E5A                                           l4252 0FCA  
                                         l4094 07A5                                           l4190 0103  
                                         l4182 00DE                                           l4174 009E  
                                         l4270 027B                                           l4262 0266  
                                         l4254 0246                                           l4166 0FAF  
                                         l4158 0FA4                                           l4342 0353  
                                         l4326 0335                                           l4406 0EE2  
                                         l4238 0EF6                                           l4422 0E66  
                                         l4414 0CB2                                           l4430 0749  
                                         l4096 07AC                                           l4088 0795  
                                         l4192 0114                                           l4184 00EB  
                                         l4176 00B7                                           l4272 02CD  
                                         l4264 0268                                           l4256 0254  
                                         l4168 0FB0                                           l4352 0369  
                                         l4344 0359                                           l4336 033A  
                                         l4504 0223                                           l4360 05E9  
                                         l4440 0F05                                           l4248 0FB5  
                                         l4424 0D54                                           l4432 0752  
                                         l4520 0CFD                                           l4600 0C77  
                                         l4098 07B0                                           l4186 00EF  
                                         l4178 00BF                                           l4274 02D1  
                                         l4266 0270                                           l4258 0258  
                                         l4290 043E                                           l4282 076A  
                                         l4346 035E                                           l4338 034C  
                                         l4506 0233                                           l4450 0182  
                                         l4370 05F8                                           l4362 05EA  
                                         l4418 0E55                                           l4442 0F0F  
                                         l4434 075C                                           l4426 073F  
                                         l4530 04B8                                           l4522 0CEB  
                                         l4514 0D06                                           l4610 0E9E  
                                         l4602 0E97                                           l4524 0CE2  
                                         l4700 0D31                                           l4196 011F  
                                         l4188 00FE                                           l4276 02E2  
                                         l4268 0276                                           l4284 077D  
                                         l4348 0367                                           l4508 0239  
                                         l4460 0199                                           l4452 0187  
                                         l4380 060C                                           l4372 05FD  
                                         l4364 05EB                                           l4356 05DE  
                                         l4444 0F1B                                           l4436 075F  
                                         l4428 073F                                           l4540 04F0  
                                         l4532 04DE                                           l4516 0D0F  
                                         l4620 0667                                           l4612 0EA2  
                                         l4604 0E99                                           l4550 055C  
                                         l4198 0127                                           l4278 02E2  
                                         l4294 0440                                           l4286 0786  
                                         l4446 0176                                           l4382 0614  
                                         l4374 0601                                           l4366 05F2  
                                         l4358 05E5                                           l4438 0F05  
                                         l4534 04E9                                           l4526 049A  
                                         l4542 0595                                           l4702 0D3F  
                                         l4518 0CF4                                           l4630 0680  
                                         l4622 066F                                           l4614 0EA4  
                                         l4606 0E9B                                           l4552 0575  
                                         l4296 0446                                           l4288 078C  
                                         l4480 01F1                                           l4472 01DB  
                                         l4456 0189                                           l4448 017F  
                                         l4560 0EC0                                           l4392 0ECA  
                                         l4384 0617                                           l4376 0606  
                                         l4368 05F7                                           l4536 04EC  
                                         l4528 04A5                                           l4544 05B3  
                                         l4704 0D42                                           l4640 069F  
                                         l4632 0682                                           l4624 0679  
                                         l4616 0EAC                                           l4608 0E9D  
                                         l4720 0DC1                                           l4650 0C4D  
                                         l4546 0548                                           l4298 0462  
                                         l4490 0204                                           l4474 01E0  
                                         l4458 0193                                           l4466 01AA  
                                         l4554 0EB0                                           l4394 0ED2  
                                         l4386 061A                                           l4378 0607  
                                         l4538 04EE                                           l4706 0D45  
                                         l4642 06A1                                           l4634 0683  
                                         l4626 067C                                           l4618 0665  
                                         l4570 07EF                                           l4562 07E4  
                                         l4714 0DB9                                           l4548 0554  
                                         l4492 0209                                           l4484 01F4  
                                         l4476 01E5                                           l4556 0EB0  
                                         l4396 0ED3                                           l4388 061F  
                                         l4660 03D6                                           l4652 036B  
                                         l4644 06A2                                           l4636 068B  
                                         l4628 067E                                           l4580 07FA  
                                         l4572 07F1                                           l4564 07E8  
                                         l4716 0DBF                                           l4494 020E  
                                         l4478 01EB                                           l4558 0EB8  
                                         l4398 0ED5                                           l4662 03D9  
                                         l4654 036D                                           l4646 06A3  
                                         l4638 0693                                           l4590 0D1C  
                                         l4582 07FB                                           l4574 07F3  
                                         l4566 07EA                                           l4718 0DC0  
                                         l4680 06F8                                           l4672 0F77  
                                         l4496 0213                                           l4664 03DC  
                                         l4656 03C0                                           l4648 06A4  
                                         l4592 0D1F                                           l4584 07FD  
                                         l4576 07F6                                           l4568 07ED  
                                         l4682 0E1C                                           l4498 021A  
                                         l4690 0E38                                           l4658 03D3  
                                         l4586 0D18                                           l4594 0CCA  
                                         l4578 07F8                                           l4684 0E25  
                                         l4924 0F82                                           l4668 0F6A  
                                         l4692 0E3C                                           l4588 0D1A  
                                         l4596 0CCD                                           l4678 06E0  
                                         l4686 0E2D                                           l4598 0CCE  
                                         l4694 0E40                                           l4696 0D2B  
                                         l4688 0E33                                           l4698 0D2E  
                                         u2000 0F23                                           u2001 0F22  
                                         u2010 0187                                           u2011 0186  
                                         u2020 0193                                           u2021 0192  
                                         u2110 0570                                           u2030 01DA  
                                         u2111 056F                                           u2031 01D9  
                                         u2040 01F1                                           u2120 03C0  
                                         u2041 01F0                                           u2121 03BF  
                                         u2050 0203                                           u2130 0E33  
                                         u2051 0202                                           u2131 0E32  
                                         u2060 020E                                           u2061 020D  
                                         _LATA 010C                                           u2070 0213  
                                         _LATB 010D                                           u2071 0212  
                                         _LATC 010E                                           u2080 04DE  
                                         u2081 04DD                                           _LATE 0110  
                                         u2090 05B3                                           u2091 05B2  
                                         u1700 07B6                                           u1701 07B5  
                                         u1720 040D                                           u1800 0127  
                                         u1721 040C                                           u1801 0126  
                                         u1730 041B                                           u1810 0153  
                                         u1731 041A                                           u1715 0403  
                                         u1811 0152                                           u1740 0425  
                                         u1900 032C                                           u1820 0DA3  
                                         u1741 0424                                           u1901 032B  
                                         u1821 0DA2                                           u1750 0F93  
                                         u1910 034C                                           u1830 0EEE  
                                         u1751 0F92                                           u1911 034B  
                                         u1831 0EED                                           u1680 079A  
                                         u1760 0FAA                                           u1920 0359  
                                         u1840 0EF6                                           u1681 0799  
                                         u1761 0FA9                                           u1921 0358  
                                         u1905 0328                                           u1841 0EF5  
                                         u1690 079F                                           u1770 00E9  
                                         u1930 035E                                           u1850 0FBB  
                                         u1691 079E                                           u1771 00E8  
                                         u1931 035D                                           u1851 0FBA  
                                         u1780 0114                                           u1860 02E2  
                                         u1940 05E5                                           u1781 0113  
                                         u1861 02E1                                           u1941 05E4  
                                         u1790 011F                                           u1870 0474  
                                         u1950 0ED2                                           u1791 011E  
                                         u1871 0473                                           u1951 0ED1  
                                         u1880 047B                                           u1960 0E5A  
                                         u1785 0110                                           u1865 02DE  
                                         u1881 047A                                           u1961 0E59  
                                         u1890 0489                                           u1970 0749  
                                         u1891 0488                                           u1971 0748  
                                         u1980 0767                                           u1981 0766  
                                         u1990 0F0F                                           u1991 0F0E  
                                         i1l91 002C                                           i1l93 003C  
                                         i1l94 0055                                           i1l95 0047  
                                         i1l89 001B                                           _WPUB 020D  
                                         _WPUE 0210                        ??_wr2RegCompleteHandler 0078  
                                         _main 0DB9                       ?_I2C_CallbackReturnReset 0077  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                             __end_of_I2C_Open 0622                                           btemp 007E  
                                         start 0057                      __end_of_Modbus_sendTxBuff 0174  
                      _I2C_SetInterruptHandler 0CBD                                ?_Task_Indicator 0070  
                   ??_TMR1_SetInterruptHandler 0022                          ??_ModbusSlave_Process 005E  
                             ?_I2C_MasterClose 0070                                __end_of_Task_MB 0E40  
                              _I2C_WriteNBytes 073D                                  ?_EUSART_Write 0070  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 0C99  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 0CD1  
                                        ?_main 0070                                _TMR1_StartTimer 0C4D  
                                        _T1CON 0018                                          i1l100 0055  
                                        i1l212 0F43                                          i1l301 0C38  
                                        i1l222 06DF                                          i1l215 0F45  
                                        i1l232 0C66                                          i1l226 0E7E  
                                        i1l235 0C62                                          i1l229 0C37  
                                        i1l291 0D9D                                          i1l701 0D53  
                                        i1l295 0D90                                          i1l288 0E1B  
                                        i1l721 0F69                                          i1l801 0C98  
                                        i1l810 0CA7                                          i1l731 0C84  
                                        i1l740 0529                                          i1l804 0C9D  
                                        i1l724 0C72                                          i1l813 0CAC  
                                        i1l830 0003                                          i1l734 0CE1  
                                        i1l743 0545                                          i1l807 0CA2  
                                        i1l559 0D2A                                          i1l728 07E3  
                                        i1l737 0CD8                                          i1l827 0C3A  
                                        i1l819 0FFF                                          i1l852 0C3D  
                                        i1l756 063E                                          i1l757 0664  
                                        i1l846 0C46                                          i1l870 0C6E  
                                        i1l774 073C                                          i1l864 0C40  
                                        i1l768 0CC9                                          i1l792 0C89  
                                        i1l873 0C6A                                          i1l849 0C7F  
                                        i1l698 0DB8                                          i1l858 0C43  
                                        i1l867 0CBC                                          i1l795 0C8E  
                                        i1l891 0C4C                                          i1l894 0C49  
                                        i1l798 0C93                                          i1l993 0DE8  
                                        i1l996 0DF9                                          i1l999 0E0A  
                                        _RCREG 0199                                          _RCSTA 019D  
                             ?_validateRequest 0070                                          _TMR1H 0017  
                                        _TMR1L 0016                              ??_I2C_DO_TX_EMPTY 0070  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _TRISE 0090  
                                        _TXREG 019A                                          _TXSTA 019E  
                                        _SW_Ad 00EF                                     _Get_millis 0D35  
                             __end_of_TMR1_ISR 0D9E                              __end_of_I2C_DO_RX 0665  
                            __end_of_I2C_DO_TX 0546                                 _WDT_Initialize 0C77  
                                        _llabs 0595                              __end_of_I2C_Close 0EE5  
               I2C_MasterOperation@returnValue 0021                        _I2C_MasterEnableRestart 0C3B  
                      __end_of_TMR1_Initialize 0EB0                                          pclath 000A  
                             ?_I2C_SetCallback 0020                   I2C_SetAddressNackCallback@cb 0024  
                                        status 0003                                          wtemp0 007E  
                            ?_I2C_DO_SEND_STOP 0070                              ??i1_I2C_SetBuffer 0072  
                              _TMR1_WriteTimer 0E0B                               __end_of_App_Init 0D35  
                           ??_I2C_DO_SEND_STOP 0070                                __initialization 0059  
                                 __end_of_main 0DC7                                    _App_Process 0D3F  
                    ?_I2C_DO_SEND_RESTART_READ 0070                               __end_of_ReadData 04F3  
                               ??_EUSART_Write 0020                                 ?_I2C_DO_RX_ACK 0070  
                  ?_INTERRUPT_InterruptManager 0070                   __end_of_ModbusRTU_Slave_Poll 0244  
               ??_EUSART_SetRxInterruptHandler 0022                                    _Device_Init 06E0  
                                       ??_main 005E                   __end_ofi1_I2C_MasterClearIrq 0C4D  
                            ?_I2C_MasterIsNack 0070                              ?_I2C_MasterSetIrq 0070  
                           ??_I2C_MasterIsNack 0070                           i1I2C_SetCallback@idx 0073  
                         i1I2C_SetCallback@ptr 0072                         __end_of_WDT_Initialize 0C7B  
                           ??_I2C_MasterSetIrq 0070                                  ??_Task_Sensor 0036  
    __end_of_EUSART_DefaultFramingErrorHandler 0C38            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0C37  
                   _EUSART_OverrunErrorHandler 0122                                         ?_llabs 0024  
              __end_of_I2C_CallbackReturnReset 0004                                         _APFCON 011D  
                I2C_SetDataCompleteCallback@cb 0074                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _BORCON 0116  
                                       _T1GCON 0019                                         i1l1002 0DD7  
                                       i1l1005 0E96                        TMR1_WriteTimer@timerVal 0070  
                                       u103_20 0F4D                                         u103_21 0F4C  
                                       i1l3040 0F5C                                         i1l3036 0F47  
                                       i1l3212 0D49                                         i1l3220 0C67  
                                       i1l3038 0F4D                                         i1l3222 0DAC  
                                       i1l3216 0C3B                                         i1l3224 0DB1  
                                       i1l3400 0DC7                                         i1l3320 0C7C  
                                       i1l3218 0C3E                                         i1l3226 0DB7  
                                       i1l3402 0DCF                                         i1l3410 0E95  
                                       i1l3322 0C85                                         i1l3330 0C8D  
                                       i1l3404 0DD6                                         i1l3340 0C44  
                                       i1l3316 0CB7                                         i1l3324 0C88  
                                       i1l3430 0E79                                         i1l3510 0504  
                                       i1l3502 04FC                                         i1l3334 0C94  
                                       i1l3432 0E7A                                         i1l3424 0E68  
                                       i1l3408 0E7F                                         i1l3344 0C6B  
                                       i1l3520 0537                                         i1l3328 0C8A  
                                       i1l3360 0C8F                                         i1l3336 0C97  
                                       i1l3600 0C9C                                         i1l3352 0C9E  
                                       i1l3426 0E6F                                         i1l3522 0542  
                                       i1l3506 0500                                         i1l3362 0C92  
                                       i1l3354 0CA1                                         i1l3346 0CA3  
                                       i1l3428 0E73                                         i1l3372 0002  
                                       i1l3380 0DE7                                         i1l3524 0544  
                                       i1l3516 0508                                         i1l3540 063C  
                                       i1l3532 0622                                         i1l3348 0CA6  
                                       i1l3604 0CA8                                         i1l3620 0FE1  
                                       i1l3612 0FD8                                         i1l3700 0E19  
                                       i1l3358 0C41                                         i1l3366 0C47  
                                       i1l3518 052B                                         i1l3550 0644  
                                       i1l3534 062A                                         i1l3606 0CAA  
                                       i1l3614 0FDA                                         i1l3702 0D84  
                                       u115_20 0DB1                                         i1l3368 0C39  
                                       i1l3376 0DD8                                         i1l3384 0DE9  
                                       i1l3392 0DFA                                         i1l3536 062F  
                                       i1l3608 0CAB                                         i1l3616 0FDD  
                                       i1l3472 0D21                                         i1l3704 0D8B  
                                       u115_21 0DB0                                         i1l3378 0DE0  
                                       i1l3386 0DF1                                         i1l3394 0E02  
                                       i1l3474 0C80                                         i1l3482 0CD9  
                                       i1l3490 0CD1                                         i1l3546 0640  
                                       i1l3538 0639                                         i1l3626 0FE5  
                                       i1l3634 0C4A                                         i1l3810 0006  
                                       i1l3388 0DF8                                         i1l3396 0E09  
                                       i1l3580 071A                                         i1l3572 0710  
                                       i1l3476 0C82                                         i1l3484 0CDB  
                                       i1l3492 0CD3                                         i1l3556 0648  
                                       i1l3564 0CC3                                         i1l3820 0025  
                                       i1l3812 000A                                         i1l3574 0713  
                                       i1l3590 0720                                         i1l3478 0C83  
                                       i1l3486 0CE0                                         i1l3494 0CD7  
                                       i1l3566 0CC5                                         i1l3750 07BF  
                                       i1l3830 004C                                         i1l3822 0031  
                                       i1l3814 000F                                         i1l3584 071C  
                                       u132_20 04FB                                         i1l3568 0CC8  
                                       u140_20 07CC                                         i1l3752 07C4  
                                       i1l3808 0C6F                                         i1l3760 0D91  
                                       i1l3832 0051                                         i1l3824 0036  
                                       i1l3816 0014                                         u132_21 04FA  
                                       u140_21 07CB                                         i1l3770 0F36  
                                       i1l3578 0717                                         i1l3498 04F3  
                                       i1l3754 07CC                                         i1l3690 0E10  
                                       i1l3762 0D93                                         i1l3826 0041  
                                       i1l3818 0020                                         i1l3684 0C63  
                                       i1l3780 06B1                                         i1l3772 0F3C  
                                       i1l3764 0F24                                         i1l3756 07CF  
                                       i1l3748 07BC                                         i1l3692 0E11  
                                       i1l3686 0C5F                                         i1l3790 06CC  
                                       i1l3782 06B6                                         i1l3774 0F3D  
                                       i1l3766 0F2B                                         i1l3598 0C99  
                                       i1l3694 0E13                                         i1l3792 06D5  
                                       i1l3784 06BC                                         i1l3776 06A7  
                                       i1l3768 0F32                                         u141_20 0F2B  
                                       u133_20 0542                                         i1l3696 0E15  
                                       i1l3688 0E0B                                         u141_21 0F2A  
                                       u133_21 0541                                         i1l3794 06DC  
                                       i1l3786 06C1                                         i1l3778 06AC  
                                       i1l4930 051B                                         i1l3698 0E17  
                                       i1l3788 06C6                                         i1l4932 072E  
                                       i1l4926 0FF7                                         u142_20 0F3C  
                                       i1l4928 0656                                         u134_20 0639  
                                       u150_20 0025                                         u142_21 0F3B  
                                       u134_21 0638                                         u150_21 0024  
                                       u127_20 0E79                                         u143_20 06B1  
                                       u135_20 0E10                                         u151_20 0031  
                                       u127_21 0E78                                         u143_21 06B0  
                                       u135_21 0E0F                                         u151_21 0030  
                                       u144_20 06C1                                         u136_20 0D8B  
                                       u152_20 0036                                         u144_21 06C0  
                                       u136_21 0D8A                                         u152_21 0035  
                                       u145_20 06D5                                         u153_20 0041  
                                       u145_21 06D4                                         u153_21 0040  
                                       u154_20 0046                                         u146_20 000A  
                                       u154_21 0045                                         u146_21 0009  
                                       u139_20 07C4                                         u155_20 004C  
                                       u147_20 000F                                         u139_21 07C3  
                                       u155_21 004B                                         u147_21 000E  
                                       u156_20 0051                                         u148_20 0014  
                                       u156_21 0050                                         u148_21 0013  
                                       u149_20 0020                                         u149_21 001F  
                                       _OSCCON 0099                                         u210lld 05DA  
                    ??_I2C_SetInterruptHandler 0022                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                                       _SSPADD 0212                                         _SSPBUF 0211  
                          _I2C_MasterEnableIrq 0C5C                            _I2C_MasterGetRxData 0C44  
                      __end_of_I2C_WriteNBytes 0768                                      ??_Task_MB 005E  
         __end_of_TMR1_DefaultInterruptHandler 0C39                   _TMR1_DefaultInterruptHandler 0C38  
                      __end_of_TMR1_StartTimer 0C50                                  _I2C_MasterFsm 07BC  
                                _I2C_MasterIsr 0C6F                            _EUSART_Transmit_ISR 0F24  
                            I2C_SetCallback@cb 0020                                  _I2C_SetBuffer 0E53  
                 __end_of_I2C_MasterDisableIrq 0C59                                         llabs@a 0024  
                         ?_I2C_MasterEnableIrq 0070                            _I2C_DO_ADDRESS_NACK 0FD8  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 0D60                     _I2C_SetAddressNackCallback 0D54  
                                  ?_Get_millis 0020                                   ?_rtcc_handle 0070  
                              ?_WDT_Initialize 0070                      ??_I2C_MasterEnableRestart 0070  
      I2C_SetInterruptHandler@InterruptHandler 0020       TMR1_SetInterruptHandler@InterruptHandler 0020  
                      __end_of_TMR1_WriteTimer 0E1C                           ?_EUSART_Transmit_ISR 0070  
                        __end_of_TMR1_CallBack 0D91                               ?_TMR1_Initialize 0070  
                            _SYSTEM_Initialize 0E40                        __end_of__initialization 008D  
                          _I2C_MasterOperation 0EE5                            __end_of_Task_Sensor 03DF  
                     validateRequest@u16MsgCRC 003C                             ?_SYSTEM_Initialize 0070  
                         ?_I2C_DO_ADDRESS_NACK 0070           __end_of_EUSART_SetTxInterruptHandler 0D18  
                 _EUSART_SetTxInterruptHandler 0D0F                        _rdBlkRegCompleteHandler 0E7F  
                               __pcstackCOMMON 0070                                 ?_I2C_MasterFsm 0070  
                               ?_I2C_MasterIsr 0070                                ??_I2C_DO_RX_ACK 0070  
                                 __pidataBANK1 0D78                         _I2C_CallbackReturnStop 0C39  
                          ??_SYSTEM_Initialize 0022                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                                  __end_of_llabs 05DC  
                         __end_of_fctsupported 1028                                 ?_I2C_SetBuffer 0020  
                __end_of_I2C_DO_SEND_ADR_WRITE 0CD9                     ?_I2C_DO_SEND_RESTART_WRITE 0070  
                         ?_I2C_MasterOperation 0070                          ??_I2C_MasterEnableIrq 0020  
                        ??_I2C_MasterGetRxData 0070                                 _OPTION_REGbits 0095  
                             ??_buildException 0020                          I2C_ReadNBytes@address 0027  
                                   ??_I2C_Open 0022                           _eusartRxStatusBuffer 00BD  
                                    ?_App_Init 0070                     __end_of_I2C_MasterClearIrq 0C53  
              ??_EUSART_SetOverrunErrorHandler 0022                                        ??_llabs 002C  
                    __end_of_SYSTEM_Initialize 0E53                          ??_EUSART_Transmit_ISR 0070  
                            _I2C_MasterSendAck 0C6B                                     __pbssBANK0 005E  
                                   __pbssBANK1 00A0                           __end_of_EUSART_Write 07BC  
                                ??_I2C_DO_IDLE 0070                                      ?_ReadData 0070  
                                ??_I2C_DO_RCEN 0070                               ??_Task_Indicator 0020  
                __end_of_rd2RegCompleteHandler 0DFA                   __end_of_I2C_MasterSendTxData 0C80  
                           ?_I2C_MasterSendAck 0070                              _I2C_MasterStartRx 0C41  
                         _ModbusRTU_Slave_Poll 0174                          ??_I2C_DO_ADDRESS_NACK 0070  
                __end_of_wr2RegCompleteHandler 0DD8                           Task_MB@f_Modbus_Init 006A  
                          _I2C_DO_RX_NACK_STOP 0C9E                           i1_I2C_MasterClearIrq 0C4A  
                        _rd1RegCompleteHandler 0DD8                             ?_I2C_MasterStartRx 0070  
                   __end_of_I2C_MasterSendNack 0C6B                               ?_I2C_WriteNBytes 0028  
                       I2C_WriteNBytes@address 002B                          _wr1RegCompleteHandler 0DFA  
                     ModbusRTU_Slave_Poll@size 0054                                     __pmaintext 0DB9  
                          ??_I2C_MasterSendAck 0070                       rd1RegCompleteHandler@ptr 0077  
                                ReadData@aData 0030                  ?_EUSART_SetTxInterruptHandler 0020  
             _EUSART_TxDefaultInterruptHandler 0128                    __end_of_I2C_DO_SEND_RESTART 0C94  
                              _I2C_DO_TX_EMPTY 0710                            I2C_SetBuffer@buffer 0022  
                             ?_TMR1_StartTimer 0070                                     ??_TMR1_ISR 0072  
                                   __pintentry 0004                            ??_I2C_MasterStartRx 0070  
                                      _BAUDCON 019F                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 0020                 I2C_SetDataCompleteCallback@ptr 0076  
                     ??_I2C_DO_RX_NACK_RESTART 0070              __end_of_I2C_DO_SEND_RESTART_WRITE 0C8F  
                         ?_I2C_DO_RX_NACK_STOP 0070                                  _eusartRxCount 0078  
                                   ??_App_Init 0023                                i1_I2C_SetBuffer 0DAB  
                    __end_of_I2C_MasterSendAck 0C6F                                        _OSCTUNE 0098  
                             _ModbusSlave_Init 0546                                    _Task_Sensor 036B  
                     ??_EUSART_SetErrorHandler 0022                                        _SSPCON1 0215  
                                      _SSPCON2 0216                                        _SSPSTAT 0214  
                   validateRequest@isSupported 003E                               ?_TMR1_WriteTimer 0070  
                    __end_of_I2C_MasterStartRx 0C44                           I2C_Close@returnValue 0020  
                 ?_I2C_SetDataCompleteCallback 0074                                      _I2C_DO_RX 0622  
                                    _I2C_DO_TX 04F3                                ReadData@valTime 00D9  
             __end_of_I2C_DO_SEND_RESTART_READ 0C8A                                     ??_ReadData 002C  
                        ?_ModbusRTU_Slave_Poll 0054                    __end_of_ModbusSlave_Process 0ECA  
                                    _I2C_Close 0ECA                      ??_rdBlkRegCompleteHandler 0078  
                        ?i1_I2C_MasterClearIrq 0070                           _I2C_MasterDisableIrq 0C56  
                              ??_I2C_MasterFsm 0073                                ??_I2C_MasterIsr 0075  
                                      _Task_MB 0E2D                                 _I2C_ReadNBytes 0F03  
                          __end_of_I2C_DO_IDLE 0C85                            __end_of_I2C_DO_RCEN 0CCA  
                                 ?_App_Process 0070                                ??_I2C_SetBuffer 0022  
                      I2C_SetBuffer@bufferSize 0020                             I2C_ReadNBytes@data 0024  
                               _I2C_MasterRead 0CAD                                 _I2C_MasterOpen 0D9E  
                               _I2C_MasterStop 0C3E                                 _I2C_Initialize 0D18  
                                 ?_Device_Init 0070                                        __ptext1 0E40  
                                      __ptext2 0C77                                        __ptext3 0E97  
                                      __ptext4 07E4                                        __ptext5 0CCA  
                                      __ptext6 0D18                                        __ptext7 0665  
                                      __ptext8 0D0F                                        __ptext9 0D06  
                        ??_I2C_DO_RX_NACK_STOP 0070                 ??_TMR1_DefaultInterruptHandler 0070  
                                    _T1CONbits 0018                          _OSCILLATOR_Initialize 0CCA  
                           I2C_SetCallback@idx 0023                       ??_PIN_MANAGER_Initialize 0020  
                I2C_CallbackReturnReset@funPtr 0077                      ?_TMR1_SetInterruptHandler 0020  
                           I2C_SetCallback@ptr 0022                       wr1RegCompleteHandler@ptr 0077  
                   _SHT30_CMD_MEASURE_H_Enable 00EB                                ModbusSlaveF04@i 0052  
                    i1I2C_SetBuffer@bufferSize 0070                                        clrloop0 0D61  
                   _SHT30_CMD_MEASURE_L_Enable 00E7                           end_of_initialization 008D  
                       Modbus_sendTxBuff@index 0038                     _SHT30_CMD_MEASURE_M_Enable 00E9  
                                   ?_I2C_DO_RX 0070                                     ?_I2C_DO_TX 0070  
        __end_of_EUSART_SetOverrunErrorHandler 0D06                  _EUSART_SetOverrunErrorHandler 0CFD  
                                      init_ram 0D6C                               _Modbus_getRxBuff 043E  
                                   ?_I2C_Close 0070                         ?_rd1RegCompleteHandler 0077  
                            i1_I2C_SetCallback 0F46                                        initloop 0D6D  
                      __end_of_I2C_DO_TX_EMPTY 073D                          ?_I2C_MasterDisableIrq 0070  
                       __end_of_I2C_ReadNBytes 0F24                              _EUSART_Initialize 0665  
                  _SHT30_CMD_MEASURE_H_Disable 00E5                         ?_wr1RegCompleteHandler 0077  
                           ?i1_I2C_SetCallback 0070                             ?_EUSART_Initialize 0070  
                                    _RCSTAbits 019D                                  _Tick_Init_SES 0E1C  
                       __end_of_I2C_MasterRead 0CB2                         __end_of_I2C_MasterOpen 0DAB  
                       __end_of_I2C_MasterStop 0C41                         __end_of_I2C_Initialize 0D21  
                  _SHT30_CMD_MEASURE_L_Disable 00E1                            ??i1_I2C_SetCallback 0073  
                  _SHT30_CMD_MEASURE_M_Disable 00E3                            ??_EUSART_Initialize 0022  
                             ??_WDT_Initialize 0020                      ModbusSlaveF04@valueRegsno 0050  
                           ModbusSlaveF04@size 003E                 ??_EUSART_SetTxInterruptHandler 0022  
                      __end_ofi1_I2C_SetBuffer 0DB9                                      _PORTAbits 000C  
              __end_of_rdBlkRegCompleteHandler 0E97                           _I2C_MasterSendTxData 0C7B  
                              Modbus_calcCRC@i 002B                                Modbus_calcCRC@j 002C  
                                 ??_Get_millis 0024                    ?_I2C_SetAddressNackCallback 0024  
                                  _f_Indicator 006B                         ??_ModbusRTU_Slave_Poll 0056  
                ModbusRTU_Slave_Poll@u8Current 012F                      __end_ofi1_I2C_SetCallback 0F6A  
                                 _fctsupported 1020                         ??i1_I2C_MasterClearIrq 0070  
                    __end_of_EUSART_Initialize 06A7                                    _I2C_DO_IDLE 0C80  
                                  _I2C_DO_RCEN 0CC3                     rdBlkRegCompleteHandler@ptr 0077  
                             validateRequest@i 003F                                      _TXSTAbits 019E  
                              ?_I2C_ReadNBytes 0024                        ?_I2C_CallbackReturnStop 0077  
                     _I2C_DO_SEND_RESTART_READ 0C85                                 ?_Tick_Init_SES 0070  
                           __end_of_Get_millis 0D3F                   I2C_CallbackReturnStop@funPtr 0077  
                              ?_I2C_MasterRead 0070                                ?_I2C_MasterOpen 0070  
                              ?_I2C_MasterStop 0070                                ?_I2C_Initialize 0070  
                      _I2C_CallbackReturnReset 0002             __end_of_EUSART_DefaultErrorHandler 0C63  
                   _EUSART_DefaultErrorHandler 0C5F                                   _EUSART_Write 0793  
                        ?_I2C_MasterSendTxData 0070                         ?_OSCILLATOR_Initialize 0070  
                  ??_I2C_DO_SEND_RESTART_WRITE 0070                            start_initialization 0059  
                                ??_EUSART_Read 0020                                  ?_I2C_DO_RESET 0070  
                     ?_I2C_SetInterruptHandler 0020   EUSART_SetRxInterruptHandler@interruptHandler 0020  
 EUSART_SetTxInterruptHandler@interruptHandler 0020                                    ??_I2C_DO_RX 0070  
                                  ??_I2C_DO_TX 0071                            i1I2C_SetCallback@cb 0070  
                            ??_I2C_MasterClose 0020                    ModbusRTU_Slave_Poll@i8state 0130  
                       ??_I2C_MasterDisableIrq 0020                                    ??_I2C_Close 0020  
                            ??_I2C_MasterStart 0020                              ??_I2C_MasterWrite 0022  
               __end_of_I2C_CallbackReturnStop 0C3B                         _I2C_DO_RX_NACK_RESTART 0CA3  
                               _ModbusSlaveF04 0244                               ?_I2C_DO_TX_EMPTY 0070  
                           _I2C_MasterClearIrq 0C50                              ??_validateRequest 002F  
               ?_EUSART_SetOverrunErrorHandler 0020                     _EUSART_FramingErrorHandler 0124  
                               _Modbus_calcCRC 03DF                       __end_of_ModbusSlave_Init 0595  
                       _EUSART_SetErrorHandler 0CEB                    __end_of_I2C_MasterEnableIrq 0C5F  
                          ?_I2C_MasterClearIrq 0070                    __end_of_I2C_MasterGetRxData 0C47  
                                  __pdataBANK1 00E1                          __end_of_I2C_DO_RX_ACK 0C9E  
                       ModbusSlave_Init@_SW_Ad 0020                               _I2C_DO_SEND_STOP 0C94  
                            ??_I2C_SetCallback 0023                               ?i1_I2C_SetBuffer 0070  
                          I2C_Open@returnValue 0023                             _I2C_MasterSendNack 0C67  
                     ?_I2C_MasterEnableRestart 0070                              _i2c_fsmStateTable 1000  
                                  __pbssBIGRAM 219C                    __end_of_EUSART_Transmit_ISR 0F46  
                        _I2C_DO_SEND_ADR_WRITE 0CD1                                    __pbssCOMMON 0078  
                                    ___latbits 0002                                  _SensorAmbient 0062  
                                __pcstackBANK0 0020                                  __pcstackBANK2 012E  
                               ??_I2C_DO_RESET 0070                            ?_I2C_MasterSendNack 0070  
                                 ?_Task_Sensor 0070                   __end_of_I2C_DO_SEND_ADR_READ 0CE2  
                         ??_I2C_MasterClearIrq 0020                    __end_of_I2C_DO_ADDRESS_NACK 1000  
                       __end_of_ModbusSlaveF04 02E6                     __end_of_EUSART_Receive_ISR 06E0  
                             _I2C_MasterIsNack 0CB7                      _I2C_DO_SEND_RESTART_WRITE 0C8A  
             _EUSART_RxDefaultInterruptHandler 0126                            __end_of_EUSART_Read 0FB3  
                             _I2C_MasterSetIrq 0C47                                      __pnvBANK1 00ED  
                                    __pnvBANK2 0120                          _rd2RegCompleteHandler 0DE9  
                              ??_Tick_Init_SES 0022                         __end_of_Modbus_calcCRC 043E  
                 __end_of_EUSART_RxDataHandler 0E7F                                       ?_Task_MB 0070  
                       _PIN_MANAGER_Initialize 07E4                          _wr2RegCompleteHandler 0DC7  
                    ??_I2C_CallbackReturnReset 0078                        ModbusRTU_Slave_Poll@reg 012E  
                         EUSART_Read@readValue 0021                    __end_of_I2C_MasterOperation 0F03  
                         ??_I2C_MasterSendNack 0070                       rd2RegCompleteHandler@ptr 0077  
             __end_of_TMR1_SetInterruptHandler 0CEB                                      __ptext100 0C63  
                                    __ptext101 0C37                                      __ptext102 0C5F  
                                    __ptext103 0E68                                   _eusartRxHead 007A  
                                 _eusartTxHead 007C                                   _eusartRxTail 0079  
                       ??_I2C_MasterSendTxData 0070                                   _eusartTxTail 007B  
                    __end_of_i2c_fsmStateTable 1020                   ??_INTERRUPT_InterruptManager 0075  
                     __end_of_Modbus_getRxBuff 049A                        _eusartTxBufferRemaining 006D  
              __end_of_I2C_SetInterruptHandler 0CC3                         ModbusSlaveF04@u8regsno 004D  
                      I2C_MasterOperation@read 0020                                       _I2C_Open 05DC  
                                  _device_time 005E                              I2C_ReadNBytes@len 0025  
                      ??_rd1RegCompleteHandler 0078                                 _eusartRxBuffer 00C5  
                              ?_ModbusSlaveF04 003E                        ??_wr1RegCompleteHandler 0078  
                     ModbusSlaveF04@u8StartAdd 004A                                  _TMR1_CallBack 0D84  
                               _eusartTxBuffer 00CD         EUSART_SetErrorHandler@interruptHandler 0020  
                                     _LATCbits 010E                                      clear_ram0 0D60  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 006C                                ?_Modbus_calcCRC 0020  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0022  
                                     _PIR2bits 0012                         ModbusSlaveF04@valueAdd 004E  
                        __end_of_I2C_MasterFsm 07E4                          __end_of_I2C_MasterIsr 0C73  
                            _EUSART_is_tx_done 0C73                    __end_of_I2C_DO_RX_NACK_STOP 0CA3  
    __end_of_EUSART_DefaultOverrunErrorHandler 0C67            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0C63  
                                     _TMR1_ISR 0D91                              ModbusSlaveF04@reg 004C  
              __end_of_I2C_MasterEnableRestart 0C3E                             ?_EUSART_is_tx_done 0070  
                         buildException@u8func 0022                          __end_of_I2C_SetBuffer 0E68  
                            ??_TMR1_Initialize 0022                         ?_I2C_DO_SEND_ADR_WRITE 0070  
                     I2C_MasterSendTxData@data 0070                            ??_EUSART_is_tx_done 0020  
                                ??_rtcc_handle 0070                                       _App_Init 0D2B  
                     wr2RegCompleteHandler@ptr 0077                                    _EUSART_Read 0F8E  
                   ??_I2C_DO_SEND_RESTART_READ 0070                       ?_rdBlkRegCompleteHandler 0077  
                             ??_I2C_ReadNBytes 0027                                 ?_TMR1_CallBack 0070  
        Modbus_sendTxBuff@u32overTimecountDown 003A                                     _I2C_Status 00A0  
                                     _ReadData 049A                                   ?_I2C_DO_IDLE 0070  
                                 ?_I2C_DO_RCEN 0070                         ?_rd2RegCompleteHandler 0077  
                             ??_I2C_MasterRead 0022                            I2C_WriteNBytes@data 0028  
                             ??_I2C_MasterOpen 0020                         ?_wr2RegCompleteHandler 0077  
                             ??_I2C_MasterStop 0070                               ??_I2C_Initialize 0020  
                    __end_of_EUSART_is_tx_done 0C77                          i1I2C_SetBuffer@buffer 0072  
                         __end_of_I2C_DO_RESET 0CAD                        ??_OSCILLATOR_Initialize 0020  
                          _EUSART_ErrorHandler 0120                           _I2C_DO_SEND_ADR_READ 0CD9  
                  ?_EUSART_DefaultErrorHandler 0070                       _TMR1_SetInterruptHandler 0CE2  
                        _TMR1_InterruptHandler 00ED                                _I2C_MasterClose 0C53  
                I2C_SetAddressNackCallback@ptr 0026                                I2C_Open@address 0022  
                              _I2C_MasterStart 0C59                                _I2C_MasterWrite 0CB2  
                         _EUSART_RxDataHandler 0E68                              ??_I2C_WriteNBytes 002B  
                                     __ptext10 0CFD                                       __ptext11 0CF4  
                                     __ptext20 0CB2                                       __ptext12 0CEB  
                                     __ptext21 0F03                                       __ptext13 0D3F  
                                     __ptext30 0ECA                                       __ptext22 0E53  
                                     __ptext14 036B                                       __ptext31 0C56  
                                     __ptext23 05DC                                       __ptext15 0595  
                                     __ptext40 0F8E                                       __ptext32 0C53  
                                     __ptext24 0CBD                                       __ptext16 049A  
                                     __ptext41 0244                                       __ptext33 0C50  
                                     __ptext25 0D9E                                       __ptext17 073D  
                                     __ptext50 0E1C                                       __ptext42 0091  
                                     __ptext34 0E2D                                       __ptext26 0C5C  
                                     __ptext18 0D54                                       __ptext51 0CE2  
                                     __ptext43 03DF                                       __ptext35 0EB0  
                                     __ptext27 0CAD                                       __ptext19 0FB3  
                                     __ptext60 0C6F                                       __ptext52 0C4D  
                                     __ptext44 0D35                                       __ptext36 0174  
                                     __ptext28 0EE5                                       __ptext61 07BC  
                                     __ptext53 06E0                                       __ptext45 0C73  
                                     __ptext37 02E6                                       __ptext29 0C59  
                                     __ptext70 0C8A                                       __ptext62 0C4A  
                                     __ptext46 0793                                       __ptext38 0768  
                                     __ptext71 0C85                                       __ptext63 0FD8  
                                     __ptext55 0D91                                       __ptext47 0546  
                                     __ptext39 043E                                       __ptext80 0CB7  
                                     __ptext72 0CC3                                       __ptext64 0CA8  
                                     __ptext56 0E0B                                       __ptext48 0F6A  
                                     __ptext81 0C7B                                       __ptext73 0622  
                                     __ptext65 0CA3                                       __ptext57 0D84  
                                     __ptext49 0D2B                                       __ptext90 0002  
                                     __ptext82 0C6B                                       __ptext74 04F3  
                                     __ptext66 0C9E                                       __ptext58 0C38  
                                     __ptext91 0C39                                       __ptext83 0C44  
                                     __ptext75 0CD1                                       __ptext67 0C99  
                                     __ptext59 0D21                                       __ptext92 0DC7  
                                     __ptext84 0C67                                       __ptext76 0CD9  
                                     __ptext68 0C94                                       __ptext93 0DAB  
                                     __ptext85 0C41                                       __ptext77 0C80  
                                     __ptext69 0C8F                                       __ptext94 0D49  
                                     __ptext86 0E7F                                       __ptext78 0710  
                                     __ptext95 0F46                                       __ptext87 0DFA  
                                     __ptext79 0C47                                       __ptext96 0C3E  
                                     __ptext88 0DE9                                       __ptext97 0C3B  
                                     __ptext89 0DD8                                       __ptext98 0F24  
                                     __ptext99 06A7                                _validateRequest 02E6  
          __end_of_I2C_SetDataCompleteCallback 0D54                    _I2C_SetDataCompleteCallback 0D49  
                            ??_TMR1_StartTimer 0020                        ?_I2C_DO_RX_NACK_RESTART 0070  
                          __end_of_rtcc_handle 0D2B                       __end_of_I2C_DO_SEND_STOP 0C99  
                Modbus_getRxBuff@bBuffOverflow 0029                        ?_EUSART_SetErrorHandler 0020  
                              _I2C_SetCallback 0FB3                  ??_I2C_SetDataCompleteCallback 0077  
EUSART_SetOverrunErrorHandler@interruptHandler 0020                            Modbus_calcCRC@temp2 0027  
                      Modbus_sendTxBuff@u16crc 0036                                    _MB_Register 00DD  
                                     int$flags 007E                              ?_ModbusSlave_Init 0070  
                        ?_I2C_DO_SEND_ADR_READ 0070             __end_of_INTERRUPT_InterruptManager 0057  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0CFD  
                _EUSART_SetFramingErrorHandler 0CF4                              ??_TMR1_WriteTimer 0072  
                           ??_ModbusSlave_Init 0020                       __end_of_I2C_MasterIsNack 0CBD  
                     __end_of_I2C_MasterSetIrq 0C4A                                     _INTCONbits 000B  
                           I2C_WriteNBytes@len 0029                          ?_EUSART_RxDataHandler 0070  
               __end_of_I2C_DO_RX_NACK_RESTART 0CA8                                ??_TMR1_CallBack 0070  
                                     intlevel1 0000                                 _buildException 0768  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 0CF4  
                          _I2C_DO_SEND_RESTART 0C8F           __end_of_EUSART_SetRxInterruptHandler 0D0F  
                 _EUSART_SetRxInterruptHandler 0D06                           Device_Init@value_SW1 012D  
                         Device_Init@value_SW2 012C                           Device_Init@value_SW3 012B  
                         Device_Init@value_SW4 012A                             Modbus_calcCRC@flag 0029  
                           Modbus_calcCRC@temp 002D                                  ??_App_Process 005E  
                               _Task_Indicator 0F6A                             _EUSART_Receive_ISR 06A7  
EUSART_SetFramingErrorHandler@interruptHandler 0020                        __end_of_I2C_MasterClose 0C56  
                      __end_of_I2C_MasterStart 0C5C                ModbusRTU_Slave_Poll@u8exception 0131  
                      __end_of_I2C_MasterWrite 0CB7                                  ??_Device_Init 0020  
                                __pstringtext1 1000                                  __pstringtext2 1020  
                         ?_I2C_DO_SEND_RESTART 0070                              ?_Modbus_getRxBuff 0070  
                          ?_EUSART_Receive_ISR 0070                        __end_of_validateRequest 036B  
                           ??_Modbus_getRxBuff 0022                                    _rtcc_handle 0D21  
                             ??_ModbusSlaveF04 0040                              Modbus_calcCRC@len 0026  
                                  _SSPCON1bits 0215                                    _SSPCON2bits 0216  
                          _ModbusSlave_Process 0EB0                         __end_of_buildException 0793  
                                   _SES_Modbus 219C                             EUSART_Write@txData 0021  
                      __end_of_I2C_SetCallback 0FD8                 __end_of_PIN_MANAGER_Initialize 0800  
                             ??_Modbus_calcCRC 0022                  __end_of_rd1RegCompleteHandler 0DE9  
                         ??_EUSART_Receive_ISR 0071                  __end_of_wr1RegCompleteHandler 0E0B  
                        _MSSP_InterruptHandler 0068                                _TMR1_Initialize 0E97  
                           Task_Sensor@valTime 00D5                         __end_of_Task_Indicator 0F8E  
                        __end_of_Tick_Init_SES 0E2D  
