

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Apr 12 16:29:07 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F1936
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   123                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   124                           	dabs	1,0x320,16
   125                           	dabs	1,0x2A0,80
   126                           	dabs	1,0x220,80
   127                           	dabs	1,0x1A0,80
   128                           	dabs	1,0x154,28
   129                           	dabs	1,0x20D4,0,_SES_Modbus
   130                           	dabs	1,0x7E,2
   131     0000                     
   132                           ; Version 2.40
   133                           ; Generated 17/11/2021 GMT
   134                           ; 
   135                           ; Copyright © 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   136                           ; All rights reserved.
   137                           ; 
   138                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   139                           ; 
   140                           ; Redistribution and use in source and binary forms, with or without modification, are
   141                           ; permitted provided that the following conditions are met:
   142                           ; 
   143                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   144                           ;        conditions and the following disclaimer.
   145                           ; 
   146                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   147                           ;        of conditions and the following disclaimer in the documentation and/or other
   148                           ;        materials provided with the distribution. Publication is not required when
   149                           ;        this file is used in an embedded application.
   150                           ; 
   151                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   152                           ;        software without specific prior written permission.
   153                           ; 
   154                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   155                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   156                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   157                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   158                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   159                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   160                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   161                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   162                           ; 
   163                           ; 
   164                           ; Code-generator required, PIC16F1936 Definitions
   165                           ; 
   166                           ; SFR Addresses
   167     0000                     	;# 
   168     0001                     	;# 
   169     0002                     	;# 
   170     0003                     	;# 
   171     0004                     	;# 
   172     0005                     	;# 
   173     0006                     	;# 
   174     0007                     	;# 
   175     0008                     	;# 
   176     0009                     	;# 
   177     000A                     	;# 
   178     000B                     	;# 
   179     000C                     	;# 
   180     000D                     	;# 
   181     000E                     	;# 
   182     0010                     	;# 
   183     0011                     	;# 
   184     0012                     	;# 
   185     0013                     	;# 
   186     0015                     	;# 
   187     0016                     	;# 
   188     0016                     	;# 
   189     0017                     	;# 
   190     0018                     	;# 
   191     0019                     	;# 
   192     001A                     	;# 
   193     001B                     	;# 
   194     001C                     	;# 
   195     001E                     	;# 
   196     001F                     	;# 
   197     008C                     	;# 
   198     008D                     	;# 
   199     008E                     	;# 
   200     0090                     	;# 
   201     0091                     	;# 
   202     0092                     	;# 
   203     0093                     	;# 
   204     0095                     	;# 
   205     0096                     	;# 
   206     0097                     	;# 
   207     0098                     	;# 
   208     0099                     	;# 
   209     009A                     	;# 
   210     009B                     	;# 
   211     009B                     	;# 
   212     009C                     	;# 
   213     009D                     	;# 
   214     009E                     	;# 
   215     010C                     	;# 
   216     010D                     	;# 
   217     010E                     	;# 
   218     0110                     	;# 
   219     0111                     	;# 
   220     0112                     	;# 
   221     0113                     	;# 
   222     0114                     	;# 
   223     0115                     	;# 
   224     0116                     	;# 
   225     0117                     	;# 
   226     0118                     	;# 
   227     0119                     	;# 
   228     011A                     	;# 
   229     011B                     	;# 
   230     011D                     	;# 
   231     018C                     	;# 
   232     018D                     	;# 
   233     0191                     	;# 
   234     0191                     	;# 
   235     0192                     	;# 
   236     0193                     	;# 
   237     0193                     	;# 
   238     0193                     	;# 
   239     0194                     	;# 
   240     0195                     	;# 
   241     0196                     	;# 
   242     0199                     	;# 
   243     019A                     	;# 
   244     019B                     	;# 
   245     019B                     	;# 
   246     019B                     	;# 
   247     019B                     	;# 
   248     019C                     	;# 
   249     019C                     	;# 
   250     019D                     	;# 
   251     019E                     	;# 
   252     019F                     	;# 
   253     020D                     	;# 
   254     0210                     	;# 
   255     0211                     	;# 
   256     0212                     	;# 
   257     0213                     	;# 
   258     0214                     	;# 
   259     0215                     	;# 
   260     0215                     	;# 
   261     0216                     	;# 
   262     0217                     	;# 
   263     0291                     	;# 
   264     0291                     	;# 
   265     0292                     	;# 
   266     0293                     	;# 
   267     0294                     	;# 
   268     0295                     	;# 
   269     0295                     	;# 
   270     0296                     	;# 
   271     0298                     	;# 
   272     0298                     	;# 
   273     0299                     	;# 
   274     029A                     	;# 
   275     029B                     	;# 
   276     029C                     	;# 
   277     029C                     	;# 
   278     029D                     	;# 
   279     029E                     	;# 
   280     029F                     	;# 
   281     0311                     	;# 
   282     0311                     	;# 
   283     0312                     	;# 
   284     0313                     	;# 
   285     0314                     	;# 
   286     0315                     	;# 
   287     0315                     	;# 
   288     0316                     	;# 
   289     0318                     	;# 
   290     0318                     	;# 
   291     0319                     	;# 
   292     031A                     	;# 
   293     031C                     	;# 
   294     031C                     	;# 
   295     031D                     	;# 
   296     031E                     	;# 
   297     0394                     	;# 
   298     0395                     	;# 
   299     0396                     	;# 
   300     0415                     	;# 
   301     0416                     	;# 
   302     0417                     	;# 
   303     041C                     	;# 
   304     041D                     	;# 
   305     041E                     	;# 
   306     0791                     	;# 
   307     0792                     	;# 
   308     0793                     	;# 
   309     0794                     	;# 
   310     0795                     	;# 
   311     0798                     	;# 
   312     0799                     	;# 
   313     07A0                     	;# 
   314     07A1                     	;# 
   315     07A3                     	;# 
   316     07A4                     	;# 
   317     07A6                     	;# 
   318     07A7                     	;# 
   319     07A9                     	;# 
   320     07AA                     	;# 
   321     0FE4                     	;# 
   322     0FE5                     	;# 
   323     0FE6                     	;# 
   324     0FE7                     	;# 
   325     0FE8                     	;# 
   326     0FE9                     	;# 
   327     0FEA                     	;# 
   328     0FEB                     	;# 
   329     0FED                     	;# 
   330     0FEE                     	;# 
   331     0FEF                     	;# 
   332     0000                     	;# 
   333     0001                     	;# 
   334     0002                     	;# 
   335     0003                     	;# 
   336     0004                     	;# 
   337     0005                     	;# 
   338     0006                     	;# 
   339     0007                     	;# 
   340     0008                     	;# 
   341     0009                     	;# 
   342     000A                     	;# 
   343     000B                     	;# 
   344     000C                     	;# 
   345     000D                     	;# 
   346     000E                     	;# 
   347     0010                     	;# 
   348     0011                     	;# 
   349     0012                     	;# 
   350     0013                     	;# 
   351     0015                     	;# 
   352     0016                     	;# 
   353     0016                     	;# 
   354     0017                     	;# 
   355     0018                     	;# 
   356     0019                     	;# 
   357     001A                     	;# 
   358     001B                     	;# 
   359     001C                     	;# 
   360     001E                     	;# 
   361     001F                     	;# 
   362     008C                     	;# 
   363     008D                     	;# 
   364     008E                     	;# 
   365     0090                     	;# 
   366     0091                     	;# 
   367     0092                     	;# 
   368     0093                     	;# 
   369     0095                     	;# 
   370     0096                     	;# 
   371     0097                     	;# 
   372     0098                     	;# 
   373     0099                     	;# 
   374     009A                     	;# 
   375     009B                     	;# 
   376     009B                     	;# 
   377     009C                     	;# 
   378     009D                     	;# 
   379     009E                     	;# 
   380     010C                     	;# 
   381     010D                     	;# 
   382     010E                     	;# 
   383     0110                     	;# 
   384     0111                     	;# 
   385     0112                     	;# 
   386     0113                     	;# 
   387     0114                     	;# 
   388     0115                     	;# 
   389     0116                     	;# 
   390     0117                     	;# 
   391     0118                     	;# 
   392     0119                     	;# 
   393     011A                     	;# 
   394     011B                     	;# 
   395     011D                     	;# 
   396     018C                     	;# 
   397     018D                     	;# 
   398     0191                     	;# 
   399     0191                     	;# 
   400     0192                     	;# 
   401     0193                     	;# 
   402     0193                     	;# 
   403     0193                     	;# 
   404     0194                     	;# 
   405     0195                     	;# 
   406     0196                     	;# 
   407     0199                     	;# 
   408     019A                     	;# 
   409     019B                     	;# 
   410     019B                     	;# 
   411     019B                     	;# 
   412     019B                     	;# 
   413     019C                     	;# 
   414     019C                     	;# 
   415     019D                     	;# 
   416     019E                     	;# 
   417     019F                     	;# 
   418     020D                     	;# 
   419     0210                     	;# 
   420     0211                     	;# 
   421     0212                     	;# 
   422     0213                     	;# 
   423     0214                     	;# 
   424     0215                     	;# 
   425     0215                     	;# 
   426     0216                     	;# 
   427     0217                     	;# 
   428     0291                     	;# 
   429     0291                     	;# 
   430     0292                     	;# 
   431     0293                     	;# 
   432     0294                     	;# 
   433     0295                     	;# 
   434     0295                     	;# 
   435     0296                     	;# 
   436     0298                     	;# 
   437     0298                     	;# 
   438     0299                     	;# 
   439     029A                     	;# 
   440     029B                     	;# 
   441     029C                     	;# 
   442     029C                     	;# 
   443     029D                     	;# 
   444     029E                     	;# 
   445     029F                     	;# 
   446     0311                     	;# 
   447     0311                     	;# 
   448     0312                     	;# 
   449     0313                     	;# 
   450     0314                     	;# 
   451     0315                     	;# 
   452     0315                     	;# 
   453     0316                     	;# 
   454     0318                     	;# 
   455     0318                     	;# 
   456     0319                     	;# 
   457     031A                     	;# 
   458     031C                     	;# 
   459     031C                     	;# 
   460     031D                     	;# 
   461     031E                     	;# 
   462     0394                     	;# 
   463     0395                     	;# 
   464     0396                     	;# 
   465     0415                     	;# 
   466     0416                     	;# 
   467     0417                     	;# 
   468     041C                     	;# 
   469     041D                     	;# 
   470     041E                     	;# 
   471     0791                     	;# 
   472     0792                     	;# 
   473     0793                     	;# 
   474     0794                     	;# 
   475     0795                     	;# 
   476     0798                     	;# 
   477     0799                     	;# 
   478     07A0                     	;# 
   479     07A1                     	;# 
   480     07A3                     	;# 
   481     07A4                     	;# 
   482     07A6                     	;# 
   483     07A7                     	;# 
   484     07A9                     	;# 
   485     07AA                     	;# 
   486     0FE4                     	;# 
   487     0FE5                     	;# 
   488     0FE6                     	;# 
   489     0FE7                     	;# 
   490     0FE8                     	;# 
   491     0FE9                     	;# 
   492     0FEA                     	;# 
   493     0FEB                     	;# 
   494     0FED                     	;# 
   495     0FEE                     	;# 
   496     0FEF                     	;# 
   497     0000                     	;# 
   498     0001                     	;# 
   499     0002                     	;# 
   500     0003                     	;# 
   501     0004                     	;# 
   502     0005                     	;# 
   503     0006                     	;# 
   504     0007                     	;# 
   505     0008                     	;# 
   506     0009                     	;# 
   507     000A                     	;# 
   508     000B                     	;# 
   509     000C                     	;# 
   510     000D                     	;# 
   511     000E                     	;# 
   512     0010                     	;# 
   513     0011                     	;# 
   514     0012                     	;# 
   515     0013                     	;# 
   516     0015                     	;# 
   517     0016                     	;# 
   518     0016                     	;# 
   519     0017                     	;# 
   520     0018                     	;# 
   521     0019                     	;# 
   522     001A                     	;# 
   523     001B                     	;# 
   524     001C                     	;# 
   525     001E                     	;# 
   526     001F                     	;# 
   527     008C                     	;# 
   528     008D                     	;# 
   529     008E                     	;# 
   530     0090                     	;# 
   531     0091                     	;# 
   532     0092                     	;# 
   533     0093                     	;# 
   534     0095                     	;# 
   535     0096                     	;# 
   536     0097                     	;# 
   537     0098                     	;# 
   538     0099                     	;# 
   539     009A                     	;# 
   540     009B                     	;# 
   541     009B                     	;# 
   542     009C                     	;# 
   543     009D                     	;# 
   544     009E                     	;# 
   545     010C                     	;# 
   546     010D                     	;# 
   547     010E                     	;# 
   548     0110                     	;# 
   549     0111                     	;# 
   550     0112                     	;# 
   551     0113                     	;# 
   552     0114                     	;# 
   553     0115                     	;# 
   554     0116                     	;# 
   555     0117                     	;# 
   556     0118                     	;# 
   557     0119                     	;# 
   558     011A                     	;# 
   559     011B                     	;# 
   560     011D                     	;# 
   561     018C                     	;# 
   562     018D                     	;# 
   563     0191                     	;# 
   564     0191                     	;# 
   565     0192                     	;# 
   566     0193                     	;# 
   567     0193                     	;# 
   568     0193                     	;# 
   569     0194                     	;# 
   570     0195                     	;# 
   571     0196                     	;# 
   572     0199                     	;# 
   573     019A                     	;# 
   574     019B                     	;# 
   575     019B                     	;# 
   576     019B                     	;# 
   577     019B                     	;# 
   578     019C                     	;# 
   579     019C                     	;# 
   580     019D                     	;# 
   581     019E                     	;# 
   582     019F                     	;# 
   583     020D                     	;# 
   584     0210                     	;# 
   585     0211                     	;# 
   586     0212                     	;# 
   587     0213                     	;# 
   588     0214                     	;# 
   589     0215                     	;# 
   590     0215                     	;# 
   591     0216                     	;# 
   592     0217                     	;# 
   593     0291                     	;# 
   594     0291                     	;# 
   595     0292                     	;# 
   596     0293                     	;# 
   597     0294                     	;# 
   598     0295                     	;# 
   599     0295                     	;# 
   600     0296                     	;# 
   601     0298                     	;# 
   602     0298                     	;# 
   603     0299                     	;# 
   604     029A                     	;# 
   605     029B                     	;# 
   606     029C                     	;# 
   607     029C                     	;# 
   608     029D                     	;# 
   609     029E                     	;# 
   610     029F                     	;# 
   611     0311                     	;# 
   612     0311                     	;# 
   613     0312                     	;# 
   614     0313                     	;# 
   615     0314                     	;# 
   616     0315                     	;# 
   617     0315                     	;# 
   618     0316                     	;# 
   619     0318                     	;# 
   620     0318                     	;# 
   621     0319                     	;# 
   622     031A                     	;# 
   623     031C                     	;# 
   624     031C                     	;# 
   625     031D                     	;# 
   626     031E                     	;# 
   627     0394                     	;# 
   628     0395                     	;# 
   629     0396                     	;# 
   630     0415                     	;# 
   631     0416                     	;# 
   632     0417                     	;# 
   633     041C                     	;# 
   634     041D                     	;# 
   635     041E                     	;# 
   636     0791                     	;# 
   637     0792                     	;# 
   638     0793                     	;# 
   639     0794                     	;# 
   640     0795                     	;# 
   641     0798                     	;# 
   642     0799                     	;# 
   643     07A0                     	;# 
   644     07A1                     	;# 
   645     07A3                     	;# 
   646     07A4                     	;# 
   647     07A6                     	;# 
   648     07A7                     	;# 
   649     07A9                     	;# 
   650     07AA                     	;# 
   651     0FE4                     	;# 
   652     0FE5                     	;# 
   653     0FE6                     	;# 
   654     0FE7                     	;# 
   655     0FE8                     	;# 
   656     0FE9                     	;# 
   657     0FEA                     	;# 
   658     0FEB                     	;# 
   659     0FED                     	;# 
   660     0FEE                     	;# 
   661     0FEF                     	;# 
   662     0000                     	;# 
   663     0001                     	;# 
   664     0002                     	;# 
   665     0003                     	;# 
   666     0004                     	;# 
   667     0005                     	;# 
   668     0006                     	;# 
   669     0007                     	;# 
   670     0008                     	;# 
   671     0009                     	;# 
   672     000A                     	;# 
   673     000B                     	;# 
   674     000C                     	;# 
   675     000D                     	;# 
   676     000E                     	;# 
   677     0010                     	;# 
   678     0011                     	;# 
   679     0012                     	;# 
   680     0013                     	;# 
   681     0015                     	;# 
   682     0016                     	;# 
   683     0016                     	;# 
   684     0017                     	;# 
   685     0018                     	;# 
   686     0019                     	;# 
   687     001A                     	;# 
   688     001B                     	;# 
   689     001C                     	;# 
   690     001E                     	;# 
   691     001F                     	;# 
   692     008C                     	;# 
   693     008D                     	;# 
   694     008E                     	;# 
   695     0090                     	;# 
   696     0091                     	;# 
   697     0092                     	;# 
   698     0093                     	;# 
   699     0095                     	;# 
   700     0096                     	;# 
   701     0097                     	;# 
   702     0098                     	;# 
   703     0099                     	;# 
   704     009A                     	;# 
   705     009B                     	;# 
   706     009B                     	;# 
   707     009C                     	;# 
   708     009D                     	;# 
   709     009E                     	;# 
   710     010C                     	;# 
   711     010D                     	;# 
   712     010E                     	;# 
   713     0110                     	;# 
   714     0111                     	;# 
   715     0112                     	;# 
   716     0113                     	;# 
   717     0114                     	;# 
   718     0115                     	;# 
   719     0116                     	;# 
   720     0117                     	;# 
   721     0118                     	;# 
   722     0119                     	;# 
   723     011A                     	;# 
   724     011B                     	;# 
   725     011D                     	;# 
   726     018C                     	;# 
   727     018D                     	;# 
   728     0191                     	;# 
   729     0191                     	;# 
   730     0192                     	;# 
   731     0193                     	;# 
   732     0193                     	;# 
   733     0193                     	;# 
   734     0194                     	;# 
   735     0195                     	;# 
   736     0196                     	;# 
   737     0199                     	;# 
   738     019A                     	;# 
   739     019B                     	;# 
   740     019B                     	;# 
   741     019B                     	;# 
   742     019B                     	;# 
   743     019C                     	;# 
   744     019C                     	;# 
   745     019D                     	;# 
   746     019E                     	;# 
   747     019F                     	;# 
   748     020D                     	;# 
   749     0210                     	;# 
   750     0211                     	;# 
   751     0212                     	;# 
   752     0213                     	;# 
   753     0214                     	;# 
   754     0215                     	;# 
   755     0215                     	;# 
   756     0216                     	;# 
   757     0217                     	;# 
   758     0291                     	;# 
   759     0291                     	;# 
   760     0292                     	;# 
   761     0293                     	;# 
   762     0294                     	;# 
   763     0295                     	;# 
   764     0295                     	;# 
   765     0296                     	;# 
   766     0298                     	;# 
   767     0298                     	;# 
   768     0299                     	;# 
   769     029A                     	;# 
   770     029B                     	;# 
   771     029C                     	;# 
   772     029C                     	;# 
   773     029D                     	;# 
   774     029E                     	;# 
   775     029F                     	;# 
   776     0311                     	;# 
   777     0311                     	;# 
   778     0312                     	;# 
   779     0313                     	;# 
   780     0314                     	;# 
   781     0315                     	;# 
   782     0315                     	;# 
   783     0316                     	;# 
   784     0318                     	;# 
   785     0318                     	;# 
   786     0319                     	;# 
   787     031A                     	;# 
   788     031C                     	;# 
   789     031C                     	;# 
   790     031D                     	;# 
   791     031E                     	;# 
   792     0394                     	;# 
   793     0395                     	;# 
   794     0396                     	;# 
   795     0415                     	;# 
   796     0416                     	;# 
   797     0417                     	;# 
   798     041C                     	;# 
   799     041D                     	;# 
   800     041E                     	;# 
   801     0791                     	;# 
   802     0792                     	;# 
   803     0793                     	;# 
   804     0794                     	;# 
   805     0795                     	;# 
   806     0798                     	;# 
   807     0799                     	;# 
   808     07A0                     	;# 
   809     07A1                     	;# 
   810     07A3                     	;# 
   811     07A4                     	;# 
   812     07A6                     	;# 
   813     07A7                     	;# 
   814     07A9                     	;# 
   815     07AA                     	;# 
   816     0FE4                     	;# 
   817     0FE5                     	;# 
   818     0FE6                     	;# 
   819     0FE7                     	;# 
   820     0FE8                     	;# 
   821     0FE9                     	;# 
   822     0FEA                     	;# 
   823     0FEB                     	;# 
   824     0FED                     	;# 
   825     0FEE                     	;# 
   826     0FEF                     	;# 
   827     0000                     	;# 
   828     0001                     	;# 
   829     0002                     	;# 
   830     0003                     	;# 
   831     0004                     	;# 
   832     0005                     	;# 
   833     0006                     	;# 
   834     0007                     	;# 
   835     0008                     	;# 
   836     0009                     	;# 
   837     000A                     	;# 
   838     000B                     	;# 
   839     000C                     	;# 
   840     000D                     	;# 
   841     000E                     	;# 
   842     0010                     	;# 
   843     0011                     	;# 
   844     0012                     	;# 
   845     0013                     	;# 
   846     0015                     	;# 
   847     0016                     	;# 
   848     0016                     	;# 
   849     0017                     	;# 
   850     0018                     	;# 
   851     0019                     	;# 
   852     001A                     	;# 
   853     001B                     	;# 
   854     001C                     	;# 
   855     001E                     	;# 
   856     001F                     	;# 
   857     008C                     	;# 
   858     008D                     	;# 
   859     008E                     	;# 
   860     0090                     	;# 
   861     0091                     	;# 
   862     0092                     	;# 
   863     0093                     	;# 
   864     0095                     	;# 
   865     0096                     	;# 
   866     0097                     	;# 
   867     0098                     	;# 
   868     0099                     	;# 
   869     009A                     	;# 
   870     009B                     	;# 
   871     009B                     	;# 
   872     009C                     	;# 
   873     009D                     	;# 
   874     009E                     	;# 
   875     010C                     	;# 
   876     010D                     	;# 
   877     010E                     	;# 
   878     0110                     	;# 
   879     0111                     	;# 
   880     0112                     	;# 
   881     0113                     	;# 
   882     0114                     	;# 
   883     0115                     	;# 
   884     0116                     	;# 
   885     0117                     	;# 
   886     0118                     	;# 
   887     0119                     	;# 
   888     011A                     	;# 
   889     011B                     	;# 
   890     011D                     	;# 
   891     018C                     	;# 
   892     018D                     	;# 
   893     0191                     	;# 
   894     0191                     	;# 
   895     0192                     	;# 
   896     0193                     	;# 
   897     0193                     	;# 
   898     0193                     	;# 
   899     0194                     	;# 
   900     0195                     	;# 
   901     0196                     	;# 
   902     0199                     	;# 
   903     019A                     	;# 
   904     019B                     	;# 
   905     019B                     	;# 
   906     019B                     	;# 
   907     019B                     	;# 
   908     019C                     	;# 
   909     019C                     	;# 
   910     019D                     	;# 
   911     019E                     	;# 
   912     019F                     	;# 
   913     020D                     	;# 
   914     0210                     	;# 
   915     0211                     	;# 
   916     0212                     	;# 
   917     0213                     	;# 
   918     0214                     	;# 
   919     0215                     	;# 
   920     0215                     	;# 
   921     0216                     	;# 
   922     0217                     	;# 
   923     0291                     	;# 
   924     0291                     	;# 
   925     0292                     	;# 
   926     0293                     	;# 
   927     0294                     	;# 
   928     0295                     	;# 
   929     0295                     	;# 
   930     0296                     	;# 
   931     0298                     	;# 
   932     0298                     	;# 
   933     0299                     	;# 
   934     029A                     	;# 
   935     029B                     	;# 
   936     029C                     	;# 
   937     029C                     	;# 
   938     029D                     	;# 
   939     029E                     	;# 
   940     029F                     	;# 
   941     0311                     	;# 
   942     0311                     	;# 
   943     0312                     	;# 
   944     0313                     	;# 
   945     0314                     	;# 
   946     0315                     	;# 
   947     0315                     	;# 
   948     0316                     	;# 
   949     0318                     	;# 
   950     0318                     	;# 
   951     0319                     	;# 
   952     031A                     	;# 
   953     031C                     	;# 
   954     031C                     	;# 
   955     031D                     	;# 
   956     031E                     	;# 
   957     0394                     	;# 
   958     0395                     	;# 
   959     0396                     	;# 
   960     0415                     	;# 
   961     0416                     	;# 
   962     0417                     	;# 
   963     041C                     	;# 
   964     041D                     	;# 
   965     041E                     	;# 
   966     0791                     	;# 
   967     0792                     	;# 
   968     0793                     	;# 
   969     0794                     	;# 
   970     0795                     	;# 
   971     0798                     	;# 
   972     0799                     	;# 
   973     07A0                     	;# 
   974     07A1                     	;# 
   975     07A3                     	;# 
   976     07A4                     	;# 
   977     07A6                     	;# 
   978     07A7                     	;# 
   979     07A9                     	;# 
   980     07AA                     	;# 
   981     0FE4                     	;# 
   982     0FE5                     	;# 
   983     0FE6                     	;# 
   984     0FE7                     	;# 
   985     0FE8                     	;# 
   986     0FE9                     	;# 
   987     0FEA                     	;# 
   988     0FEB                     	;# 
   989     0FED                     	;# 
   990     0FEE                     	;# 
   991     0FEF                     	;# 
   992     0000                     	;# 
   993     0001                     	;# 
   994     0002                     	;# 
   995     0003                     	;# 
   996     0004                     	;# 
   997     0005                     	;# 
   998     0006                     	;# 
   999     0007                     	;# 
  1000     0008                     	;# 
  1001     0009                     	;# 
  1002     000A                     	;# 
  1003     000B                     	;# 
  1004     000C                     	;# 
  1005     000D                     	;# 
  1006     000E                     	;# 
  1007     0010                     	;# 
  1008     0011                     	;# 
  1009     0012                     	;# 
  1010     0013                     	;# 
  1011     0015                     	;# 
  1012     0016                     	;# 
  1013     0016                     	;# 
  1014     0017                     	;# 
  1015     0018                     	;# 
  1016     0019                     	;# 
  1017     001A                     	;# 
  1018     001B                     	;# 
  1019     001C                     	;# 
  1020     001E                     	;# 
  1021     001F                     	;# 
  1022     008C                     	;# 
  1023     008D                     	;# 
  1024     008E                     	;# 
  1025     0090                     	;# 
  1026     0091                     	;# 
  1027     0092                     	;# 
  1028     0093                     	;# 
  1029     0095                     	;# 
  1030     0096                     	;# 
  1031     0097                     	;# 
  1032     0098                     	;# 
  1033     0099                     	;# 
  1034     009A                     	;# 
  1035     009B                     	;# 
  1036     009B                     	;# 
  1037     009C                     	;# 
  1038     009D                     	;# 
  1039     009E                     	;# 
  1040     010C                     	;# 
  1041     010D                     	;# 
  1042     010E                     	;# 
  1043     0110                     	;# 
  1044     0111                     	;# 
  1045     0112                     	;# 
  1046     0113                     	;# 
  1047     0114                     	;# 
  1048     0115                     	;# 
  1049     0116                     	;# 
  1050     0117                     	;# 
  1051     0118                     	;# 
  1052     0119                     	;# 
  1053     011A                     	;# 
  1054     011B                     	;# 
  1055     011D                     	;# 
  1056     018C                     	;# 
  1057     018D                     	;# 
  1058     0191                     	;# 
  1059     0191                     	;# 
  1060     0192                     	;# 
  1061     0193                     	;# 
  1062     0193                     	;# 
  1063     0193                     	;# 
  1064     0194                     	;# 
  1065     0195                     	;# 
  1066     0196                     	;# 
  1067     0199                     	;# 
  1068     019A                     	;# 
  1069     019B                     	;# 
  1070     019B                     	;# 
  1071     019B                     	;# 
  1072     019B                     	;# 
  1073     019C                     	;# 
  1074     019C                     	;# 
  1075     019D                     	;# 
  1076     019E                     	;# 
  1077     019F                     	;# 
  1078     020D                     	;# 
  1079     0210                     	;# 
  1080     0211                     	;# 
  1081     0212                     	;# 
  1082     0213                     	;# 
  1083     0214                     	;# 
  1084     0215                     	;# 
  1085     0215                     	;# 
  1086     0216                     	;# 
  1087     0217                     	;# 
  1088     0291                     	;# 
  1089     0291                     	;# 
  1090     0292                     	;# 
  1091     0293                     	;# 
  1092     0294                     	;# 
  1093     0295                     	;# 
  1094     0295                     	;# 
  1095     0296                     	;# 
  1096     0298                     	;# 
  1097     0298                     	;# 
  1098     0299                     	;# 
  1099     029A                     	;# 
  1100     029B                     	;# 
  1101     029C                     	;# 
  1102     029C                     	;# 
  1103     029D                     	;# 
  1104     029E                     	;# 
  1105     029F                     	;# 
  1106     0311                     	;# 
  1107     0311                     	;# 
  1108     0312                     	;# 
  1109     0313                     	;# 
  1110     0314                     	;# 
  1111     0315                     	;# 
  1112     0315                     	;# 
  1113     0316                     	;# 
  1114     0318                     	;# 
  1115     0318                     	;# 
  1116     0319                     	;# 
  1117     031A                     	;# 
  1118     031C                     	;# 
  1119     031C                     	;# 
  1120     031D                     	;# 
  1121     031E                     	;# 
  1122     0394                     	;# 
  1123     0395                     	;# 
  1124     0396                     	;# 
  1125     0415                     	;# 
  1126     0416                     	;# 
  1127     0417                     	;# 
  1128     041C                     	;# 
  1129     041D                     	;# 
  1130     041E                     	;# 
  1131     0791                     	;# 
  1132     0792                     	;# 
  1133     0793                     	;# 
  1134     0794                     	;# 
  1135     0795                     	;# 
  1136     0798                     	;# 
  1137     0799                     	;# 
  1138     07A0                     	;# 
  1139     07A1                     	;# 
  1140     07A3                     	;# 
  1141     07A4                     	;# 
  1142     07A6                     	;# 
  1143     07A7                     	;# 
  1144     07A9                     	;# 
  1145     07AA                     	;# 
  1146     0FE4                     	;# 
  1147     0FE5                     	;# 
  1148     0FE6                     	;# 
  1149     0FE7                     	;# 
  1150     0FE8                     	;# 
  1151     0FE9                     	;# 
  1152     0FEA                     	;# 
  1153     0FEB                     	;# 
  1154     0FED                     	;# 
  1155     0FEE                     	;# 
  1156     0FEF                     	;# 
  1157     0000                     	;# 
  1158     0001                     	;# 
  1159     0002                     	;# 
  1160     0003                     	;# 
  1161     0004                     	;# 
  1162     0005                     	;# 
  1163     0006                     	;# 
  1164     0007                     	;# 
  1165     0008                     	;# 
  1166     0009                     	;# 
  1167     000A                     	;# 
  1168     000B                     	;# 
  1169     000C                     	;# 
  1170     000D                     	;# 
  1171     000E                     	;# 
  1172     0010                     	;# 
  1173     0011                     	;# 
  1174     0012                     	;# 
  1175     0013                     	;# 
  1176     0015                     	;# 
  1177     0016                     	;# 
  1178     0016                     	;# 
  1179     0017                     	;# 
  1180     0018                     	;# 
  1181     0019                     	;# 
  1182     001A                     	;# 
  1183     001B                     	;# 
  1184     001C                     	;# 
  1185     001E                     	;# 
  1186     001F                     	;# 
  1187     008C                     	;# 
  1188     008D                     	;# 
  1189     008E                     	;# 
  1190     0090                     	;# 
  1191     0091                     	;# 
  1192     0092                     	;# 
  1193     0093                     	;# 
  1194     0095                     	;# 
  1195     0096                     	;# 
  1196     0097                     	;# 
  1197     0098                     	;# 
  1198     0099                     	;# 
  1199     009A                     	;# 
  1200     009B                     	;# 
  1201     009B                     	;# 
  1202     009C                     	;# 
  1203     009D                     	;# 
  1204     009E                     	;# 
  1205     010C                     	;# 
  1206     010D                     	;# 
  1207     010E                     	;# 
  1208     0110                     	;# 
  1209     0111                     	;# 
  1210     0112                     	;# 
  1211     0113                     	;# 
  1212     0114                     	;# 
  1213     0115                     	;# 
  1214     0116                     	;# 
  1215     0117                     	;# 
  1216     0118                     	;# 
  1217     0119                     	;# 
  1218     011A                     	;# 
  1219     011B                     	;# 
  1220     011D                     	;# 
  1221     018C                     	;# 
  1222     018D                     	;# 
  1223     0191                     	;# 
  1224     0191                     	;# 
  1225     0192                     	;# 
  1226     0193                     	;# 
  1227     0193                     	;# 
  1228     0193                     	;# 
  1229     0194                     	;# 
  1230     0195                     	;# 
  1231     0196                     	;# 
  1232     0199                     	;# 
  1233     019A                     	;# 
  1234     019B                     	;# 
  1235     019B                     	;# 
  1236     019B                     	;# 
  1237     019B                     	;# 
  1238     019C                     	;# 
  1239     019C                     	;# 
  1240     019D                     	;# 
  1241     019E                     	;# 
  1242     019F                     	;# 
  1243     020D                     	;# 
  1244     0210                     	;# 
  1245     0211                     	;# 
  1246     0212                     	;# 
  1247     0213                     	;# 
  1248     0214                     	;# 
  1249     0215                     	;# 
  1250     0215                     	;# 
  1251     0216                     	;# 
  1252     0217                     	;# 
  1253     0291                     	;# 
  1254     0291                     	;# 
  1255     0292                     	;# 
  1256     0293                     	;# 
  1257     0294                     	;# 
  1258     0295                     	;# 
  1259     0295                     	;# 
  1260     0296                     	;# 
  1261     0298                     	;# 
  1262     0298                     	;# 
  1263     0299                     	;# 
  1264     029A                     	;# 
  1265     029B                     	;# 
  1266     029C                     	;# 
  1267     029C                     	;# 
  1268     029D                     	;# 
  1269     029E                     	;# 
  1270     029F                     	;# 
  1271     0311                     	;# 
  1272     0311                     	;# 
  1273     0312                     	;# 
  1274     0313                     	;# 
  1275     0314                     	;# 
  1276     0315                     	;# 
  1277     0315                     	;# 
  1278     0316                     	;# 
  1279     0318                     	;# 
  1280     0318                     	;# 
  1281     0319                     	;# 
  1282     031A                     	;# 
  1283     031C                     	;# 
  1284     031C                     	;# 
  1285     031D                     	;# 
  1286     031E                     	;# 
  1287     0394                     	;# 
  1288     0395                     	;# 
  1289     0396                     	;# 
  1290     0415                     	;# 
  1291     0416                     	;# 
  1292     0417                     	;# 
  1293     041C                     	;# 
  1294     041D                     	;# 
  1295     041E                     	;# 
  1296     0791                     	;# 
  1297     0792                     	;# 
  1298     0793                     	;# 
  1299     0794                     	;# 
  1300     0795                     	;# 
  1301     0798                     	;# 
  1302     0799                     	;# 
  1303     07A0                     	;# 
  1304     07A1                     	;# 
  1305     07A3                     	;# 
  1306     07A4                     	;# 
  1307     07A6                     	;# 
  1308     07A7                     	;# 
  1309     07A9                     	;# 
  1310     07AA                     	;# 
  1311     0FE4                     	;# 
  1312     0FE5                     	;# 
  1313     0FE6                     	;# 
  1314     0FE7                     	;# 
  1315     0FE8                     	;# 
  1316     0FE9                     	;# 
  1317     0FEA                     	;# 
  1318     0FEB                     	;# 
  1319     0FED                     	;# 
  1320     0FEE                     	;# 
  1321     0FEF                     	;# 
  1322     0000                     	;# 
  1323     0001                     	;# 
  1324     0002                     	;# 
  1325     0003                     	;# 
  1326     0004                     	;# 
  1327     0005                     	;# 
  1328     0006                     	;# 
  1329     0007                     	;# 
  1330     0008                     	;# 
  1331     0009                     	;# 
  1332     000A                     	;# 
  1333     000B                     	;# 
  1334     000C                     	;# 
  1335     000D                     	;# 
  1336     000E                     	;# 
  1337     0010                     	;# 
  1338     0011                     	;# 
  1339     0012                     	;# 
  1340     0013                     	;# 
  1341     0015                     	;# 
  1342     0016                     	;# 
  1343     0016                     	;# 
  1344     0017                     	;# 
  1345     0018                     	;# 
  1346     0019                     	;# 
  1347     001A                     	;# 
  1348     001B                     	;# 
  1349     001C                     	;# 
  1350     001E                     	;# 
  1351     001F                     	;# 
  1352     008C                     	;# 
  1353     008D                     	;# 
  1354     008E                     	;# 
  1355     0090                     	;# 
  1356     0091                     	;# 
  1357     0092                     	;# 
  1358     0093                     	;# 
  1359     0095                     	;# 
  1360     0096                     	;# 
  1361     0097                     	;# 
  1362     0098                     	;# 
  1363     0099                     	;# 
  1364     009A                     	;# 
  1365     009B                     	;# 
  1366     009B                     	;# 
  1367     009C                     	;# 
  1368     009D                     	;# 
  1369     009E                     	;# 
  1370     010C                     	;# 
  1371     010D                     	;# 
  1372     010E                     	;# 
  1373     0110                     	;# 
  1374     0111                     	;# 
  1375     0112                     	;# 
  1376     0113                     	;# 
  1377     0114                     	;# 
  1378     0115                     	;# 
  1379     0116                     	;# 
  1380     0117                     	;# 
  1381     0118                     	;# 
  1382     0119                     	;# 
  1383     011A                     	;# 
  1384     011B                     	;# 
  1385     011D                     	;# 
  1386     018C                     	;# 
  1387     018D                     	;# 
  1388     0191                     	;# 
  1389     0191                     	;# 
  1390     0192                     	;# 
  1391     0193                     	;# 
  1392     0193                     	;# 
  1393     0193                     	;# 
  1394     0194                     	;# 
  1395     0195                     	;# 
  1396     0196                     	;# 
  1397     0199                     	;# 
  1398     019A                     	;# 
  1399     019B                     	;# 
  1400     019B                     	;# 
  1401     019B                     	;# 
  1402     019B                     	;# 
  1403     019C                     	;# 
  1404     019C                     	;# 
  1405     019D                     	;# 
  1406     019E                     	;# 
  1407     019F                     	;# 
  1408     020D                     	;# 
  1409     0210                     	;# 
  1410     0211                     	;# 
  1411     0212                     	;# 
  1412     0213                     	;# 
  1413     0214                     	;# 
  1414     0215                     	;# 
  1415     0215                     	;# 
  1416     0216                     	;# 
  1417     0217                     	;# 
  1418     0291                     	;# 
  1419     0291                     	;# 
  1420     0292                     	;# 
  1421     0293                     	;# 
  1422     0294                     	;# 
  1423     0295                     	;# 
  1424     0295                     	;# 
  1425     0296                     	;# 
  1426     0298                     	;# 
  1427     0298                     	;# 
  1428     0299                     	;# 
  1429     029A                     	;# 
  1430     029B                     	;# 
  1431     029C                     	;# 
  1432     029C                     	;# 
  1433     029D                     	;# 
  1434     029E                     	;# 
  1435     029F                     	;# 
  1436     0311                     	;# 
  1437     0311                     	;# 
  1438     0312                     	;# 
  1439     0313                     	;# 
  1440     0314                     	;# 
  1441     0315                     	;# 
  1442     0315                     	;# 
  1443     0316                     	;# 
  1444     0318                     	;# 
  1445     0318                     	;# 
  1446     0319                     	;# 
  1447     031A                     	;# 
  1448     031C                     	;# 
  1449     031C                     	;# 
  1450     031D                     	;# 
  1451     031E                     	;# 
  1452     0394                     	;# 
  1453     0395                     	;# 
  1454     0396                     	;# 
  1455     0415                     	;# 
  1456     0416                     	;# 
  1457     0417                     	;# 
  1458     041C                     	;# 
  1459     041D                     	;# 
  1460     041E                     	;# 
  1461     0791                     	;# 
  1462     0792                     	;# 
  1463     0793                     	;# 
  1464     0794                     	;# 
  1465     0795                     	;# 
  1466     0798                     	;# 
  1467     0799                     	;# 
  1468     07A0                     	;# 
  1469     07A1                     	;# 
  1470     07A3                     	;# 
  1471     07A4                     	;# 
  1472     07A6                     	;# 
  1473     07A7                     	;# 
  1474     07A9                     	;# 
  1475     07AA                     	;# 
  1476     0FE4                     	;# 
  1477     0FE5                     	;# 
  1478     0FE6                     	;# 
  1479     0FE7                     	;# 
  1480     0FE8                     	;# 
  1481     0FE9                     	;# 
  1482     0FEA                     	;# 
  1483     0FEB                     	;# 
  1484     0FED                     	;# 
  1485     0FEE                     	;# 
  1486     0FEF                     	;# 
  1487     0000                     	;# 
  1488     0001                     	;# 
  1489     0002                     	;# 
  1490     0003                     	;# 
  1491     0004                     	;# 
  1492     0005                     	;# 
  1493     0006                     	;# 
  1494     0007                     	;# 
  1495     0008                     	;# 
  1496     0009                     	;# 
  1497     000A                     	;# 
  1498     000B                     	;# 
  1499     000C                     	;# 
  1500     000D                     	;# 
  1501     000E                     	;# 
  1502     0010                     	;# 
  1503     0011                     	;# 
  1504     0012                     	;# 
  1505     0013                     	;# 
  1506     0015                     	;# 
  1507     0016                     	;# 
  1508     0016                     	;# 
  1509     0017                     	;# 
  1510     0018                     	;# 
  1511     0019                     	;# 
  1512     001A                     	;# 
  1513     001B                     	;# 
  1514     001C                     	;# 
  1515     001E                     	;# 
  1516     001F                     	;# 
  1517     008C                     	;# 
  1518     008D                     	;# 
  1519     008E                     	;# 
  1520     0090                     	;# 
  1521     0091                     	;# 
  1522     0092                     	;# 
  1523     0093                     	;# 
  1524     0095                     	;# 
  1525     0096                     	;# 
  1526     0097                     	;# 
  1527     0098                     	;# 
  1528     0099                     	;# 
  1529     009A                     	;# 
  1530     009B                     	;# 
  1531     009B                     	;# 
  1532     009C                     	;# 
  1533     009D                     	;# 
  1534     009E                     	;# 
  1535     010C                     	;# 
  1536     010D                     	;# 
  1537     010E                     	;# 
  1538     0110                     	;# 
  1539     0111                     	;# 
  1540     0112                     	;# 
  1541     0113                     	;# 
  1542     0114                     	;# 
  1543     0115                     	;# 
  1544     0116                     	;# 
  1545     0117                     	;# 
  1546     0118                     	;# 
  1547     0119                     	;# 
  1548     011A                     	;# 
  1549     011B                     	;# 
  1550     011D                     	;# 
  1551     018C                     	;# 
  1552     018D                     	;# 
  1553     0191                     	;# 
  1554     0191                     	;# 
  1555     0192                     	;# 
  1556     0193                     	;# 
  1557     0193                     	;# 
  1558     0193                     	;# 
  1559     0194                     	;# 
  1560     0195                     	;# 
  1561     0196                     	;# 
  1562     0199                     	;# 
  1563     019A                     	;# 
  1564     019B                     	;# 
  1565     019B                     	;# 
  1566     019B                     	;# 
  1567     019B                     	;# 
  1568     019C                     	;# 
  1569     019C                     	;# 
  1570     019D                     	;# 
  1571     019E                     	;# 
  1572     019F                     	;# 
  1573     020D                     	;# 
  1574     0210                     	;# 
  1575     0211                     	;# 
  1576     0212                     	;# 
  1577     0213                     	;# 
  1578     0214                     	;# 
  1579     0215                     	;# 
  1580     0215                     	;# 
  1581     0216                     	;# 
  1582     0217                     	;# 
  1583     0291                     	;# 
  1584     0291                     	;# 
  1585     0292                     	;# 
  1586     0293                     	;# 
  1587     0294                     	;# 
  1588     0295                     	;# 
  1589     0295                     	;# 
  1590     0296                     	;# 
  1591     0298                     	;# 
  1592     0298                     	;# 
  1593     0299                     	;# 
  1594     029A                     	;# 
  1595     029B                     	;# 
  1596     029C                     	;# 
  1597     029C                     	;# 
  1598     029D                     	;# 
  1599     029E                     	;# 
  1600     029F                     	;# 
  1601     0311                     	;# 
  1602     0311                     	;# 
  1603     0312                     	;# 
  1604     0313                     	;# 
  1605     0314                     	;# 
  1606     0315                     	;# 
  1607     0315                     	;# 
  1608     0316                     	;# 
  1609     0318                     	;# 
  1610     0318                     	;# 
  1611     0319                     	;# 
  1612     031A                     	;# 
  1613     031C                     	;# 
  1614     031C                     	;# 
  1615     031D                     	;# 
  1616     031E                     	;# 
  1617     0394                     	;# 
  1618     0395                     	;# 
  1619     0396                     	;# 
  1620     0415                     	;# 
  1621     0416                     	;# 
  1622     0417                     	;# 
  1623     041C                     	;# 
  1624     041D                     	;# 
  1625     041E                     	;# 
  1626     0791                     	;# 
  1627     0792                     	;# 
  1628     0793                     	;# 
  1629     0794                     	;# 
  1630     0795                     	;# 
  1631     0798                     	;# 
  1632     0799                     	;# 
  1633     07A0                     	;# 
  1634     07A1                     	;# 
  1635     07A3                     	;# 
  1636     07A4                     	;# 
  1637     07A6                     	;# 
  1638     07A7                     	;# 
  1639     07A9                     	;# 
  1640     07AA                     	;# 
  1641     0FE4                     	;# 
  1642     0FE5                     	;# 
  1643     0FE6                     	;# 
  1644     0FE7                     	;# 
  1645     0FE8                     	;# 
  1646     0FE9                     	;# 
  1647     0FEA                     	;# 
  1648     0FEB                     	;# 
  1649     0FED                     	;# 
  1650     0FEE                     	;# 
  1651     0FEF                     	;# 
  1652     0000                     	;# 
  1653     0001                     	;# 
  1654     0002                     	;# 
  1655     0003                     	;# 
  1656     0004                     	;# 
  1657     0005                     	;# 
  1658     0006                     	;# 
  1659     0007                     	;# 
  1660     0008                     	;# 
  1661     0009                     	;# 
  1662     000A                     	;# 
  1663     000B                     	;# 
  1664     000C                     	;# 
  1665     000D                     	;# 
  1666     000E                     	;# 
  1667     0010                     	;# 
  1668     0011                     	;# 
  1669     0012                     	;# 
  1670     0013                     	;# 
  1671     0015                     	;# 
  1672     0016                     	;# 
  1673     0016                     	;# 
  1674     0017                     	;# 
  1675     0018                     	;# 
  1676     0019                     	;# 
  1677     001A                     	;# 
  1678     001B                     	;# 
  1679     001C                     	;# 
  1680     001E                     	;# 
  1681     001F                     	;# 
  1682     008C                     	;# 
  1683     008D                     	;# 
  1684     008E                     	;# 
  1685     0090                     	;# 
  1686     0091                     	;# 
  1687     0092                     	;# 
  1688     0093                     	;# 
  1689     0095                     	;# 
  1690     0096                     	;# 
  1691     0097                     	;# 
  1692     0098                     	;# 
  1693     0099                     	;# 
  1694     009A                     	;# 
  1695     009B                     	;# 
  1696     009B                     	;# 
  1697     009C                     	;# 
  1698     009D                     	;# 
  1699     009E                     	;# 
  1700     010C                     	;# 
  1701     010D                     	;# 
  1702     010E                     	;# 
  1703     0110                     	;# 
  1704     0111                     	;# 
  1705     0112                     	;# 
  1706     0113                     	;# 
  1707     0114                     	;# 
  1708     0115                     	;# 
  1709     0116                     	;# 
  1710     0117                     	;# 
  1711     0118                     	;# 
  1712     0119                     	;# 
  1713     011A                     	;# 
  1714     011B                     	;# 
  1715     011D                     	;# 
  1716     018C                     	;# 
  1717     018D                     	;# 
  1718     0191                     	;# 
  1719     0191                     	;# 
  1720     0192                     	;# 
  1721     0193                     	;# 
  1722     0193                     	;# 
  1723     0193                     	;# 
  1724     0194                     	;# 
  1725     0195                     	;# 
  1726     0196                     	;# 
  1727     0199                     	;# 
  1728     019A                     	;# 
  1729     019B                     	;# 
  1730     019B                     	;# 
  1731     019B                     	;# 
  1732     019B                     	;# 
  1733     019C                     	;# 
  1734     019C                     	;# 
  1735     019D                     	;# 
  1736     019E                     	;# 
  1737     019F                     	;# 
  1738     020D                     	;# 
  1739     0210                     	;# 
  1740     0211                     	;# 
  1741     0212                     	;# 
  1742     0213                     	;# 
  1743     0214                     	;# 
  1744     0215                     	;# 
  1745     0215                     	;# 
  1746     0216                     	;# 
  1747     0217                     	;# 
  1748     0291                     	;# 
  1749     0291                     	;# 
  1750     0292                     	;# 
  1751     0293                     	;# 
  1752     0294                     	;# 
  1753     0295                     	;# 
  1754     0295                     	;# 
  1755     0296                     	;# 
  1756     0298                     	;# 
  1757     0298                     	;# 
  1758     0299                     	;# 
  1759     029A                     	;# 
  1760     029B                     	;# 
  1761     029C                     	;# 
  1762     029C                     	;# 
  1763     029D                     	;# 
  1764     029E                     	;# 
  1765     029F                     	;# 
  1766     0311                     	;# 
  1767     0311                     	;# 
  1768     0312                     	;# 
  1769     0313                     	;# 
  1770     0314                     	;# 
  1771     0315                     	;# 
  1772     0315                     	;# 
  1773     0316                     	;# 
  1774     0318                     	;# 
  1775     0318                     	;# 
  1776     0319                     	;# 
  1777     031A                     	;# 
  1778     031C                     	;# 
  1779     031C                     	;# 
  1780     031D                     	;# 
  1781     031E                     	;# 
  1782     0394                     	;# 
  1783     0395                     	;# 
  1784     0396                     	;# 
  1785     0415                     	;# 
  1786     0416                     	;# 
  1787     0417                     	;# 
  1788     041C                     	;# 
  1789     041D                     	;# 
  1790     041E                     	;# 
  1791     0791                     	;# 
  1792     0792                     	;# 
  1793     0793                     	;# 
  1794     0794                     	;# 
  1795     0795                     	;# 
  1796     0798                     	;# 
  1797     0799                     	;# 
  1798     07A0                     	;# 
  1799     07A1                     	;# 
  1800     07A3                     	;# 
  1801     07A4                     	;# 
  1802     07A6                     	;# 
  1803     07A7                     	;# 
  1804     07A9                     	;# 
  1805     07AA                     	;# 
  1806     0FE4                     	;# 
  1807     0FE5                     	;# 
  1808     0FE6                     	;# 
  1809     0FE7                     	;# 
  1810     0FE8                     	;# 
  1811     0FE9                     	;# 
  1812     0FEA                     	;# 
  1813     0FEB                     	;# 
  1814     0FED                     	;# 
  1815     0FEE                     	;# 
  1816     0FEF                     	;# 
  1817     0000                     	;# 
  1818     0001                     	;# 
  1819     0002                     	;# 
  1820     0003                     	;# 
  1821     0004                     	;# 
  1822     0005                     	;# 
  1823     0006                     	;# 
  1824     0007                     	;# 
  1825     0008                     	;# 
  1826     0009                     	;# 
  1827     000A                     	;# 
  1828     000B                     	;# 
  1829     000C                     	;# 
  1830     000D                     	;# 
  1831     000E                     	;# 
  1832     0010                     	;# 
  1833     0011                     	;# 
  1834     0012                     	;# 
  1835     0013                     	;# 
  1836     0015                     	;# 
  1837     0016                     	;# 
  1838     0016                     	;# 
  1839     0017                     	;# 
  1840     0018                     	;# 
  1841     0019                     	;# 
  1842     001A                     	;# 
  1843     001B                     	;# 
  1844     001C                     	;# 
  1845     001E                     	;# 
  1846     001F                     	;# 
  1847     008C                     	;# 
  1848     008D                     	;# 
  1849     008E                     	;# 
  1850     0090                     	;# 
  1851     0091                     	;# 
  1852     0092                     	;# 
  1853     0093                     	;# 
  1854     0095                     	;# 
  1855     0096                     	;# 
  1856     0097                     	;# 
  1857     0098                     	;# 
  1858     0099                     	;# 
  1859     009A                     	;# 
  1860     009B                     	;# 
  1861     009B                     	;# 
  1862     009C                     	;# 
  1863     009D                     	;# 
  1864     009E                     	;# 
  1865     010C                     	;# 
  1866     010D                     	;# 
  1867     010E                     	;# 
  1868     0110                     	;# 
  1869     0111                     	;# 
  1870     0112                     	;# 
  1871     0113                     	;# 
  1872     0114                     	;# 
  1873     0115                     	;# 
  1874     0116                     	;# 
  1875     0117                     	;# 
  1876     0118                     	;# 
  1877     0119                     	;# 
  1878     011A                     	;# 
  1879     011B                     	;# 
  1880     011D                     	;# 
  1881     018C                     	;# 
  1882     018D                     	;# 
  1883     0191                     	;# 
  1884     0191                     	;# 
  1885     0192                     	;# 
  1886     0193                     	;# 
  1887     0193                     	;# 
  1888     0193                     	;# 
  1889     0194                     	;# 
  1890     0195                     	;# 
  1891     0196                     	;# 
  1892     0199                     	;# 
  1893     019A                     	;# 
  1894     019B                     	;# 
  1895     019B                     	;# 
  1896     019B                     	;# 
  1897     019B                     	;# 
  1898     019C                     	;# 
  1899     019C                     	;# 
  1900     019D                     	;# 
  1901     019E                     	;# 
  1902     019F                     	;# 
  1903     020D                     	;# 
  1904     0210                     	;# 
  1905     0211                     	;# 
  1906     0212                     	;# 
  1907     0213                     	;# 
  1908     0214                     	;# 
  1909     0215                     	;# 
  1910     0215                     	;# 
  1911     0216                     	;# 
  1912     0217                     	;# 
  1913     0291                     	;# 
  1914     0291                     	;# 
  1915     0292                     	;# 
  1916     0293                     	;# 
  1917     0294                     	;# 
  1918     0295                     	;# 
  1919     0295                     	;# 
  1920     0296                     	;# 
  1921     0298                     	;# 
  1922     0298                     	;# 
  1923     0299                     	;# 
  1924     029A                     	;# 
  1925     029B                     	;# 
  1926     029C                     	;# 
  1927     029C                     	;# 
  1928     029D                     	;# 
  1929     029E                     	;# 
  1930     029F                     	;# 
  1931     0311                     	;# 
  1932     0311                     	;# 
  1933     0312                     	;# 
  1934     0313                     	;# 
  1935     0314                     	;# 
  1936     0315                     	;# 
  1937     0315                     	;# 
  1938     0316                     	;# 
  1939     0318                     	;# 
  1940     0318                     	;# 
  1941     0319                     	;# 
  1942     031A                     	;# 
  1943     031C                     	;# 
  1944     031C                     	;# 
  1945     031D                     	;# 
  1946     031E                     	;# 
  1947     0394                     	;# 
  1948     0395                     	;# 
  1949     0396                     	;# 
  1950     0415                     	;# 
  1951     0416                     	;# 
  1952     0417                     	;# 
  1953     041C                     	;# 
  1954     041D                     	;# 
  1955     041E                     	;# 
  1956     0791                     	;# 
  1957     0792                     	;# 
  1958     0793                     	;# 
  1959     0794                     	;# 
  1960     0795                     	;# 
  1961     0798                     	;# 
  1962     0799                     	;# 
  1963     07A0                     	;# 
  1964     07A1                     	;# 
  1965     07A3                     	;# 
  1966     07A4                     	;# 
  1967     07A6                     	;# 
  1968     07A7                     	;# 
  1969     07A9                     	;# 
  1970     07AA                     	;# 
  1971     0FE4                     	;# 
  1972     0FE5                     	;# 
  1973     0FE6                     	;# 
  1974     0FE7                     	;# 
  1975     0FE8                     	;# 
  1976     0FE9                     	;# 
  1977     0FEA                     	;# 
  1978     0FEB                     	;# 
  1979     0FED                     	;# 
  1980     0FEE                     	;# 
  1981     0FEF                     	;# 
  1982     0000                     	;# 
  1983     0001                     	;# 
  1984     0002                     	;# 
  1985     0003                     	;# 
  1986     0004                     	;# 
  1987     0005                     	;# 
  1988     0006                     	;# 
  1989     0007                     	;# 
  1990     0008                     	;# 
  1991     0009                     	;# 
  1992     000A                     	;# 
  1993     000B                     	;# 
  1994     000C                     	;# 
  1995     000D                     	;# 
  1996     000E                     	;# 
  1997     0010                     	;# 
  1998     0011                     	;# 
  1999     0012                     	;# 
  2000     0013                     	;# 
  2001     0015                     	;# 
  2002     0016                     	;# 
  2003     0016                     	;# 
  2004     0017                     	;# 
  2005     0018                     	;# 
  2006     0019                     	;# 
  2007     001A                     	;# 
  2008     001B                     	;# 
  2009     001C                     	;# 
  2010     001E                     	;# 
  2011     001F                     	;# 
  2012     008C                     	;# 
  2013     008D                     	;# 
  2014     008E                     	;# 
  2015     0090                     	;# 
  2016     0091                     	;# 
  2017     0092                     	;# 
  2018     0093                     	;# 
  2019     0095                     	;# 
  2020     0096                     	;# 
  2021     0097                     	;# 
  2022     0098                     	;# 
  2023     0099                     	;# 
  2024     009A                     	;# 
  2025     009B                     	;# 
  2026     009B                     	;# 
  2027     009C                     	;# 
  2028     009D                     	;# 
  2029     009E                     	;# 
  2030     010C                     	;# 
  2031     010D                     	;# 
  2032     010E                     	;# 
  2033     0110                     	;# 
  2034     0111                     	;# 
  2035     0112                     	;# 
  2036     0113                     	;# 
  2037     0114                     	;# 
  2038     0115                     	;# 
  2039     0116                     	;# 
  2040     0117                     	;# 
  2041     0118                     	;# 
  2042     0119                     	;# 
  2043     011A                     	;# 
  2044     011B                     	;# 
  2045     011D                     	;# 
  2046     018C                     	;# 
  2047     018D                     	;# 
  2048     0191                     	;# 
  2049     0191                     	;# 
  2050     0192                     	;# 
  2051     0193                     	;# 
  2052     0193                     	;# 
  2053     0193                     	;# 
  2054     0194                     	;# 
  2055     0195                     	;# 
  2056     0196                     	;# 
  2057     0199                     	;# 
  2058     019A                     	;# 
  2059     019B                     	;# 
  2060     019B                     	;# 
  2061     019B                     	;# 
  2062     019B                     	;# 
  2063     019C                     	;# 
  2064     019C                     	;# 
  2065     019D                     	;# 
  2066     019E                     	;# 
  2067     019F                     	;# 
  2068     020D                     	;# 
  2069     0210                     	;# 
  2070     0211                     	;# 
  2071     0212                     	;# 
  2072     0213                     	;# 
  2073     0214                     	;# 
  2074     0215                     	;# 
  2075     0215                     	;# 
  2076     0216                     	;# 
  2077     0217                     	;# 
  2078     0291                     	;# 
  2079     0291                     	;# 
  2080     0292                     	;# 
  2081     0293                     	;# 
  2082     0294                     	;# 
  2083     0295                     	;# 
  2084     0295                     	;# 
  2085     0296                     	;# 
  2086     0298                     	;# 
  2087     0298                     	;# 
  2088     0299                     	;# 
  2089     029A                     	;# 
  2090     029B                     	;# 
  2091     029C                     	;# 
  2092     029C                     	;# 
  2093     029D                     	;# 
  2094     029E                     	;# 
  2095     029F                     	;# 
  2096     0311                     	;# 
  2097     0311                     	;# 
  2098     0312                     	;# 
  2099     0313                     	;# 
  2100     0314                     	;# 
  2101     0315                     	;# 
  2102     0315                     	;# 
  2103     0316                     	;# 
  2104     0318                     	;# 
  2105     0318                     	;# 
  2106     0319                     	;# 
  2107     031A                     	;# 
  2108     031C                     	;# 
  2109     031C                     	;# 
  2110     031D                     	;# 
  2111     031E                     	;# 
  2112     0394                     	;# 
  2113     0395                     	;# 
  2114     0396                     	;# 
  2115     0415                     	;# 
  2116     0416                     	;# 
  2117     0417                     	;# 
  2118     041C                     	;# 
  2119     041D                     	;# 
  2120     041E                     	;# 
  2121     0791                     	;# 
  2122     0792                     	;# 
  2123     0793                     	;# 
  2124     0794                     	;# 
  2125     0795                     	;# 
  2126     0798                     	;# 
  2127     0799                     	;# 
  2128     07A0                     	;# 
  2129     07A1                     	;# 
  2130     07A3                     	;# 
  2131     07A4                     	;# 
  2132     07A6                     	;# 
  2133     07A7                     	;# 
  2134     07A9                     	;# 
  2135     07AA                     	;# 
  2136     0FE4                     	;# 
  2137     0FE5                     	;# 
  2138     0FE6                     	;# 
  2139     0FE7                     	;# 
  2140     0FE8                     	;# 
  2141     0FE9                     	;# 
  2142     0FEA                     	;# 
  2143     0FEB                     	;# 
  2144     0FED                     	;# 
  2145     0FEE                     	;# 
  2146     0FEF                     	;_SES_Modbus
  2147                           
  2148                           	psect	idataBANK1
  2149     0DC7                     __pidataBANK1:
  2150                           
  2151                           ;initializer for _SHT30_CMD_MEASURE_L_Disable
  2152     0DC7  3424               	retlw	36
  2153     0DC8  3416               	retlw	22
  2154                           
  2155                           ;initializer for _SHT30_CMD_MEASURE_M_Disable
  2156     0DC9  3424               	retlw	36
  2157     0DCA  340B               	retlw	11
  2158                           
  2159                           ;initializer for _SHT30_CMD_MEASURE_L_Enable
  2160     0DCB  342C               	retlw	44
  2161     0DCC  3410               	retlw	16
  2162                           
  2163                           ;initializer for _SHT30_CMD_MEASURE_M_Enable
  2164     0DCD  342C               	retlw	44
  2165     0DCE  340D               	retlw	13
  2166                           
  2167                           ;initializer for _SHT30_CMD_MEASURE_H_Enable
  2168     0DCF  342C               	retlw	44
  2169     0DD0  3406               	retlw	6
  2170                           
  2171                           ;initializer for _SHT30_CMD_MEASURE_H_Disable
  2172     0DD1  3424               	retlw	36
  2173     0DD2  3400               	retlw	0
  2174                           
  2175                           	psect	stringtext1
  2176     1000                     __pstringtext1:
  2177     1000                     _i2c_fsmStateTable:
  2178     1000  34CD               	retlw	low _I2C_DO_IDLE
  2179     1001  340C               	retlw	high _I2C_DO_IDLE
  2180     1002  3426               	retlw	low _I2C_DO_SEND_ADR_READ
  2181     1003  340D               	retlw	high _I2C_DO_SEND_ADR_READ
  2182     1004  341E               	retlw	low _I2C_DO_SEND_ADR_WRITE
  2183     1005  340D               	retlw	high _I2C_DO_SEND_ADR_WRITE
  2184     1006  34E7               	retlw	low _I2C_DO_TX
  2185     1007  3404               	retlw	high _I2C_DO_TX
  2186     1008  3480               	retlw	low _I2C_DO_RX
  2187     1009  3405               	retlw	high _I2C_DO_RX
  2188     100A  3410               	retlw	low _I2C_DO_RCEN
  2189     100B  340D               	retlw	high _I2C_DO_RCEN
  2190     100C  34B4               	retlw	low _I2C_DO_TX_EMPTY
  2191     100D  3406               	retlw	high _I2C_DO_TX_EMPTY
  2192     100E  34D2               	retlw	low _I2C_DO_SEND_RESTART_READ
  2193     100F  340C               	retlw	high _I2C_DO_SEND_RESTART_READ
  2194     1010  34D7               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  2195     1011  340C               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  2196     1012  34DC               	retlw	low _I2C_DO_SEND_RESTART
  2197     1013  340C               	retlw	high _I2C_DO_SEND_RESTART
  2198     1014  34E1               	retlw	low _I2C_DO_SEND_STOP
  2199     1015  340C               	retlw	high _I2C_DO_SEND_STOP
  2200     1016  34E6               	retlw	low _I2C_DO_RX_ACK
  2201     1017  340C               	retlw	high _I2C_DO_RX_ACK
  2202     1018  34EB               	retlw	low _I2C_DO_RX_NACK_STOP
  2203     1019  340C               	retlw	high _I2C_DO_RX_NACK_STOP
  2204     101A  34F0               	retlw	low _I2C_DO_RX_NACK_RESTART
  2205     101B  340C               	retlw	high _I2C_DO_RX_NACK_RESTART
  2206     101C  34F5               	retlw	low _I2C_DO_RESET
  2207     101D  340C               	retlw	high _I2C_DO_RESET
  2208     101E  34B2               	retlw	low _I2C_DO_ADDRESS_NACK
  2209     101F  3407               	retlw	high _I2C_DO_ADDRESS_NACK
  2210     1020                     __end_of_i2c_fsmStateTable:
  2211                           
  2212                           	psect	stringtext2
  2213     1020                     __pstringtext2:
  2214     1020                     _fctsupported:
  2215     1020  3401               	retlw	1
  2216     1021  3402               	retlw	2
  2217     1022  3403               	retlw	3
  2218     1023  3404               	retlw	4
  2219     1024  3405               	retlw	5
  2220     1025  3406               	retlw	6
  2221     1026  340F               	retlw	15
  2222     1027  3410               	retlw	16
  2223     1028                     __end_of_fctsupported:
  2224                           
  2225                           	psect	nvBANK0
  2226     006F                     __pnvBANK0:
  2227     006F                     _SW_Ad:
  2228     006F                     	ds	1
  2229                           
  2230                           	psect	nvBANK1
  2231     00CD                     __pnvBANK1:
  2232     00CD                     _TMR1_InterruptHandler:
  2233     00CD                     	ds	2
  2234     00CF                     _EUSART_ErrorHandler:
  2235     00CF                     	ds	2
  2236     00D1                     _EUSART_OverrunErrorHandler:
  2237     00D1                     	ds	2
  2238     00D3                     _EUSART_FramingErrorHandler:
  2239     00D3                     	ds	2
  2240     00D5                     _EUSART_RxDefaultInterruptHandler:
  2241     00D5                     	ds	2
  2242     00D7                     _EUSART_TxDefaultInterruptHandler:
  2243     00D7                     	ds	2
  2244     00D9                     Device_Init@value_SW4:
  2245     00D9                     	ds	1
  2246     00DA                     Device_Init@value_SW3:
  2247     00DA                     	ds	1
  2248     00DB                     Device_Init@value_SW2:
  2249     00DB                     	ds	1
  2250     00DC                     Device_Init@value_SW1:
  2251     00DC                     	ds	1
  2252     000C                     _PORTAbits	set	12
  2253     0019                     _T1GCONbits	set	25
  2254     0018                     _T1CONbits	set	24
  2255     0018                     _T1CON	set	24
  2256     0016                     _TMR1L	set	22
  2257     0017                     _TMR1H	set	23
  2258     0019                     _T1GCON	set	25
  2259     000B                     _INTCONbits	set	11
  2260     0011                     _PIR1bits	set	17
  2261     0012                     _PIR2bits	set	18
  2262     0092                     _PIE2bits	set	146
  2263     0091                     _PIE1bits	set	145
  2264     0097                     _WDTCON	set	151
  2265     0098                     _OSCTUNE	set	152
  2266     0099                     _OSCCON	set	153
  2267     0095                     _OPTION_REGbits	set	149
  2268     008E                     _TRISC	set	142
  2269     008D                     _TRISB	set	141
  2270     008C                     _TRISA	set	140
  2271     0090                     _TRISE	set	144
  2272     010E                     _LATCbits	set	270
  2273     0116                     _BORCON	set	278
  2274     011D                     _APFCON	set	285
  2275     010E                     _LATC	set	270
  2276     010D                     _LATB	set	269
  2277     010C                     _LATA	set	268
  2278     0110                     _LATE	set	272
  2279     0199                     _RCREG	set	409
  2280     019D                     _RCSTAbits	set	413
  2281     019A                     _TXREG	set	410
  2282     019E                     _TXSTAbits	set	414
  2283     019C                     _SPBRGH	set	412
  2284     019B                     _SPBRGL	set	411
  2285     019E                     _TXSTA	set	414
  2286     019D                     _RCSTA	set	413
  2287     019F                     _BAUDCON	set	415
  2288     018C                     _ANSELA	set	396
  2289     018D                     _ANSELB	set	397
  2290     0214                     _SSPSTATbits	set	532
  2291     0216                     _SSPCON2bits	set	534
  2292     0211                     _SSPBUF	set	529
  2293     0215                     _SSPCON1bits	set	533
  2294     0212                     _SSPADD	set	530
  2295     0216                     _SSPCON2	set	534
  2296     0215                     _SSPCON1	set	533
  2297     0214                     _SSPSTAT	set	532
  2298     020D                     _WPUB	set	525
  2299     0210                     _WPUE	set	528
  2300                           
  2301                           	psect	cinit
  2302     0059                     start_initialization:	
  2303                           ; #config settings
  2304                           
  2305     0059                     __initialization:	;BIGRAM
  2306                           
  2307                           ; Initialize objects allocated to BANK1
  2308     0059  30C7               	movlw	low __pidataBANK1
  2309     005A  0084               	movwf	4
  2310     005B  308D               	movlw	(high __pidataBANK1)| (0+128)
  2311     005C  0085               	movwf	5
  2312     005D  30DD               	movlw	low __pdataBANK1
  2313     005E  0086               	movwf	6
  2314     005F  3000               	movlw	high __pdataBANK1
  2315     0060  0087               	movwf	7
  2316     0061  3000               	movlw	0
  2317     0062  00FF               	movwf	btemp+1
  2318     0063  300C               	movlw	12
  2319     0064  318D  25BB  3180   	fcall	init_ram
  2320                           
  2321                           ; Clear objects allocated to BIGRAM
  2322     0067  30D4               	movlw	low (0+8404)
  2323     0068  0084               	movwf	4
  2324     0069  3020               	movlw	high (0+8404)
  2325     006A  0085               	movwf	5
  2326     006B  301C               	movlw	28
  2327     006C  00FE               	movwf	btemp
  2328     006D  3001               	movlw	1
  2329     006E  00FF               	movwf	btemp+1
  2330     006F  318D  25AF  3180   	fcall	clear_ram0
  2331                           
  2332                           ; Clear objects allocated to COMMON
  2333     0072  01FC               	clrf	__pbssCOMMON& (0+127)
  2334     0073  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  2335                           
  2336                           ; Clear objects allocated to BANK0
  2337     0074  305F               	movlw	low __pbssBANK0
  2338     0075  0084               	movwf	4
  2339     0076  3000               	movlw	high __pbssBANK0
  2340     0077  0085               	movwf	5
  2341     0078  3010               	movlw	16
  2342     0079  00FE               	movwf	btemp
  2343     007A  3000               	movlw	0
  2344     007B  00FF               	movwf	btemp+1
  2345     007C  318D  25AF  3180   	fcall	clear_ram0
  2346                           
  2347                           ; Clear objects allocated to BANK1
  2348     007F  30A0               	movlw	low __pbssBANK1
  2349     0080  0084               	movwf	4
  2350     0081  3000               	movlw	high __pbssBANK1
  2351     0082  0085               	movwf	5
  2352     0083  302D               	movlw	45
  2353     0084  00FE               	movwf	btemp
  2354     0085  3000               	movlw	0
  2355     0086  00FF               	movwf	btemp+1
  2356     0087  318D  25AF  3180   	fcall	clear_ram0
  2357                           
  2358                           ; Clear objects allocated to BANK2
  2359     008A  3020               	movlw	low __pbssBANK2
  2360     008B  0084               	movwf	4
  2361     008C  3001               	movlw	high __pbssBANK2
  2362     008D  0085               	movwf	5
  2363     008E  3030               	movlw	48
  2364     008F  00FE               	movwf	btemp
  2365     0090  3000               	movlw	0
  2366     0091  00FF               	movwf	btemp+1
  2367     0092  318D  25AF  3180   	fcall	clear_ram0
  2368     0095                     end_of_initialization:	
  2369                           ;End of C runtime variable initialization code
  2370                           
  2371     0095                     __end_of__initialization:
  2372     0095  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2373     0096  0020               	movlb	0
  2374     0097  318D  2DA3         	ljmp	_main	;jump to C main() function
  2375                           
  2376                           	psect	bssCOMMON
  2377     007C                     __pbssCOMMON:
  2378     007C                     _timer1ReloadVal:
  2379     007C                     	ds	2
  2380                           
  2381                           	psect	bssBANK0
  2382     005F                     __pbssBANK0:
  2383     005F                     _Humidity:
  2384     005F                     	ds	2
  2385     0061                     _Temperature:
  2386     0061                     	ds	2
  2387     0063                     _MSSP_InterruptHandler:
  2388     0063                     	ds	2
  2389     0065                     _MB_UID:
  2390     0065                     	ds	1
  2391     0066                     Task_MB@f_Modbus_Init:
  2392     0066                     	ds	1
  2393     0067                     _f_Indicator:
  2394     0067                     	ds	1
  2395     0068                     _eusartRxLastError:
  2396     0068                     	ds	1
  2397     0069                     _eusartRxCount:
  2398     0069                     	ds	1
  2399     006A                     _eusartRxTail:
  2400     006A                     	ds	1
  2401     006B                     _eusartRxHead:
  2402     006B                     	ds	1
  2403     006C                     _eusartTxBufferRemaining:
  2404     006C                     	ds	1
  2405     006D                     _eusartTxTail:
  2406     006D                     	ds	1
  2407     006E                     _eusartTxHead:
  2408     006E                     	ds	1
  2409                           
  2410                           	psect	bssBANK1
  2411     00A0                     __pbssBANK1:
  2412     00A0                     _I2C_Status:
  2413     00A0                     	ds	29
  2414     00BD                     _device_time:
  2415     00BD                     	ds	4
  2416     00C1                     Task_Sensor@valTime:
  2417     00C1                     	ds	4
  2418     00C5                     __Humidity:
  2419     00C5                     	ds	2
  2420     00C7                     __Temperature:
  2421     00C7                     	ds	2
  2422     00C9                     _MB_Register:
  2423     00C9                     	ds	4
  2424                           
  2425                           	psect	dataBANK1
  2426     00DD                     __pdataBANK1:
  2427     00DD                     _SHT30_CMD_MEASURE_L_Disable:
  2428     00DD                     	ds	2
  2429     00DF                     _SHT30_CMD_MEASURE_M_Disable:
  2430     00DF                     	ds	2
  2431     00E1                     _SHT30_CMD_MEASURE_L_Enable:
  2432     00E1                     	ds	2
  2433     00E3                     _SHT30_CMD_MEASURE_M_Enable:
  2434     00E3                     	ds	2
  2435     00E5                     _SHT30_CMD_MEASURE_H_Enable:
  2436     00E5                     	ds	2
  2437     00E7                     _SHT30_CMD_MEASURE_H_Disable:
  2438     00E7                     	ds	2
  2439                           
  2440                           	psect	bssBANK2
  2441     0120                     __pbssBANK2:
  2442     0120                     _eusartRxStatusBuffer:
  2443     0120                     	ds	16
  2444     0130                     _eusartRxBuffer:
  2445     0130                     	ds	16
  2446     0140                     _eusartTxBuffer:
  2447     0140                     	ds	16
  2448                           
  2449                           	psect	inittext
  2450     0DBB                     init_ram:
  2451     0DBB  00FE               	movwf	btemp
  2452     0DBC                     initloop:
  2453     0DBC  0012               	moviw fsr0++
  2454     0DBD  001E               	movwi fsr1++
  2455     0DBE  3001               	movlw	1
  2456     0DBF  02FE               	subwf	btemp,f
  2457     0DC0  3000               	movlw	0
  2458     0DC1  3BFF               	subwfb	btemp+1,f
  2459     0DC2  087F               	movf	btemp+1,w
  2460     0DC3  047E               	iorwf	btemp,w
  2461     0DC4  1D03               	skipz
  2462     0DC5  2DBC               	goto	initloop
  2463     0DC6  3400               	retlw	0
  2464                           
  2465                           	psect	clrtext
  2466     0DAF                     clear_ram0:	
  2467                           ;	Called with FSR0 containing the base address, and
  2468                           ;	btemp/btemp+1 has the size to clear
  2469                           
  2470     0DAF  0064               	clrwdt	;clear the watchdog before getting into this loop
  2471     0DB0                     clrloop0:
  2472     0DB0  0180               	clrf	0	;clear RAM location pointed to by FSR
  2473     0DB1  3101               	addfsr 0,1
  2474     0DB2  3001               	movlw	1
  2475     0DB3  02FE               	subwf	btemp,f
  2476     0DB4  3000               	movlw	0
  2477     0DB5  3BFF               	subwfb	btemp+1,f
  2478     0DB6  087F               	movf	btemp+1,w
  2479     0DB7  047E               	iorwf	btemp,w
  2480     0DB8  1D03               	skipz
  2481     0DB9  2DB0               	goto	clrloop0	;have we reached the end yet?
  2482     0DBA  3400               	retlw	0	;all done for this memory range, return
  2483                           
  2484                           	psect	cstackCOMMON
  2485     0070                     __pcstackCOMMON:
  2486     0070                     ?_I2C_Open:
  2487     0070                     ?_I2C_MasterWrite:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490     0070                     ?_I2C_Close:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493     0070                     ?_I2C_MasterRead:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496     0070                     ?_I2C_Initialize:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499     0070                     ?_OSCILLATOR_Initialize:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502     0070                     ?_WDT_Initialize:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505     0070                     ?_TMR1_Initialize:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508     0070                     ?_EUSART_Initialize:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511     0070                     ?_I2C_DO_IDLE:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514     0070                     ??_I2C_DO_IDLE:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517     0070                     ?_I2C_DO_SEND_ADR_READ:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520     0070                     ??_I2C_DO_SEND_ADR_READ:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523     0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526     0070                     ?_I2C_DO_TX:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529     0070                     ?_I2C_DO_RX:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532     0070                     ?_I2C_DO_RCEN:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535     0070                     ??_I2C_DO_RCEN:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538     0070                     ?_I2C_DO_TX_EMPTY:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541     0070                     ?_I2C_DO_SEND_RESTART_READ:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544     0070                     ??_I2C_DO_SEND_RESTART_READ:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547     0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550     0070                     ??_I2C_DO_SEND_RESTART_WRITE:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553     0070                     ?_I2C_DO_SEND_RESTART:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556     0070                     ??_I2C_DO_SEND_RESTART:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559     0070                     ?_I2C_DO_SEND_STOP:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562     0070                     ??_I2C_DO_SEND_STOP:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565     0070                     ?_I2C_DO_RX_ACK:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568     0070                     ??_I2C_DO_RX_ACK:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571     0070                     ?_I2C_DO_RX_NACK_STOP:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574     0070                     ??_I2C_DO_RX_NACK_STOP:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577     0070                     ?_I2C_DO_RX_NACK_RESTART:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580     0070                     ??_I2C_DO_RX_NACK_RESTART:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583     0070                     ?_I2C_DO_RESET:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586     0070                     ??_I2C_DO_RESET:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589     0070                     ?_I2C_DO_ADDRESS_NACK:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592     0070                     ?_I2C_MasterIsr:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595     0070                     ?_I2C_MasterClearIrq:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598     0070                     ?_I2C_MasterOpen:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601     0070                     ?_I2C_MasterEnableIrq:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604     0070                     ?_I2C_MasterDisableIrq:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607     0070                     ?_I2C_MasterClose:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610     0070                     ?_I2C_MasterStart:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613     0070                     ?_I2C_MasterFsm:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616     0070                     ?_I2C_MasterIsNack:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619     0070                     ??_I2C_MasterIsNack:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622     0070                     ?_I2C_MasterSendTxData:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625     0070                     ??_I2C_MasterSendTxData:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628     0070                     ?_I2C_MasterGetRxData:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631     0070                     ??_I2C_MasterGetRxData:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634     0070                     ?_I2C_MasterSendAck:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637     0070                     ??_I2C_MasterSendAck:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640     0070                     ?_I2C_MasterStartRx:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643     0070                     ??_I2C_MasterStartRx:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646     0070                     ?_I2C_MasterSetIrq:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649     0070                     ??_I2C_MasterSetIrq:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652     0070                     ?_I2C_MasterEnableRestart:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655     0070                     ??_I2C_MasterEnableRestart:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658     0070                     ?_I2C_MasterStop:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661     0070                     ??_I2C_MasterStop:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664     0070                     ?_I2C_MasterSendNack:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667     0070                     ??_I2C_MasterSendNack:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670     0070                     ?_TMR1_ISR:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673     0070                     ?_EUSART_Receive_ISR:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676     0070                     ?_EUSART_Transmit_ISR:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679     0070                     ??_EUSART_Transmit_ISR:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694     0070                     ?_EUSART_DefaultErrorHandler:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697     0070                     ?_EUSART_RxDataHandler:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700     0070                     ??_EUSART_RxDataHandler:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703     0070                     ?_TMR1_DefaultInterruptHandler:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706     0070                     ??_TMR1_DefaultInterruptHandler:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709     0070                     ?_TMR1_CallBack:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712     0070                     ??_TMR1_CallBack:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715     0070                     ?_App_Init:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718     0070                     ?_App_Process:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721     0070                     ?_ModbusSlave_Init:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724     0070                     ?_ModbusSlave_Process:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727     0070                     ?_Tick_Init_SES:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730     0070                     ?_Modbus_sendTxBuff:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733     0070                     ?_rtcc_handle:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736     0070                     ??_rtcc_handle:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739     0070                     ?_PIN_MANAGER_Initialize:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742     0070                     ?_SYSTEM_Initialize:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745     0070                     ?_I2C_MasterOperation:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748     0070                     ?_INTERRUPT_InterruptManager:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751     0070                     ?_EUSART_is_tx_done:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754     0070                     ?_EUSART_Read:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757     0070                     ?_EUSART_Write:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760     0070                     ?_TMR1_StartTimer:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763     0070                     ?_TMR1_WriteTimer:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766     0070                     ?_main:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769     0070                     ?_ReadData:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772     0070                     ?_Task_Sensor:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775     0070                     ?_Task_MB:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778     0070                     ?_Task_Indicator:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781     0070                     ?_Device_Init:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784     0070                     ?_buildException:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787     0070                     ?_Modbus_getRxBuff:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790     0070                     ?_validateRequest:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793     0070                     ?i1_I2C_SetBuffer:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796     0070                     ?i1_I2C_SetCallback:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799     0070                     ?i1_I2C_MasterClearIrq:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802     0070                     ??i1_I2C_MasterClearIrq:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805     0070                     I2C_MasterSendTxData@data:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808     0070                     TMR1_WriteTimer@timerVal:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811     0070                     i1I2C_SetBuffer@bufferSize:	
  2812                           ; 2 bytes @ 0x0
  2813                           
  2814     0070                     i1I2C_SetCallback@cb:	
  2815                           ; 2 bytes @ 0x0
  2816                           
  2817                           
  2818                           ; 2 bytes @ 0x0
  2819     0070                     	ds	1
  2820     0071                     ??_I2C_DO_SEND_ADR_WRITE:
  2821     0071                     ??_EUSART_Receive_ISR:	
  2822                           ; 1 bytes @ 0x1
  2823                           
  2824     0071                     ??_EUSART_DefaultErrorHandler:	
  2825                           ; 1 bytes @ 0x1
  2826                           
  2827                           
  2828                           ; 1 bytes @ 0x1
  2829     0071                     	ds	1
  2830     0072                     ??_TMR1_ISR:
  2831     0072                     ??_TMR1_WriteTimer:	
  2832                           ; 1 bytes @ 0x2
  2833                           
  2834     0072                     ??i1_I2C_SetBuffer:	
  2835                           ; 1 bytes @ 0x2
  2836                           
  2837     0072                     i1I2C_SetBuffer@buffer:	
  2838                           ; 1 bytes @ 0x2
  2839                           
  2840     0072                     i1I2C_SetCallback@ptr:	
  2841                           ; 1 bytes @ 0x2
  2842                           
  2843                           
  2844                           ; 1 bytes @ 0x2
  2845     0072                     	ds	1
  2846     0073                     ??i1_I2C_SetCallback:
  2847     0073                     i1I2C_SetCallback@idx:	
  2848                           ; 1 bytes @ 0x3
  2849                           
  2850                           
  2851                           ; 1 bytes @ 0x3
  2852     0073                     	ds	1
  2853     0074                     ?_I2C_SetDataCompleteCallback:
  2854     0074                     I2C_SetDataCompleteCallback@cb:	
  2855                           ; 1 bytes @ 0x4
  2856                           
  2857                           
  2858                           ; 2 bytes @ 0x4
  2859     0074                     	ds	2
  2860     0076                     I2C_SetDataCompleteCallback@ptr:
  2861                           
  2862                           ; 1 bytes @ 0x6
  2863     0076                     	ds	1
  2864     0077                     ??_I2C_SetDataCompleteCallback:
  2865     0077                     ?_rd1RegCompleteHandler:	
  2866                           ; 1 bytes @ 0x7
  2867                           
  2868     0077                     ?_rd2RegCompleteHandler:	
  2869                           ; 1 bytes @ 0x7
  2870                           
  2871     0077                     ?_wr1RegCompleteHandler:	
  2872                           ; 1 bytes @ 0x7
  2873                           
  2874     0077                     ?_wr2RegCompleteHandler:	
  2875                           ; 1 bytes @ 0x7
  2876                           
  2877     0077                     ?_rdBlkRegCompleteHandler:	
  2878                           ; 1 bytes @ 0x7
  2879                           
  2880     0077                     ?_I2C_CallbackReturnStop:	
  2881                           ; 1 bytes @ 0x7
  2882                           
  2883     0077                     ?_I2C_CallbackReturnReset:	
  2884                           ; 1 bytes @ 0x7
  2885                           
  2886     0077                     rd1RegCompleteHandler@ptr:	
  2887                           ; 1 bytes @ 0x7
  2888                           
  2889     0077                     rd2RegCompleteHandler@ptr:	
  2890                           ; 1 bytes @ 0x7
  2891                           
  2892     0077                     wr1RegCompleteHandler@ptr:	
  2893                           ; 1 bytes @ 0x7
  2894                           
  2895     0077                     wr2RegCompleteHandler@ptr:	
  2896                           ; 1 bytes @ 0x7
  2897                           
  2898     0077                     rdBlkRegCompleteHandler@ptr:	
  2899                           ; 1 bytes @ 0x7
  2900                           
  2901     0077                     I2C_CallbackReturnStop@funPtr:	
  2902                           ; 1 bytes @ 0x7
  2903                           
  2904     0077                     I2C_CallbackReturnReset@funPtr:	
  2905                           ; 1 bytes @ 0x7
  2906                           
  2907                           
  2908                           ; 1 bytes @ 0x7
  2909     0077                     	ds	1
  2910     0078                     ??_rd1RegCompleteHandler:
  2911     0078                     ??_rd2RegCompleteHandler:	
  2912                           ; 1 bytes @ 0x8
  2913                           
  2914     0078                     ??_wr1RegCompleteHandler:	
  2915                           ; 1 bytes @ 0x8
  2916                           
  2917     0078                     ??_wr2RegCompleteHandler:	
  2918                           ; 1 bytes @ 0x8
  2919                           
  2920     0078                     ??_rdBlkRegCompleteHandler:	
  2921                           ; 1 bytes @ 0x8
  2922                           
  2923     0078                     ??_I2C_DO_TX:	
  2924                           ; 1 bytes @ 0x8
  2925                           
  2926     0078                     ??_I2C_DO_RX:	
  2927                           ; 1 bytes @ 0x8
  2928                           
  2929     0078                     ??_I2C_DO_TX_EMPTY:	
  2930                           ; 1 bytes @ 0x8
  2931                           
  2932     0078                     ??_I2C_DO_ADDRESS_NACK:	
  2933                           ; 1 bytes @ 0x8
  2934                           
  2935     0078                     ??_I2C_CallbackReturnStop:	
  2936                           ; 1 bytes @ 0x8
  2937                           
  2938     0078                     ??_I2C_CallbackReturnReset:	
  2939                           ; 1 bytes @ 0x8
  2940                           
  2941                           
  2942                           ; 1 bytes @ 0x8
  2943     0078                     	ds	2
  2944     007A                     ??_I2C_MasterFsm:
  2945                           
  2946                           ; 1 bytes @ 0xA
  2947     007A                     	ds	2
  2948     007C                     ??_I2C_MasterIsr:
  2949     007C                     ??_INTERRUPT_InterruptManager:	
  2950                           ; 1 bytes @ 0xC
  2951                           
  2952                           
  2953                           	psect	cstackBANK0
  2954     0020                     __pcstackBANK0:	
  2955                           ; 1 bytes @ 0xC
  2956                           
  2957     0020                     ?_I2C_SetBuffer:
  2958     0020                     ??_I2C_Close:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961     0020                     ??_I2C_Initialize:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964     0020                     ??_OSCILLATOR_Initialize:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967     0020                     ??_WDT_Initialize:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970     0020                     ?_I2C_SetInterruptHandler:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973     0020                     ??_I2C_MasterClearIrq:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976     0020                     ??_I2C_MasterOpen:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979     0020                     ??_I2C_MasterEnableIrq:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982     0020                     ??_I2C_MasterDisableIrq:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985     0020                     ??_I2C_MasterClose:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988     0020                     ??_I2C_MasterStart:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991     0020                     ?_I2C_SetCallback:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994     0020                     ?_EUSART_SetRxInterruptHandler:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997     0020                     ?_EUSART_SetTxInterruptHandler:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000     0020                     ?_EUSART_SetFramingErrorHandler:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003     0020                     ?_EUSART_SetOverrunErrorHandler:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006     0020                     ?_EUSART_SetErrorHandler:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009     0020                     ?_TMR1_SetInterruptHandler:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012     0020                     ??_ModbusSlave_Init:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015     0020                     ??_PIN_MANAGER_Initialize:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018     0020                     ??_I2C_MasterOperation:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021     0020                     ??_EUSART_is_tx_done:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024     0020                     ??_EUSART_Read:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027     0020                     ??_EUSART_Write:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030     0020                     ??_TMR1_StartTimer:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033     0020                     ??_Task_Indicator:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036     0020                     ??_Device_Init:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039     0020                     ??_buildException:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042     0020                     ?_Modbus_calcCRC:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045     0020                     ?_Get_millis:	
  3046                           ; 2 bytes @ 0x0
  3047                           
  3048     0020                     I2C_Close@returnValue:	
  3049                           ; 4 bytes @ 0x0
  3050                           
  3051     0020                     I2C_MasterOperation@read:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054     0020                     ModbusSlave_Init@_SW_Ad:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057     0020                     I2C_SetBuffer@bufferSize:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060     0020                     I2C_SetInterruptHandler@InterruptHandler:	
  3061                           ; 2 bytes @ 0x0
  3062                           
  3063     0020                     I2C_SetCallback@cb:	
  3064                           ; 2 bytes @ 0x0
  3065                           
  3066     0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3067                           ; 2 bytes @ 0x0
  3068                           
  3069     0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3070                           ; 2 bytes @ 0x0
  3071                           
  3072     0020                     EUSART_SetErrorHandler@interruptHandler:	
  3073                           ; 2 bytes @ 0x0
  3074                           
  3075     0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3076                           ; 2 bytes @ 0x0
  3077                           
  3078     0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3079                           ; 2 bytes @ 0x0
  3080                           
  3081     0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  3082                           ; 2 bytes @ 0x0
  3083                           
  3084                           
  3085                           ; 2 bytes @ 0x0
  3086     0020                     	ds	1
  3087     0021                     I2C_MasterOperation@returnValue:
  3088     0021                     EUSART_Read@readValue:	
  3089                           ; 1 bytes @ 0x1
  3090                           
  3091     0021                     EUSART_Write@txData:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094     0021                     buildException@exception:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097                           
  3098                           ; 1 bytes @ 0x1
  3099     0021                     	ds	1
  3100     0022                     ??_I2C_Open:
  3101     0022                     ??_I2C_SetBuffer:	
  3102                           ; 1 bytes @ 0x2
  3103                           
  3104     0022                     ??_I2C_MasterWrite:	
  3105                           ; 1 bytes @ 0x2
  3106                           
  3107     0022                     ??_I2C_MasterRead:	
  3108                           ; 1 bytes @ 0x2
  3109                           
  3110     0022                     ??_TMR1_Initialize:	
  3111                           ; 1 bytes @ 0x2
  3112                           
  3113     0022                     ??_EUSART_Initialize:	
  3114                           ; 1 bytes @ 0x2
  3115                           
  3116     0022                     ??_I2C_SetInterruptHandler:	
  3117                           ; 1 bytes @ 0x2
  3118                           
  3119     0022                     ??_EUSART_SetRxInterruptHandler:	
  3120                           ; 1 bytes @ 0x2
  3121                           
  3122     0022                     ??_EUSART_SetTxInterruptHandler:	
  3123                           ; 1 bytes @ 0x2
  3124                           
  3125     0022                     ??_EUSART_SetFramingErrorHandler:	
  3126                           ; 1 bytes @ 0x2
  3127                           
  3128     0022                     ??_EUSART_SetOverrunErrorHandler:	
  3129                           ; 1 bytes @ 0x2
  3130                           
  3131     0022                     ??_EUSART_SetErrorHandler:	
  3132                           ; 1 bytes @ 0x2
  3133                           
  3134     0022                     ??_TMR1_SetInterruptHandler:	
  3135                           ; 1 bytes @ 0x2
  3136                           
  3137     0022                     ??_Tick_Init_SES:	
  3138                           ; 1 bytes @ 0x2
  3139                           
  3140     0022                     ??_Modbus_calcCRC:	
  3141                           ; 1 bytes @ 0x2
  3142                           
  3143     0022                     ??_SYSTEM_Initialize:	
  3144                           ; 1 bytes @ 0x2
  3145                           
  3146     0022                     ??_Modbus_getRxBuff:	
  3147                           ; 1 bytes @ 0x2
  3148                           
  3149     0022                     I2C_Open@address:	
  3150                           ; 1 bytes @ 0x2
  3151                           
  3152     0022                     I2C_SetBuffer@buffer:	
  3153                           ; 1 bytes @ 0x2
  3154                           
  3155     0022                     I2C_SetCallback@ptr:	
  3156                           ; 1 bytes @ 0x2
  3157                           
  3158     0022                     buildException@u8func:	
  3159                           ; 1 bytes @ 0x2
  3160                           
  3161                           
  3162                           ; 1 bytes @ 0x2
  3163     0022                     	ds	1
  3164     0023                     ??_I2C_SetCallback:
  3165     0023                     ??_App_Init:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168     0023                     I2C_Open@returnValue:	
  3169                           ; 1 bytes @ 0x3
  3170                           
  3171     0023                     I2C_SetCallback@idx:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174                           
  3175                           ; 1 bytes @ 0x3
  3176     0023                     	ds	1
  3177     0024                     ?_I2C_SetAddressNackCallback:
  3178     0024                     ??_Get_millis:	
  3179                           ; 1 bytes @ 0x4
  3180                           
  3181     0024                     ?_I2C_ReadNBytes:	
  3182                           ; 1 bytes @ 0x4
  3183                           
  3184     0024                     I2C_ReadNBytes@data:	
  3185                           ; 1 bytes @ 0x4
  3186                           
  3187     0024                     I2C_SetAddressNackCallback@cb:	
  3188                           ; 1 bytes @ 0x4
  3189                           
  3190                           
  3191                           ; 2 bytes @ 0x4
  3192     0024                     	ds	1
  3193     0025                     I2C_ReadNBytes@len:
  3194                           
  3195                           ; 2 bytes @ 0x5
  3196     0025                     	ds	1
  3197     0026                     I2C_SetAddressNackCallback@ptr:
  3198     0026                     Modbus_calcCRC@temp2:	
  3199                           ; 2 bytes @ 0x6
  3200                           
  3201                           
  3202                           ; 2 bytes @ 0x6
  3203     0026                     	ds	1
  3204     0027                     ??_I2C_ReadNBytes:
  3205     0027                     I2C_ReadNBytes@address:	
  3206                           ; 1 bytes @ 0x7
  3207                           
  3208                           
  3209                           ; 1 bytes @ 0x7
  3210     0027                     	ds	1
  3211     0028                     ??_I2C_SetAddressNackCallback:
  3212     0028                     ?_I2C_WriteNBytes:	
  3213                           ; 1 bytes @ 0x8
  3214                           
  3215     0028                     I2C_WriteNBytes@data:	
  3216                           ; 1 bytes @ 0x8
  3217                           
  3218     0028                     Modbus_calcCRC@flag:	
  3219                           ; 1 bytes @ 0x8
  3220                           
  3221                           
  3222                           ; 2 bytes @ 0x8
  3223     0028                     	ds	1
  3224     0029                     Modbus_getRxBuff@bBuffOverflow:
  3225     0029                     I2C_WriteNBytes@len:	
  3226                           ; 1 bytes @ 0x9
  3227                           
  3228                           
  3229                           ; 2 bytes @ 0x9
  3230     0029                     	ds	1
  3231     002A                     Modbus_calcCRC@len:
  3232                           
  3233                           ; 1 bytes @ 0xA
  3234     002A                     	ds	1
  3235     002B                     ??_I2C_WriteNBytes:
  3236     002B                     I2C_WriteNBytes@address:	
  3237                           ; 1 bytes @ 0xB
  3238                           
  3239     002B                     Modbus_calcCRC@i:	
  3240                           ; 1 bytes @ 0xB
  3241                           
  3242                           
  3243                           ; 1 bytes @ 0xB
  3244     002B                     	ds	1
  3245     002C                     ??_ReadData:
  3246     002C                     Modbus_calcCRC@j:	
  3247                           ; 1 bytes @ 0xC
  3248                           
  3249                           
  3250                           ; 1 bytes @ 0xC
  3251     002C                     	ds	1
  3252     002D                     Modbus_calcCRC@temp:
  3253                           
  3254                           ; 2 bytes @ 0xD
  3255     002D                     	ds	2
  3256     002F                     ??_Modbus_sendTxBuff:
  3257     002F                     ??_validateRequest:	
  3258                           ; 1 bytes @ 0xF
  3259                           
  3260                           
  3261                           ; 1 bytes @ 0xF
  3262     002F                     	ds	1
  3263     0030                     ReadData@aData:
  3264                           
  3265                           ; 6 bytes @ 0x10
  3266     0030                     	ds	6
  3267     0036                     Modbus_sendTxBuff@u16crc:
  3268     0036                     ReadData@valTime:	
  3269                           ; 2 bytes @ 0x16
  3270                           
  3271                           
  3272                           ; 4 bytes @ 0x16
  3273     0036                     	ds	2
  3274     0038                     Modbus_sendTxBuff@index:
  3275                           
  3276                           ; 2 bytes @ 0x18
  3277     0038                     	ds	2
  3278     003A                     ??_Task_Sensor:
  3279     003A                     Modbus_sendTxBuff@u32overTimecountDown:	
  3280                           ; 1 bytes @ 0x1A
  3281                           
  3282                           
  3283                           ; 4 bytes @ 0x1A
  3284     003A                     	ds	2
  3285     003C                     validateRequest@u16MsgCRC:
  3286                           
  3287                           ; 2 bytes @ 0x1C
  3288     003C                     	ds	2
  3289     003E                     ?_ModbusSlaveF04:
  3290     003E                     validateRequest@isSupported:	
  3291                           ; 1 bytes @ 0x1E
  3292                           
  3293     003E                     ModbusSlaveF04@reg:	
  3294                           ; 1 bytes @ 0x1E
  3295                           
  3296                           
  3297                           ; 2 bytes @ 0x1E
  3298     003E                     	ds	1
  3299     003F                     validateRequest@i:
  3300                           
  3301                           ; 1 bytes @ 0x1F
  3302     003F                     	ds	1
  3303     0040                     ModbusSlaveF04@size:
  3304                           
  3305                           ; 1 bytes @ 0x20
  3306     0040                     	ds	1
  3307     0041                     ??_ModbusSlaveF04:
  3308                           
  3309                           ; 1 bytes @ 0x21
  3310     0041                     	ds	11
  3311     004C                     ModbusSlaveF04@u8StartAdd:
  3312                           
  3313                           ; 2 bytes @ 0x2C
  3314     004C                     	ds	2
  3315     004E                     ModbusSlaveF04@u8regsno:
  3316                           
  3317                           ; 1 bytes @ 0x2E
  3318     004E                     	ds	1
  3319     004F                     ModbusSlaveF04@i:
  3320                           
  3321                           ; 2 bytes @ 0x2F
  3322     004F                     	ds	2
  3323     0051                     ?_ModbusRTU_Slave_Poll:
  3324     0051                     ModbusRTU_Slave_Poll@size:	
  3325                           ; 1 bytes @ 0x31
  3326                           
  3327                           
  3328                           ; 2 bytes @ 0x31
  3329     0051                     	ds	2
  3330     0053                     ??_ModbusRTU_Slave_Poll:
  3331                           
  3332                           ; 1 bytes @ 0x33
  3333     0053                     	ds	8
  3334     005B                     ModbusRTU_Slave_Poll@reg:
  3335                           
  3336                           ; 1 bytes @ 0x3B
  3337     005B                     	ds	1
  3338     005C                     ModbusRTU_Slave_Poll@u8Current:
  3339                           
  3340                           ; 1 bytes @ 0x3C
  3341     005C                     	ds	1
  3342     005D                     ModbusRTU_Slave_Poll@i8state:
  3343                           
  3344                           ; 1 bytes @ 0x3D
  3345     005D                     	ds	1
  3346     005E                     ModbusRTU_Slave_Poll@u8exception:
  3347                           
  3348                           ; 1 bytes @ 0x3E
  3349     005E                     	ds	1
  3350     005F                     ??_App_Process:
  3351     005F                     ??_ModbusSlave_Process:	
  3352                           ; 1 bytes @ 0x3F
  3353                           
  3354     005F                     ??_main:	
  3355                           ; 1 bytes @ 0x3F
  3356                           
  3357     005F                     ??_Task_MB:	
  3358                           ; 1 bytes @ 0x3F
  3359                           
  3360                           
  3361                           	psect	maintext
  3362     0DA3                     __pmaintext:	
  3363                           ; 1 bytes @ 0x3F
  3364 ;;
  3365 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3366 ;;
  3367 ;; *************** function _main *****************
  3368 ;; Defined at:
  3369 ;;		line 49 in file "main.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;		None
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;		None
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  1    wreg      void 
  3376 ;; Registers used:
  3377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3378 ;; Tracked objects:
  3379 ;;		On entry : B1F/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3383 ;;      Params:         0       0       0       0       0       0       0       0
  3384 ;;      Locals:         0       0       0       0       0       0       0       0
  3385 ;;      Temps:          0       0       0       0       0       0       0       0
  3386 ;;      Totals:         0       0       0       0       0       0       0       0
  3387 ;;Total ram usage:        0 bytes
  3388 ;; Hardware stack levels required when called: 14
  3389 ;; This function calls:
  3390 ;;		_App_Init
  3391 ;;		_App_Process
  3392 ;;		_SYSTEM_Initialize
  3393 ;; This function is called by:
  3394 ;;		Startup code after reset
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398     0DA3                     _main:	
  3399                           ;psect for function _main
  3400                           
  3401     0DA3                     l3969:	
  3402                           ;incstack = 0
  3403                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3404                           
  3405                           
  3406                           ;main.c: 52:     SYSTEM_Initialize();
  3407     0DA3  318E  2692  318D   	fcall	_SYSTEM_Initialize
  3408                           
  3409                           ;main.c: 53:     App_Init();
  3410     0DA6  318D  2578  318D   	fcall	_App_Init
  3411     0DA9                     l3971:
  3412                           
  3413                           ;main.c: 70:     {;main.c: 72:         App_Process();
  3414     0DA9  318D  2582  318D   	fcall	_App_Process
  3415     0DAC  2DA9               	goto	l3971
  3416     0DAD  3180  2857         	ljmp	start
  3417     0DAF                     __end_of_main:
  3418                           
  3419                           	psect	text1
  3420     0E92                     __ptext1:	
  3421 ;; *************** function _SYSTEM_Initialize *****************
  3422 ;; Defined at:
  3423 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;		None
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;		None
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      void 
  3430 ;; Registers used:
  3431 ;;		wreg, status,2, status,0, pclath, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3437 ;;      Params:         0       0       0       0       0       0       0       0
  3438 ;;      Locals:         0       0       0       0       0       0       0       0
  3439 ;;      Temps:          0       0       0       0       0       0       0       0
  3440 ;;      Totals:         0       0       0       0       0       0       0       0
  3441 ;;Total ram usage:        0 bytes
  3442 ;; Hardware stack levels used: 1
  3443 ;; Hardware stack levels required when called: 9
  3444 ;; This function calls:
  3445 ;;		_EUSART_Initialize
  3446 ;;		_I2C_Initialize
  3447 ;;		_OSCILLATOR_Initialize
  3448 ;;		_PIN_MANAGER_Initialize
  3449 ;;		_TMR1_Initialize
  3450 ;;		_WDT_Initialize
  3451 ;; This function is called by:
  3452 ;;		_main
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456     0E92                     _SYSTEM_Initialize:	
  3457                           ;psect for function _SYSTEM_Initialize
  3458                           
  3459     0E92                     l3785:	
  3460                           ;incstack = 0
  3461                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3462                           
  3463                           
  3464                           ;mcc_generated_files/mcc.c: 53:     I2C_Initialize();
  3465     0E92  318D  2565  318E   	fcall	_I2C_Initialize
  3466                           
  3467                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  3468     0E95  318F  273A  318E   	fcall	_PIN_MANAGER_Initialize
  3469                           
  3470                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  3471     0E98  318D  2517  318E   	fcall	_OSCILLATOR_Initialize
  3472                           
  3473                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  3474     0E9B  318C  24C4  318E   	fcall	_WDT_Initialize
  3475                           
  3476                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  3477     0E9E  318E  26D2  318E   	fcall	_TMR1_Initialize
  3478                           
  3479                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  3480     0EA1  3185  25C3  318E   	fcall	_EUSART_Initialize
  3481     0EA4                     l163:
  3482     0EA4  0008               	return
  3483     0EA5                     __end_of_SYSTEM_Initialize:
  3484                           
  3485                           	psect	text2
  3486     0CC4                     __ptext2:	
  3487 ;; *************** function _WDT_Initialize *****************
  3488 ;; Defined at:
  3489 ;;		line 71 in file "mcc_generated_files/mcc.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;		None
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;		None
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  1    wreg      void 
  3496 ;; Registers used:
  3497 ;;		wreg
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3503 ;;      Params:         0       0       0       0       0       0       0       0
  3504 ;;      Locals:         0       0       0       0       0       0       0       0
  3505 ;;      Temps:          0       0       0       0       0       0       0       0
  3506 ;;      Totals:         0       0       0       0       0       0       0       0
  3507 ;;Total ram usage:        0 bytes
  3508 ;; Hardware stack levels used: 1
  3509 ;; Hardware stack levels required when called: 7
  3510 ;; This function calls:
  3511 ;;		Nothing
  3512 ;; This function is called by:
  3513 ;;		_SYSTEM_Initialize
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517     0CC4                     _WDT_Initialize:	
  3518                           ;psect for function _WDT_Initialize
  3519                           
  3520     0CC4                     l3655:	
  3521                           ;incstack = 0
  3522                           ; Regs used in _WDT_Initialize: [wreg]
  3523                           
  3524                           
  3525                           ;mcc_generated_files/mcc.c: 74:     WDTCON = 0x16;
  3526     0CC4  3016               	movlw	22
  3527     0CC5  0021               	movlb	1	; select bank1
  3528     0CC6  0097               	movwf	23	;volatile
  3529     0CC7                     l169:
  3530     0CC7  0008               	return
  3531     0CC8                     __end_of_WDT_Initialize:
  3532                           
  3533                           	psect	text3
  3534     0ED2                     __ptext3:	
  3535 ;; *************** function _TMR1_Initialize *****************
  3536 ;; Defined at:
  3537 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;		None
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;		None
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      void 
  3544 ;; Registers used:
  3545 ;;		wreg, status,2, status,0, pclath, cstack
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3551 ;;      Params:         0       0       0       0       0       0       0       0
  3552 ;;      Locals:         0       0       0       0       0       0       0       0
  3553 ;;      Temps:          0       0       0       0       0       0       0       0
  3554 ;;      Totals:         0       0       0       0       0       0       0       0
  3555 ;;Total ram usage:        0 bytes
  3556 ;; Hardware stack levels used: 1
  3557 ;; Hardware stack levels required when called: 8
  3558 ;; This function calls:
  3559 ;;		_TMR1_SetInterruptHandler
  3560 ;; This function is called by:
  3561 ;;		_SYSTEM_Initialize
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565     0ED2                     _TMR1_Initialize:	
  3566                           ;psect for function _TMR1_Initialize
  3567                           
  3568     0ED2                     l3657:	
  3569                           ;incstack = 0
  3570                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3571                           
  3572                           
  3573                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  3574     0ED2  0020               	movlb	0	; select bank0
  3575     0ED3  0199               	clrf	25	;volatile
  3576     0ED4                     l3659:
  3577                           
  3578                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xE0;
  3579     0ED4  30E0               	movlw	224
  3580     0ED5  0097               	movwf	23	;volatile
  3581     0ED6                     l3661:
  3582                           
  3583                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xC0;
  3584     0ED6  30C0               	movlw	192
  3585     0ED7  0096               	movwf	22	;volatile
  3586     0ED8                     l3663:
  3587                           
  3588                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  3589     0ED8  1011               	bcf	17,0	;volatile
  3590     0ED9                     l3665:
  3591                           
  3592                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  3593     0ED9  0817               	movf	23,w	;volatile
  3594     0EDA  00FD               	movwf	_timer1ReloadVal+1	;volatile
  3595     0EDB  0816               	movf	22,w	;volatile
  3596     0EDC  00FC               	movwf	_timer1ReloadVal	;volatile
  3597     0EDD                     l3667:
  3598                           
  3599                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  3600     0EDD  0021               	movlb	1	; select bank1
  3601     0EDE  1411               	bsf	17,0	;volatile
  3602     0EDF                     l3669:
  3603                           
  3604                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  3605     0EDF  30FF               	movlw	low _TMR1_DefaultInterruptHandler
  3606     0EE0  0020               	movlb	0	; select bank0
  3607     0EE1  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3608     0EE2  3007               	movlw	high _TMR1_DefaultInterruptHandler
  3609     0EE3  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3610     0EE4  318D  252F  318E   	fcall	_TMR1_SetInterruptHandler
  3611     0EE7                     l3671:
  3612                           
  3613                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x41;
  3614     0EE7  3041               	movlw	65
  3615     0EE8  0020               	movlb	0	; select bank0
  3616     0EE9  0098               	movwf	24	;volatile
  3617     0EEA                     l716:
  3618     0EEA  0008               	return
  3619     0EEB                     __end_of_TMR1_Initialize:
  3620                           
  3621                           	psect	text4
  3622     0F3A                     __ptext4:	
  3623 ;; *************** function _PIN_MANAGER_Initialize *****************
  3624 ;; Defined at:
  3625 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;		None
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;		None
  3630 ;; Return value:  Size  Location     Type
  3631 ;;                  1    wreg      void 
  3632 ;; Registers used:
  3633 ;;		wreg, status,2
  3634 ;; Tracked objects:
  3635 ;;		On entry : 0/0
  3636 ;;		On exit  : 0/0
  3637 ;;		Unchanged: 0/0
  3638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3639 ;;      Params:         0       0       0       0       0       0       0       0
  3640 ;;      Locals:         0       0       0       0       0       0       0       0
  3641 ;;      Temps:          0       0       0       0       0       0       0       0
  3642 ;;      Totals:         0       0       0       0       0       0       0       0
  3643 ;;Total ram usage:        0 bytes
  3644 ;; Hardware stack levels used: 1
  3645 ;; Hardware stack levels required when called: 7
  3646 ;; This function calls:
  3647 ;;		Nothing
  3648 ;; This function is called by:
  3649 ;;		_SYSTEM_Initialize
  3650 ;; This function uses a non-reentrant model
  3651 ;;
  3652                           
  3653     0F3A                     _PIN_MANAGER_Initialize:	
  3654                           ;psect for function _PIN_MANAGER_Initialize
  3655                           
  3656     0F3A                     l3617:	
  3657                           ;incstack = 0
  3658                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3659                           
  3660                           
  3661                           ;mcc_generated_files/pin_manager.c: 60:     LATE = 0x00;
  3662     0F3A  0022               	movlb	2	; select bank2
  3663     0F3B  0190               	clrf	16	;volatile
  3664                           
  3665                           ;mcc_generated_files/pin_manager.c: 61:     LATA = 0x00;
  3666     0F3C  018C               	clrf	12	;volatile
  3667                           
  3668                           ;mcc_generated_files/pin_manager.c: 62:     LATB = 0x00;
  3669     0F3D  018D               	clrf	13	;volatile
  3670     0F3E                     l3619:
  3671                           
  3672                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x40;
  3673     0F3E  3040               	movlw	64
  3674     0F3F  008E               	movwf	14	;volatile
  3675     0F40                     l3621:
  3676                           
  3677                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0x08;
  3678     0F40  3008               	movlw	8
  3679     0F41  0021               	movlb	1	; select bank1
  3680     0F42  0090               	movwf	16	;volatile
  3681     0F43                     l3623:
  3682                           
  3683                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0xFF;
  3684     0F43  30FF               	movlw	255
  3685     0F44  008C               	movwf	12	;volatile
  3686     0F45                     l3625:
  3687                           
  3688                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xFF;
  3689     0F45  30FF               	movlw	255
  3690     0F46  008D               	movwf	13	;volatile
  3691     0F47                     l3627:
  3692                           
  3693                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x9C;
  3694     0F47  309C               	movlw	156
  3695     0F48  008E               	movwf	14	;volatile
  3696     0F49                     l3629:
  3697                           
  3698                           ;mcc_generated_files/pin_manager.c: 76:     ANSELB = 0x3F;
  3699     0F49  303F               	movlw	63
  3700     0F4A  0023               	movlb	3	; select bank3
  3701     0F4B  008D               	movwf	13	;volatile
  3702     0F4C                     l3631:
  3703                           
  3704                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x30;
  3705     0F4C  3030               	movlw	48
  3706     0F4D  008C               	movwf	12	;volatile
  3707     0F4E                     l3633:
  3708                           
  3709                           ;mcc_generated_files/pin_manager.c: 82:     WPUE = 0x00;
  3710     0F4E  0024               	movlb	4	; select bank4
  3711     0F4F  0190               	clrf	16	;volatile
  3712     0F50                     l3635:
  3713                           
  3714                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  3715     0F50  018D               	clrf	13	;volatile
  3716     0F51                     l3637:
  3717                           
  3718                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 1;
  3719     0F51  0021               	movlb	1	; select bank1
  3720     0F52  1795               	bsf	21,7	;volatile
  3721     0F53                     l3639:
  3722                           
  3723                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  3724     0F53  0022               	movlb	2	; select bank2
  3725     0F54  019D               	clrf	29	;volatile
  3726     0F55                     l135:
  3727     0F55  0008               	return
  3728     0F56                     __end_of_PIN_MANAGER_Initialize:
  3729                           
  3730                           	psect	text5
  3731     0D17                     __ptext5:	
  3732 ;; *************** function _OSCILLATOR_Initialize *****************
  3733 ;; Defined at:
  3734 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;		None
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;		None
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      void 
  3741 ;; Registers used:
  3742 ;;		wreg, status,2
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3748 ;;      Params:         0       0       0       0       0       0       0       0
  3749 ;;      Locals:         0       0       0       0       0       0       0       0
  3750 ;;      Temps:          0       0       0       0       0       0       0       0
  3751 ;;      Totals:         0       0       0       0       0       0       0       0
  3752 ;;Total ram usage:        0 bytes
  3753 ;; Hardware stack levels used: 1
  3754 ;; Hardware stack levels required when called: 7
  3755 ;; This function calls:
  3756 ;;		Nothing
  3757 ;; This function is called by:
  3758 ;;		_SYSTEM_Initialize
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762     0D17                     _OSCILLATOR_Initialize:	
  3763                           ;psect for function _OSCILLATOR_Initialize
  3764                           
  3765     0D17                     l3649:	
  3766                           ;incstack = 0
  3767                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3768                           
  3769                           
  3770                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  3771     0D17  3070               	movlw	112
  3772     0D18  0021               	movlb	1	; select bank1
  3773     0D19  0099               	movwf	25	;volatile
  3774     0D1A                     l3651:
  3775                           
  3776                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  3777     0D1A  0198               	clrf	24	;volatile
  3778     0D1B                     l3653:
  3779                           
  3780                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  3781     0D1B  0022               	movlb	2	; select bank2
  3782     0D1C  0196               	clrf	22	;volatile
  3783     0D1D                     l166:
  3784     0D1D  0008               	return
  3785     0D1E                     __end_of_OSCILLATOR_Initialize:
  3786                           
  3787                           	psect	text6
  3788     0D65                     __ptext6:	
  3789 ;; *************** function _I2C_Initialize *****************
  3790 ;; Defined at:
  3791 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  1    wreg      void 
  3798 ;; Registers used:
  3799 ;;		wreg, status,2
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3805 ;;      Params:         0       0       0       0       0       0       0       0
  3806 ;;      Locals:         0       0       0       0       0       0       0       0
  3807 ;;      Temps:          0       0       0       0       0       0       0       0
  3808 ;;      Totals:         0       0       0       0       0       0       0       0
  3809 ;;Total ram usage:        0 bytes
  3810 ;; Hardware stack levels used: 1
  3811 ;; Hardware stack levels required when called: 7
  3812 ;; This function calls:
  3813 ;;		Nothing
  3814 ;; This function is called by:
  3815 ;;		_SYSTEM_Initialize
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819     0D65                     _I2C_Initialize:	
  3820                           ;psect for function _I2C_Initialize
  3821                           
  3822     0D65                     l3641:	
  3823                           ;incstack = 0
  3824                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  3825                           
  3826                           
  3827                           ;mcc_generated_files/i2c_master.c: 169:     SSPSTAT = 0x00;
  3828     0D65  0024               	movlb	4	; select bank4
  3829     0D66  0194               	clrf	20	;volatile
  3830     0D67                     l3643:
  3831                           
  3832                           ;mcc_generated_files/i2c_master.c: 170:     SSPCON1 = 0x08;
  3833     0D67  3008               	movlw	8
  3834     0D68  0095               	movwf	21	;volatile
  3835     0D69                     l3645:
  3836                           
  3837                           ;mcc_generated_files/i2c_master.c: 171:     SSPCON2 = 0x00;
  3838     0D69  0196               	clrf	22	;volatile
  3839                           
  3840                           ;mcc_generated_files/i2c_master.c: 172:     SSPADD = 0x13;
  3841     0D6A  3013               	movlw	19
  3842     0D6B  0092               	movwf	18	;volatile
  3843     0D6C                     l3647:
  3844                           
  3845                           ;mcc_generated_files/i2c_master.c: 173:     SSPCON1bits.SSPEN = 0;
  3846     0D6C  1295               	bcf	21,5	;volatile
  3847     0D6D                     l278:
  3848     0D6D  0008               	return
  3849     0D6E                     __end_of_I2C_Initialize:
  3850                           
  3851                           	psect	text7
  3852     05C3                     __ptext7:	
  3853 ;; *************** function _EUSART_Initialize *****************
  3854 ;; Defined at:
  3855 ;;		line 88 in file "mcc_generated_files/eusart.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;		None
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;		None
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  1    wreg      void 
  3862 ;; Registers used:
  3863 ;;		wreg, status,2, status,0, pclath, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3869 ;;      Params:         0       0       0       0       0       0       0       0
  3870 ;;      Locals:         0       0       0       0       0       0       0       0
  3871 ;;      Temps:          0       0       0       0       0       0       0       0
  3872 ;;      Totals:         0       0       0       0       0       0       0       0
  3873 ;;Total ram usage:        0 bytes
  3874 ;; Hardware stack levels used: 1
  3875 ;; Hardware stack levels required when called: 8
  3876 ;; This function calls:
  3877 ;;		_EUSART_SetErrorHandler
  3878 ;;		_EUSART_SetFramingErrorHandler
  3879 ;;		_EUSART_SetOverrunErrorHandler
  3880 ;;		_EUSART_SetRxInterruptHandler
  3881 ;;		_EUSART_SetTxInterruptHandler
  3882 ;; This function is called by:
  3883 ;;		_SYSTEM_Initialize
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887     05C3                     _EUSART_Initialize:	
  3888                           ;psect for function _EUSART_Initialize
  3889                           
  3890     05C3                     l3673:	
  3891                           ;incstack = 0
  3892                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3893                           
  3894                           
  3895                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  3896     05C3  0021               	movlb	1	; select bank1
  3897     05C4  1291               	bcf	17,5	;volatile
  3898     05C5                     l3675:
  3899                           
  3900                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3901     05C5  3005               	movlw	low _EUSART_Receive_ISR
  3902     05C6  0020               	movlb	0	; select bank0
  3903     05C7  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3904     05C8  3006               	movlw	high _EUSART_Receive_ISR
  3905     05C9  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3906     05CA  318D  2553  3185   	fcall	_EUSART_SetRxInterruptHandler
  3907     05CD                     l3677:
  3908                           
  3909                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  3910     05CD  0021               	movlb	1	; select bank1
  3911     05CE  1211               	bcf	17,4	;volatile
  3912                           
  3913                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3914     05CF  3095               	movlw	low _EUSART_Transmit_ISR
  3915     05D0  0020               	movlb	0	; select bank0
  3916     05D1  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  3917     05D2  300F               	movlw	high _EUSART_Transmit_ISR
  3918     05D3  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  3919     05D4  318D  255C  3185   	fcall	_EUSART_SetTxInterruptHandler
  3920     05D7                     l3679:
  3921                           
  3922                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  3923     05D7  3008               	movlw	8
  3924     05D8  0023               	movlb	3	; select bank3
  3925     05D9  009F               	movwf	31	;volatile
  3926     05DA                     l3681:
  3927                           
  3928                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  3929     05DA  3090               	movlw	144
  3930     05DB  009D               	movwf	29	;volatile
  3931     05DC                     l3683:
  3932                           
  3933                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  3934     05DC  3024               	movlw	36
  3935     05DD  009E               	movwf	30	;volatile
  3936     05DE                     l3685:
  3937                           
  3938                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xCF;
  3939     05DE  30CF               	movlw	207
  3940     05DF  009B               	movwf	27	;volatile
  3941     05E0                     l3687:
  3942                           
  3943                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  3944     05E0  019C               	clrf	28	;volatile
  3945     05E1                     l3689:
  3946                           
  3947                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  3948     05E1  3085               	movlw	low _EUSART_DefaultFramingErrorHandler
  3949     05E2  0020               	movlb	0	; select bank0
  3950     05E3  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  3951     05E4  300C               	movlw	high _EUSART_DefaultFramingErrorHandler
  3952     05E5  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  3953     05E6  318D  2541  3185   	fcall	_EUSART_SetFramingErrorHandler
  3954     05E9                     l3691:
  3955                           
  3956                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  3957     05E9  30B0               	movlw	low _EUSART_DefaultOverrunErrorHandler
  3958     05EA  0020               	movlb	0	; select bank0
  3959     05EB  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  3960     05EC  300C               	movlw	high _EUSART_DefaultOverrunErrorHandler
  3961     05ED  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  3962     05EE  318D  254A  3185   	fcall	_EUSART_SetOverrunErrorHandler
  3963     05F1                     l3693:
  3964                           
  3965                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  3966     05F1  30AC               	movlw	low _EUSART_DefaultErrorHandler
  3967     05F2  0020               	movlb	0	; select bank0
  3968     05F3  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  3969     05F4  300C               	movlw	high _EUSART_DefaultErrorHandler
  3970     05F5  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  3971     05F6  318D  2538  3185   	fcall	_EUSART_SetErrorHandler
  3972                           
  3973                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  3974     05F9  0020               	movlb	0	; select bank0
  3975     05FA  01E8               	clrf	_eusartRxLastError	;volatile
  3976                           
  3977                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  3978     05FB  01EE               	clrf	_eusartTxHead	;volatile
  3979                           
  3980                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  3981     05FC  01ED               	clrf	_eusartTxTail	;volatile
  3982     05FD                     l3695:
  3983                           
  3984                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3985     05FD  3010               	movlw	16
  3986     05FE  00EC               	movwf	_eusartTxBufferRemaining	;volatile
  3987     05FF                     l3697:
  3988                           
  3989                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  3990     05FF  01EB               	clrf	_eusartRxHead	;volatile
  3991     0600                     l3699:
  3992                           
  3993                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  3994     0600  01EA               	clrf	_eusartRxTail	;volatile
  3995     0601                     l3701:
  3996                           
  3997                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  3998     0601  01E9               	clrf	_eusartRxCount	;volatile
  3999     0602                     l3703:
  4000                           
  4001                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  4002     0602  0021               	movlb	1	; select bank1
  4003     0603  1691               	bsf	17,5	;volatile
  4004     0604                     l618:
  4005     0604  0008               	return
  4006     0605                     __end_of_EUSART_Initialize:
  4007                           
  4008                           	psect	text8
  4009     0D5C                     __ptext8:	
  4010 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  4011 ;; Defined at:
  4012 ;;		line 276 in file "mcc_generated_files/eusart.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4015 ;;		 -> EUSART_Transmit_ISR(1), 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      void 
  4020 ;; Registers used:
  4021 ;;		wreg
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4027 ;;      Params:         0       2       0       0       0       0       0       0
  4028 ;;      Locals:         0       0       0       0       0       0       0       0
  4029 ;;      Temps:          0       0       0       0       0       0       0       0
  4030 ;;      Totals:         0       2       0       0       0       0       0       0
  4031 ;;Total ram usage:        2 bytes
  4032 ;; Hardware stack levels used: 1
  4033 ;; Hardware stack levels required when called: 7
  4034 ;; This function calls:
  4035 ;;		Nothing
  4036 ;; This function is called by:
  4037 ;;		_EUSART_Initialize
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041     0D5C                     _EUSART_SetTxInterruptHandler:	
  4042                           ;psect for function _EUSART_SetTxInterruptHandler
  4043                           
  4044     0D5C                     l3557:	
  4045                           ;incstack = 0
  4046                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  4047                           
  4048                           
  4049                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  4050     0D5C  0020               	movlb	0	; select bank0
  4051     0D5D  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  4052     0D5E  0021               	movlb	1	; select bank1
  4053     0D5F  00D8               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  4054     0D60  0020               	movlb	0	; select bank0
  4055     0D61  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  4056     0D62  0021               	movlb	1	; select bank1
  4057     0D63  00D7               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  4058     0D64                     l684:
  4059     0D64  0008               	return
  4060     0D65                     __end_of_EUSART_SetTxInterruptHandler:
  4061                           
  4062                           	psect	text9
  4063     0D53                     __ptext9:	
  4064 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  4065 ;; Defined at:
  4066 ;;		line 280 in file "mcc_generated_files/eusart.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4069 ;;		 -> EUSART_Receive_ISR(1), 
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;		None
  4072 ;; Return value:  Size  Location     Type
  4073 ;;                  1    wreg      void 
  4074 ;; Registers used:
  4075 ;;		wreg
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4081 ;;      Params:         0       2       0       0       0       0       0       0
  4082 ;;      Locals:         0       0       0       0       0       0       0       0
  4083 ;;      Temps:          0       0       0       0       0       0       0       0
  4084 ;;      Totals:         0       2       0       0       0       0       0       0
  4085 ;;Total ram usage:        2 bytes
  4086 ;; Hardware stack levels used: 1
  4087 ;; Hardware stack levels required when called: 7
  4088 ;; This function calls:
  4089 ;;		Nothing
  4090 ;; This function is called by:
  4091 ;;		_EUSART_Initialize
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095     0D53                     _EUSART_SetRxInterruptHandler:	
  4096                           ;psect for function _EUSART_SetRxInterruptHandler
  4097                           
  4098     0D53                     l3555:	
  4099                           ;incstack = 0
  4100                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4101                           
  4102                           
  4103                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  4104     0D53  0020               	movlb	0	; select bank0
  4105     0D54  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4106     0D55  0021               	movlb	1	; select bank1
  4107     0D56  00D6               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  4108     0D57  0020               	movlb	0	; select bank0
  4109     0D58  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4110     0D59  0021               	movlb	1	; select bank1
  4111     0D5A  00D5               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  4112     0D5B                     l687:
  4113     0D5B  0008               	return
  4114     0D5C                     __end_of_EUSART_SetRxInterruptHandler:
  4115                           
  4116                           	psect	text10
  4117     0D4A                     __ptext10:	
  4118 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  4119 ;; Defined at:
  4120 ;;		line 268 in file "mcc_generated_files/eusart.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4123 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4135 ;;      Params:         0       2       0       0       0       0       0       0
  4136 ;;      Locals:         0       0       0       0       0       0       0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0
  4138 ;;      Totals:         0       2       0       0       0       0       0       0
  4139 ;;Total ram usage:        2 bytes
  4140 ;; Hardware stack levels used: 1
  4141 ;; Hardware stack levels required when called: 7
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_EUSART_Initialize
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149     0D4A                     _EUSART_SetOverrunErrorHandler:	
  4150                           ;psect for function _EUSART_SetOverrunErrorHandler
  4151                           
  4152     0D4A                     l3561:	
  4153                           ;incstack = 0
  4154                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  4155                           
  4156                           
  4157                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  4158     0D4A  0020               	movlb	0	; select bank0
  4159     0D4B  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  4160     0D4C  0021               	movlb	1	; select bank1
  4161     0D4D  00D2               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  4162     0D4E  0020               	movlb	0	; select bank0
  4163     0D4F  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  4164     0D50  0021               	movlb	1	; select bank1
  4165     0D51  00D1               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  4166     0D52                     l678:
  4167     0D52  0008               	return
  4168     0D53                     __end_of_EUSART_SetOverrunErrorHandler:
  4169                           
  4170                           	psect	text11
  4171     0D41                     __ptext11:	
  4172 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  4173 ;; Defined at:
  4174 ;;		line 264 in file "mcc_generated_files/eusart.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4177 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;		None
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  1    wreg      void 
  4182 ;; Registers used:
  4183 ;;		wreg
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4189 ;;      Params:         0       2       0       0       0       0       0       0
  4190 ;;      Locals:         0       0       0       0       0       0       0       0
  4191 ;;      Temps:          0       0       0       0       0       0       0       0
  4192 ;;      Totals:         0       2       0       0       0       0       0       0
  4193 ;;Total ram usage:        2 bytes
  4194 ;; Hardware stack levels used: 1
  4195 ;; Hardware stack levels required when called: 7
  4196 ;; This function calls:
  4197 ;;		Nothing
  4198 ;; This function is called by:
  4199 ;;		_EUSART_Initialize
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203     0D41                     _EUSART_SetFramingErrorHandler:	
  4204                           ;psect for function _EUSART_SetFramingErrorHandler
  4205                           
  4206     0D41                     l3559:	
  4207                           ;incstack = 0
  4208                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  4209                           
  4210                           
  4211                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  4212     0D41  0020               	movlb	0	; select bank0
  4213     0D42  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  4214     0D43  0021               	movlb	1	; select bank1
  4215     0D44  00D4               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  4216     0D45  0020               	movlb	0	; select bank0
  4217     0D46  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  4218     0D47  0021               	movlb	1	; select bank1
  4219     0D48  00D3               	movwf	_EUSART_FramingErrorHandler^(0+128)
  4220     0D49                     l675:
  4221     0D49  0008               	return
  4222     0D4A                     __end_of_EUSART_SetFramingErrorHandler:
  4223                           
  4224                           	psect	text12
  4225     0D38                     __ptext12:	
  4226 ;; *************** function _EUSART_SetErrorHandler *****************
  4227 ;; Defined at:
  4228 ;;		line 272 in file "mcc_generated_files/eusart.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4231 ;;		 -> EUSART_DefaultErrorHandler(1), 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;		None
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      void 
  4236 ;; Registers used:
  4237 ;;		wreg
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4243 ;;      Params:         0       2       0       0       0       0       0       0
  4244 ;;      Locals:         0       0       0       0       0       0       0       0
  4245 ;;      Temps:          0       0       0       0       0       0       0       0
  4246 ;;      Totals:         0       2       0       0       0       0       0       0
  4247 ;;Total ram usage:        2 bytes
  4248 ;; Hardware stack levels used: 1
  4249 ;; Hardware stack levels required when called: 7
  4250 ;; This function calls:
  4251 ;;		Nothing
  4252 ;; This function is called by:
  4253 ;;		_EUSART_Initialize
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257     0D38                     _EUSART_SetErrorHandler:	
  4258                           ;psect for function _EUSART_SetErrorHandler
  4259                           
  4260     0D38                     l3563:	
  4261                           ;incstack = 0
  4262                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  4263                           
  4264                           
  4265                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  4266     0D38  0020               	movlb	0	; select bank0
  4267     0D39  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  4268     0D3A  0021               	movlb	1	; select bank1
  4269     0D3B  00D0               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  4270     0D3C  0020               	movlb	0	; select bank0
  4271     0D3D  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  4272     0D3E  0021               	movlb	1	; select bank1
  4273     0D3F  00CF               	movwf	_EUSART_ErrorHandler^(0+128)
  4274     0D40                     l681:
  4275     0D40  0008               	return
  4276     0D41                     __end_of_EUSART_SetErrorHandler:
  4277                           
  4278                           	psect	text13
  4279     0D82                     __ptext13:	
  4280 ;; *************** function _App_Process *****************
  4281 ;; Defined at:
  4282 ;;		line 102 in file "MCU.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;		None
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;		None
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4296 ;;      Params:         0       0       0       0       0       0       0       0
  4297 ;;      Locals:         0       0       0       0       0       0       0       0
  4298 ;;      Temps:          0       0       0       0       0       0       0       0
  4299 ;;      Totals:         0       0       0       0       0       0       0       0
  4300 ;;Total ram usage:        0 bytes
  4301 ;; Hardware stack levels used: 1
  4302 ;; Hardware stack levels required when called: 13
  4303 ;; This function calls:
  4304 ;;		_Task_Indicator
  4305 ;;		_Task_MB
  4306 ;;		_Task_Sensor
  4307 ;; This function is called by:
  4308 ;;		_main
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312     0D82                     _App_Process:	
  4313                           ;psect for function _App_Process
  4314                           
  4315     0D82                     l3831:	
  4316                           ;incstack = 0
  4317                           ; Regs used in _App_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4318                           
  4319                           
  4320                           ;MCU.c: 104:     Task_Sensor();
  4321     0D82  3184  248F  318D   	fcall	_Task_Sensor
  4322     0D85                     l3833:
  4323                           
  4324                           ;MCU.c: 105:     Task_MB();
  4325     0D85  318E  2680  318D   	fcall	_Task_MB
  4326     0D88                     l3835:
  4327                           
  4328                           ;MCU.c: 106:     Task_Indicator();
  4329     0D88  318F  27DC  318D   	fcall	_Task_Indicator
  4330     0D8B                     l881:
  4331     0D8B  0008               	return
  4332     0D8C                     __end_of_App_Process:
  4333                           
  4334                           	psect	text14
  4335     048F                     __ptext14:	
  4336 ;; *************** function _Task_Sensor *****************
  4337 ;; Defined at:
  4338 ;;		line 22 in file "MCU.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      void 
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4352 ;;      Params:         0       0       0       0       0       0       0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0
  4354 ;;      Temps:          0       4       0       0       0       0       0       0
  4355 ;;      Totals:         0       4       0       0       0       0       0       0
  4356 ;;Total ram usage:        4 bytes
  4357 ;; Hardware stack levels used: 1
  4358 ;; Hardware stack levels required when called: 12
  4359 ;; This function calls:
  4360 ;;		_Get_millis
  4361 ;;		_ReadData
  4362 ;; This function is called by:
  4363 ;;		_App_Process
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367     048F                     _Task_Sensor:	
  4368                           ;psect for function _Task_Sensor
  4369                           
  4370     048F                     l3739:	
  4371                           ;incstack = 0
  4372                           ; Regs used in _Task_Sensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4373                           
  4374                           
  4375                           ;MCU.c: 24:     static uint32_t valTime = 0;;MCU.c: 26:     f_Indicator = OFF_Sensor;
  4376     048F  0020               	movlb	0	; select bank0
  4377     0490  01E7               	clrf	_f_Indicator
  4378     0491                     l3741:
  4379                           
  4380                           ;MCU.c: 29:     if ((((uint32_t) Get_millis() - valTime) >= (uint32_t) 2000) |
  4381     0491  318E  265D  3184   	fcall	_Get_millis
  4382     0494                     l3743:
  4383     0494  318E  265D  3184   	fcall	_Get_millis
  4384     0497  0021               	movlb	1	; select bank1
  4385     0498  0841               	movf	Task_Sensor@valTime^(0+128),w
  4386     0499  0020               	movlb	0	; select bank0
  4387     049A  0220               	subwf	?_Get_millis,w
  4388     049B  00BA               	movwf	??_Task_Sensor
  4389     049C  0021               	movlb	1	; select bank1
  4390     049D  0842               	movf	(Task_Sensor@valTime+1)^(0+128),w
  4391     049E  0020               	movlb	0	; select bank0
  4392     049F  3B21               	subwfb	?_Get_millis+1,w
  4393     04A0  00BB               	movwf	??_Task_Sensor+1
  4394     04A1  0021               	movlb	1	; select bank1
  4395     04A2  0843               	movf	(Task_Sensor@valTime+2)^(0+128),w
  4396     04A3  0020               	movlb	0	; select bank0
  4397     04A4  3B22               	subwfb	?_Get_millis+2,w
  4398     04A5  00BC               	movwf	??_Task_Sensor+2
  4399     04A6  0021               	movlb	1	; select bank1
  4400     04A7  0844               	movf	(Task_Sensor@valTime+3)^(0+128),w
  4401     04A8  0020               	movlb	0	; select bank0
  4402     04A9  3B23               	subwfb	?_Get_millis+3,w
  4403     04AA  00BD               	movwf	??_Task_Sensor+3
  4404     04AB  083D               	movf	??_Task_Sensor+3,w
  4405     04AC  1D03               	btfss	3,2
  4406     04AD  2CB8               	goto	u1361
  4407     04AE  083C               	movf	??_Task_Sensor+2,w
  4408     04AF  1D03               	btfss	3,2
  4409     04B0  2CB8               	goto	u1361
  4410     04B1  30D0               	movlw	208
  4411     04B2  023A               	subwf	??_Task_Sensor,w
  4412     04B3  3007               	movlw	7
  4413     04B4  3B3B               	subwfb	??_Task_Sensor+1,w
  4414     04B5  1803               	btfsc	3,0
  4415     04B6  2CB8               	goto	u1361
  4416     04B7  2CB9               	goto	u1360
  4417     04B8                     u1361:
  4418     04B8  2CBA               	goto	l3747
  4419     04B9                     u1360:
  4420     04B9  2CE6               	goto	l837
  4421     04BA                     l3747:
  4422                           
  4423                           ;MCU.c: 31:     {;MCU.c: 32:         valTime = Get_millis();
  4424     04BA  318E  265D  3184   	fcall	_Get_millis
  4425     04BD  0020               	movlb	0	; select bank0
  4426     04BE  0823               	movf	?_Get_millis+3,w
  4427     04BF  0021               	movlb	1	; select bank1
  4428     04C0  00C4               	movwf	(Task_Sensor@valTime+3)^(0+128)
  4429     04C1  0020               	movlb	0	; select bank0
  4430     04C2  0822               	movf	?_Get_millis+2,w
  4431     04C3  0021               	movlb	1	; select bank1
  4432     04C4  00C3               	movwf	(Task_Sensor@valTime+2)^(0+128)
  4433     04C5  0020               	movlb	0	; select bank0
  4434     04C6  0821               	movf	?_Get_millis+1,w
  4435     04C7  0021               	movlb	1	; select bank1
  4436     04C8  00C2               	movwf	(Task_Sensor@valTime+1)^(0+128)
  4437     04C9  0020               	movlb	0	; select bank0
  4438     04CA  0820               	movf	?_Get_millis,w
  4439     04CB  0021               	movlb	1	; select bank1
  4440     04CC  00C1               	movwf	Task_Sensor@valTime^(0+128)
  4441     04CD                     l3749:
  4442                           
  4443                           ;MCU.c: 33:         f_Indicator = ON_Sensor;
  4444     04CD  0020               	movlb	0	; select bank0
  4445     04CE  01E7               	clrf	_f_Indicator
  4446     04CF  0AE7               	incf	_f_Indicator,f
  4447     04D0                     l3751:
  4448                           
  4449                           ;MCU.c: 34:         ReadData();
  4450     04D0  3183  2375  3184   	fcall	_ReadData
  4451     04D3                     l3753:
  4452                           
  4453                           ;MCU.c: 35:         if ( (Temperature < 0) || (Humidity < 0) )
  4454     04D3  0020               	movlb	0	; select bank0
  4455     04D4  1BE2               	btfsc	_Temperature+1,7
  4456     04D5  2CD7               	goto	u1371
  4457     04D6  2CD8               	goto	u1370
  4458     04D7                     u1371:
  4459     04D7  2CDC               	goto	l3757
  4460     04D8                     u1370:
  4461     04D8                     l3755:
  4462     04D8  1FE0               	btfss	_Humidity+1,7
  4463     04D9  2CDB               	goto	u1381
  4464     04DA  2CDC               	goto	u1380
  4465     04DB                     u1381:
  4466     04DB  2CE6               	goto	l837
  4467     04DC                     u1380:
  4468     04DC                     l3757:
  4469                           
  4470                           ;MCU.c: 36:         {;MCU.c: 37:             Temperature = 0x8000;
  4471     04DC  3000               	movlw	0
  4472     04DD  00E1               	movwf	_Temperature
  4473     04DE  3080               	movlw	128
  4474     04DF  00E2               	movwf	_Temperature+1
  4475                           
  4476                           ;MCU.c: 38:             Temperature = 0x8000;
  4477     04E0  3000               	movlw	0
  4478     04E1  00E1               	movwf	_Temperature
  4479     04E2  3080               	movlw	128
  4480     04E3  00E2               	movwf	_Temperature+1
  4481                           
  4482                           ;MCU.c: 39:             f_Indicator = ERR_Sensor;
  4483     04E4  3002               	movlw	2
  4484     04E5  00E7               	movwf	_f_Indicator
  4485     04E6                     l837:
  4486     04E6  0008               	return
  4487     04E7                     __end_of_Task_Sensor:
  4488                           
  4489                           	psect	text15
  4490     0375                     __ptext15:	
  4491 ;; *************** function _ReadData *****************
  4492 ;; Defined at:
  4493 ;;		line 317 in file "I2C_SHT30.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;		None
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  aData           6   16[BANK0 ] unsigned char [6]
  4498 ;;  valTime         4   22[BANK0 ] unsigned long 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  1    wreg      void 
  4501 ;; Registers used:
  4502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4508 ;;      Params:         0       0       0       0       0       0       0       0
  4509 ;;      Locals:         0      10       0       0       0       0       0       0
  4510 ;;      Temps:          0       4       0       0       0       0       0       0
  4511 ;;      Totals:         0      14       0       0       0       0       0       0
  4512 ;;Total ram usage:       14 bytes
  4513 ;; Hardware stack levels used: 1
  4514 ;; Hardware stack levels required when called: 11
  4515 ;; This function calls:
  4516 ;;		_Get_millis
  4517 ;;		_I2C_ReadNBytes
  4518 ;;		_I2C_WriteNBytes
  4519 ;; This function is called by:
  4520 ;;		_Task_Sensor
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524     0375                     _ReadData:	
  4525                           ;psect for function _ReadData
  4526                           
  4527     0375                     l3577:	
  4528                           ;incstack = 0
  4529                           ; Regs used in _ReadData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4530                           
  4531                           
  4532                           ;I2C_SHT30.c: 319:     uint8_t aData[6];;I2C_SHT30.c: 320:     uint32_t valTime;;I2C_SHT
      +                          30.c: 322:     I2C_WriteNBytes(0x88, SHT30_CMD_MEASURE_H_Disable, 2);
  4533     0375  30E7               	movlw	(low (_SHT30_CMD_MEASURE_H_Disable| 0))& (0+255)
  4534     0376  0020               	movlb	0	; select bank0
  4535     0377  00A8               	movwf	I2C_WriteNBytes@data
  4536     0378  3002               	movlw	2
  4537     0379  00A9               	movwf	I2C_WriteNBytes@len
  4538     037A  3000               	movlw	0
  4539     037B  00AA               	movwf	I2C_WriteNBytes@len+1
  4540     037C  3088               	movlw	136
  4541     037D  3186  26E1  3183   	fcall	_I2C_WriteNBytes
  4542     0380                     l3579:
  4543                           
  4544                           ;I2C_SHT30.c: 323:     valTime = Get_millis();
  4545     0380  318E  265D  3183   	fcall	_Get_millis
  4546     0383  0020               	movlb	0	; select bank0
  4547     0384  0823               	movf	?_Get_millis+3,w
  4548     0385  00B9               	movwf	ReadData@valTime+3
  4549     0386  0822               	movf	?_Get_millis+2,w
  4550     0387  00B8               	movwf	ReadData@valTime+2
  4551     0388  0821               	movf	?_Get_millis+1,w
  4552     0389  00B7               	movwf	ReadData@valTime+1
  4553     038A  0820               	movf	?_Get_millis,w
  4554     038B  00B6               	movwf	ReadData@valTime
  4555     038C                     l3581:	
  4556                           ;I2C_SHT30.c: 324:     while (((uint32_t) Get_millis() - valTime) < (uint32_t) 2);
  4557                           
  4558     038C  318E  265D  3183   	fcall	_Get_millis
  4559     038F  0020               	movlb	0	; select bank0
  4560     0390  0836               	movf	ReadData@valTime,w
  4561     0391  0220               	subwf	?_Get_millis,w
  4562     0392  00AC               	movwf	??_ReadData
  4563     0393  0837               	movf	ReadData@valTime+1,w
  4564     0394  3B21               	subwfb	?_Get_millis+1,w
  4565     0395  00AD               	movwf	??_ReadData+1
  4566     0396  0838               	movf	ReadData@valTime+2,w
  4567     0397  3B22               	subwfb	?_Get_millis+2,w
  4568     0398  00AE               	movwf	??_ReadData+2
  4569     0399  0839               	movf	ReadData@valTime+3,w
  4570     039A  3B23               	subwfb	?_Get_millis+3,w
  4571     039B  00AF               	movwf	??_ReadData+3
  4572     039C  082F               	movf	??_ReadData+3,w
  4573     039D  1D03               	btfss	3,2
  4574     039E  2BAB               	goto	u1310
  4575     039F  082E               	movf	??_ReadData+2,w
  4576     03A0  1D03               	btfss	3,2
  4577     03A1  2BAB               	goto	u1310
  4578     03A2  082D               	movf	??_ReadData+1,w
  4579     03A3  1D03               	btfss	3,2
  4580     03A4  2BAB               	goto	u1310
  4581     03A5  3002               	movlw	2
  4582     03A6  022C               	subwf	??_ReadData,w
  4583     03A7  1C03               	btfss	3,0
  4584     03A8  2BAA               	goto	u1311
  4585     03A9  2BAB               	goto	u1310
  4586     03AA                     u1311:
  4587     03AA  2B8C               	goto	l3581
  4588     03AB                     u1310:
  4589     03AB                     l3583:
  4590                           
  4591                           ;I2C_SHT30.c: 326:     I2C_ReadNBytes(0x89, aData, 6);
  4592     03AB  3030               	movlw	(low (ReadData@aData| 0))& (0+255)
  4593     03AC  0020               	movlb	0	; select bank0
  4594     03AD  00A4               	movwf	I2C_ReadNBytes@data
  4595     03AE  3006               	movlw	6
  4596     03AF  00A5               	movwf	I2C_ReadNBytes@len
  4597     03B0  3000               	movlw	0
  4598     03B1  00A6               	movwf	I2C_ReadNBytes@len+1
  4599     03B2  3089               	movlw	137
  4600     03B3  318F  2774  3183   	fcall	_I2C_ReadNBytes
  4601     03B6                     l3585:
  4602                           
  4603                           ;I2C_SHT30.c: 328:     _Temperature._Byte[1] = aData[0];
  4604     03B6  0020               	movlb	0	; select bank0
  4605     03B7  0830               	movf	ReadData@aData,w
  4606     03B8  0021               	movlb	1	; select bank1
  4607     03B9  00C8               	movwf	(__Temperature^(0+128)+1)
  4608     03BA                     l3587:
  4609                           
  4610                           ;I2C_SHT30.c: 329:     _Temperature._Byte[0] = aData[1];
  4611     03BA  0020               	movlb	0	; select bank0
  4612     03BB  0831               	movf	ReadData@aData+1,w
  4613     03BC  0021               	movlb	1	; select bank1
  4614     03BD  00C7               	movwf	__Temperature^(0+128)
  4615     03BE                     l3589:
  4616                           
  4617                           ;I2C_SHT30.c: 330:     Temperature = (int16_t) _Temperature._Value;
  4618     03BE  0848               	movf	(__Temperature+1)^(0+128),w
  4619     03BF  0020               	movlb	0	; select bank0
  4620     03C0  00E2               	movwf	_Temperature+1
  4621     03C1  0021               	movlb	1	; select bank1
  4622     03C2  0847               	movf	__Temperature^(0+128),w
  4623     03C3  0020               	movlb	0	; select bank0
  4624     03C4  00E1               	movwf	_Temperature
  4625     03C5                     l3591:
  4626                           
  4627                           ;I2C_SHT30.c: 332:     _Humidity._Byte[1] = aData[3];
  4628     03C5  0833               	movf	ReadData@aData+3,w
  4629     03C6  0021               	movlb	1	; select bank1
  4630     03C7  00C6               	movwf	(__Humidity^(0+128)+1)
  4631     03C8                     l3593:
  4632                           
  4633                           ;I2C_SHT30.c: 333:     _Humidity._Byte[0] = aData[4];
  4634     03C8  0020               	movlb	0	; select bank0
  4635     03C9  0834               	movf	ReadData@aData+4,w
  4636     03CA  0021               	movlb	1	; select bank1
  4637     03CB  00C5               	movwf	__Humidity^(0+128)
  4638     03CC                     l3595:
  4639                           
  4640                           ;I2C_SHT30.c: 334:     Humidity = (int16_t)_Humidity._Value;
  4641     03CC  0846               	movf	(__Humidity+1)^(0+128),w
  4642     03CD  0020               	movlb	0	; select bank0
  4643     03CE  00E0               	movwf	_Humidity+1
  4644     03CF  0021               	movlb	1	; select bank1
  4645     03D0  0845               	movf	__Humidity^(0+128),w
  4646     03D1  0020               	movlb	0	; select bank0
  4647     03D2  00DF               	movwf	_Humidity
  4648     03D3                     l802:
  4649     03D3  0008               	return
  4650     03D4                     __end_of_ReadData:
  4651                           
  4652                           	psect	text16
  4653     06E1                     __ptext16:	
  4654 ;; *************** function _I2C_WriteNBytes *****************
  4655 ;; Defined at:
  4656 ;;		line 111 in file "mcc_generated_files/examples/i2c_master_example.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  address         1    wreg     unsigned char 
  4659 ;;  data            1    8[BANK0 ] PTR unsigned char 
  4660 ;;		 -> SHT30_CMD_MEASURE_H_Disable(2), 
  4661 ;;  len             2    9[BANK0 ] unsigned int 
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;  address         1   11[BANK0 ] unsigned char 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4673 ;;      Params:         0       3       0       0       0       0       0       0
  4674 ;;      Locals:         0       1       0       0       0       0       0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0       0
  4676 ;;      Totals:         0       4       0       0       0       0       0       0
  4677 ;;Total ram usage:        4 bytes
  4678 ;; Hardware stack levels used: 1
  4679 ;; Hardware stack levels required when called: 10
  4680 ;; This function calls:
  4681 ;;		_I2C_Close
  4682 ;;		_I2C_MasterWrite
  4683 ;;		_I2C_Open
  4684 ;;		_I2C_SetAddressNackCallback
  4685 ;;		_I2C_SetBuffer
  4686 ;; This function is called by:
  4687 ;;		_ReadData
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691     06E1                     _I2C_WriteNBytes:	
  4692                           ;psect for function _I2C_WriteNBytes
  4693                           
  4694                           
  4695                           ;incstack = 0
  4696                           ; Regs used in _I2C_WriteNBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4697                           ;I2C_WriteNBytes@address stored from wreg
  4698     06E1  0020               	movlb	0	; select bank0
  4699     06E2  00AB               	movwf	I2C_WriteNBytes@address
  4700     06E3                     l3209:
  4701     06E3                     l3211:	
  4702                           ;mcc_generated_files/examples/i2c_master_example.c: 111: void I2C_WriteNBytes(i2c_addres
      +                          s_t address, uint8_t* data, size_t len);mcc_generated_files/examples/i2c_master_example.
      +                          c: 112: {;mcc_generated_files/examples/i2c_master_example.c: 113:     while(!I2C_Open(ad
      +                          dress));
  4703                           
  4704     06E3  0020               	movlb	0	; select bank0
  4705     06E4  082B               	movf	I2C_WriteNBytes@address,w
  4706     06E5  3185  253A  3186   	fcall	_I2C_Open
  4707     06E8  3A00               	xorlw	0
  4708     06E9  1903               	skipnz
  4709     06EA  2EEC               	goto	u1161
  4710     06EB  2EED               	goto	u1160
  4711     06EC                     u1161:
  4712     06EC  2EE3               	goto	l3211
  4713     06ED                     u1160:
  4714     06ED                     l3213:
  4715                           
  4716                           ;mcc_generated_files/examples/i2c_master_example.c: 114:     I2C_SetBuffer(data,len);
  4717     06ED  0020               	movlb	0	; select bank0
  4718     06EE  082A               	movf	I2C_WriteNBytes@len+1,w
  4719     06EF  00A1               	movwf	I2C_SetBuffer@bufferSize+1
  4720     06F0  0829               	movf	I2C_WriteNBytes@len,w
  4721     06F1  00A0               	movwf	I2C_SetBuffer@bufferSize
  4722     06F2  0828               	movf	I2C_WriteNBytes@data,w
  4723     06F3  318E  26A5  3186   	fcall	_I2C_SetBuffer
  4724     06F6                     l3215:
  4725                           
  4726                           ;mcc_generated_files/examples/i2c_master_example.c: 115:     I2C_SetAddressNackCallback(
      +                          ((void*)0),((void*)0));
  4727     06F6  3000               	movlw	0
  4728     06F7  0020               	movlb	0	; select bank0
  4729     06F8  00A4               	movwf	I2C_SetAddressNackCallback@cb
  4730     06F9  00A5               	movwf	I2C_SetAddressNackCallback@cb+1
  4731     06FA  3000               	movlw	0
  4732     06FB  00A6               	movwf	I2C_SetAddressNackCallback@ptr
  4733     06FC  00A7               	movwf	I2C_SetAddressNackCallback@ptr+1
  4734     06FD  318D  2597  3186   	fcall	_I2C_SetAddressNackCallback
  4735     0700                     l3217:
  4736                           
  4737                           ;mcc_generated_files/examples/i2c_master_example.c: 116:     I2C_MasterWrite();
  4738     0700  318C  24FF  3186   	fcall	_I2C_MasterWrite
  4739     0703                     l3219:	
  4740                           ;mcc_generated_files/examples/i2c_master_example.c: 117:     while(I2C_BUSY == I2C_Close
      +                          ());
  4741                           
  4742     0703  318F  271F  3186   	fcall	_I2C_Close
  4743     0706  3A01               	xorlw	1
  4744     0707  1903               	skipnz
  4745     0708  2F0A               	goto	u1171
  4746     0709  2F0B               	goto	u1170
  4747     070A                     u1171:
  4748     070A  2F03               	goto	l3219
  4749     070B                     u1170:
  4750     070B                     l71:
  4751     070B  0008               	return
  4752     070C                     __end_of_I2C_WriteNBytes:
  4753                           
  4754                           	psect	text17
  4755     0D97                     __ptext17:	
  4756 ;; *************** function _I2C_SetAddressNackCallback *****************
  4757 ;; Defined at:
  4758 ;;		line 284 in file "mcc_generated_files/i2c_master.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  cb              2    4[BANK0 ] PTR FTN(PTR void ,)enum 
  4761 ;;		 -> NULL(1), 
  4762 ;;  ptr             2    6[BANK0 ] PTR void 
  4763 ;;		 -> NULL(0), 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;		None
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      void 
  4768 ;; Registers used:
  4769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4775 ;;      Params:         0       4       0       0       0       0       0       0
  4776 ;;      Locals:         0       0       0       0       0       0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0       0
  4778 ;;      Totals:         0       4       0       0       0       0       0       0
  4779 ;;Total ram usage:        4 bytes
  4780 ;; Hardware stack levels used: 1
  4781 ;; Hardware stack levels required when called: 8
  4782 ;; This function calls:
  4783 ;;		_I2C_SetCallback
  4784 ;; This function is called by:
  4785 ;;		_I2C_WriteNBytes
  4786 ;;		_I2C_Read1ByteRegister
  4787 ;;		_I2C_Read2ByteRegister
  4788 ;;		_I2C_Write1ByteRegister
  4789 ;;		_I2C_Write2ByteRegister
  4790 ;;		_I2C_ReadDataBlock
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794     0D97                     _I2C_SetAddressNackCallback:	
  4795                           ;psect for function _I2C_SetAddressNackCallback
  4796                           
  4797     0D97                     l3075:	
  4798                           ;incstack = 0
  4799                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4800                           
  4801                           
  4802                           ;mcc_generated_files/i2c_master.c: 284: void I2C_SetAddressNackCallback(i2c_callback_t c
      +                          b, void *ptr);mcc_generated_files/i2c_master.c: 285: {;mcc_generated_files/i2c_master.c:
      +                           286:     I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  4803     0D97  0020               	movlb	0	; select bank0
  4804     0D98  0825               	movf	I2C_SetAddressNackCallback@cb+1,w
  4805     0D99  00A1               	movwf	I2C_SetCallback@cb+1
  4806     0D9A  0824               	movf	I2C_SetAddressNackCallback@cb,w
  4807     0D9B  00A0               	movwf	I2C_SetCallback@cb
  4808     0D9C  0826               	movf	I2C_SetAddressNackCallback@ptr,w
  4809     0D9D  00A2               	movwf	I2C_SetCallback@ptr
  4810     0D9E  3002               	movlw	2
  4811     0D9F  3187  27DA  318D   	fcall	_I2C_SetCallback
  4812     0DA2                     l314:
  4813     0DA2  0008               	return
  4814     0DA3                     __end_of_I2C_SetAddressNackCallback:
  4815                           
  4816                           	psect	text18
  4817     07DA                     __ptext18:	
  4818 ;; *************** function _I2C_SetCallback *****************
  4819 ;; Defined at:
  4820 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  idx             1    wreg     enum E3130
  4823 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
  4824 ;;		 -> NULL(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
  4825 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  4826 ;;  ptr             1    2[BANK0 ] PTR void 
  4827 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  4828 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;  idx             1    3[BANK0 ] enum E3130
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  1    wreg      void 
  4833 ;; Registers used:
  4834 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4840 ;;      Params:         0       3       0       0       0       0       0       0
  4841 ;;      Locals:         0       1       0       0       0       0       0       0
  4842 ;;      Temps:          0       0       0       0       0       0       0       0
  4843 ;;      Totals:         0       4       0       0       0       0       0       0
  4844 ;;Total ram usage:        4 bytes
  4845 ;; Hardware stack levels used: 1
  4846 ;; Hardware stack levels required when called: 7
  4847 ;; This function calls:
  4848 ;;		Nothing
  4849 ;; This function is called by:
  4850 ;;		_I2C_SetAddressNackCallback
  4851 ;;		_I2C_SetWriteCollisionCallback
  4852 ;;		_I2C_SetDataNackCallback
  4853 ;;		_I2C_SetTimeoutCallback
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857     07DA                     _I2C_SetCallback:	
  4858                           ;psect for function _I2C_SetCallback
  4859                           
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  4863                           ;I2C_SetCallback@idx stored from wreg
  4864     07DA  0020               	movlb	0	; select bank0
  4865     07DB  00A3               	movwf	I2C_SetCallback@idx
  4866     07DC                     l2961:
  4867                           
  4868                           ;mcc_generated_files/i2c_master.c: 304: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 305: {;mcc_generate
      +                          d_files/i2c_master.c: 306:     if(cb)
  4869     07DC  0820               	movf	I2C_SetCallback@cb,w
  4870     07DD  0421               	iorwf	I2C_SetCallback@cb+1,w
  4871     07DE  1903               	btfsc	3,2
  4872     07DF  2FE1               	goto	u951
  4873     07E0  2FE2               	goto	u950
  4874     07E1                     u951:
  4875     07E1  2FF1               	goto	l2965
  4876     07E2                     u950:
  4877     07E2                     l2963:
  4878                           
  4879                           ;mcc_generated_files/i2c_master.c: 307:     {;mcc_generated_files/i2c_master.c: 308:    
      +                               I2C_Status.callbackTable[idx] = cb;
  4880     07E2  3523               	lslf	I2C_SetCallback@idx,w
  4881     07E3  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  4882     07E4  0086               	movwf	6
  4883     07E5  0187               	clrf	7
  4884     07E6  0820               	movf	I2C_SetCallback@cb,w
  4885     07E7  3FC0               	movwi [0]fsr1
  4886     07E8  0821               	movf	I2C_SetCallback@cb+1,w
  4887     07E9  3FC1               	movwi [1]fsr1
  4888                           
  4889                           ;mcc_generated_files/i2c_master.c: 309:         I2C_Status.callbackPayload[idx] = ptr;
  4890     07EA  0823               	movf	I2C_SetCallback@idx,w
  4891     07EB  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  4892     07EC  0086               	movwf	6
  4893     07ED  0187               	clrf	7
  4894     07EE  0822               	movf	I2C_SetCallback@ptr,w
  4895     07EF  0081               	movwf	1
  4896                           
  4897                           ;mcc_generated_files/i2c_master.c: 310:     }
  4898     07F0  2FFE               	goto	l328
  4899     07F1                     l2965:
  4900                           
  4901                           ;mcc_generated_files/i2c_master.c: 312:     {;mcc_generated_files/i2c_master.c: 313:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  4902     07F1  3523               	lslf	I2C_SetCallback@idx,w
  4903     07F2  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  4904     07F3  0086               	movwf	6
  4905     07F4  0187               	clrf	7
  4906     07F5  3086               	movlw	low _I2C_CallbackReturnStop
  4907     07F6  3FC0               	movwi [0]fsr1
  4908     07F7  300C               	movlw	high _I2C_CallbackReturnStop
  4909     07F8  3FC1               	movwi [1]fsr1
  4910                           
  4911                           ;mcc_generated_files/i2c_master.c: 314:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
  4912     07F9  0823               	movf	I2C_SetCallback@idx,w
  4913     07FA  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  4914     07FB  0086               	movwf	6
  4915     07FC  0187               	clrf	7
  4916     07FD  0181               	clrf	1
  4917     07FE                     l328:
  4918     07FE  0008               	return
  4919     07FF                     __end_of_I2C_SetCallback:
  4920                           
  4921                           	psect	text19
  4922     0CFF                     __ptext19:	
  4923 ;; *************** function _I2C_MasterWrite *****************
  4924 ;; Defined at:
  4925 ;;		line 252 in file "mcc_generated_files/i2c_master.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;		None
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;		None
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  1    wreg      enum E358
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0, pclath, cstack
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4939 ;;      Params:         0       0       0       0       0       0       0       0
  4940 ;;      Locals:         0       0       0       0       0       0       0       0
  4941 ;;      Temps:          0       0       0       0       0       0       0       0
  4942 ;;      Totals:         0       0       0       0       0       0       0       0
  4943 ;;Total ram usage:        0 bytes
  4944 ;; Hardware stack levels used: 1
  4945 ;; Hardware stack levels required when called: 9
  4946 ;; This function calls:
  4947 ;;		_I2C_MasterOperation
  4948 ;; This function is called by:
  4949 ;;		_I2C_WriteNBytes
  4950 ;;		_I2C_Read1ByteRegister
  4951 ;;		_I2C_Read2ByteRegister
  4952 ;;		_I2C_Write1ByteRegister
  4953 ;;		_I2C_Write2ByteRegister
  4954 ;;		_I2C_ReadDataBlock
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958     0CFF                     _I2C_MasterWrite:	
  4959                           ;psect for function _I2C_MasterWrite
  4960                           
  4961     0CFF                     l3077:	
  4962                           ;incstack = 0
  4963                           ; Regs used in _I2C_MasterWrite: [wreg+status,2+status,0+pclath+cstack]
  4964                           
  4965                           
  4966                           ;mcc_generated_files/i2c_master.c: 254:     return I2C_MasterOperation(0);;	Return value
      +                           of _I2C_MasterWrite is never used
  4967     0CFF  3000               	movlw	0
  4968     0D00  318F  2756  318C   	fcall	_I2C_MasterOperation
  4969     0D03                     l298:
  4970     0D03  0008               	return
  4971     0D04                     __end_of_I2C_MasterWrite:
  4972                           
  4973                           	psect	text20
  4974     0F74                     __ptext20:	
  4975 ;; *************** function _I2C_ReadNBytes *****************
  4976 ;; Defined at:
  4977 ;;		line 120 in file "mcc_generated_files/examples/i2c_master_example.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  address         1    wreg     unsigned char 
  4980 ;;  data            1    4[BANK0 ] PTR unsigned char 
  4981 ;;		 -> ReadData@aData(6), 
  4982 ;;  len             2    5[BANK0 ] unsigned int 
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  address         1    7[BANK0 ] unsigned char 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      void 
  4987 ;; Registers used:
  4988 ;;		wreg, status,2, status,0, pclath, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4994 ;;      Params:         0       3       0       0       0       0       0       0
  4995 ;;      Locals:         0       1       0       0       0       0       0       0
  4996 ;;      Temps:          0       0       0       0       0       0       0       0
  4997 ;;      Totals:         0       4       0       0       0       0       0       0
  4998 ;;Total ram usage:        4 bytes
  4999 ;; Hardware stack levels used: 1
  5000 ;; Hardware stack levels required when called: 10
  5001 ;; This function calls:
  5002 ;;		_I2C_Close
  5003 ;;		_I2C_MasterRead
  5004 ;;		_I2C_Open
  5005 ;;		_I2C_SetBuffer
  5006 ;; This function is called by:
  5007 ;;		_ReadData
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011     0F74                     _I2C_ReadNBytes:	
  5012                           ;psect for function _I2C_ReadNBytes
  5013                           
  5014                           
  5015                           ;incstack = 0
  5016                           ; Regs used in _I2C_ReadNBytes: [wreg+status,2+status,0+pclath+cstack]
  5017                           ;I2C_ReadNBytes@address stored from wreg
  5018     0F74  0020               	movlb	0	; select bank0
  5019     0F75  00A7               	movwf	I2C_ReadNBytes@address
  5020     0F76                     l3221:
  5021     0F76                     l3223:	
  5022                           ;mcc_generated_files/examples/i2c_master_example.c: 120: void I2C_ReadNBytes(i2c_address
      +                          _t address, uint8_t *data, size_t len);mcc_generated_files/examples/i2c_master_example.c
      +                          : 121: {;mcc_generated_files/examples/i2c_master_example.c: 122:     while(!I2C_Open(add
      +                          ress));
  5023                           
  5024     0F76  0020               	movlb	0	; select bank0
  5025     0F77  0827               	movf	I2C_ReadNBytes@address,w
  5026     0F78  3185  253A  318F   	fcall	_I2C_Open
  5027     0F7B  3A00               	xorlw	0
  5028     0F7C  1903               	skipnz
  5029     0F7D  2F7F               	goto	u1181
  5030     0F7E  2F80               	goto	u1180
  5031     0F7F                     u1181:
  5032     0F7F  2F76               	goto	l3223
  5033     0F80                     u1180:
  5034     0F80                     l3225:
  5035                           
  5036                           ;mcc_generated_files/examples/i2c_master_example.c: 123:     I2C_SetBuffer(data,len);
  5037     0F80  0020               	movlb	0	; select bank0
  5038     0F81  0826               	movf	I2C_ReadNBytes@len+1,w
  5039     0F82  00A1               	movwf	I2C_SetBuffer@bufferSize+1
  5040     0F83  0825               	movf	I2C_ReadNBytes@len,w
  5041     0F84  00A0               	movwf	I2C_SetBuffer@bufferSize
  5042     0F85  0824               	movf	I2C_ReadNBytes@data,w
  5043     0F86  318E  26A5  318F   	fcall	_I2C_SetBuffer
  5044                           
  5045                           ;mcc_generated_files/examples/i2c_master_example.c: 124:     I2C_MasterRead();
  5046     0F89  318C  24FA  318F   	fcall	_I2C_MasterRead
  5047     0F8C                     l3227:	
  5048                           ;mcc_generated_files/examples/i2c_master_example.c: 125:     while(I2C_BUSY == I2C_Close
      +                          ());
  5049                           
  5050     0F8C  318F  271F  318F   	fcall	_I2C_Close
  5051     0F8F  3A01               	xorlw	1
  5052     0F90  1903               	skipnz
  5053     0F91  2F93               	goto	u1191
  5054     0F92  2F94               	goto	u1190
  5055     0F93                     u1191:
  5056     0F93  2F8C               	goto	l3227
  5057     0F94                     u1190:
  5058     0F94                     l80:
  5059     0F94  0008               	return
  5060     0F95                     __end_of_I2C_ReadNBytes:
  5061                           
  5062                           	psect	text21
  5063     0EA5                     __ptext21:	
  5064 ;; *************** function _I2C_SetBuffer *****************
  5065 ;; Defined at:
  5066 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  buffer          1    wreg     PTR void 
  5069 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Disable(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), 
  5070 ;;		 -> I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegi
      +ster@data(1), 
  5071 ;;		 -> I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@reg(1), 
  5072 ;;		 -> I2C_Read1ByteRegister@returnValue(1), 
  5073 ;;  bufferSize      2    0[BANK0 ] unsigned int 
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  buffer          1    2[BANK0 ] PTR void 
  5076 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Disable(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), 
  5077 ;;		 -> I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegi
      +ster@data(1), 
  5078 ;;		 -> I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@reg(1), 
  5079 ;;		 -> I2C_Read1ByteRegister@returnValue(1), 
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  1    wreg      void 
  5082 ;; Registers used:
  5083 ;;		wreg
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5089 ;;      Params:         0       2       0       0       0       0       0       0
  5090 ;;      Locals:         0       1       0       0       0       0       0       0
  5091 ;;      Temps:          0       0       0       0       0       0       0       0
  5092 ;;      Totals:         0       3       0       0       0       0       0       0
  5093 ;;Total ram usage:        3 bytes
  5094 ;; Hardware stack levels used: 1
  5095 ;; Hardware stack levels required when called: 7
  5096 ;; This function calls:
  5097 ;;		Nothing
  5098 ;; This function is called by:
  5099 ;;		_I2C_WriteNBytes
  5100 ;;		_I2C_ReadNBytes
  5101 ;;		_I2C_Read1ByteRegister
  5102 ;;		_I2C_Read2ByteRegister
  5103 ;;		_I2C_Write1ByteRegister
  5104 ;;		_I2C_Write2ByteRegister
  5105 ;;		_I2C_ReadDataBlock
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109     0EA5                     _I2C_SetBuffer:	
  5110                           ;psect for function _I2C_SetBuffer
  5111                           
  5112                           
  5113                           ;incstack = 0
  5114                           ; Regs used in _I2C_SetBuffer: [wreg]
  5115                           ;I2C_SetBuffer@buffer stored from wreg
  5116     0EA5  0020               	movlb	0	; select bank0
  5117     0EA6  00A2               	movwf	I2C_SetBuffer@buffer
  5118     0EA7                     l3069:
  5119                           
  5120                           ;mcc_generated_files/i2c_master.c: 264: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 265: {;mcc_generated_files/i2c_master.c: 266:     
      +                          if(I2C_Status.bufferFree)
  5121     0EA7  0021               	movlb	1	; select bank1
  5122     0EA8  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
  5123     0EA9  2EAB               	goto	u1051
  5124     0EAA  2EAC               	goto	u1050
  5125     0EAB                     u1051:
  5126     0EAB  2EB9               	goto	l305
  5127     0EAC                     u1050:
  5128     0EAC                     l3071:
  5129                           
  5130                           ;mcc_generated_files/i2c_master.c: 267:     {;mcc_generated_files/i2c_master.c: 268:    
      +                               I2C_Status.data_ptr = buffer;
  5131     0EAC  0020               	movlb	0	; select bank0
  5132     0EAD  0822               	movf	I2C_SetBuffer@buffer,w
  5133     0EAE  0021               	movlb	1	; select bank1
  5134     0EAF  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
  5135                           
  5136                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.data_length = bufferSize;
  5137     0EB0  0020               	movlb	0	; select bank0
  5138     0EB1  0821               	movf	I2C_SetBuffer@bufferSize+1,w
  5139     0EB2  0021               	movlb	1	; select bank1
  5140     0EB3  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
  5141     0EB4  0020               	movlb	0	; select bank0
  5142     0EB5  0820               	movf	I2C_SetBuffer@bufferSize,w
  5143     0EB6  0021               	movlb	1	; select bank1
  5144     0EB7  00B8               	movwf	(_I2C_Status^(0+128)+24)
  5145     0EB8                     l3073:
  5146                           
  5147                           ;mcc_generated_files/i2c_master.c: 270:         I2C_Status.bufferFree = 0;
  5148     0EB8  11BC               	bcf	(_I2C_Status^(0+128)+28),3
  5149     0EB9                     l305:
  5150     0EB9  0008               	return
  5151     0EBA                     __end_of_I2C_SetBuffer:
  5152                           
  5153                           	psect	text22
  5154     053A                     __ptext22:	
  5155 ;; *************** function _I2C_Open *****************
  5156 ;; Defined at:
  5157 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  address         1    wreg     unsigned char 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  address         1    2[BANK0 ] unsigned char 
  5162 ;;  returnValue     1    3[BANK0 ] enum E358
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  1    wreg      enum E358
  5165 ;; Registers used:
  5166 ;;		wreg, status,2, status,0, pclath, cstack
  5167 ;; Tracked objects:
  5168 ;;		On entry : 0/0
  5169 ;;		On exit  : 0/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5172 ;;      Params:         0       0       0       0       0       0       0       0
  5173 ;;      Locals:         0       2       0       0       0       0       0       0
  5174 ;;      Temps:          0       0       0       0       0       0       0       0
  5175 ;;      Totals:         0       2       0       0       0       0       0       0
  5176 ;;Total ram usage:        2 bytes
  5177 ;; Hardware stack levels used: 1
  5178 ;; Hardware stack levels required when called: 8
  5179 ;; This function calls:
  5180 ;;		_I2C_MasterClearIrq
  5181 ;;		_I2C_MasterEnableIrq
  5182 ;;		_I2C_MasterOpen
  5183 ;;		_I2C_SetInterruptHandler
  5184 ;; This function is called by:
  5185 ;;		_I2C_WriteNBytes
  5186 ;;		_I2C_ReadNBytes
  5187 ;;		_I2C_Read1ByteRegister
  5188 ;;		_I2C_Read2ByteRegister
  5189 ;;		_I2C_Write1ByteRegister
  5190 ;;		_I2C_Write2ByteRegister
  5191 ;;		_I2C_ReadDataBlock
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195     053A                     _I2C_Open:	
  5196                           ;psect for function _I2C_Open
  5197                           
  5198                           
  5199                           ;incstack = 0
  5200                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  5201                           ;I2C_Open@address stored from wreg
  5202     053A  0020               	movlb	0	; select bank0
  5203     053B  00A2               	movwf	I2C_Open@address
  5204     053C                     l3031:
  5205                           
  5206                           ;mcc_generated_files/i2c_master.c: 176: i2c_error_t I2C_Open(i2c_address_t address);mcc_
      +                          generated_files/i2c_master.c: 177: {;mcc_generated_files/i2c_master.c: 178:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  5207     053C  01A3               	clrf	I2C_Open@returnValue
  5208     053D  0AA3               	incf	I2C_Open@returnValue,f
  5209                           
  5210                           ;mcc_generated_files/i2c_master.c: 180:     if(!I2C_Status.inUse)
  5211     053E  0021               	movlb	1	; select bank1
  5212     053F  193C               	btfsc	(_I2C_Status^(0+128)+28),2
  5213     0540  2D42               	goto	u1041
  5214     0541  2D43               	goto	u1040
  5215     0542                     u1041:
  5216     0542  2D7D               	goto	l3063
  5217     0543                     u1040:
  5218     0543                     l3033:
  5219                           
  5220                           ;mcc_generated_files/i2c_master.c: 181:     {;mcc_generated_files/i2c_master.c: 182:    
      +                               I2C_Status.address = address;
  5221     0543  0020               	movlb	0	; select bank0
  5222     0544  0822               	movf	I2C_Open@address,w
  5223     0545  0021               	movlb	1	; select bank1
  5224     0546  00B6               	movwf	(_I2C_Status^(0+128)+22)
  5225     0547                     l3035:
  5226                           
  5227                           ;mcc_generated_files/i2c_master.c: 183:         I2C_Status.busy = 0;
  5228     0547  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  5229     0548                     l3037:
  5230                           
  5231                           ;mcc_generated_files/i2c_master.c: 184:         I2C_Status.inUse = 1;
  5232     0548  153C               	bsf	(_I2C_Status^(0+128)+28),2
  5233     0549                     l3039:
  5234                           
  5235                           ;mcc_generated_files/i2c_master.c: 185:         I2C_Status.addressNackCheck = 0;
  5236     0549  103C               	bcf	(_I2C_Status^(0+128)+28),0
  5237                           
  5238                           ;mcc_generated_files/i2c_master.c: 186:         I2C_Status.state = I2C_RESET;
  5239     054A  300E               	movlw	14
  5240     054B  00BA               	movwf	(_I2C_Status^(0+128)+26)
  5241                           
  5242                           ;mcc_generated_files/i2c_master.c: 187:         I2C_Status.time_out_value = 500;
  5243     054C  30F4               	movlw	244
  5244     054D  00B4               	movwf	(_I2C_Status^(0+128)+20)
  5245     054E  3001               	movlw	1
  5246     054F  00B5               	movwf	(_I2C_Status^(0+128)+21)
  5247     0550                     l3041:
  5248                           
  5249                           ;mcc_generated_files/i2c_master.c: 188:         I2C_Status.bufferFree = 1;
  5250     0550  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  5251                           
  5252                           ;mcc_generated_files/i2c_master.c: 191:         I2C_Status.callbackTable[I2C_DATA_COMPLE
      +                          TE]=I2C_CallbackReturnStop;
  5253     0551  3086               	movlw	low _I2C_CallbackReturnStop
  5254     0552  00A0               	movwf	_I2C_Status^(0+128)
  5255     0553  300C               	movlw	high _I2C_CallbackReturnStop
  5256     0554  00A1               	movwf	(_I2C_Status^(0+128)+1)
  5257     0555                     l3043:
  5258                           
  5259                           ;mcc_generated_files/i2c_master.c: 192:         I2C_Status.callbackPayload[I2C_DATA_COMP
      +                          LETE] = ((void*)0);
  5260     0555  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
  5261     0556                     l3045:
  5262                           
  5263                           ;mcc_generated_files/i2c_master.c: 193:         I2C_Status.callbackTable[I2C_WRITE_COLLI
      +                          SION]=I2C_CallbackReturnStop;
  5264     0556  3086               	movlw	low _I2C_CallbackReturnStop
  5265     0557  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
  5266     0558  300C               	movlw	high _I2C_CallbackReturnStop
  5267     0559  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
  5268                           
  5269                           ;mcc_generated_files/i2c_master.c: 194:         I2C_Status.callbackPayload[I2C_WRITE_COL
      +                          LISION] = ((void*)0);
  5270     055A  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
  5271     055B                     l3047:
  5272                           
  5273                           ;mcc_generated_files/i2c_master.c: 195:         I2C_Status.callbackTable[I2C_ADDR_NACK]=
      +                          I2C_CallbackReturnStop;
  5274     055B  3086               	movlw	low _I2C_CallbackReturnStop
  5275     055C  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
  5276     055D  300C               	movlw	high _I2C_CallbackReturnStop
  5277     055E  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
  5278     055F                     l3049:
  5279                           
  5280                           ;mcc_generated_files/i2c_master.c: 196:         I2C_Status.callbackPayload[I2C_ADDR_NACK
      +                          ] = ((void*)0);
  5281     055F  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
  5282                           
  5283                           ;mcc_generated_files/i2c_master.c: 197:         I2C_Status.callbackTable[I2C_DATA_NACK]=
      +                          I2C_CallbackReturnStop;
  5284     0560  3086               	movlw	low _I2C_CallbackReturnStop
  5285     0561  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
  5286     0562  300C               	movlw	high _I2C_CallbackReturnStop
  5287     0563  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
  5288     0564                     l3051:
  5289                           
  5290                           ;mcc_generated_files/i2c_master.c: 198:         I2C_Status.callbackPayload[I2C_DATA_NACK
      +                          ] = ((void*)0);
  5291     0564  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
  5292     0565                     l3053:
  5293                           
  5294                           ;mcc_generated_files/i2c_master.c: 199:         I2C_Status.callbackTable[I2C_TIMEOUT]=I2
      +                          C_CallbackReturnReset;
  5295     0565  3002               	movlw	low _I2C_CallbackReturnReset
  5296     0566  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
  5297     0567  3000               	movlw	high _I2C_CallbackReturnReset
  5298     0568  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
  5299                           
  5300                           ;mcc_generated_files/i2c_master.c: 200:         I2C_Status.callbackPayload[I2C_TIMEOUT] 
      +                          = ((void*)0);
  5301     0569  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
  5302     056A                     l3055:
  5303                           
  5304                           ;mcc_generated_files/i2c_master.c: 202:         I2C_SetInterruptHandler(I2C_MasterIsr);
  5305     056A  30BC               	movlw	low _I2C_MasterIsr
  5306     056B  0020               	movlb	0	; select bank0
  5307     056C  00A0               	movwf	I2C_SetInterruptHandler@InterruptHandler
  5308     056D  300C               	movlw	high _I2C_MasterIsr
  5309     056E  00A1               	movwf	I2C_SetInterruptHandler@InterruptHandler+1
  5310     056F  318D  250A  3185   	fcall	_I2C_SetInterruptHandler
  5311     0572                     l3057:
  5312                           
  5313                           ;mcc_generated_files/i2c_master.c: 203:         I2C_MasterClearIrq();
  5314     0572  318C  249D  3185   	fcall	_I2C_MasterClearIrq
  5315     0575                     l3059:
  5316                           
  5317                           ;mcc_generated_files/i2c_master.c: 204:         I2C_MasterOpen();
  5318     0575  318D  25ED  3185   	fcall	_I2C_MasterOpen
  5319     0578                     l3061:
  5320                           
  5321                           ;mcc_generated_files/i2c_master.c: 205:         I2C_MasterEnableIrq();
  5322     0578  318C  24A9  3185   	fcall	_I2C_MasterEnableIrq
  5323                           
  5324                           ;mcc_generated_files/i2c_master.c: 206:         returnValue = I2C_NOERR;
  5325     057B  0020               	movlb	0	; select bank0
  5326     057C  01A3               	clrf	I2C_Open@returnValue
  5327     057D                     l3063:
  5328                           
  5329                           ;mcc_generated_files/i2c_master.c: 208:     return returnValue;
  5330     057D  0020               	movlb	0	; select bank0
  5331     057E  0823               	movf	I2C_Open@returnValue,w
  5332     057F                     l282:
  5333     057F  0008               	return
  5334     0580                     __end_of_I2C_Open:
  5335                           
  5336                           	psect	text23
  5337     0D0A                     __ptext23:	
  5338 ;; *************** function _I2C_SetInterruptHandler *****************
  5339 ;; Defined at:
  5340 ;;		line 299 in file "mcc_generated_files/i2c_master.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5343 ;;		 -> I2C_MasterIsr(1), 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		wreg
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5355 ;;      Params:         0       2       0       0       0       0       0       0
  5356 ;;      Locals:         0       0       0       0       0       0       0       0
  5357 ;;      Temps:          0       0       0       0       0       0       0       0
  5358 ;;      Totals:         0       2       0       0       0       0       0       0
  5359 ;;Total ram usage:        2 bytes
  5360 ;; Hardware stack levels used: 1
  5361 ;; Hardware stack levels required when called: 7
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_I2C_Open
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369     0D0A                     _I2C_SetInterruptHandler:	
  5370                           ;psect for function _I2C_SetInterruptHandler
  5371                           
  5372     0D0A                     l2921:	
  5373                           ;incstack = 0
  5374                           ; Regs used in _I2C_SetInterruptHandler: [wreg]
  5375                           
  5376                           
  5377                           ;mcc_generated_files/i2c_master.c: 299: void I2C_SetInterruptHandler(void (* InterruptHa
      +                          ndler)(void));mcc_generated_files/i2c_master.c: 300: {;mcc_generated_files/i2c_master.c:
      +                           301:     MSSP_InterruptHandler = InterruptHandler;
  5378     0D0A  0020               	movlb	0	; select bank0
  5379     0D0B  0821               	movf	I2C_SetInterruptHandler@InterruptHandler+1,w
  5380     0D0C  00E4               	movwf	_MSSP_InterruptHandler+1
  5381     0D0D  0820               	movf	I2C_SetInterruptHandler@InterruptHandler,w
  5382     0D0E  00E3               	movwf	_MSSP_InterruptHandler
  5383     0D0F                     l323:
  5384     0D0F  0008               	return
  5385     0D10                     __end_of_I2C_SetInterruptHandler:
  5386                           
  5387                           	psect	text24
  5388     0DED                     __ptext24:	
  5389 ;; *************** function _I2C_MasterOpen *****************
  5390 ;; Defined at:
  5391 ;;		line 544 in file "mcc_generated_files/i2c_master.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;		None
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;		None
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      _Bool 
  5398 ;; Registers used:
  5399 ;;		wreg, status,2
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5405 ;;      Params:         0       0       0       0       0       0       0       0
  5406 ;;      Locals:         0       0       0       0       0       0       0       0
  5407 ;;      Temps:          0       0       0       0       0       0       0       0
  5408 ;;      Totals:         0       0       0       0       0       0       0       0
  5409 ;;Total ram usage:        0 bytes
  5410 ;; Hardware stack levels used: 1
  5411 ;; Hardware stack levels required when called: 7
  5412 ;; This function calls:
  5413 ;;		Nothing
  5414 ;; This function is called by:
  5415 ;;		_I2C_Open
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419     0DED                     _I2C_MasterOpen:	
  5420                           ;psect for function _I2C_MasterOpen
  5421                           
  5422     0DED                     l2925:	
  5423                           ;incstack = 0
  5424                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  5425                           
  5426                           
  5427                           ;mcc_generated_files/i2c_master.c: 546:     if(!SSPCON1bits.SSPEN)
  5428     0DED  0024               	movlb	4	; select bank4
  5429     0DEE  1A95               	btfsc	21,5	;volatile
  5430     0DEF  2DF1               	goto	u921
  5431     0DF0  2DF2               	goto	u920
  5432     0DF1                     u921:
  5433     0DF1  2DF9               	goto	l447
  5434     0DF2                     u920:
  5435     0DF2                     l2927:
  5436                           
  5437                           ;mcc_generated_files/i2c_master.c: 547:     {;mcc_generated_files/i2c_master.c: 548:    
      +                               SSPSTAT = 0x00;
  5438     0DF2  0194               	clrf	20	;volatile
  5439     0DF3                     l2929:
  5440                           
  5441                           ;mcc_generated_files/i2c_master.c: 549:         SSPCON1 = 0x08;
  5442     0DF3  3008               	movlw	8
  5443     0DF4  0095               	movwf	21	;volatile
  5444     0DF5                     l2931:
  5445                           
  5446                           ;mcc_generated_files/i2c_master.c: 550:         SSPCON2 = 0x00;
  5447     0DF5  0196               	clrf	22	;volatile
  5448                           
  5449                           ;mcc_generated_files/i2c_master.c: 551:         SSPADD = 0x13;
  5450     0DF6  3013               	movlw	19
  5451     0DF7  0092               	movwf	18	;volatile
  5452     0DF8                     l2933:
  5453                           
  5454                           ;mcc_generated_files/i2c_master.c: 552:         SSPCON1bits.SSPEN = 1;
  5455     0DF8  1695               	bsf	21,5	;volatile
  5456     0DF9                     l447:
  5457     0DF9  0008               	return
  5458     0DFA                     __end_of_I2C_MasterOpen:
  5459                           
  5460                           	psect	text25
  5461     0CA9                     __ptext25:	
  5462 ;; *************** function _I2C_MasterEnableIrq *****************
  5463 ;; Defined at:
  5464 ;;		line 627 in file "mcc_generated_files/i2c_master.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;		None
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      void 
  5471 ;; Registers used:
  5472 ;;		None
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5478 ;;      Params:         0       0       0       0       0       0       0       0
  5479 ;;      Locals:         0       0       0       0       0       0       0       0
  5480 ;;      Temps:          0       0       0       0       0       0       0       0
  5481 ;;      Totals:         0       0       0       0       0       0       0       0
  5482 ;;Total ram usage:        0 bytes
  5483 ;; Hardware stack levels used: 1
  5484 ;; Hardware stack levels required when called: 7
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		_I2C_Open
  5489 ;;		_I2C_SetTimeOut
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493     0CA9                     _I2C_MasterEnableIrq:	
  5494                           ;psect for function _I2C_MasterEnableIrq
  5495                           
  5496     0CA9                     l2937:	
  5497                           ;incstack = 0
  5498                           ; Regs used in _I2C_MasterEnableIrq: []
  5499                           
  5500                           
  5501                           ;mcc_generated_files/i2c_master.c: 629:     PIE1bits.SSPIE = 1;
  5502     0CA9  0021               	movlb	1	; select bank1
  5503     0CAA  1591               	bsf	17,3	;volatile
  5504     0CAB                     l489:
  5505     0CAB  0008               	return
  5506     0CAC                     __end_of_I2C_MasterEnableIrq:
  5507                           
  5508                           	psect	text26
  5509     0CFA                     __ptext26:	
  5510 ;; *************** function _I2C_MasterRead *****************
  5511 ;; Defined at:
  5512 ;;		line 247 in file "mcc_generated_files/i2c_master.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;		None
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;		None
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  1    wreg      enum E358
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, status,0, pclath, cstack
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5526 ;;      Params:         0       0       0       0       0       0       0       0
  5527 ;;      Locals:         0       0       0       0       0       0       0       0
  5528 ;;      Temps:          0       0       0       0       0       0       0       0
  5529 ;;      Totals:         0       0       0       0       0       0       0       0
  5530 ;;Total ram usage:        0 bytes
  5531 ;; Hardware stack levels used: 1
  5532 ;; Hardware stack levels required when called: 9
  5533 ;; This function calls:
  5534 ;;		_I2C_MasterOperation
  5535 ;; This function is called by:
  5536 ;;		_I2C_ReadNBytes
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540     0CFA                     _I2C_MasterRead:	
  5541                           ;psect for function _I2C_MasterRead
  5542                           
  5543     0CFA                     l3099:	
  5544                           ;incstack = 0
  5545                           ; Regs used in _I2C_MasterRead: [wreg+status,2+status,0+pclath+cstack]
  5546                           
  5547                           
  5548                           ;mcc_generated_files/i2c_master.c: 249:     return I2C_MasterOperation(1);;	Return value
      +                           of _I2C_MasterRead is never used
  5549     0CFA  3001               	movlw	1
  5550     0CFB  318F  2756  318C   	fcall	_I2C_MasterOperation
  5551     0CFE                     l295:
  5552     0CFE  0008               	return
  5553     0CFF                     __end_of_I2C_MasterRead:
  5554                           
  5555                           	psect	text27
  5556     0F56                     __ptext27:	
  5557 ;; *************** function _I2C_MasterOperation *****************
  5558 ;; Defined at:
  5559 ;;		line 226 in file "mcc_generated_files/i2c_master.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  read            1    wreg     _Bool 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  read            1    0[BANK0 ] _Bool 
  5564 ;;  returnValue     1    1[BANK0 ] enum E358
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      enum E358
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0, pclath, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5574 ;;      Params:         0       0       0       0       0       0       0       0
  5575 ;;      Locals:         0       2       0       0       0       0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0
  5577 ;;      Totals:         0       2       0       0       0       0       0       0
  5578 ;;Total ram usage:        2 bytes
  5579 ;; Hardware stack levels used: 1
  5580 ;; Hardware stack levels required when called: 8
  5581 ;; This function calls:
  5582 ;;		_I2C_MasterStart
  5583 ;; This function is called by:
  5584 ;;		_I2C_MasterRead
  5585 ;;		_I2C_MasterWrite
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589     0F56                     _I2C_MasterOperation:	
  5590                           ;psect for function _I2C_MasterOperation
  5591                           
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _I2C_MasterOperation: [wreg+status,2+status,0+pclath+cstack]
  5595                           ;I2C_MasterOperation@read stored from wreg
  5596     0F56  0020               	movlb	0	; select bank0
  5597     0F57  00A0               	movwf	I2C_MasterOperation@read
  5598     0F58                     l2943:
  5599                           
  5600                           ;mcc_generated_files/i2c_master.c: 226: i2c_error_t I2C_MasterOperation(_Bool read);mcc_
      +                          generated_files/i2c_master.c: 227: {;mcc_generated_files/i2c_master.c: 228:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  5601     0F58  01A1               	clrf	I2C_MasterOperation@returnValue
  5602     0F59  0AA1               	incf	I2C_MasterOperation@returnValue,f
  5603                           
  5604                           ;mcc_generated_files/i2c_master.c: 229:     if(!I2C_Status.busy)
  5605     0F5A  0021               	movlb	1	; select bank1
  5606     0F5B  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  5607     0F5C  2F5E               	goto	u931
  5608     0F5D  2F5F               	goto	u930
  5609     0F5E                     u931:
  5610     0F5E  2F71               	goto	l2957
  5611     0F5F                     u930:
  5612     0F5F                     l2945:
  5613                           
  5614                           ;mcc_generated_files/i2c_master.c: 230:     {;mcc_generated_files/i2c_master.c: 231:    
      +                               I2C_Status.busy = 1;
  5615     0F5F  14BC               	bsf	(_I2C_Status^(0+128)+28),1
  5616     0F60                     l2947:
  5617                           
  5618                           ;mcc_generated_files/i2c_master.c: 232:         returnValue = I2C_NOERR;
  5619     0F60  0020               	movlb	0	; select bank0
  5620     0F61  01A1               	clrf	I2C_MasterOperation@returnValue
  5621     0F62                     l2949:
  5622                           
  5623                           ;mcc_generated_files/i2c_master.c: 234:         if(read)
  5624     0F62  0820               	movf	I2C_MasterOperation@read,w
  5625     0F63  1903               	btfsc	3,2
  5626     0F64  2F66               	goto	u941
  5627     0F65  2F67               	goto	u940
  5628     0F66                     u941:
  5629     0F66  2F6B               	goto	l2953
  5630     0F67                     u940:
  5631     0F67                     l2951:
  5632                           
  5633                           ;mcc_generated_files/i2c_master.c: 235:         {;mcc_generated_files/i2c_master.c: 236:
      +                                       I2C_Status.state = I2C_SEND_ADR_READ;
  5634     0F67  0021               	movlb	1	; select bank1
  5635     0F68  01BA               	clrf	(_I2C_Status^(0+128)+26)
  5636     0F69  0ABA               	incf	(_I2C_Status^(0+128)+26),f
  5637                           
  5638                           ;mcc_generated_files/i2c_master.c: 237:         }
  5639     0F6A  2F6E               	goto	l2955
  5640     0F6B                     l2953:
  5641                           
  5642                           ;mcc_generated_files/i2c_master.c: 239:         {;mcc_generated_files/i2c_master.c: 240:
      +                                       I2C_Status.state = I2C_SEND_ADR_WRITE;
  5643     0F6B  3002               	movlw	2
  5644     0F6C  0021               	movlb	1	; select bank1
  5645     0F6D  00BA               	movwf	(_I2C_Status^(0+128)+26)
  5646     0F6E                     l2955:
  5647                           
  5648                           ;mcc_generated_files/i2c_master.c: 242:         I2C_MasterStart();
  5649     0F6E  318C  24A6  318F   	fcall	_I2C_MasterStart
  5650     0F71                     l2957:
  5651                           
  5652                           ;mcc_generated_files/i2c_master.c: 244:     return returnValue;
  5653     0F71  0020               	movlb	0	; select bank0
  5654     0F72  0821               	movf	I2C_MasterOperation@returnValue,w
  5655     0F73                     l292:
  5656     0F73  0008               	return
  5657     0F74                     __end_of_I2C_MasterOperation:
  5658                           
  5659                           	psect	text28
  5660     0CA6                     __ptext28:	
  5661 ;; *************** function _I2C_MasterStart *****************
  5662 ;; Defined at:
  5663 ;;		line 589 in file "mcc_generated_files/i2c_master.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;		None
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;		None
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      void 
  5670 ;; Registers used:
  5671 ;;		None
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5677 ;;      Params:         0       0       0       0       0       0       0       0
  5678 ;;      Locals:         0       0       0       0       0       0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0       0
  5680 ;;      Totals:         0       0       0       0       0       0       0       0
  5681 ;;Total ram usage:        0 bytes
  5682 ;; Hardware stack levels used: 1
  5683 ;; Hardware stack levels required when called: 7
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_I2C_MasterOperation
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691     0CA6                     _I2C_MasterStart:	
  5692                           ;psect for function _I2C_MasterStart
  5693                           
  5694     0CA6                     l2855:	
  5695                           ;incstack = 0
  5696                           ; Regs used in _I2C_MasterStart: []
  5697                           
  5698                           
  5699                           ;mcc_generated_files/i2c_master.c: 591:     SSPCON2bits.SEN = 1;
  5700     0CA6  0024               	movlb	4	; select bank4
  5701     0CA7  1416               	bsf	22,0	;volatile
  5702     0CA8                     l468:
  5703     0CA8  0008               	return
  5704     0CA9                     __end_of_I2C_MasterStart:
  5705                           
  5706                           	psect	text29
  5707     0F1F                     __ptext29:	
  5708 ;; *************** function _I2C_Close *****************
  5709 ;; Defined at:
  5710 ;;		line 211 in file "mcc_generated_files/i2c_master.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;		None
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;  returnValue     1    0[BANK0 ] enum E358
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  1    wreg      enum E358
  5717 ;; Registers used:
  5718 ;;		wreg, status,2, status,0, pclath, cstack
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5724 ;;      Params:         0       0       0       0       0       0       0       0
  5725 ;;      Locals:         0       1       0       0       0       0       0       0
  5726 ;;      Temps:          0       0       0       0       0       0       0       0
  5727 ;;      Totals:         0       1       0       0       0       0       0       0
  5728 ;;Total ram usage:        1 bytes
  5729 ;; Hardware stack levels used: 1
  5730 ;; Hardware stack levels required when called: 8
  5731 ;; This function calls:
  5732 ;;		_I2C_MasterClearIrq
  5733 ;;		_I2C_MasterClose
  5734 ;;		_I2C_MasterDisableIrq
  5735 ;; This function is called by:
  5736 ;;		_I2C_WriteNBytes
  5737 ;;		_I2C_ReadNBytes
  5738 ;;		_I2C_Read1ByteRegister
  5739 ;;		_I2C_Read2ByteRegister
  5740 ;;		_I2C_Write1ByteRegister
  5741 ;;		_I2C_Write2ByteRegister
  5742 ;;		_I2C_ReadDataBlock
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746     0F1F                     _I2C_Close:	
  5747                           ;psect for function _I2C_Close
  5748                           
  5749     0F1F                     l3081:	
  5750                           ;incstack = 0
  5751                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  5752                           
  5753                           
  5754                           ;mcc_generated_files/i2c_master.c: 213:     i2c_error_t returnValue = I2C_BUSY;
  5755     0F1F  0020               	movlb	0	; select bank0
  5756     0F20  01A0               	clrf	I2C_Close@returnValue
  5757     0F21  0AA0               	incf	I2C_Close@returnValue,f
  5758                           
  5759                           ;mcc_generated_files/i2c_master.c: 214:     if(!I2C_Status.busy)
  5760     0F22  0021               	movlb	1	; select bank1
  5761     0F23  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  5762     0F24  2F26               	goto	u1061
  5763     0F25  2F27               	goto	u1060
  5764     0F26                     u1061:
  5765     0F26  2F37               	goto	l3095
  5766     0F27                     u1060:
  5767     0F27                     l3083:
  5768                           
  5769                           ;mcc_generated_files/i2c_master.c: 215:     {;mcc_generated_files/i2c_master.c: 216:    
      +                               I2C_Status.inUse = 0;
  5770     0F27  113C               	bcf	(_I2C_Status^(0+128)+28),2
  5771     0F28                     l3085:
  5772                           
  5773                           ;mcc_generated_files/i2c_master.c: 217:         I2C_Status.address = 0xff;
  5774     0F28  30FF               	movlw	255
  5775     0F29  00B6               	movwf	(_I2C_Status^(0+128)+22)
  5776     0F2A                     l3087:
  5777                           
  5778                           ;mcc_generated_files/i2c_master.c: 218:         I2C_MasterClearIrq();
  5779     0F2A  318C  249D  318F   	fcall	_I2C_MasterClearIrq
  5780     0F2D                     l3089:
  5781                           
  5782                           ;mcc_generated_files/i2c_master.c: 219:         I2C_MasterDisableIrq();
  5783     0F2D  318C  24A3  318F   	fcall	_I2C_MasterDisableIrq
  5784     0F30                     l3091:
  5785                           
  5786                           ;mcc_generated_files/i2c_master.c: 220:         I2C_MasterClose();
  5787     0F30  318C  24A0  318F   	fcall	_I2C_MasterClose
  5788     0F33                     l3093:
  5789                           
  5790                           ;mcc_generated_files/i2c_master.c: 221:         returnValue = I2C_Status.error;
  5791     0F33  0021               	movlb	1	; select bank1
  5792     0F34  083B               	movf	(_I2C_Status^(0+128)+27),w
  5793     0F35  0020               	movlb	0	; select bank0
  5794     0F36  00A0               	movwf	I2C_Close@returnValue
  5795     0F37                     l3095:
  5796                           
  5797                           ;mcc_generated_files/i2c_master.c: 223:     return returnValue;
  5798     0F37  0020               	movlb	0	; select bank0
  5799     0F38  0820               	movf	I2C_Close@returnValue,w
  5800     0F39                     l286:
  5801     0F39  0008               	return
  5802     0F3A                     __end_of_I2C_Close:
  5803                           
  5804                           	psect	text30
  5805     0CA3                     __ptext30:	
  5806 ;; *************** function _I2C_MasterDisableIrq *****************
  5807 ;; Defined at:
  5808 ;;		line 637 in file "mcc_generated_files/i2c_master.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;		None
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;		None
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      void 
  5815 ;; Registers used:
  5816 ;;		None
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5822 ;;      Params:         0       0       0       0       0       0       0       0
  5823 ;;      Locals:         0       0       0       0       0       0       0       0
  5824 ;;      Temps:          0       0       0       0       0       0       0       0
  5825 ;;      Totals:         0       0       0       0       0       0       0       0
  5826 ;;Total ram usage:        0 bytes
  5827 ;; Hardware stack levels used: 1
  5828 ;; Hardware stack levels required when called: 7
  5829 ;; This function calls:
  5830 ;;		Nothing
  5831 ;; This function is called by:
  5832 ;;		_I2C_Close
  5833 ;;		_I2C_SetTimeOut
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837     0CA3                     _I2C_MasterDisableIrq:	
  5838                           ;psect for function _I2C_MasterDisableIrq
  5839                           
  5840     0CA3                     l2939:	
  5841                           ;incstack = 0
  5842                           ; Regs used in _I2C_MasterDisableIrq: []
  5843                           
  5844                           
  5845                           ;mcc_generated_files/i2c_master.c: 639:     PIE1bits.SSPIE = 0;
  5846     0CA3  0021               	movlb	1	; select bank1
  5847     0CA4  1191               	bcf	17,3	;volatile
  5848     0CA5                     l495:
  5849     0CA5  0008               	return
  5850     0CA6                     __end_of_I2C_MasterDisableIrq:
  5851                           
  5852                           	psect	text31
  5853     0CA0                     __ptext31:	
  5854 ;; *************** function _I2C_MasterClose *****************
  5855 ;; Defined at:
  5856 ;;		line 558 in file "mcc_generated_files/i2c_master.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;		None
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;		None
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		None
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5870 ;;      Params:         0       0       0       0       0       0       0       0
  5871 ;;      Locals:         0       0       0       0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0       0
  5873 ;;      Totals:         0       0       0       0       0       0       0       0
  5874 ;;Total ram usage:        0 bytes
  5875 ;; Hardware stack levels used: 1
  5876 ;; Hardware stack levels required when called: 7
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_I2C_Close
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884     0CA0                     _I2C_MasterClose:	
  5885                           ;psect for function _I2C_MasterClose
  5886                           
  5887     0CA0                     l2941:	
  5888                           ;incstack = 0
  5889                           ; Regs used in _I2C_MasterClose: []
  5890                           
  5891                           
  5892                           ;mcc_generated_files/i2c_master.c: 561:     SSPCON1bits.SSPEN = 0;
  5893     0CA0  0024               	movlb	4	; select bank4
  5894     0CA1  1295               	bcf	21,5	;volatile
  5895     0CA2                     l450:
  5896     0CA2  0008               	return
  5897     0CA3                     __end_of_I2C_MasterClose:
  5898                           
  5899                           	psect	text32
  5900     0C9D                     __ptext32:	
  5901 ;; *************** function _I2C_MasterClearIrq *****************
  5902 ;; Defined at:
  5903 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;		None
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;		None
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  1    wreg      void 
  5910 ;; Registers used:
  5911 ;;		None
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5917 ;;      Params:         0       0       0       0       0       0       0       0
  5918 ;;      Locals:         0       0       0       0       0       0       0       0
  5919 ;;      Temps:          0       0       0       0       0       0       0       0
  5920 ;;      Totals:         0       0       0       0       0       0       0       0
  5921 ;;Total ram usage:        0 bytes
  5922 ;; Hardware stack levels used: 1
  5923 ;; Hardware stack levels required when called: 7
  5924 ;; This function calls:
  5925 ;;		Nothing
  5926 ;; This function is called by:
  5927 ;;		_I2C_Open
  5928 ;;		_I2C_Close
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932     0C9D                     _I2C_MasterClearIrq:	
  5933                           ;psect for function _I2C_MasterClearIrq
  5934                           
  5935     0C9D                     l2923:	
  5936                           ;incstack = 0
  5937                           ; Regs used in _I2C_MasterClearIrq: []
  5938                           
  5939                           
  5940                           ;mcc_generated_files/i2c_master.c: 644:     PIR1bits.SSPIF = 0;
  5941     0C9D  0020               	movlb	0	; select bank0
  5942     0C9E  1191               	bcf	17,3	;volatile
  5943     0C9F                     l498:
  5944     0C9F  0008               	return
  5945     0CA0                     __end_of_I2C_MasterClearIrq:
  5946                           
  5947                           	psect	text33
  5948     0E80                     __ptext33:	
  5949 ;; *************** function _Task_MB *****************
  5950 ;; Defined at:
  5951 ;;		line 44 in file "MCU.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;		None
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;		None
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      void 
  5958 ;; Registers used:
  5959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5965 ;;      Params:         0       0       0       0       0       0       0       0
  5966 ;;      Locals:         0       0       0       0       0       0       0       0
  5967 ;;      Temps:          0       0       0       0       0       0       0       0
  5968 ;;      Totals:         0       0       0       0       0       0       0       0
  5969 ;;Total ram usage:        0 bytes
  5970 ;; Hardware stack levels used: 1
  5971 ;; Hardware stack levels required when called: 12
  5972 ;; This function calls:
  5973 ;;		_ModbusSlave_Init
  5974 ;;		_ModbusSlave_Process
  5975 ;; This function is called by:
  5976 ;;		_App_Process
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980     0E80                     _Task_MB:	
  5981                           ;psect for function _Task_MB
  5982                           
  5983     0E80                     l3759:	
  5984                           ;incstack = 0
  5985                           ; Regs used in _Task_MB: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5986                           
  5987                           
  5988                           ;MCU.c: 46:     static _Bool f_Modbus_Init = 0;;MCU.c: 47:     if (!f_Modbus_Init)
  5989     0E80  0020               	movlb	0	; select bank0
  5990     0E81  0866               	movf	Task_MB@f_Modbus_Init,w
  5991     0E82  1D03               	btfss	3,2
  5992     0E83  2E85               	goto	u1391
  5993     0E84  2E86               	goto	u1390
  5994     0E85                     u1391:
  5995     0E85  2E8E               	goto	l3765
  5996     0E86                     u1390:
  5997     0E86                     l3761:
  5998                           
  5999                           ;MCU.c: 48:     {;MCU.c: 49:         ModbusSlave_Init(SW_Ad);
  6000     0E86  086F               	movf	_SW_Ad,w
  6001     0E87  3186  2646  318E   	fcall	_ModbusSlave_Init
  6002     0E8A                     l3763:
  6003                           
  6004                           ;MCU.c: 50:         f_Modbus_Init = 1;
  6005     0E8A  0020               	movlb	0	; select bank0
  6006     0E8B  01E6               	clrf	Task_MB@f_Modbus_Init
  6007     0E8C  0AE6               	incf	Task_MB@f_Modbus_Init,f
  6008                           
  6009                           ;MCU.c: 51:     } else
  6010     0E8D  2E91               	goto	l844
  6011     0E8E                     l3765:
  6012                           
  6013                           ;MCU.c: 52:     {;MCU.c: 53:         ModbusSlave_Process();
  6014     0E8E  318F  2705  318E   	fcall	_ModbusSlave_Process
  6015     0E91                     l844:
  6016     0E91  0008               	return
  6017     0E92                     __end_of_Task_MB:
  6018                           
  6019                           	psect	text34
  6020     0F05                     __ptext34:	
  6021 ;; *************** function _ModbusSlave_Process *****************
  6022 ;; Defined at:
  6023 ;;		line 301 in file "Mobbus_Slave.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;		None
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  state           1    0        char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      void 
  6030 ;; Registers used:
  6031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6037 ;;      Params:         0       0       0       0       0       0       0       0
  6038 ;;      Locals:         0       0       0       0       0       0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0
  6040 ;;      Totals:         0       0       0       0       0       0       0       0
  6041 ;;Total ram usage:        0 bytes
  6042 ;; Hardware stack levels used: 1
  6043 ;; Hardware stack levels required when called: 11
  6044 ;; This function calls:
  6045 ;;		_ModbusRTU_Slave_Poll
  6046 ;; This function is called by:
  6047 ;;		_Task_MB
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051     0F05                     _ModbusSlave_Process:	
  6052                           ;psect for function _ModbusSlave_Process
  6053                           
  6054     0F05                     l3607:	
  6055                           ;incstack = 0
  6056                           ; Regs used in _ModbusSlave_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6057                           
  6058                           
  6059                           ;Mobbus_Slave.c: 303:     MB_Register[0] = Temperature;
  6060     0F05  0020               	movlb	0	; select bank0
  6061     0F06  0862               	movf	_Temperature+1,w
  6062     0F07  0021               	movlb	1	; select bank1
  6063     0F08  00CA               	movwf	(_MB_Register+1)^(0+128)
  6064     0F09  0020               	movlb	0	; select bank0
  6065     0F0A  0861               	movf	_Temperature,w
  6066     0F0B  0021               	movlb	1	; select bank1
  6067     0F0C  00C9               	movwf	_MB_Register^(0+128)
  6068                           
  6069                           ;Mobbus_Slave.c: 304:     MB_Register[1] = Humidity;
  6070     0F0D  0020               	movlb	0	; select bank0
  6071     0F0E  0860               	movf	_Humidity+1,w
  6072     0F0F  0021               	movlb	1	; select bank1
  6073     0F10  00CC               	movwf	((_MB_Register+1)^(0+128)+2)
  6074     0F11  0020               	movlb	0	; select bank0
  6075     0F12  085F               	movf	_Humidity,w
  6076     0F13  0021               	movlb	1	; select bank1
  6077     0F14  00CB               	movwf	(_MB_Register^(0+128)+2)
  6078     0F15                     l3609:
  6079     0F15                     l3611:
  6080     0F15  3002               	movlw	2
  6081     0F16  0020               	movlb	0	; select bank0
  6082     0F17  00D1               	movwf	ModbusRTU_Slave_Poll@size
  6083     0F18  3000               	movlw	0
  6084     0F19  00D2               	movwf	ModbusRTU_Slave_Poll@size+1
  6085     0F1A  30C9               	movlw	(low (_MB_Register| 0))& (0+255)
  6086     0F1B  3181  217C  318F   	fcall	_ModbusRTU_Slave_Poll
  6087     0F1E                     l978:
  6088     0F1E  0008               	return
  6089     0F1F                     __end_of_ModbusSlave_Process:
  6090                           
  6091                           	psect	text35
  6092     017C                     __ptext35:	
  6093 ;; *************** function _ModbusRTU_Slave_Poll *****************
  6094 ;; Defined at:
  6095 ;;		line 146 in file "Mobbus_Slave.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  reg             1    wreg     PTR short 
  6098 ;;		 -> MB_Register(4), 
  6099 ;;  size            2   49[BANK0 ] unsigned short 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  reg             1   59[BANK0 ] PTR short 
  6102 ;;		 -> MB_Register(4), 
  6103 ;;  u8exception     1   62[BANK0 ] unsigned char 
  6104 ;;  i8state         1   61[BANK0 ] char 
  6105 ;;  u8Current       1   60[BANK0 ] unsigned char 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  1    wreg      char 
  6108 ;; Registers used:
  6109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6115 ;;      Params:         0       2       0       0       0       0       0       0
  6116 ;;      Locals:         0       4       0       0       0       0       0       0
  6117 ;;      Temps:          0       8       0       0       0       0       0       0
  6118 ;;      Totals:         0      14       0       0       0       0       0       0
  6119 ;;Total ram usage:       14 bytes
  6120 ;; Hardware stack levels used: 1
  6121 ;; Hardware stack levels required when called: 10
  6122 ;; This function calls:
  6123 ;;		_Get_millis
  6124 ;;		_ModbusSlaveF04
  6125 ;;		_Modbus_getRxBuff
  6126 ;;		_Modbus_sendTxBuff
  6127 ;;		_buildException
  6128 ;;		_validateRequest
  6129 ;; This function is called by:
  6130 ;;		_ModbusSlave_Process
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134     017C                     _ModbusRTU_Slave_Poll:	
  6135                           ;psect for function _ModbusRTU_Slave_Poll
  6136                           
  6137                           
  6138                           ;incstack = 0
  6139                           ; Regs used in _ModbusRTU_Slave_Poll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6140                           ;ModbusRTU_Slave_Poll@reg stored from wreg
  6141     017C  0020               	movlb	0	; select bank0
  6142     017D  00DB               	movwf	ModbusRTU_Slave_Poll@reg
  6143     017E                     l3327:
  6144                           
  6145                           ;Mobbus_Slave.c: 146: static int8_t ModbusRTU_Slave_Poll(int16_t *reg, uint16_t size);Mo
      +                          bbus_Slave.c: 147: {;Mobbus_Slave.c: 149:     SES_Modbus.u8regsize = size;
  6146     017E  30EA               	movlw	234
  6147     017F  0086               	movwf	6
  6148     0180  3021               	movlw	33
  6149     0181  0087               	movwf	7
  6150     0182  0851               	movf	ModbusRTU_Slave_Poll@size,w
  6151     0183  3FC0               	movwi [0]fsr1
  6152     0184  0852               	movf	ModbusRTU_Slave_Poll@size+1,w
  6153     0185  3FC1               	movwi [1]fsr1
  6154     0186                     l3329:
  6155                           
  6156                           ;Mobbus_Slave.c: 150:     uint8_t u8Current;;Mobbus_Slave.c: 152:     u8Current = eusart
      +                          RxCount;
  6157     0186  0869               	movf	_eusartRxCount,w	;volatile
  6158     0187  00DC               	movwf	ModbusRTU_Slave_Poll@u8Current
  6159     0188                     l3331:
  6160                           
  6161                           ;Mobbus_Slave.c: 154:     if (u8Current == 0) return 0;
  6162     0188  085C               	movf	ModbusRTU_Slave_Poll@u8Current,w
  6163     0189  1D03               	btfss	3,2
  6164     018A  298C               	goto	u1201
  6165     018B  298D               	goto	u1200
  6166     018C                     u1201:
  6167     018C  298F               	goto	l3337
  6168     018D                     u1200:
  6169     018D                     l3333:
  6170     018D  3000               	movlw	0
  6171     018E  2A48               	goto	l939
  6172     018F                     l3337:
  6173                           
  6174                           ;Mobbus_Slave.c: 157:     if (u8Current != SES_Modbus.u8lastRec)
  6175     018F  30D3               	movlw	211
  6176     0190  0086               	movwf	6
  6177     0191  3021               	movlw	33
  6178     0192  0087               	movwf	7
  6179     0193  0801               	movf	1,w
  6180     0194  065C               	xorwf	ModbusRTU_Slave_Poll@u8Current,w
  6181     0195  1903               	skipnz
  6182     0196  2998               	goto	u1211
  6183     0197  2999               	goto	u1210
  6184     0198                     u1211:
  6185     0198  29B0               	goto	l3347
  6186     0199                     u1210:
  6187     0199                     l3339:
  6188                           
  6189                           ;Mobbus_Slave.c: 158:     {;Mobbus_Slave.c: 159:         SES_Modbus.u8lastRec = u8Curren
      +                          t;
  6190     0199  30D3               	movlw	211
  6191     019A  0086               	movwf	6
  6192     019B  3021               	movlw	33
  6193     019C  0087               	movwf	7
  6194     019D  085C               	movf	ModbusRTU_Slave_Poll@u8Current,w
  6195     019E  0081               	movwf	1
  6196     019F                     l3341:
  6197                           
  6198                           ;Mobbus_Slave.c: 160:         SES_Modbus.u32time = Get_millis();
  6199     019F  318E  265D  3181   	fcall	_Get_millis
  6200     01A2  30DE               	movlw	222
  6201     01A3  0086               	movwf	6
  6202     01A4  3021               	movlw	33
  6203     01A5  0087               	movwf	7
  6204     01A6  0020               	movlb	0	; select bank0
  6205     01A7  0820               	movf	?_Get_millis,w
  6206     01A8  3FC0               	movwi [0]fsr1
  6207     01A9  0821               	movf	?_Get_millis+1,w
  6208     01AA  3FC1               	movwi [1]fsr1
  6209     01AB  0822               	movf	?_Get_millis+2,w
  6210     01AC  3FC2               	movwi [2]fsr1
  6211     01AD  0823               	movf	?_Get_millis+3,w
  6212     01AE  3FC3               	movwi [3]fsr1
  6213     01AF  298D               	goto	l3333
  6214     01B0                     l3347:
  6215                           
  6216                           ;Mobbus_Slave.c: 163:     if ((unsigned long)(Get_millis() - SES_Modbus.u32time) < (unsi
      +                          gned long)3) return 0;
  6217     01B0  30DE               	movlw	222
  6218     01B1  0086               	movwf	6
  6219     01B2  3021               	movlw	33
  6220     01B3  0087               	movwf	7
  6221     01B4  3F40               	moviw [0]fsr1
  6222     01B5  00D3               	movwf	??_ModbusRTU_Slave_Poll
  6223     01B6  3F41               	moviw [1]fsr1
  6224     01B7  00D4               	movwf	??_ModbusRTU_Slave_Poll+1
  6225     01B8  3F42               	moviw [2]fsr1
  6226     01B9  00D5               	movwf	??_ModbusRTU_Slave_Poll+2
  6227     01BA  3F43               	moviw [3]fsr1
  6228     01BB  00D6               	movwf	??_ModbusRTU_Slave_Poll+3
  6229     01BC  318E  265D  3181   	fcall	_Get_millis
  6230     01BF  0020               	movlb	0	; select bank0
  6231     01C0  0820               	movf	?_Get_millis,w
  6232     01C1  00D7               	movwf	??_ModbusRTU_Slave_Poll+4
  6233     01C2  0821               	movf	?_Get_millis+1,w
  6234     01C3  00D8               	movwf	??_ModbusRTU_Slave_Poll+5
  6235     01C4  0822               	movf	?_Get_millis+2,w
  6236     01C5  00D9               	movwf	??_ModbusRTU_Slave_Poll+6
  6237     01C6  0823               	movf	?_Get_millis+3,w
  6238     01C7  00DA               	movwf	??_ModbusRTU_Slave_Poll+7
  6239     01C8  0853               	movf	??_ModbusRTU_Slave_Poll,w
  6240     01C9  02D7               	subwf	??_ModbusRTU_Slave_Poll+4,f
  6241     01CA  0854               	movf	??_ModbusRTU_Slave_Poll+1,w
  6242     01CB  3BD8               	subwfb	??_ModbusRTU_Slave_Poll+5,f
  6243     01CC  0855               	movf	??_ModbusRTU_Slave_Poll+2,w
  6244     01CD  3BD9               	subwfb	??_ModbusRTU_Slave_Poll+6,f
  6245     01CE  0856               	movf	??_ModbusRTU_Slave_Poll+3,w
  6246     01CF  3BDA               	subwfb	??_ModbusRTU_Slave_Poll+7,f
  6247     01D0  085A               	movf	??_ModbusRTU_Slave_Poll+7,w
  6248     01D1  1D03               	btfss	3,2
  6249     01D2  29DE               	goto	u1221
  6250     01D3  0859               	movf	??_ModbusRTU_Slave_Poll+6,w
  6251     01D4  1D03               	btfss	3,2
  6252     01D5  29DE               	goto	u1221
  6253     01D6  0858               	movf	??_ModbusRTU_Slave_Poll+5,w
  6254     01D7  1D03               	btfss	3,2
  6255     01D8  29DE               	goto	u1221
  6256     01D9  3003               	movlw	3
  6257     01DA  0257               	subwf	??_ModbusRTU_Slave_Poll+4,w
  6258     01DB  1803               	btfsc	3,0
  6259     01DC  29DE               	goto	u1221
  6260     01DD  29DF               	goto	u1220
  6261     01DE                     u1221:
  6262     01DE  29E0               	goto	l3353
  6263     01DF                     u1220:
  6264     01DF  298D               	goto	l3333
  6265     01E0                     l3353:
  6266                           
  6267                           ;Mobbus_Slave.c: 165:     SES_Modbus.u8lastRec = 0;
  6268     01E0  30D3               	movlw	211
  6269     01E1  0086               	movwf	6
  6270     01E2  3021               	movlw	33
  6271     01E3  0087               	movwf	7
  6272     01E4  0181               	clrf	1
  6273     01E5                     l3355:
  6274                           
  6275                           ;Mobbus_Slave.c: 166:     int8_t i8state = Modbus_getRxBuff();
  6276     01E5  3184  2433  3181   	fcall	_Modbus_getRxBuff
  6277     01E8  0020               	movlb	0	; select bank0
  6278     01E9  00DD               	movwf	ModbusRTU_Slave_Poll@i8state
  6279     01EA                     l3357:
  6280                           
  6281                           ;Mobbus_Slave.c: 167:     SES_Modbus.u8lastError = i8state;
  6282     01EA  30D7               	movlw	215
  6283     01EB  0086               	movwf	6
  6284     01EC  3020               	movlw	32
  6285     01ED  0087               	movwf	7
  6286     01EE  085D               	movf	ModbusRTU_Slave_Poll@i8state,w
  6287     01EF  0081               	movwf	1
  6288     01F0                     l3359:
  6289                           
  6290                           ;Mobbus_Slave.c: 168:     if (i8state < 7) return i8state;
  6291     01F0  085D               	movf	ModbusRTU_Slave_Poll@i8state,w
  6292     01F1  3A80               	xorlw	128
  6293     01F2  3E79               	addlw	-135
  6294     01F3  1803               	skipnc
  6295     01F4  29F6               	goto	u1231
  6296     01F5  29F7               	goto	u1230
  6297     01F6                     u1231:
  6298     01F6  29FA               	goto	l3365
  6299     01F7                     u1230:
  6300     01F7                     l3361:
  6301     01F7  0020               	movlb	0	; select bank0
  6302     01F8  085D               	movf	ModbusRTU_Slave_Poll@i8state,w
  6303     01F9  2A48               	goto	l939
  6304     01FA                     l3365:
  6305                           
  6306                           ;Mobbus_Slave.c: 171:     if (SES_Modbus.au8Buffer[ ID ] != SES_Modbus.u8id) return 0;
  6307     01FA  30D4               	movlw	212
  6308     01FB  0086               	movwf	6
  6309     01FC  3020               	movlw	32
  6310     01FD  0087               	movwf	7
  6311     01FE  30D4               	movlw	212
  6312     01FF  0084               	movwf	4
  6313     0200  3020               	movlw	32
  6314     0201  0085               	movwf	5
  6315     0202  3104               	addfsr 0,4
  6316     0203  0800               	movf	0,w
  6317     0204  0601               	xorwf	1,w
  6318     0205  1903               	skipnz
  6319     0206  2A08               	goto	u1241
  6320     0207  2A09               	goto	u1240
  6321     0208                     u1241:
  6322     0208  2A0A               	goto	l3371
  6323     0209                     u1240:
  6324     0209  298D               	goto	l3333
  6325     020A                     l3371:
  6326                           
  6327                           ;Mobbus_Slave.c: 174:     uint8_t u8exception = validateRequest();
  6328     020A  3182  22F0  3181   	fcall	_validateRequest
  6329     020D  0020               	movlb	0	; select bank0
  6330     020E  00DE               	movwf	ModbusRTU_Slave_Poll@u8exception
  6331     020F                     l3373:
  6332                           
  6333                           ;Mobbus_Slave.c: 175:     if (u8exception > 0)
  6334     020F  085E               	movf	ModbusRTU_Slave_Poll@u8exception,w
  6335     0210  1903               	btfsc	3,2
  6336     0211  2A13               	goto	u1251
  6337     0212  2A14               	goto	u1250
  6338     0213                     u1251:
  6339     0213  2A29               	goto	l3385
  6340     0214                     u1250:
  6341     0214                     l3375:
  6342                           
  6343                           ;Mobbus_Slave.c: 176:     {;Mobbus_Slave.c: 177:         if (u8exception != NO_REPLY)
  6344     0214  0A5E               	incf	ModbusRTU_Slave_Poll@u8exception,w
  6345     0215  1903               	btfsc	3,2
  6346     0216  2A18               	goto	u1261
  6347     0217  2A19               	goto	u1260
  6348     0218                     u1261:
  6349     0218  2A20               	goto	l3379
  6350     0219                     u1260:
  6351     0219                     l3377:
  6352                           
  6353                           ;Mobbus_Slave.c: 178:         {;Mobbus_Slave.c: 179:             buildException( u8excep
      +                          tion );
  6354     0219  085E               	movf	ModbusRTU_Slave_Poll@u8exception,w
  6355     021A  3187  270C  3181   	fcall	_buildException
  6356                           
  6357                           ;Mobbus_Slave.c: 180:             Modbus_sendTxBuff();
  6358     021D  3180  2099  3181   	fcall	_Modbus_sendTxBuff
  6359     0220                     l3379:
  6360                           
  6361                           ;Mobbus_Slave.c: 182:         SES_Modbus.u8lastError = u8exception;
  6362     0220  30D7               	movlw	215
  6363     0221  0086               	movwf	6
  6364     0222  3020               	movlw	32
  6365     0223  0087               	movwf	7
  6366     0224  0020               	movlb	0	; select bank0
  6367     0225  085E               	movf	ModbusRTU_Slave_Poll@u8exception,w
  6368     0226  0081               	movwf	1
  6369     0227                     l3381:
  6370                           
  6371                           ;Mobbus_Slave.c: 183:         return u8exception;
  6372     0227  085E               	movf	ModbusRTU_Slave_Poll@u8exception,w
  6373     0228  2A48               	goto	l939
  6374     0229                     l3385:
  6375                           
  6376                           ;Mobbus_Slave.c: 186:     SES_Modbus.u32timeOut = Get_millis();
  6377     0229  318E  265D  3181   	fcall	_Get_millis
  6378     022C  30E2               	movlw	226
  6379     022D  0086               	movwf	6
  6380     022E  3021               	movlw	33
  6381     022F  0087               	movwf	7
  6382     0230  0020               	movlb	0	; select bank0
  6383     0231  0820               	movf	?_Get_millis,w
  6384     0232  3FC0               	movwi [0]fsr1
  6385     0233  0821               	movf	?_Get_millis+1,w
  6386     0234  3FC1               	movwi [1]fsr1
  6387     0235  0822               	movf	?_Get_millis+2,w
  6388     0236  3FC2               	movwi [2]fsr1
  6389     0237  0823               	movf	?_Get_millis+3,w
  6390     0238  3FC3               	movwi [3]fsr1
  6391     0239                     l3387:
  6392                           
  6393                           ;Mobbus_Slave.c: 187:     SES_Modbus.u8lastError = 0;
  6394     0239  30D4               	movlw	212
  6395     023A  0086               	movwf	6
  6396     023B  3020               	movlw	32
  6397     023C  0087               	movwf	7
  6398     023D  3143               	addfsr 1,3
  6399     023E  0181               	clrf	1
  6400     023F                     l3389:
  6401                           
  6402                           ;Mobbus_Slave.c: 189:     ModbusSlaveF04((uint16_t) reg, size );
  6403     023F  085B               	movf	ModbusRTU_Slave_Poll@reg,w
  6404     0240  00BE               	movwf	ModbusSlaveF04@reg
  6405     0241  01BF               	clrf	ModbusSlaveF04@reg+1
  6406     0242  0851               	movf	ModbusRTU_Slave_Poll@size,w
  6407     0243  00C0               	movwf	ModbusSlaveF04@size
  6408     0244  3182  2249  3181   	fcall	_ModbusSlaveF04
  6409     0247  29F7               	goto	l3361
  6410     0248                     l939:
  6411     0248  0008               	return
  6412     0249                     __end_of_ModbusRTU_Slave_Poll:
  6413                           
  6414                           	psect	text36
  6415     02F0                     __ptext36:	
  6416 ;; *************** function _validateRequest *****************
  6417 ;; Defined at:
  6418 ;;		line 114 in file "Mobbus_Slave.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;		None
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  u16MsgCRC       2   28[BANK0 ] unsigned short 
  6423 ;;  i               1   31[BANK0 ] unsigned char 
  6424 ;;  isSupported     1   30[BANK0 ] _Bool 
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      unsigned char 
  6427 ;; Registers used:
  6428 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6434 ;;      Params:         0       0       0       0       0       0       0       0
  6435 ;;      Locals:         0       4       0       0       0       0       0       0
  6436 ;;      Temps:          0      13       0       0       0       0       0       0
  6437 ;;      Totals:         0      17       0       0       0       0       0       0
  6438 ;;Total ram usage:       17 bytes
  6439 ;; Hardware stack levels used: 1
  6440 ;; Hardware stack levels required when called: 8
  6441 ;; This function calls:
  6442 ;;		_Modbus_calcCRC
  6443 ;; This function is called by:
  6444 ;;		_ModbusRTU_Slave_Poll
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448     02F0                     _validateRequest:	
  6449                           ;psect for function _validateRequest
  6450                           
  6451     02F0                     l3167:	
  6452                           ;incstack = 0
  6453                           ; Regs used in _validateRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6454                           
  6455                           
  6456                           ;Mobbus_Slave.c: 117:     uint16_t u16MsgCRC=
  6457     02F0  30D2               	movlw	210
  6458     02F1  0086               	movwf	6
  6459     02F2  3021               	movlw	33
  6460     02F3  0087               	movwf	7
  6461     02F4  0801               	movf	1,w
  6462     02F5  0020               	movlb	0	; select bank0
  6463     02F6  00AF               	movwf	??_validateRequest
  6464     02F7  01B0               	clrf	??_validateRequest+1
  6465     02F8  30D7               	movlw	215
  6466     02F9  00B1               	movwf	??_validateRequest+2
  6467     02FA  3020               	movlw	32
  6468     02FB  00B2               	movwf	??_validateRequest+3
  6469     02FC  082F               	movf	??_validateRequest,w
  6470     02FD  0731               	addwf	??_validateRequest+2,w
  6471     02FE  0086               	movwf	6
  6472     02FF  0830               	movf	??_validateRequest+1,w
  6473     0300  3D32               	addwfc	??_validateRequest+3,w
  6474     0301  0087               	movwf	7
  6475     0302  0801               	movf	1,w
  6476     0303  00B3               	movwf	??_validateRequest+4
  6477     0304  01B4               	clrf	??_validateRequest+5
  6478     0305  30D2               	movlw	210
  6479     0306  0086               	movwf	6
  6480     0307  3021               	movlw	33
  6481     0308  0087               	movwf	7
  6482     0309  0801               	movf	1,w
  6483     030A  00B5               	movwf	??_validateRequest+6
  6484     030B  01B6               	clrf	??_validateRequest+7
  6485     030C  30D6               	movlw	214
  6486     030D  00B7               	movwf	??_validateRequest+8
  6487     030E  3020               	movlw	32
  6488     030F  00B8               	movwf	??_validateRequest+9
  6489     0310  0835               	movf	??_validateRequest+6,w
  6490     0311  0737               	addwf	??_validateRequest+8,w
  6491     0312  0086               	movwf	6
  6492     0313  0836               	movf	??_validateRequest+7,w
  6493     0314  3D38               	addwfc	??_validateRequest+9,w
  6494     0315  0087               	movwf	7
  6495     0316  0801               	movf	1,w
  6496     0317  00B9               	movwf	??_validateRequest+10
  6497     0318  01BA               	clrf	??_validateRequest+11
  6498     0319  0839               	movf	??_validateRequest+10,w
  6499     031A  00BA               	movwf	??_validateRequest+11
  6500     031B  01B9               	clrf	??_validateRequest+10
  6501     031C  0833               	movf	??_validateRequest+4,w
  6502     031D  0439               	iorwf	??_validateRequest+10,w
  6503     031E  00BC               	movwf	validateRequest@u16MsgCRC
  6504     031F  0834               	movf	??_validateRequest+5,w
  6505     0320  043A               	iorwf	??_validateRequest+11,w
  6506     0321  00BD               	movwf	validateRequest@u16MsgCRC+1
  6507     0322                     l3169:
  6508                           
  6509                           ;Mobbus_Slave.c: 120:     if ( Modbus_calcCRC( SES_Modbus.u8BufferSize-2 ) != u16MsgCRC 
      +                          )
  6510     0322  30D2               	movlw	210
  6511     0323  0086               	movwf	6
  6512     0324  3021               	movlw	33
  6513     0325  0087               	movwf	7
  6514     0326  0801               	movf	1,w
  6515     0327  3EFE               	addlw	254
  6516     0328  3183  23D4  3182   	fcall	_Modbus_calcCRC
  6517     032B  0020               	movlb	0	; select bank0
  6518     032C  083D               	movf	validateRequest@u16MsgCRC+1,w
  6519     032D  0621               	xorwf	?_Modbus_calcCRC+1,w
  6520     032E  1D03               	skipz
  6521     032F  2B32               	goto	u1115
  6522     0330  083C               	movf	validateRequest@u16MsgCRC,w
  6523     0331  0620               	xorwf	?_Modbus_calcCRC,w
  6524     0332                     u1115:
  6525     0332  1903               	skipnz
  6526     0333  2B35               	goto	u1111
  6527     0334  2B36               	goto	u1110
  6528     0335                     u1111:
  6529     0335  2B41               	goto	l3177
  6530     0336                     u1110:
  6531     0336                     l3171:
  6532                           
  6533                           ;Mobbus_Slave.c: 121:     {;Mobbus_Slave.c: 122:         SES_Modbus.u16errCnt ++;
  6534     0336  30DA               	movlw	218
  6535     0337  0086               	movwf	6
  6536     0338  3021               	movlw	33
  6537     0339  0087               	movwf	7
  6538     033A  3001               	movlw	1
  6539     033B  0781               	addwf	1,f
  6540     033C  3141               	addfsr 1,1
  6541     033D  1803               	skipnc
  6542     033E  0A81               	incf	1,f
  6543     033F                     l3173:
  6544                           
  6545                           ;Mobbus_Slave.c: 123:         return NO_REPLY;
  6546     033F  30FF               	movlw	255
  6547     0340  2B74               	goto	l931
  6548     0341                     l3177:
  6549                           
  6550                           ;Mobbus_Slave.c: 127:     _Bool isSupported = 0;
  6551     0341  01BE               	clrf	validateRequest@isSupported
  6552                           
  6553                           ;Mobbus_Slave.c: 128:     uint8_t i=0;
  6554     0342  01BF               	clrf	validateRequest@i
  6555                           
  6556                           ;Mobbus_Slave.c: 129:     for (i = 0; i< sizeof( fctsupported ); i++)
  6557     0343  01BF               	clrf	validateRequest@i
  6558     0344                     l3183:
  6559                           
  6560                           ;Mobbus_Slave.c: 130:     {;Mobbus_Slave.c: 131:         if (fctsupported[i] == SES_Modb
      +                          us.au8Buffer[FUNC])
  6561     0344  30D4               	movlw	212
  6562     0345  0086               	movwf	6
  6563     0346  3020               	movlw	32
  6564     0347  0087               	movwf	7
  6565     0348  3145               	addfsr 1,5
  6566     0349  083F               	movf	validateRequest@i,w
  6567     034A  3E20               	addlw	low (_fctsupported| (0+32768))
  6568     034B  0084               	movwf	4
  6569     034C  3090               	movlw	high (_fctsupported| (0+32768))
  6570     034D  1803               	skipnc
  6571     034E  3E01               	addlw	1
  6572     034F  0085               	movwf	5
  6573     0350  0800               	movf	0,w	;code access
  6574     0351  0601               	xorwf	1,w
  6575     0352  1D03               	skipz
  6576     0353  2B55               	goto	u1121
  6577     0354  2B56               	goto	u1120
  6578     0355                     u1121:
  6579     0355  2B59               	goto	l3187
  6580     0356                     u1120:
  6581     0356                     l3185:
  6582                           
  6583                           ;Mobbus_Slave.c: 132:         {;Mobbus_Slave.c: 133:             isSupported = 1;
  6584     0356  01BE               	clrf	validateRequest@isSupported
  6585     0357  0ABE               	incf	validateRequest@isSupported,f
  6586                           
  6587                           ;Mobbus_Slave.c: 134:             break;
  6588     0358  2B63               	goto	l3191
  6589     0359                     l3187:
  6590                           
  6591                           ;Mobbus_Slave.c: 136:     }
  6592     0359  3001               	movlw	1
  6593     035A  00AF               	movwf	??_validateRequest
  6594     035B  082F               	movf	??_validateRequest,w
  6595     035C  07BF               	addwf	validateRequest@i,f
  6596     035D                     l3189:
  6597     035D  3008               	movlw	8
  6598     035E  023F               	subwf	validateRequest@i,w
  6599     035F  1C03               	skipc
  6600     0360  2B62               	goto	u1131
  6601     0361  2B63               	goto	u1130
  6602     0362                     u1131:
  6603     0362  2B44               	goto	l3183
  6604     0363                     u1130:
  6605     0363                     l3191:
  6606                           
  6607                           ;Mobbus_Slave.c: 137:     if (!isSupported)
  6608     0363  083E               	movf	validateRequest@isSupported,w
  6609     0364  1D03               	btfss	3,2
  6610     0365  2B67               	goto	u1141
  6611     0366  2B68               	goto	u1140
  6612     0367                     u1141:
  6613     0367  2B73               	goto	l3199
  6614     0368                     u1140:
  6615     0368                     l3193:
  6616                           
  6617                           ;Mobbus_Slave.c: 138:     {;Mobbus_Slave.c: 139:         SES_Modbus.u16errCnt ++;
  6618     0368  30DA               	movlw	218
  6619     0369  0086               	movwf	6
  6620     036A  3021               	movlw	33
  6621     036B  0087               	movwf	7
  6622     036C  3001               	movlw	1
  6623     036D  0781               	addwf	1,f
  6624     036E  3141               	addfsr 1,1
  6625     036F  1803               	skipnc
  6626     0370  0A81               	incf	1,f
  6627     0371                     l3195:
  6628                           
  6629                           ;Mobbus_Slave.c: 140:         return EXC_FUNC_CODE;
  6630     0371  3001               	movlw	1
  6631     0372  2B74               	goto	l931
  6632     0373                     l3199:
  6633                           
  6634                           ;Mobbus_Slave.c: 143:     return 0;
  6635     0373  3000               	movlw	0
  6636     0374                     l931:
  6637     0374  0008               	return
  6638     0375                     __end_of_validateRequest:
  6639                           
  6640                           	psect	text37
  6641     070C                     __ptext37:	
  6642 ;; *************** function _buildException *****************
  6643 ;; Defined at:
  6644 ;;		line 75 in file "Mobbus_Slave.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;  exception       1    wreg     unsigned char 
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;  exception       1    1[BANK0 ] unsigned char 
  6649 ;;  u8func          1    2[BANK0 ] unsigned char 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      void 
  6652 ;; Registers used:
  6653 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6659 ;;      Params:         0       0       0       0       0       0       0       0
  6660 ;;      Locals:         0       2       0       0       0       0       0       0
  6661 ;;      Temps:          0       1       0       0       0       0       0       0
  6662 ;;      Totals:         0       3       0       0       0       0       0       0
  6663 ;;Total ram usage:        3 bytes
  6664 ;; Hardware stack levels used: 1
  6665 ;; Hardware stack levels required when called: 7
  6666 ;; This function calls:
  6667 ;;		Nothing
  6668 ;; This function is called by:
  6669 ;;		_ModbusRTU_Slave_Poll
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673     070C                     _buildException:	
  6674                           ;psect for function _buildException
  6675                           
  6676                           
  6677                           ;incstack = 0
  6678                           ; Regs used in _buildException: [wreg+fsr1l+fsr1h+status,2+status,0]
  6679                           ;buildException@exception stored from wreg
  6680     070C  0020               	movlb	0	; select bank0
  6681     070D  00A1               	movwf	buildException@exception
  6682     070E                     l3129:
  6683                           
  6684                           ;Mobbus_Slave.c: 75: static void buildException(uint8_t exception);Mobbus_Slave.c: 76: {
      +                          ;Mobbus_Slave.c: 78:     uint8_t u8func = SES_Modbus.au8Buffer[ FUNC ];
  6685     070E  30D4               	movlw	212
  6686     070F  0086               	movwf	6
  6687     0710  3020               	movlw	32
  6688     0711  0087               	movwf	7
  6689     0712  3145               	addfsr 1,5
  6690     0713  0801               	movf	1,w
  6691     0714  00A2               	movwf	buildException@u8func
  6692                           
  6693                           ;Mobbus_Slave.c: 80:     SES_Modbus.au8Buffer[ ID ] = SES_Modbus.u8id;
  6694     0715  30D4               	movlw	212
  6695     0716  0086               	movwf	6
  6696     0717  3020               	movlw	32
  6697     0718  0087               	movwf	7
  6698     0719  0801               	movf	1,w
  6699     071A  00A0               	movwf	??_buildException
  6700     071B  30D8               	movlw	216
  6701     071C  0086               	movwf	6
  6702     071D  3020               	movlw	32
  6703     071E  0087               	movwf	7
  6704     071F  0820               	movf	??_buildException,w
  6705     0720  0081               	movwf	1
  6706     0721                     l3131:
  6707                           
  6708                           ;Mobbus_Slave.c: 81:     SES_Modbus.au8Buffer[ FUNC ] = u8func + 0x80;
  6709     0721  0822               	movf	buildException@u8func,w
  6710     0722  3E80               	addlw	128
  6711     0723  00A0               	movwf	??_buildException
  6712     0724  30D9               	movlw	217
  6713     0725  0086               	movwf	6
  6714     0726  3020               	movlw	32
  6715     0727  0087               	movwf	7
  6716     0728  0820               	movf	??_buildException,w
  6717     0729  0081               	movwf	1
  6718     072A                     l3133:
  6719                           
  6720                           ;Mobbus_Slave.c: 82:     SES_Modbus.au8Buffer[ 2 ] = exception;
  6721     072A  30DA               	movlw	218
  6722     072B  0086               	movwf	6
  6723     072C  3020               	movlw	32
  6724     072D  0087               	movwf	7
  6725     072E  0821               	movf	buildException@exception,w
  6726     072F  0081               	movwf	1
  6727     0730                     l3135:
  6728                           
  6729                           ;Mobbus_Slave.c: 83:     SES_Modbus.u8BufferSize = EXCEPTION_SIZE;
  6730     0730  30D2               	movlw	210
  6731     0731  0086               	movwf	6
  6732     0732  3021               	movlw	33
  6733     0733  0087               	movwf	7
  6734     0734  3003               	movlw	3
  6735     0735  0081               	movwf	1
  6736     0736                     l918:
  6737     0736  0008               	return
  6738     0737                     __end_of_buildException:
  6739                           
  6740                           	psect	text38
  6741     0433                     __ptext38:	
  6742 ;; *************** function _Modbus_getRxBuff *****************
  6743 ;; Defined at:
  6744 ;;		line 86 in file "Mobbus_Slave.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;		None
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  bBuffOverflo    1    9[BANK0 ] _Bool 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      char 
  6751 ;; Registers used:
  6752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6758 ;;      Params:         0       0       0       0       0       0       0       0
  6759 ;;      Locals:         0       1       0       0       0       0       0       0
  6760 ;;      Temps:          0       7       0       0       0       0       0       0
  6761 ;;      Totals:         0       8       0       0       0       0       0       0
  6762 ;;Total ram usage:        8 bytes
  6763 ;; Hardware stack levels used: 1
  6764 ;; Hardware stack levels required when called: 8
  6765 ;; This function calls:
  6766 ;;		_EUSART_Read
  6767 ;; This function is called by:
  6768 ;;		_ModbusRTU_Slave_Poll
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772     0433                     _Modbus_getRxBuff:	
  6773                           ;psect for function _Modbus_getRxBuff
  6774                           
  6775     0433                     l3137:	
  6776                           ;incstack = 0
  6777                           ; Regs used in _Modbus_getRxBuff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6778                           
  6779                           
  6780                           ;Mobbus_Slave.c: 88:     _Bool bBuffOverflow = 0;
  6781     0433  0020               	movlb	0	; select bank0
  6782     0434  01A9               	clrf	Modbus_getRxBuff@bBuffOverflow
  6783     0435                     l3141:
  6784                           
  6785                           ;Mobbus_Slave.c: 95:     SES_Modbus.u8BufferSize = 0;
  6786     0435  30D2               	movlw	210
  6787     0436  0086               	movwf	6
  6788     0437  3021               	movlw	33
  6789     0438  0087               	movwf	7
  6790     0439  0181               	clrf	1
  6791                           
  6792                           ;Mobbus_Slave.c: 96:     while (eusartRxCount)
  6793     043A  2C6B               	goto	l3151
  6794     043B                     l3143:
  6795                           
  6796                           ;Mobbus_Slave.c: 97:     {;Mobbus_Slave.c: 98:         SES_Modbus.au8Buffer [SES_Modbus.
      +                          u8BufferSize] = EUSART_Read();
  6797     043B  3187  2761  3184   	fcall	_EUSART_Read
  6798     043E  0020               	movlb	0	; select bank0
  6799     043F  00A2               	movwf	??_Modbus_getRxBuff
  6800     0440  30D2               	movlw	210
  6801     0441  0086               	movwf	6
  6802     0442  3021               	movlw	33
  6803     0443  0087               	movwf	7
  6804     0444  0801               	movf	1,w
  6805     0445  00A3               	movwf	??_Modbus_getRxBuff+1
  6806     0446  01A4               	clrf	??_Modbus_getRxBuff+2
  6807     0447  30D8               	movlw	216
  6808     0448  00A5               	movwf	??_Modbus_getRxBuff+3
  6809     0449  3020               	movlw	32
  6810     044A  00A6               	movwf	??_Modbus_getRxBuff+4
  6811     044B  0823               	movf	??_Modbus_getRxBuff+1,w
  6812     044C  0725               	addwf	??_Modbus_getRxBuff+3,w
  6813     044D  00A7               	movwf	??_Modbus_getRxBuff+5
  6814     044E  0824               	movf	??_Modbus_getRxBuff+2,w
  6815     044F  3D26               	addwfc	??_Modbus_getRxBuff+4,w
  6816     0450  00A8               	movwf	??_Modbus_getRxBuff+6
  6817     0451  0827               	movf	??_Modbus_getRxBuff+5,w
  6818     0452  0086               	movwf	6
  6819     0453  0828               	movf	??_Modbus_getRxBuff+6,w
  6820     0454  0087               	movwf	7
  6821     0455  0822               	movf	??_Modbus_getRxBuff,w
  6822     0456  0081               	movwf	1
  6823     0457                     l3145:
  6824                           
  6825                           ;Mobbus_Slave.c: 99:         SES_Modbus.u8BufferSize++;
  6826     0457  3001               	movlw	1
  6827     0458  00A2               	movwf	??_Modbus_getRxBuff
  6828     0459  30D2               	movlw	210
  6829     045A  0086               	movwf	6
  6830     045B  3021               	movlw	33
  6831     045C  0087               	movwf	7
  6832     045D  0822               	movf	??_Modbus_getRxBuff,w
  6833     045E  0781               	addwf	1,f
  6834     045F                     l3147:
  6835                           
  6836                           ;Mobbus_Slave.c: 101:         if(SES_Modbus.u8BufferSize >= 250) bBuffOverflow = 1;
  6837     045F  30D2               	movlw	210
  6838     0460  0086               	movwf	6
  6839     0461  3021               	movlw	33
  6840     0462  0087               	movwf	7
  6841     0463  30FA               	movlw	250
  6842     0464  0201               	subwf	1,w
  6843     0465  1C03               	skipc
  6844     0466  2C68               	goto	u1081
  6845     0467  2C69               	goto	u1080
  6846     0468                     u1081:
  6847     0468  2C6B               	goto	l3151
  6848     0469                     u1080:
  6849     0469                     l3149:
  6850     0469  01A9               	clrf	Modbus_getRxBuff@bBuffOverflow
  6851     046A  0AA9               	incf	Modbus_getRxBuff@bBuffOverflow,f
  6852     046B                     l3151:
  6853                           
  6854                           ;Mobbus_Slave.c: 96:     while (eusartRxCount)
  6855     046B  0869               	movf	_eusartRxCount,w	;volatile
  6856     046C  1D03               	btfss	3,2
  6857     046D  2C6F               	goto	u1091
  6858     046E  2C70               	goto	u1090
  6859     046F                     u1091:
  6860     046F  2C3B               	goto	l3143
  6861     0470                     u1090:
  6862     0470                     l3153:
  6863                           
  6864                           ;Mobbus_Slave.c: 103:     SES_Modbus.u16InCnt++;
  6865     0470  30D6               	movlw	214
  6866     0471  0086               	movwf	6
  6867     0472  3021               	movlw	33
  6868     0473  0087               	movwf	7
  6869     0474  3001               	movlw	1
  6870     0475  0781               	addwf	1,f
  6871     0476  3141               	addfsr 1,1
  6872     0477  1803               	skipnc
  6873     0478  0A81               	incf	1,f
  6874     0479                     l3155:
  6875                           
  6876                           ;Mobbus_Slave.c: 105:     if(bBuffOverflow)
  6877     0479  0829               	movf	Modbus_getRxBuff@bBuffOverflow,w
  6878     047A  1903               	btfsc	3,2
  6879     047B  2C7D               	goto	u1101
  6880     047C  2C7E               	goto	u1100
  6881     047D                     u1101:
  6882     047D  2C89               	goto	l3163
  6883     047E                     u1100:
  6884     047E                     l3157:
  6885                           
  6886                           ;Mobbus_Slave.c: 106:     {;Mobbus_Slave.c: 107:         SES_Modbus.u16errCnt++;
  6887     047E  30DA               	movlw	218
  6888     047F  0086               	movwf	6
  6889     0480  3021               	movlw	33
  6890     0481  0087               	movwf	7
  6891     0482  3001               	movlw	1
  6892     0483  0781               	addwf	1,f
  6893     0484  3141               	addfsr 1,1
  6894     0485  1803               	skipnc
  6895     0486  0A81               	incf	1,f
  6896     0487                     l3159:
  6897                           
  6898                           ;Mobbus_Slave.c: 108:         return ERR_BUFF_OVERFLOW;
  6899     0487  30FD               	movlw	253
  6900     0488  2C8E               	goto	l927
  6901     0489                     l3163:
  6902                           
  6903                           ;Mobbus_Slave.c: 111:     return SES_Modbus.u8BufferSize;
  6904     0489  30D2               	movlw	210
  6905     048A  0086               	movwf	6
  6906     048B  3021               	movlw	33
  6907     048C  0087               	movwf	7
  6908     048D  0801               	movf	1,w
  6909     048E                     l927:
  6910     048E  0008               	return
  6911     048F                     __end_of_Modbus_getRxBuff:
  6912                           
  6913                           	psect	text39
  6914     0761                     __ptext39:	
  6915 ;; *************** function _EUSART_Read *****************
  6916 ;; Defined at:
  6917 ;;		line 151 in file "mcc_generated_files/eusart.c"
  6918 ;; Parameters:    Size  Location     Type
  6919 ;;		None
  6920 ;; Auto vars:     Size  Location     Type
  6921 ;;  readValue       1    1[BANK0 ] unsigned char 
  6922 ;; Return value:  Size  Location     Type
  6923 ;;                  1    wreg      unsigned char 
  6924 ;; Registers used:
  6925 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6926 ;; Tracked objects:
  6927 ;;		On entry : 0/0
  6928 ;;		On exit  : 0/0
  6929 ;;		Unchanged: 0/0
  6930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6931 ;;      Params:         0       0       0       0       0       0       0       0
  6932 ;;      Locals:         0       1       0       0       0       0       0       0
  6933 ;;      Temps:          0       1       0       0       0       0       0       0
  6934 ;;      Totals:         0       2       0       0       0       0       0       0
  6935 ;;Total ram usage:        2 bytes
  6936 ;; Hardware stack levels used: 1
  6937 ;; Hardware stack levels required when called: 7
  6938 ;; This function calls:
  6939 ;;		Nothing
  6940 ;; This function is called by:
  6941 ;;		_Modbus_getRxBuff
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945     0761                     _EUSART_Read:	
  6946                           ;psect for function _EUSART_Read
  6947                           
  6948     0761                     l2967:	
  6949                           ;incstack = 0
  6950                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6951                           
  6952     0761                     l2969:	
  6953                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  6954                           
  6955                           
  6956                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  6957     0761  0020               	movlb	0	; select bank0
  6958     0762  0869               	movf	_eusartRxCount,w	;volatile
  6959     0763  1903               	btfsc	3,2
  6960     0764  2F66               	goto	u961
  6961     0765  2F67               	goto	u960
  6962     0766                     u961:
  6963     0766  2F61               	goto	l2969
  6964     0767                     u960:
  6965     0767                     l2971:
  6966                           
  6967                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  6968     0767  086A               	movf	_eusartRxTail,w	;volatile
  6969     0768  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
  6970     0769  0086               	movwf	6
  6971     076A  3001               	movlw	1	; select bank2/3
  6972     076B  0087               	movwf	7
  6973     076C  0801               	movf	1,w
  6974     076D  00E8               	movwf	_eusartRxLastError	;volatile
  6975                           
  6976                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  6977     076E  086A               	movf	_eusartRxTail,w
  6978     076F  3E30               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  6979     0770  0086               	movwf	6
  6980     0771  3001               	movlw	1	; select bank2/3
  6981     0772  0087               	movwf	7
  6982     0773  0801               	movf	1,w
  6983     0774  00A1               	movwf	EUSART_Read@readValue
  6984     0775                     l2973:
  6985     0775  3001               	movlw	1
  6986     0776  00A0               	movwf	??_EUSART_Read
  6987     0777  0820               	movf	??_EUSART_Read,w
  6988     0778  07EA               	addwf	_eusartRxTail,f	;volatile
  6989     0779                     l2975:
  6990                           
  6991                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6992     0779  3010               	movlw	16
  6993     077A  026A               	subwf	_eusartRxTail,w	;volatile
  6994     077B  1C03               	skipc
  6995     077C  2F7E               	goto	u971
  6996     077D  2F7F               	goto	u970
  6997     077E                     u971:
  6998     077E  2F80               	goto	l2979
  6999     077F                     u970:
  7000     077F                     l2977:
  7001                           
  7002                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  7003     077F  01EA               	clrf	_eusartRxTail	;volatile
  7004     0780                     l2979:
  7005                           
  7006                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  7007     0780  0021               	movlb	1	; select bank1
  7008     0781  1291               	bcf	17,5	;volatile
  7009     0782                     l2981:
  7010                           
  7011                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  7012     0782  3001               	movlw	1
  7013     0783  0020               	movlb	0	; select bank0
  7014     0784  02E9               	subwf	_eusartRxCount,f	;volatile
  7015     0785                     l2983:
  7016                           
  7017                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  7018     0785  0021               	movlb	1	; select bank1
  7019     0786  1691               	bsf	17,5	;volatile
  7020     0787                     l2985:
  7021                           
  7022                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  7023     0787  0020               	movlb	0	; select bank0
  7024     0788  0821               	movf	EUSART_Read@readValue,w
  7025     0789                     l637:
  7026     0789  0008               	return
  7027     078A                     __end_of_EUSART_Read:
  7028                           
  7029                           	psect	text40
  7030     0249                     __ptext40:	
  7031 ;; *************** function _ModbusSlaveF04 *****************
  7032 ;; Defined at:
  7033 ;;		line 51 in file "Mobbus_Slave.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  reg             2   30[BANK0 ] PTR unsigned short 
  7036 ;;		 -> MB_Register(4), RAM(4096), 
  7037 ;;  size            1   32[BANK0 ] unsigned char 
  7038 ;; Auto vars:     Size  Location     Type
  7039 ;;  i               2   47[BANK0 ] unsigned short 
  7040 ;;  u8StartAdd      2   44[BANK0 ] unsigned short 
  7041 ;;  u8regsno        1   46[BANK0 ] unsigned char 
  7042 ;;  u8CopyBuffer    1    0        unsigned char 
  7043 ;; Return value:  Size  Location     Type
  7044 ;;                  1    wreg      char 
  7045 ;; Registers used:
  7046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7047 ;; Tracked objects:
  7048 ;;		On entry : 0/0
  7049 ;;		On exit  : 0/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7052 ;;      Params:         0       3       0       0       0       0       0       0
  7053 ;;      Locals:         0       5       0       0       0       0       0       0
  7054 ;;      Temps:          0      11       0       0       0       0       0       0
  7055 ;;      Totals:         0      19       0       0       0       0       0       0
  7056 ;;Total ram usage:       19 bytes
  7057 ;; Hardware stack levels used: 1
  7058 ;; Hardware stack levels required when called: 9
  7059 ;; This function calls:
  7060 ;;		_Modbus_sendTxBuff
  7061 ;; This function is called by:
  7062 ;;		_ModbusRTU_Slave_Poll
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066     0249                     _ModbusSlaveF04:	
  7067                           ;psect for function _ModbusSlaveF04
  7068                           
  7069     0249                     l3109:	
  7070                           ;incstack = 0
  7071                           ; Regs used in _ModbusSlaveF04: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7072                           
  7073                           
  7074                           ;Mobbus_Slave.c: 51: static int8_t ModbusSlaveF04(uint16_t *reg, uint8_t size);Mobbus_Sl
      +                          ave.c: 52: {;Mobbus_Slave.c: 53:     uint16_t u8StartAdd = (SES_Modbus.au8Buffer[ ADD_LO
      +                           ] & 0xff) | ((SES_Modbus.au8Buffer[ ADD_HI ] & 0xff) << 8);
  7075     0249  30D4               	movlw	212
  7076     024A  0086               	movwf	6
  7077     024B  3020               	movlw	32
  7078     024C  0087               	movwf	7
  7079     024D  3146               	addfsr 1,6
  7080     024E  0801               	movf	1,w
  7081     024F  0020               	movlb	0	; select bank0
  7082     0250  00C1               	movwf	??_ModbusSlaveF04
  7083     0251  01C2               	clrf	??_ModbusSlaveF04+1
  7084     0252  0841               	movf	??_ModbusSlaveF04,w
  7085     0253  00C2               	movwf	??_ModbusSlaveF04+1
  7086     0254  01C1               	clrf	??_ModbusSlaveF04
  7087     0255  30D4               	movlw	212
  7088     0256  0086               	movwf	6
  7089     0257  3020               	movlw	32
  7090     0258  0087               	movwf	7
  7091     0259  3147               	addfsr 1,7
  7092     025A  0841               	movf	??_ModbusSlaveF04,w
  7093     025B  0401               	iorwf	1,w
  7094     025C  00CC               	movwf	ModbusSlaveF04@u8StartAdd
  7095     025D  0842               	movf	??_ModbusSlaveF04+1,w
  7096     025E  00CD               	movwf	ModbusSlaveF04@u8StartAdd+1
  7097                           
  7098                           ;Mobbus_Slave.c: 54:     uint8_t u8regsno = (SES_Modbus.au8Buffer[ NB_LO ] & 0xff) | ((S
      +                          ES_Modbus.au8Buffer[ NB_HI ] & 0xff) << 8);
  7099     025F  30D4               	movlw	212
  7100     0260  0086               	movwf	6
  7101     0261  3020               	movlw	32
  7102     0262  0087               	movwf	7
  7103     0263  3149               	addfsr 1,9
  7104     0264  0801               	movf	1,w
  7105     0265  00CE               	movwf	ModbusSlaveF04@u8regsno
  7106     0266                     l3111:
  7107                           
  7108                           ;Mobbus_Slave.c: 55:     uint8_t u8CopyBufferSize;;Mobbus_Slave.c: 56:     uint16_t i;;M
      +                          obbus_Slave.c: 58:     SES_Modbus.au8Buffer[ 2 ] = u8regsno * 2;
  7109     0266  354E               	lslf	ModbusSlaveF04@u8regsno,w
  7110     0267  00C1               	movwf	??_ModbusSlaveF04
  7111     0268  30DA               	movlw	218
  7112     0269  0086               	movwf	6
  7113     026A  3020               	movlw	32
  7114     026B  0087               	movwf	7
  7115     026C  0841               	movf	??_ModbusSlaveF04,w
  7116     026D  0081               	movwf	1
  7117     026E                     l3113:
  7118                           
  7119                           ;Mobbus_Slave.c: 59:     SES_Modbus.u8BufferSize = 3;
  7120     026E  30D2               	movlw	210
  7121     026F  0086               	movwf	6
  7122     0270  3021               	movlw	33
  7123     0271  0087               	movwf	7
  7124     0272  3003               	movlw	3
  7125     0273  0081               	movwf	1
  7126     0274                     l3115:
  7127                           
  7128                           ;Mobbus_Slave.c: 61:     for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
  7129     0274  084D               	movf	ModbusSlaveF04@u8StartAdd+1,w
  7130     0275  00D0               	movwf	ModbusSlaveF04@i+1
  7131     0276  084C               	movf	ModbusSlaveF04@u8StartAdd,w
  7132     0277  00CF               	movwf	ModbusSlaveF04@i
  7133     0278  2ADB               	goto	l3121
  7134     0279                     l3117:
  7135                           
  7136                           ;Mobbus_Slave.c: 62:     {;Mobbus_Slave.c: 63:         SES_Modbus.au8Buffer[SES_Modbus.u
      +                          8BufferSize ] = ((uint8_t) ((reg[i]) >> 8));
  7137     0279  0850               	movf	ModbusSlaveF04@i+1,w
  7138     027A  00C2               	movwf	??_ModbusSlaveF04+1
  7139     027B  084F               	movf	ModbusSlaveF04@i,w
  7140     027C  00C1               	movwf	??_ModbusSlaveF04
  7141     027D  35C1               	lslf	??_ModbusSlaveF04,f
  7142     027E  0DC2               	rlf	??_ModbusSlaveF04+1,f
  7143     027F  0841               	movf	??_ModbusSlaveF04,w
  7144     0280  073E               	addwf	ModbusSlaveF04@reg,w
  7145     0281  0086               	movwf	6
  7146     0282  0842               	movf	??_ModbusSlaveF04+1,w
  7147     0283  3D3F               	addwfc	ModbusSlaveF04@reg+1,w
  7148     0284  0087               	movwf	7
  7149     0285  3F40               	moviw [0]fsr1
  7150     0286  00C3               	movwf	??_ModbusSlaveF04+2
  7151     0287  3F41               	moviw [1]fsr1
  7152     0288  00C4               	movwf	??_ModbusSlaveF04+3
  7153     0289  0844               	movf	??_ModbusSlaveF04+3,w
  7154     028A  00C5               	movwf	??_ModbusSlaveF04+4
  7155     028B  30D2               	movlw	210
  7156     028C  0086               	movwf	6
  7157     028D  3021               	movlw	33
  7158     028E  0087               	movwf	7
  7159     028F  0801               	movf	1,w
  7160     0290  00C6               	movwf	??_ModbusSlaveF04+5
  7161     0291  01C7               	clrf	??_ModbusSlaveF04+6
  7162     0292  30D8               	movlw	216
  7163     0293  00C8               	movwf	??_ModbusSlaveF04+7
  7164     0294  3020               	movlw	32
  7165     0295  00C9               	movwf	??_ModbusSlaveF04+8
  7166     0296  0846               	movf	??_ModbusSlaveF04+5,w
  7167     0297  0748               	addwf	??_ModbusSlaveF04+7,w
  7168     0298  00CA               	movwf	??_ModbusSlaveF04+9
  7169     0299  0847               	movf	??_ModbusSlaveF04+6,w
  7170     029A  3D49               	addwfc	??_ModbusSlaveF04+8,w
  7171     029B  00CB               	movwf	??_ModbusSlaveF04+10
  7172     029C  084A               	movf	??_ModbusSlaveF04+9,w
  7173     029D  0086               	movwf	6
  7174     029E  084B               	movf	??_ModbusSlaveF04+10,w
  7175     029F  0087               	movwf	7
  7176     02A0  0845               	movf	??_ModbusSlaveF04+4,w
  7177     02A1  0081               	movwf	1
  7178                           
  7179                           ;Mobbus_Slave.c: 64:         SES_Modbus.u8BufferSize++;
  7180     02A2  3001               	movlw	1
  7181     02A3  00C1               	movwf	??_ModbusSlaveF04
  7182     02A4  30D2               	movlw	210
  7183     02A5  0086               	movwf	6
  7184     02A6  3021               	movlw	33
  7185     02A7  0087               	movwf	7
  7186     02A8  0841               	movf	??_ModbusSlaveF04,w
  7187     02A9  0781               	addwf	1,f
  7188                           
  7189                           ;Mobbus_Slave.c: 65:         SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = ((uint8_t
      +                          ) ((reg[i]) & 0xff));
  7190     02AA  0850               	movf	ModbusSlaveF04@i+1,w
  7191     02AB  00C2               	movwf	??_ModbusSlaveF04+1
  7192     02AC  084F               	movf	ModbusSlaveF04@i,w
  7193     02AD  00C1               	movwf	??_ModbusSlaveF04
  7194     02AE  35C1               	lslf	??_ModbusSlaveF04,f
  7195     02AF  0DC2               	rlf	??_ModbusSlaveF04+1,f
  7196     02B0  0841               	movf	??_ModbusSlaveF04,w
  7197     02B1  073E               	addwf	ModbusSlaveF04@reg,w
  7198     02B2  0086               	movwf	6
  7199     02B3  0842               	movf	??_ModbusSlaveF04+1,w
  7200     02B4  3D3F               	addwfc	ModbusSlaveF04@reg+1,w
  7201     02B5  0087               	movwf	7
  7202     02B6  0801               	movf	1,w
  7203     02B7  00C3               	movwf	??_ModbusSlaveF04+2
  7204     02B8  30D2               	movlw	210
  7205     02B9  0086               	movwf	6
  7206     02BA  3021               	movlw	33
  7207     02BB  0087               	movwf	7
  7208     02BC  0801               	movf	1,w
  7209     02BD  00C4               	movwf	??_ModbusSlaveF04+3
  7210     02BE  01C5               	clrf	??_ModbusSlaveF04+4
  7211     02BF  30D8               	movlw	216
  7212     02C0  00C6               	movwf	??_ModbusSlaveF04+5
  7213     02C1  3020               	movlw	32
  7214     02C2  00C7               	movwf	??_ModbusSlaveF04+6
  7215     02C3  0844               	movf	??_ModbusSlaveF04+3,w
  7216     02C4  0746               	addwf	??_ModbusSlaveF04+5,w
  7217     02C5  00C8               	movwf	??_ModbusSlaveF04+7
  7218     02C6  0845               	movf	??_ModbusSlaveF04+4,w
  7219     02C7  3D47               	addwfc	??_ModbusSlaveF04+6,w
  7220     02C8  00C9               	movwf	??_ModbusSlaveF04+8
  7221     02C9  0848               	movf	??_ModbusSlaveF04+7,w
  7222     02CA  0086               	movwf	6
  7223     02CB  0849               	movf	??_ModbusSlaveF04+8,w
  7224     02CC  0087               	movwf	7
  7225     02CD  0843               	movf	??_ModbusSlaveF04+2,w
  7226     02CE  0081               	movwf	1
  7227                           
  7228                           ;Mobbus_Slave.c: 66:         SES_Modbus.u8BufferSize++;
  7229     02CF  3001               	movlw	1
  7230     02D0  00C1               	movwf	??_ModbusSlaveF04
  7231     02D1  30D2               	movlw	210
  7232     02D2  0086               	movwf	6
  7233     02D3  3021               	movlw	33
  7234     02D4  0087               	movwf	7
  7235     02D5  0841               	movf	??_ModbusSlaveF04,w
  7236     02D6  0781               	addwf	1,f
  7237     02D7                     l3119:
  7238                           
  7239                           ;Mobbus_Slave.c: 67:     }
  7240     02D7  3001               	movlw	1
  7241     02D8  07CF               	addwf	ModbusSlaveF04@i,f
  7242     02D9  3000               	movlw	0
  7243     02DA  3DD0               	addwfc	ModbusSlaveF04@i+1,f
  7244     02DB                     l3121:
  7245     02DB  084E               	movf	ModbusSlaveF04@u8regsno,w
  7246     02DC  074C               	addwf	ModbusSlaveF04@u8StartAdd,w
  7247     02DD  00C1               	movwf	??_ModbusSlaveF04
  7248     02DE  084D               	movf	ModbusSlaveF04@u8StartAdd+1,w
  7249     02DF  1803               	skipnc
  7250     02E0  0A4D               	incf	ModbusSlaveF04@u8StartAdd+1,w
  7251     02E1  00C2               	movwf	??_ModbusSlaveF04+1
  7252     02E2  0842               	movf	??_ModbusSlaveF04+1,w
  7253     02E3  0250               	subwf	ModbusSlaveF04@i+1,w
  7254     02E4  1D03               	skipz
  7255     02E5  2AE8               	goto	u1075
  7256     02E6  0841               	movf	??_ModbusSlaveF04,w
  7257     02E7  024F               	subwf	ModbusSlaveF04@i,w
  7258     02E8                     u1075:
  7259     02E8  1C03               	skipc
  7260     02E9  2AEB               	goto	u1071
  7261     02EA  2AEC               	goto	u1070
  7262     02EB                     u1071:
  7263     02EB  2A79               	goto	l3117
  7264     02EC                     u1070:
  7265     02EC                     l3123:
  7266     02EC                     l3125:
  7267                           
  7268                           ;Mobbus_Slave.c: 69:     Modbus_sendTxBuff();
  7269     02EC  3180  2099  3182   	fcall	_Modbus_sendTxBuff
  7270     02EF                     l915:
  7271     02EF  0008               	return
  7272     02F0                     __end_of_ModbusSlaveF04:
  7273                           
  7274                           	psect	text41
  7275     0099                     __ptext41:	
  7276 ;; *************** function _Modbus_sendTxBuff *****************
  7277 ;; Defined at:
  7278 ;;		line 216 in file "Mobbus_Slave.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;		None
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;  u32overTimec    4   26[BANK0 ] volatile unsigned long 
  7283 ;;  index           2   24[BANK0 ] int 
  7284 ;;  u16crc          2   22[BANK0 ] unsigned short 
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  1    wreg      void 
  7287 ;; Registers used:
  7288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7294 ;;      Params:         0       0       0       0       0       0       0       0
  7295 ;;      Locals:         0       8       0       0       0       0       0       0
  7296 ;;      Temps:          0       7       0       0       0       0       0       0
  7297 ;;      Totals:         0      15       0       0       0       0       0       0
  7298 ;;Total ram usage:       15 bytes
  7299 ;; Hardware stack levels used: 1
  7300 ;; Hardware stack levels required when called: 8
  7301 ;; This function calls:
  7302 ;;		_EUSART_Write
  7303 ;;		_EUSART_is_tx_done
  7304 ;;		_Get_millis
  7305 ;;		_Modbus_calcCRC
  7306 ;; This function is called by:
  7307 ;;		_ModbusSlaveF04
  7308 ;;		_ModbusRTU_Slave_Poll
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312     0099                     _Modbus_sendTxBuff:	
  7313                           ;psect for function _Modbus_sendTxBuff
  7314                           
  7315     0099                     l2989:	
  7316                           ;incstack = 0
  7317                           ; Regs used in _Modbus_sendTxBuff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7318                           
  7319                           
  7320                           ;Mobbus_Slave.c: 218:     uint16_t u16crc = Modbus_calcCRC( SES_Modbus.u8BufferSize );
  7321     0099  30D2               	movlw	210
  7322     009A  0086               	movwf	6
  7323     009B  3021               	movlw	33
  7324     009C  0087               	movwf	7
  7325     009D  0801               	movf	1,w
  7326     009E  3183  23D4  3180   	fcall	_Modbus_calcCRC
  7327     00A1  0020               	movlb	0	; select bank0
  7328     00A2  0821               	movf	?_Modbus_calcCRC+1,w
  7329     00A3  00B7               	movwf	Modbus_sendTxBuff@u16crc+1
  7330     00A4  0820               	movf	?_Modbus_calcCRC,w
  7331     00A5  00B6               	movwf	Modbus_sendTxBuff@u16crc
  7332     00A6                     l2991:
  7333                           
  7334                           ;Mobbus_Slave.c: 219:     SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = u16crc >> 8;
  7335     00A6  0837               	movf	Modbus_sendTxBuff@u16crc+1,w
  7336     00A7  00AF               	movwf	??_Modbus_sendTxBuff
  7337     00A8  30D2               	movlw	210
  7338     00A9  0086               	movwf	6
  7339     00AA  3021               	movlw	33
  7340     00AB  0087               	movwf	7
  7341     00AC  0801               	movf	1,w
  7342     00AD  00B0               	movwf	??_Modbus_sendTxBuff+1
  7343     00AE  01B1               	clrf	??_Modbus_sendTxBuff+2
  7344     00AF  30D8               	movlw	216
  7345     00B0  00B2               	movwf	??_Modbus_sendTxBuff+3
  7346     00B1  3020               	movlw	32
  7347     00B2  00B3               	movwf	??_Modbus_sendTxBuff+4
  7348     00B3  0830               	movf	??_Modbus_sendTxBuff+1,w
  7349     00B4  0732               	addwf	??_Modbus_sendTxBuff+3,w
  7350     00B5  00B4               	movwf	??_Modbus_sendTxBuff+5
  7351     00B6  0831               	movf	??_Modbus_sendTxBuff+2,w
  7352     00B7  3D33               	addwfc	??_Modbus_sendTxBuff+4,w
  7353     00B8  00B5               	movwf	??_Modbus_sendTxBuff+6
  7354     00B9  0834               	movf	??_Modbus_sendTxBuff+5,w
  7355     00BA  0086               	movwf	6
  7356     00BB  0835               	movf	??_Modbus_sendTxBuff+6,w
  7357     00BC  0087               	movwf	7
  7358     00BD  082F               	movf	??_Modbus_sendTxBuff,w
  7359     00BE  0081               	movwf	1
  7360     00BF                     l2993:
  7361                           
  7362                           ;Mobbus_Slave.c: 220:     SES_Modbus.u8BufferSize++;
  7363     00BF  3001               	movlw	1
  7364     00C0  00AF               	movwf	??_Modbus_sendTxBuff
  7365     00C1  30D2               	movlw	210
  7366     00C2  0086               	movwf	6
  7367     00C3  3021               	movlw	33
  7368     00C4  0087               	movwf	7
  7369     00C5  082F               	movf	??_Modbus_sendTxBuff,w
  7370     00C6  0781               	addwf	1,f
  7371     00C7                     l2995:
  7372                           
  7373                           ;Mobbus_Slave.c: 221:     SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = u16crc & 0x0
      +                          0ff;
  7374     00C7  30D2               	movlw	210
  7375     00C8  0086               	movwf	6
  7376     00C9  3021               	movlw	33
  7377     00CA  0087               	movwf	7
  7378     00CB  0801               	movf	1,w
  7379     00CC  00AF               	movwf	??_Modbus_sendTxBuff
  7380     00CD  01B0               	clrf	??_Modbus_sendTxBuff+1
  7381     00CE  30D8               	movlw	216
  7382     00CF  00B1               	movwf	??_Modbus_sendTxBuff+2
  7383     00D0  3020               	movlw	32
  7384     00D1  00B2               	movwf	??_Modbus_sendTxBuff+3
  7385     00D2  082F               	movf	??_Modbus_sendTxBuff,w
  7386     00D3  0731               	addwf	??_Modbus_sendTxBuff+2,w
  7387     00D4  00B3               	movwf	??_Modbus_sendTxBuff+4
  7388     00D5  0830               	movf	??_Modbus_sendTxBuff+1,w
  7389     00D6  3D32               	addwfc	??_Modbus_sendTxBuff+3,w
  7390     00D7  00B4               	movwf	??_Modbus_sendTxBuff+5
  7391     00D8  0833               	movf	??_Modbus_sendTxBuff+4,w
  7392     00D9  0086               	movwf	6
  7393     00DA  0834               	movf	??_Modbus_sendTxBuff+5,w
  7394     00DB  0087               	movwf	7
  7395     00DC  0836               	movf	Modbus_sendTxBuff@u16crc,w
  7396     00DD  0081               	movwf	1
  7397     00DE                     l2997:
  7398                           
  7399                           ;Mobbus_Slave.c: 222:     SES_Modbus.u8BufferSize++;
  7400     00DE  3001               	movlw	1
  7401     00DF  00AF               	movwf	??_Modbus_sendTxBuff
  7402     00E0  30D2               	movlw	210
  7403     00E1  0086               	movwf	6
  7404     00E2  3021               	movlw	33
  7405     00E3  0087               	movwf	7
  7406     00E4  082F               	movf	??_Modbus_sendTxBuff,w
  7407     00E5  0781               	addwf	1,f
  7408     00E6                     l2999:
  7409                           
  7410                           ;Mobbus_Slave.c: 225:     if (SES_Modbus.u8txenpin > 1)
  7411     00E6  30D4               	movlw	212
  7412     00E7  0086               	movwf	6
  7413     00E8  3020               	movlw	32
  7414     00E9  0087               	movwf	7
  7415     00EA  3141               	addfsr 1,1
  7416     00EB  3002               	movlw	2
  7417     00EC  0201               	subwf	1,w
  7418     00ED  1C03               	skipc
  7419     00EE  28F0               	goto	u981
  7420     00EF  28F1               	goto	u980
  7421     00F0                     u981:
  7422     00F0  28F3               	goto	l3001
  7423     00F1                     u980:
  7424     00F1                     l949:	
  7425                           ;Mobbus_Slave.c: 226:     {;Mobbus_Slave.c: 227:         do { LATCbits.LATC5 = 1; } whil
      +                          e(0);
  7426                           
  7427     00F1  0022               	movlb	2	; select bank2
  7428     00F2  168E               	bsf	14,5	;volatile
  7429     00F3                     l3001:
  7430                           
  7431                           ;Mobbus_Slave.c: 233:     for (int index = 0; index < SES_Modbus.u8BufferSize; index++)
  7432     00F3  0020               	movlb	0	; select bank0
  7433     00F4  01B8               	clrf	Modbus_sendTxBuff@index
  7434     00F5  01B9               	clrf	Modbus_sendTxBuff@index+1
  7435     00F6  290B               	goto	l3007
  7436     00F7                     l3003:
  7437                           
  7438                           ;Mobbus_Slave.c: 234:     {;Mobbus_Slave.c: 235:         EUSART_Write(SES_Modbus.au8Buff
      +                          er[index]);
  7439     00F7  30D8               	movlw	216
  7440     00F8  0020               	movlb	0	; select bank0
  7441     00F9  00AF               	movwf	??_Modbus_sendTxBuff
  7442     00FA  3020               	movlw	32
  7443     00FB  00B0               	movwf	??_Modbus_sendTxBuff+1
  7444     00FC  0838               	movf	Modbus_sendTxBuff@index,w
  7445     00FD  072F               	addwf	??_Modbus_sendTxBuff,w
  7446     00FE  0086               	movwf	6
  7447     00FF  0839               	movf	Modbus_sendTxBuff@index+1,w
  7448     0100  3D30               	addwfc	??_Modbus_sendTxBuff+1,w
  7449     0101  0087               	movwf	7
  7450     0102  0801               	movf	1,w
  7451     0103  3187  2737  3180   	fcall	_EUSART_Write
  7452     0106                     l3005:
  7453                           
  7454                           ;Mobbus_Slave.c: 236:     }
  7455     0106  3001               	movlw	1
  7456     0107  0020               	movlb	0	; select bank0
  7457     0108  07B8               	addwf	Modbus_sendTxBuff@index,f
  7458     0109  3000               	movlw	0
  7459     010A  3DB9               	addwfc	Modbus_sendTxBuff@index+1,f
  7460     010B                     l3007:
  7461     010B  30D2               	movlw	210
  7462     010C  0086               	movwf	6
  7463     010D  3021               	movlw	33
  7464     010E  0087               	movwf	7
  7465     010F  0839               	movf	Modbus_sendTxBuff@index+1,w
  7466     0110  3A80               	xorlw	128
  7467     0111  00AF               	movwf	??_Modbus_sendTxBuff
  7468     0112  3080               	movlw	128
  7469     0113  022F               	subwf	??_Modbus_sendTxBuff,w
  7470     0114  1D03               	skipz
  7471     0115  2918               	goto	u995
  7472     0116  0801               	movf	1,w
  7473     0117  0238               	subwf	Modbus_sendTxBuff@index,w
  7474     0118                     u995:
  7475     0118  1C03               	skipc
  7476     0119  291B               	goto	u991
  7477     011A  291C               	goto	u990
  7478     011B                     u991:
  7479     011B  28F7               	goto	l3003
  7480     011C                     u990:
  7481     011C                     l3009:
  7482                           
  7483                           ;Mobbus_Slave.c: 238:     if (SES_Modbus.u8txenpin > 1)
  7484     011C  30D4               	movlw	212
  7485     011D  0086               	movwf	6
  7486     011E  3020               	movlw	32
  7487     011F  0087               	movwf	7
  7488     0120  3141               	addfsr 1,1
  7489     0121  3002               	movlw	2
  7490     0122  0201               	subwf	1,w
  7491     0123  1C03               	skipc
  7492     0124  2926               	goto	u1001
  7493     0125  2927               	goto	u1000
  7494     0126                     u1001:
  7495     0126  295D               	goto	l3019
  7496     0127                     u1000:
  7497     0127                     l3013:
  7498     0127  318C  24C0  3180   	fcall	_EUSART_is_tx_done
  7499     012A  3A00               	xorlw	0
  7500     012B  1903               	skipnz
  7501     012C  292E               	goto	u1011
  7502     012D  292F               	goto	u1010
  7503     012E                     u1011:
  7504     012E  2927               	goto	l3013
  7505     012F                     u1010:
  7506     012F                     l3015:
  7507                           
  7508                           ;Mobbus_Slave.c: 247:         volatile uint32_t u32overTimecountDown = SES_Modbus.u32ove
      +                          rTime;
  7509     012F  30E6               	movlw	230
  7510     0130  0086               	movwf	6
  7511     0131  3021               	movlw	33
  7512     0132  0087               	movwf	7
  7513     0133  3F40               	moviw [0]fsr1
  7514     0134  0020               	movlb	0	; select bank0
  7515     0135  00BA               	movwf	Modbus_sendTxBuff@u32overTimecountDown	;volatile
  7516     0136  3F41               	moviw [1]fsr1
  7517     0137  00BB               	movwf	Modbus_sendTxBuff@u32overTimecountDown+1	;volatile
  7518     0138  3F42               	moviw [2]fsr1
  7519     0139  00BC               	movwf	Modbus_sendTxBuff@u32overTimecountDown+2	;volatile
  7520     013A  3F43               	moviw [3]fsr1
  7521     013B  00BD               	movwf	Modbus_sendTxBuff@u32overTimecountDown+3	;volatile
  7522     013C                     l3017:	
  7523                           ;Mobbus_Slave.c: 249:         while (u32overTimecountDown-- > 0);
  7524                           
  7525     013C  3001               	movlw	1
  7526     013D  0020               	movlb	0	; select bank0
  7527     013E  00AF               	movwf	??_Modbus_sendTxBuff
  7528     013F  3000               	movlw	0
  7529     0140  00B0               	movwf	??_Modbus_sendTxBuff+1
  7530     0141  3000               	movlw	0
  7531     0142  00B1               	movwf	??_Modbus_sendTxBuff+2
  7532     0143  3000               	movlw	0
  7533     0144  00B2               	movwf	??_Modbus_sendTxBuff+3
  7534     0145  082F               	movf	??_Modbus_sendTxBuff,w
  7535     0146  02BA               	subwf	Modbus_sendTxBuff@u32overTimecountDown,f	;volatile
  7536     0147  0830               	movf	??_Modbus_sendTxBuff+1,w
  7537     0148  3BBB               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+1,f	;volatile
  7538     0149  0831               	movf	??_Modbus_sendTxBuff+2,w
  7539     014A  3BBC               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+2,f	;volatile
  7540     014B  0832               	movf	??_Modbus_sendTxBuff+3,w
  7541     014C  3BBD               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+3,f	;volatile
  7542     014D  0A3A               	incf	Modbus_sendTxBuff@u32overTimecountDown,w	;volatile
  7543     014E  1D03               	skipz
  7544     014F  295A               	goto	u1021
  7545     0150  0A3B               	incf	Modbus_sendTxBuff@u32overTimecountDown+1,w	;volatile
  7546     0151  1D03               	skipz
  7547     0152  295A               	goto	u1021
  7548     0153  0A3C               	incf	Modbus_sendTxBuff@u32overTimecountDown+2,w	;volatile
  7549     0154  1D03               	skipz
  7550     0155  295A               	goto	u1021
  7551     0156  0A3D               	incf	Modbus_sendTxBuff@u32overTimecountDown+3,w	;volatile
  7552     0157  1D03               	btfss	3,2
  7553     0158  295A               	goto	u1021
  7554     0159  295B               	goto	u1020
  7555     015A                     u1021:
  7556     015A  293C               	goto	l3017
  7557     015B                     u1020:
  7558     015B                     l961:	
  7559                           ;Mobbus_Slave.c: 250:         do { LATCbits.LATC5 = 0; } while(0);
  7560                           
  7561     015B  0022               	movlb	2	; select bank2
  7562     015C  128E               	bcf	14,5	;volatile
  7563     015D                     l3019:
  7564                           
  7565                           ;Mobbus_Slave.c: 253:     SES_Modbus.u8BufferSize = 0;
  7566     015D  30D2               	movlw	210
  7567     015E  0086               	movwf	6
  7568     015F  3021               	movlw	33
  7569     0160  0087               	movwf	7
  7570     0161  0181               	clrf	1
  7571     0162                     l3021:
  7572                           
  7573                           ;Mobbus_Slave.c: 256:     SES_Modbus.u32timeOut = Get_millis();
  7574     0162  318E  265D  3180   	fcall	_Get_millis
  7575     0165  30E2               	movlw	226
  7576     0166  0086               	movwf	6
  7577     0167  3021               	movlw	33
  7578     0168  0087               	movwf	7
  7579     0169  0020               	movlb	0	; select bank0
  7580     016A  0820               	movf	?_Get_millis,w
  7581     016B  3FC0               	movwi [0]fsr1
  7582     016C  0821               	movf	?_Get_millis+1,w
  7583     016D  3FC1               	movwi [1]fsr1
  7584     016E  0822               	movf	?_Get_millis+2,w
  7585     016F  3FC2               	movwi [2]fsr1
  7586     0170  0823               	movf	?_Get_millis+3,w
  7587     0171  3FC3               	movwi [3]fsr1
  7588     0172                     l3023:
  7589                           
  7590                           ;Mobbus_Slave.c: 259:     SES_Modbus.u16OutCnt++;
  7591     0172  30D8               	movlw	216
  7592     0173  0086               	movwf	6
  7593     0174  3021               	movlw	33
  7594     0175  0087               	movwf	7
  7595     0176  3001               	movlw	1
  7596     0177  0781               	addwf	1,f
  7597     0178  3141               	addfsr 1,1
  7598     0179  1803               	skipnc
  7599     017A  0A81               	incf	1,f
  7600     017B                     l963:
  7601     017B  0008               	return
  7602     017C                     __end_of_Modbus_sendTxBuff:
  7603                           
  7604                           	psect	text42
  7605     03D4                     __ptext42:	
  7606 ;; *************** function _Modbus_calcCRC *****************
  7607 ;; Defined at:
  7608 ;;		line 262 in file "Mobbus_Slave.c"
  7609 ;; Parameters:    Size  Location     Type
  7610 ;;  len             1    wreg     unsigned char 
  7611 ;; Auto vars:     Size  Location     Type
  7612 ;;  len             1   10[BANK0 ] unsigned char 
  7613 ;;  j               1   12[BANK0 ] unsigned char 
  7614 ;;  temp            2   13[BANK0 ] unsigned int 
  7615 ;;  flag            2    8[BANK0 ] unsigned int 
  7616 ;;  temp2           2    6[BANK0 ] unsigned int 
  7617 ;;  i               1   11[BANK0 ] unsigned char 
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  2    0[BANK0 ] unsigned short 
  7620 ;; Registers used:
  7621 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7627 ;;      Params:         0       2       0       0       0       0       0       0
  7628 ;;      Locals:         0       9       0       0       0       0       0       0
  7629 ;;      Temps:          0       4       0       0       0       0       0       0
  7630 ;;      Totals:         0      15       0       0       0       0       0       0
  7631 ;;Total ram usage:       15 bytes
  7632 ;; Hardware stack levels used: 1
  7633 ;; Hardware stack levels required when called: 7
  7634 ;; This function calls:
  7635 ;;		Nothing
  7636 ;; This function is called by:
  7637 ;;		_validateRequest
  7638 ;;		_Modbus_sendTxBuff
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642     03D4                     _Modbus_calcCRC:	
  7643                           ;psect for function _Modbus_calcCRC
  7644                           
  7645                           
  7646                           ;incstack = 0
  7647                           ; Regs used in _Modbus_calcCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
  7648                           ;Modbus_calcCRC@len stored from wreg
  7649     03D4  0020               	movlb	0	; select bank0
  7650     03D5  00AA               	movwf	Modbus_calcCRC@len
  7651     03D6                     l2883:
  7652                           
  7653                           ;Mobbus_Slave.c: 262: static uint16_t Modbus_calcCRC(uint8_t len);Mobbus_Slave.c: 263: {
      +                          ;Mobbus_Slave.c: 264:     unsigned int temp, temp2, flag;;Mobbus_Slave.c: 265:     temp 
      +                          = 0xFFFF;
  7654     03D6  30FF               	movlw	255
  7655     03D7  00AD               	movwf	Modbus_calcCRC@temp
  7656     03D8  30FF               	movlw	255
  7657     03D9  00AE               	movwf	Modbus_calcCRC@temp+1
  7658     03DA                     l2885:
  7659                           
  7660                           ;Mobbus_Slave.c: 266:     unsigned char i=0;
  7661     03DA  01AB               	clrf	Modbus_calcCRC@i
  7662                           
  7663                           ;Mobbus_Slave.c: 267:     for (i = 0; i < len; i++)
  7664     03DB  01AB               	clrf	Modbus_calcCRC@i
  7665     03DC  2C14               	goto	l2911
  7666     03DD                     l2887:
  7667                           
  7668                           ;Mobbus_Slave.c: 268:     {;Mobbus_Slave.c: 269:         temp = temp ^ SES_Modbus.au8Buf
      +                          fer[i];
  7669     03DD  082B               	movf	Modbus_calcCRC@i,w
  7670     03DE  00A2               	movwf	??_Modbus_calcCRC
  7671     03DF  01A3               	clrf	??_Modbus_calcCRC+1
  7672     03E0  30D8               	movlw	216
  7673     03E1  00A4               	movwf	??_Modbus_calcCRC+2
  7674     03E2  3020               	movlw	32
  7675     03E3  00A5               	movwf	??_Modbus_calcCRC+3
  7676     03E4  0822               	movf	??_Modbus_calcCRC,w
  7677     03E5  0724               	addwf	??_Modbus_calcCRC+2,w
  7678     03E6  0086               	movwf	6
  7679     03E7  0823               	movf	??_Modbus_calcCRC+1,w
  7680     03E8  3D25               	addwfc	??_Modbus_calcCRC+3,w
  7681     03E9  0087               	movwf	7
  7682     03EA  082D               	movf	Modbus_calcCRC@temp,w
  7683     03EB  0601               	xorwf	1,w
  7684     03EC  00AD               	movwf	Modbus_calcCRC@temp
  7685     03ED  082E               	movf	Modbus_calcCRC@temp+1,w
  7686     03EE  00AE               	movwf	Modbus_calcCRC@temp+1
  7687     03EF                     l2889:
  7688     03EF                     l2891:
  7689                           
  7690                           ;Mobbus_Slave.c: 271:         for (j = 1; j <= 8; j++)
  7691     03EF  01AC               	clrf	Modbus_calcCRC@j
  7692     03F0  0AAC               	incf	Modbus_calcCRC@j,f
  7693     03F1                     l2897:
  7694                           
  7695                           ;Mobbus_Slave.c: 272:         {;Mobbus_Slave.c: 273:             flag = temp & 0x0001;
  7696     03F1  3001               	movlw	1
  7697     03F2  052D               	andwf	Modbus_calcCRC@temp,w
  7698     03F3  00A8               	movwf	Modbus_calcCRC@flag
  7699     03F4  3000               	movlw	0
  7700     03F5  052E               	andwf	Modbus_calcCRC@temp+1,w
  7701     03F6  00A9               	movwf	Modbus_calcCRC@flag+1
  7702     03F7                     l2899:
  7703                           
  7704                           ;Mobbus_Slave.c: 274:             temp >>=1;
  7705     03F7  3001               	movlw	1
  7706     03F8                     u885:
  7707     03F8  36AE               	lsrf	Modbus_calcCRC@temp+1,f
  7708     03F9  0CAD               	rrf	Modbus_calcCRC@temp,f
  7709     03FA  0B89               	decfsz	9,f
  7710     03FB  2BF8               	goto	u885
  7711     03FC                     l2901:
  7712                           
  7713                           ;Mobbus_Slave.c: 275:             if (flag)
  7714     03FC  0828               	movf	Modbus_calcCRC@flag,w
  7715     03FD  0429               	iorwf	Modbus_calcCRC@flag+1,w
  7716     03FE  1903               	btfsc	3,2
  7717     03FF  2C01               	goto	u891
  7718     0400  2C02               	goto	u890
  7719     0401                     u891:
  7720     0401  2C06               	goto	l2905
  7721     0402                     u890:
  7722     0402                     l2903:
  7723                           
  7724                           ;Mobbus_Slave.c: 276:                 temp ^= 0xA001;
  7725     0402  3001               	movlw	1
  7726     0403  06AD               	xorwf	Modbus_calcCRC@temp,f
  7727     0404  30A0               	movlw	160
  7728     0405  06AE               	xorwf	Modbus_calcCRC@temp+1,f
  7729     0406                     l2905:
  7730                           
  7731                           ;Mobbus_Slave.c: 277:         }
  7732     0406  3001               	movlw	1
  7733     0407  00A2               	movwf	??_Modbus_calcCRC
  7734     0408  0822               	movf	??_Modbus_calcCRC,w
  7735     0409  07AC               	addwf	Modbus_calcCRC@j,f
  7736     040A                     l2907:
  7737     040A  3009               	movlw	9
  7738     040B  022C               	subwf	Modbus_calcCRC@j,w
  7739     040C  1C03               	skipc
  7740     040D  2C0F               	goto	u901
  7741     040E  2C10               	goto	u900
  7742     040F                     u901:
  7743     040F  2BF1               	goto	l2897
  7744     0410                     u900:
  7745     0410                     l2909:
  7746                           
  7747                           ;Mobbus_Slave.c: 278:     }
  7748     0410  3001               	movlw	1
  7749     0411  00A2               	movwf	??_Modbus_calcCRC
  7750     0412  0822               	movf	??_Modbus_calcCRC,w
  7751     0413  07AB               	addwf	Modbus_calcCRC@i,f
  7752     0414                     l2911:
  7753     0414  082A               	movf	Modbus_calcCRC@len,w
  7754     0415  022B               	subwf	Modbus_calcCRC@i,w
  7755     0416  1C03               	skipc
  7756     0417  2C19               	goto	u911
  7757     0418  2C1A               	goto	u910
  7758     0419                     u911:
  7759     0419  2BDD               	goto	l2887
  7760     041A                     u910:
  7761     041A                     l2913:
  7762                           
  7763                           ;Mobbus_Slave.c: 280:     temp2 = temp >> 8;
  7764     041A  082E               	movf	Modbus_calcCRC@temp+1,w
  7765     041B  00A3               	movwf	??_Modbus_calcCRC+1
  7766     041C  082D               	movf	Modbus_calcCRC@temp,w
  7767     041D  00A2               	movwf	??_Modbus_calcCRC
  7768     041E  0823               	movf	??_Modbus_calcCRC+1,w
  7769     041F  00A2               	movwf	??_Modbus_calcCRC
  7770     0420  01A3               	clrf	??_Modbus_calcCRC+1
  7771     0421  0822               	movf	??_Modbus_calcCRC,w
  7772     0422  00A6               	movwf	Modbus_calcCRC@temp2
  7773     0423  0823               	movf	??_Modbus_calcCRC+1,w
  7774     0424  00A7               	movwf	Modbus_calcCRC@temp2+1
  7775     0425                     l2915:
  7776                           
  7777                           ;Mobbus_Slave.c: 281:     temp = (temp << 8) | temp2;
  7778     0425  082D               	movf	Modbus_calcCRC@temp,w
  7779     0426  00A3               	movwf	??_Modbus_calcCRC+1
  7780     0427  01A2               	clrf	??_Modbus_calcCRC
  7781     0428  0826               	movf	Modbus_calcCRC@temp2,w
  7782     0429  0422               	iorwf	??_Modbus_calcCRC,w
  7783     042A  00AD               	movwf	Modbus_calcCRC@temp
  7784     042B  0827               	movf	Modbus_calcCRC@temp2+1,w
  7785     042C  0423               	iorwf	??_Modbus_calcCRC+1,w
  7786     042D  00AE               	movwf	Modbus_calcCRC@temp+1
  7787     042E                     l2917:
  7788                           
  7789                           ;Mobbus_Slave.c: 285:     return temp;
  7790     042E  082E               	movf	Modbus_calcCRC@temp+1,w
  7791     042F  00A1               	movwf	?_Modbus_calcCRC+1
  7792     0430  082D               	movf	Modbus_calcCRC@temp,w
  7793     0431  00A0               	movwf	?_Modbus_calcCRC
  7794     0432                     l972:
  7795     0432  0008               	return
  7796     0433                     __end_of_Modbus_calcCRC:
  7797                           
  7798                           	psect	text43
  7799     0E5D                     __ptext43:	
  7800 ;; *************** function _Get_millis *****************
  7801 ;; Defined at:
  7802 ;;		line 17 in file "tick.c"
  7803 ;; Parameters:    Size  Location     Type
  7804 ;;		None
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;		None
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  4    0[BANK0 ] unsigned long 
  7809 ;; Registers used:
  7810 ;;		wreg
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7816 ;;      Params:         0       4       0       0       0       0       0       0
  7817 ;;      Locals:         0       0       0       0       0       0       0       0
  7818 ;;      Temps:          0       0       0       0       0       0       0       0
  7819 ;;      Totals:         0       4       0       0       0       0       0       0
  7820 ;;Total ram usage:        4 bytes
  7821 ;; Hardware stack levels used: 1
  7822 ;; Hardware stack levels required when called: 7
  7823 ;; This function calls:
  7824 ;;		Nothing
  7825 ;; This function is called by:
  7826 ;;		_ReadData
  7827 ;;		_Task_Sensor
  7828 ;;		_ModbusRTU_Slave_Poll
  7829 ;;		_Modbus_sendTxBuff
  7830 ;;		_delay_ms
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834     0E5D                     _Get_millis:	
  7835                           ;psect for function _Get_millis
  7836                           
  7837     0E5D                     l2879:	
  7838                           ;incstack = 0
  7839                           ; Regs used in _Get_millis: [wreg]
  7840                           
  7841                           
  7842                           ;tick.c: 19:     return device_time;
  7843     0E5D  0021               	movlb	1	; select bank1
  7844     0E5E  0840               	movf	(_device_time+3)^(0+128),w	;volatile
  7845     0E5F  0020               	movlb	0	; select bank0
  7846     0E60  00A3               	movwf	?_Get_millis+3
  7847     0E61  0021               	movlb	1	; select bank1
  7848     0E62  083F               	movf	(_device_time+2)^(0+128),w	;volatile
  7849     0E63  0020               	movlb	0	; select bank0
  7850     0E64  00A2               	movwf	?_Get_millis+2
  7851     0E65  0021               	movlb	1	; select bank1
  7852     0E66  083E               	movf	(_device_time+1)^(0+128),w	;volatile
  7853     0E67  0020               	movlb	0	; select bank0
  7854     0E68  00A1               	movwf	?_Get_millis+1
  7855     0E69  0021               	movlb	1	; select bank1
  7856     0E6A  083D               	movf	_device_time^(0+128),w	;volatile
  7857     0E6B  0020               	movlb	0	; select bank0
  7858     0E6C  00A0               	movwf	?_Get_millis
  7859     0E6D                     l995:
  7860     0E6D  0008               	return
  7861     0E6E                     __end_of_Get_millis:
  7862                           
  7863                           	psect	text44
  7864     0CC0                     __ptext44:	
  7865 ;; *************** function _EUSART_is_tx_done *****************
  7866 ;; Defined at:
  7867 ;;		line 142 in file "mcc_generated_files/eusart.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;		None
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;		None
  7872 ;; Return value:  Size  Location     Type
  7873 ;;                  1    wreg      _Bool 
  7874 ;; Registers used:
  7875 ;;		wreg, status,2, status,0
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7881 ;;      Params:         0       0       0       0       0       0       0       0
  7882 ;;      Locals:         0       0       0       0       0       0       0       0
  7883 ;;      Temps:          0       0       0       0       0       0       0       0
  7884 ;;      Totals:         0       0       0       0       0       0       0       0
  7885 ;;Total ram usage:        0 bytes
  7886 ;; Hardware stack levels used: 1
  7887 ;; Hardware stack levels required when called: 7
  7888 ;; This function calls:
  7889 ;;		Nothing
  7890 ;; This function is called by:
  7891 ;;		_Modbus_sendTxBuff
  7892 ;; This function uses a non-reentrant model
  7893 ;;
  7894                           
  7895     0CC0                     _EUSART_is_tx_done:	
  7896                           ;psect for function _EUSART_is_tx_done
  7897                           
  7898     0CC0                     l2857:	
  7899                           ;incstack = 0
  7900                           ; Regs used in _EUSART_is_tx_done: [wreg+status,2+status,0]
  7901                           
  7902                           
  7903                           ;mcc_generated_files/eusart.c: 144:     return TXSTAbits.TRMT;
  7904     0CC0  0023               	movlb	3	; select bank3
  7905     0CC1  0C1E               	rrf	30,w	;volatile
  7906     0CC2  3901               	andlw	1
  7907     0CC3                     l627:
  7908     0CC3  0008               	return
  7909     0CC4                     __end_of_EUSART_is_tx_done:
  7910                           
  7911                           	psect	text45
  7912     0737                     __ptext45:	
  7913 ;; *************** function _EUSART_Write *****************
  7914 ;; Defined at:
  7915 ;;		line 173 in file "mcc_generated_files/eusart.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  txData          1    wreg     unsigned char 
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;  txData          1    1[BANK0 ] unsigned char 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      void 
  7922 ;; Registers used:
  7923 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7929 ;;      Params:         0       0       0       0       0       0       0       0
  7930 ;;      Locals:         0       1       0       0       0       0       0       0
  7931 ;;      Temps:          0       1       0       0       0       0       0       0
  7932 ;;      Totals:         0       2       0       0       0       0       0       0
  7933 ;;Total ram usage:        2 bytes
  7934 ;; Hardware stack levels used: 1
  7935 ;; Hardware stack levels required when called: 7
  7936 ;; This function calls:
  7937 ;;		Nothing
  7938 ;; This function is called by:
  7939 ;;		_Modbus_sendTxBuff
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943     0737                     _EUSART_Write:	
  7944                           ;psect for function _EUSART_Write
  7945                           
  7946                           
  7947                           ;incstack = 0
  7948                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  7949                           ;EUSART_Write@txData stored from wreg
  7950     0737  0020               	movlb	0	; select bank0
  7951     0738  00A1               	movwf	EUSART_Write@txData
  7952     0739                     l2861:
  7953     0739                     l2863:	
  7954                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  7955                           
  7956                           
  7957                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  7958     0739  086C               	movf	_eusartTxBufferRemaining,w	;volatile
  7959     073A  1903               	btfsc	3,2
  7960     073B  2F3D               	goto	u851
  7961     073C  2F3E               	goto	u850
  7962     073D                     u851:
  7963     073D  2F39               	goto	l2863
  7964     073E                     u850:
  7965     073E                     l642:
  7966                           
  7967                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  7968     073E  0021               	movlb	1	; select bank1
  7969     073F  1A11               	btfsc	17,4	;volatile
  7970     0740  2F42               	goto	u861
  7971     0741  2F43               	goto	u860
  7972     0742                     u861:
  7973     0742  2F48               	goto	l643
  7974     0743                     u860:
  7975     0743                     l2865:
  7976                           
  7977                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  7978     0743  0020               	movlb	0	; select bank0
  7979     0744  0821               	movf	EUSART_Write@txData,w
  7980     0745  0023               	movlb	3	; select bank3
  7981     0746  009A               	movwf	26	;volatile
  7982                           
  7983                           ;mcc_generated_files/eusart.c: 182:     }
  7984     0747  2F5E               	goto	l2877
  7985     0748                     l643:	
  7986                           ;mcc_generated_files/eusart.c: 183:     else
  7987                           
  7988                           
  7989                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  7990     0748  1211               	bcf	17,4	;volatile
  7991     0749                     l2867:
  7992                           
  7993                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  7994     0749  0020               	movlb	0	; select bank0
  7995     074A  086E               	movf	_eusartTxHead,w
  7996     074B  3E40               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  7997     074C  0086               	movwf	6
  7998     074D  3001               	movlw	1	; select bank2/3
  7999     074E  0087               	movwf	7
  8000     074F  0821               	movf	EUSART_Write@txData,w
  8001     0750  0081               	movwf	1
  8002     0751                     l2869:
  8003     0751  3001               	movlw	1
  8004     0752  00A0               	movwf	??_EUSART_Write
  8005     0753  0820               	movf	??_EUSART_Write,w
  8006     0754  07EE               	addwf	_eusartTxHead,f	;volatile
  8007     0755                     l2871:
  8008                           
  8009                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8010     0755  3010               	movlw	16
  8011     0756  026E               	subwf	_eusartTxHead,w	;volatile
  8012     0757  1C03               	skipc
  8013     0758  2F5A               	goto	u871
  8014     0759  2F5B               	goto	u870
  8015     075A                     u871:
  8016     075A  2F5C               	goto	l2875
  8017     075B                     u870:
  8018     075B                     l2873:
  8019                           
  8020                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  8021     075B  01EE               	clrf	_eusartTxHead	;volatile
  8022     075C                     l2875:
  8023                           
  8024                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  8025     075C  3001               	movlw	1
  8026     075D  02EC               	subwf	_eusartTxBufferRemaining,f	;volatile
  8027     075E                     l2877:
  8028                           
  8029                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  8030     075E  0021               	movlb	1	; select bank1
  8031     075F  1611               	bsf	17,4	;volatile
  8032     0760                     l646:
  8033     0760  0008               	return
  8034     0761                     __end_of_EUSART_Write:
  8035                           
  8036                           	psect	text46
  8037     0646                     __ptext46:	
  8038 ;; *************** function _ModbusSlave_Init *****************
  8039 ;; Defined at:
  8040 ;;		line 288 in file "Mobbus_Slave.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;  _SW_Ad          1    wreg     char 
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;  _SW_Ad          1    0[BANK0 ] char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      void 
  8047 ;; Registers used:
  8048 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8054 ;;      Params:         0       0       0       0       0       0       0       0
  8055 ;;      Locals:         0       1       0       0       0       0       0       0
  8056 ;;      Temps:          0       0       0       0       0       0       0       0
  8057 ;;      Totals:         0       1       0       0       0       0       0       0
  8058 ;;Total ram usage:        1 bytes
  8059 ;; Hardware stack levels used: 1
  8060 ;; Hardware stack levels required when called: 7
  8061 ;; This function calls:
  8062 ;;		Nothing
  8063 ;; This function is called by:
  8064 ;;		_Task_MB
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068     0646                     _ModbusSlave_Init:	
  8069                           ;psect for function _ModbusSlave_Init
  8070                           
  8071                           
  8072                           ;incstack = 0
  8073                           ; Regs used in _ModbusSlave_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  8074                           ;ModbusSlave_Init@_SW_Ad stored from wreg
  8075     0646  0020               	movlb	0	; select bank0
  8076     0647  00A0               	movwf	ModbusSlave_Init@_SW_Ad
  8077     0648                     l3597:
  8078                           
  8079                           ;Mobbus_Slave.c: 288: void ModbusSlave_Init(int8_t _SW_Ad);Mobbus_Slave.c: 289: {;Mobbus
      +                          _Slave.c: 290:     SES_Modbus.u8id = (uint8_t) _SW_Ad;
  8080     0648  30D4               	movlw	212
  8081     0649  0086               	movwf	6
  8082     064A  3020               	movlw	32
  8083     064B  0087               	movwf	7
  8084     064C  0820               	movf	ModbusSlave_Init@_SW_Ad,w
  8085     064D  3FC0               	movwi [0]fsr1
  8086                           
  8087                           ;Mobbus_Slave.c: 291:     SES_Modbus.u8txenpin = RS485;
  8088     064E  30D5               	movlw	213
  8089     064F  0086               	movwf	6
  8090     0650  3020               	movlw	32
  8091     0651  0087               	movwf	7
  8092     0652  3002               	movlw	2
  8093     0653  0081               	movwf	1
  8094     0654                     l3599:
  8095                           
  8096                           ;Mobbus_Slave.c: 292:     SES_Modbus.u16timeOut = 1000;
  8097     0654  30DC               	movlw	220
  8098     0655  0086               	movwf	6
  8099     0656  3021               	movlw	33
  8100     0657  0087               	movwf	7
  8101     0658  30E8               	movlw	232
  8102     0659  3FC0               	movwi [0]fsr1
  8103     065A  3003               	movlw	3
  8104     065B  3FC1               	movwi [1]fsr1
  8105     065C                     l3601:
  8106                           
  8107                           ;Mobbus_Slave.c: 293:     SES_Modbus.u32overTime = 0;
  8108     065C  30E6               	movlw	230
  8109     065D  0086               	movwf	6
  8110     065E  3021               	movlw	33
  8111     065F  0087               	movwf	7
  8112     0660  3000               	movlw	0
  8113     0661  3FC0               	movwi [0]fsr1
  8114     0662  3FC1               	movwi [1]fsr1
  8115     0663  3FC2               	movwi [2]fsr1
  8116     0664  3FC3               	movwi [3]fsr1
  8117     0665                     l3603:
  8118                           
  8119                           ;Mobbus_Slave.c: 297:     SES_Modbus.u8lastRec = SES_Modbus.u8BufferSize = 0;
  8120     0665  30D2               	movlw	210
  8121     0666  0086               	movwf	6
  8122     0667  3021               	movlw	33
  8123     0668  0087               	movwf	7
  8124     0669  0181               	clrf	1
  8125     066A  30D3               	movlw	211
  8126     066B  0086               	movwf	6
  8127     066C  3021               	movlw	33
  8128     066D  0087               	movwf	7
  8129     066E  0181               	clrf	1
  8130     066F                     l3605:
  8131                           
  8132                           ;Mobbus_Slave.c: 298:     SES_Modbus.u16InCnt = SES_Modbus.u16OutCnt = SES_Modbus.u16err
      +                          Cnt = 0;
  8133     066F  30DA               	movlw	218
  8134     0670  0086               	movwf	6
  8135     0671  3021               	movlw	33
  8136     0672  0087               	movwf	7
  8137     0673  3000               	movlw	0
  8138     0674  3FC0               	movwi [0]fsr1
  8139     0675  3FC1               	movwi [1]fsr1
  8140     0676  30D8               	movlw	216
  8141     0677  0086               	movwf	6
  8142     0678  3021               	movlw	33
  8143     0679  0087               	movwf	7
  8144     067A  3000               	movlw	0
  8145     067B  3FC0               	movwi [0]fsr1
  8146     067C  3FC1               	movwi [1]fsr1
  8147     067D  30D6               	movlw	214
  8148     067E  0086               	movwf	6
  8149     067F  3021               	movlw	33
  8150     0680  0087               	movwf	7
  8151     0681  3000               	movlw	0
  8152     0682  3FC0               	movwi [0]fsr1
  8153     0683  3FC1               	movwi [1]fsr1
  8154     0684                     l975:
  8155     0684  0008               	return
  8156     0685                     __end_of_ModbusSlave_Init:
  8157                           
  8158                           	psect	text47
  8159     0FDC                     __ptext47:	
  8160 ;; *************** function _Task_Indicator *****************
  8161 ;; Defined at:
  8162 ;;		line 57 in file "MCU.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;		None
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;		None
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  1    wreg      void 
  8169 ;; Registers used:
  8170 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8171 ;; Tracked objects:
  8172 ;;		On entry : 0/0
  8173 ;;		On exit  : 0/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8176 ;;      Params:         0       0       0       0       0       0       0       0
  8177 ;;      Locals:         0       0       0       0       0       0       0       0
  8178 ;;      Temps:          0       2       0       0       0       0       0       0
  8179 ;;      Totals:         0       2       0       0       0       0       0       0
  8180 ;;Total ram usage:        2 bytes
  8181 ;; Hardware stack levels used: 1
  8182 ;; Hardware stack levels required when called: 7
  8183 ;; This function calls:
  8184 ;;		Nothing
  8185 ;; This function is called by:
  8186 ;;		_App_Process
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190     0FDC                     _Task_Indicator:	
  8191                           ;psect for function _Task_Indicator
  8192                           
  8193     0FDC                     l3767:	
  8194                           ;incstack = 0
  8195                           ; Regs used in _Task_Indicator: [wreg-fsr0h+status,2+status,0]
  8196                           
  8197                           
  8198                           ;MCU.c: 59:     switch (f_Indicator)
  8199     0FDC  2FE9               	goto	l3771
  8200     0FDD                     l849:	
  8201                           ;MCU.c: 62:         {;MCU.c: 63:             do { LATCbits.LATC1 = 1; } while(0);
  8202                           
  8203     0FDD  0022               	movlb	2	; select bank2
  8204     0FDE  148E               	bsf	14,1	;volatile
  8205     0FDF                     l851:	
  8206                           ;MCU.c: 64:             do { LATCbits.LATC0 = 1; } while(0);
  8207                           
  8208     0FDF  140E               	bsf	14,0	;volatile
  8209     0FE0  2FFF               	goto	l864
  8210     0FE1                     l855:	
  8211                           ;MCU.c: 68:         {;MCU.c: 69:             do { LATCbits.LATC1 = 0; } while(0);
  8212                           
  8213     0FE1  0022               	movlb	2	; select bank2
  8214     0FE2  108E               	bcf	14,1	;volatile
  8215     0FE3                     l857:	
  8216                           ;MCU.c: 70:             do { LATCbits.LATC0 = 1; } while(0);
  8217                           
  8218     0FE3  140E               	bsf	14,0	;volatile
  8219     0FE4  2FFF               	goto	l864
  8220     0FE5                     l860:	
  8221                           ;MCU.c: 74:         {;MCU.c: 75:             do { LATCbits.LATC1 = 1; } while(0);
  8222                           
  8223     0FE5  0022               	movlb	2	; select bank2
  8224     0FE6  148E               	bsf	14,1	;volatile
  8225     0FE7                     l862:	
  8226                           ;MCU.c: 76:             do { LATCbits.LATC0 = 0; } while(0);
  8227                           
  8228     0FE7  100E               	bcf	14,0	;volatile
  8229     0FE8  2FFF               	goto	l864
  8230     0FE9                     l3771:
  8231     0FE9  0020               	movlb	0	; select bank0
  8232     0FEA  0867               	movf	_f_Indicator,w
  8233     0FEB  00A0               	movwf	??_Task_Indicator
  8234     0FEC  01A1               	clrf	??_Task_Indicator+1
  8235     0FED  1BA0               	btfsc	??_Task_Indicator,7
  8236     0FEE  03A1               	decf	??_Task_Indicator+1,f
  8237                           
  8238                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8239                           ; Switch size 1, requested type "simple"
  8240                           ; Number of cases is 1, Range of values is 0 to 0
  8241                           ; switch strategies available:
  8242                           ; Name         Instructions Cycles
  8243                           ; simple_byte            4     3 (average)
  8244                           ; direct_byte            8     6 (fixed)
  8245                           ; jumptable            260     6 (fixed)
  8246                           ;	Chosen strategy is simple_byte
  8247     0FEF  0821               	movf	??_Task_Indicator+1,w
  8248     0FF0  3A00               	xorlw	0	; case 0
  8249     0FF1  1903               	skipnz
  8250     0FF2  2FF4               	goto	l4107
  8251     0FF3  2FFF               	goto	l864
  8252     0FF4                     l4107:
  8253                           
  8254                           ; Switch size 1, requested type "simple"
  8255                           ; Number of cases is 3, Range of values is 0 to 2
  8256                           ; switch strategies available:
  8257                           ; Name         Instructions Cycles
  8258                           ; simple_byte           10     6 (average)
  8259                           ; direct_byte           12     6 (fixed)
  8260                           ; jumptable            260     6 (fixed)
  8261                           ;	Chosen strategy is simple_byte
  8262     0FF4  0820               	movf	??_Task_Indicator,w
  8263     0FF5  3A00               	xorlw	0	; case 0
  8264     0FF6  1903               	skipnz
  8265     0FF7  2FDD               	goto	l849
  8266     0FF8  3A01               	xorlw	1	; case 1
  8267     0FF9  1903               	skipnz
  8268     0FFA  2FE1               	goto	l855
  8269     0FFB  3A03               	xorlw	3	; case 2
  8270     0FFC  1903               	skipnz
  8271     0FFD  2FE5               	goto	l860
  8272     0FFE  2FFF               	goto	l864
  8273     0FFF                     l864:
  8274     0FFF  0008               	return
  8275     1000                     __end_of_Task_Indicator:
  8276                           
  8277                           	psect	text48
  8278     0D78                     __ptext48:	
  8279 ;; *************** function _App_Init *****************
  8280 ;; Defined at:
  8281 ;;		line 95 in file "MCU.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;		None
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;		None
  8286 ;; Return value:  Size  Location     Type
  8287 ;;                  1    wreg      void 
  8288 ;; Registers used:
  8289 ;;		wreg, status,2, status,0, pclath, cstack
  8290 ;; Tracked objects:
  8291 ;;		On entry : 0/0
  8292 ;;		On exit  : 0/0
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8295 ;;      Params:         0       0       0       0       0       0       0       0
  8296 ;;      Locals:         0       0       0       0       0       0       0       0
  8297 ;;      Temps:          0       0       0       0       0       0       0       0
  8298 ;;      Totals:         0       0       0       0       0       0       0       0
  8299 ;;Total ram usage:        0 bytes
  8300 ;; Hardware stack levels used: 1
  8301 ;; Hardware stack levels required when called: 9
  8302 ;; This function calls:
  8303 ;;		_Device_Init
  8304 ;;		_TMR1_StartTimer
  8305 ;;		_Tick_Init_SES
  8306 ;; This function is called by:
  8307 ;;		_main
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311     0D78                     _App_Init:	
  8312                           ;psect for function _App_Init
  8313                           
  8314     0D78                     l3825:	
  8315                           ;incstack = 0
  8316                           ; Regs used in _App_Init: [wreg+status,2+status,0+pclath+cstack]
  8317                           
  8318                           
  8319                           ;MCU.c: 97:     Device_Init();
  8320     0D78  3186  2685  318D   	fcall	_Device_Init
  8321     0D7B                     l3827:
  8322                           
  8323                           ;MCU.c: 98:     TMR1_StartTimer();
  8324     0D7B  318C  249A  318D   	fcall	_TMR1_StartTimer
  8325     0D7E                     l3829:
  8326                           
  8327                           ;MCU.c: 99:     Tick_Init_SES();
  8328     0D7E  318E  266E  318D   	fcall	_Tick_Init_SES
  8329     0D81                     l878:
  8330     0D81  0008               	return
  8331     0D82                     __end_of_App_Init:
  8332                           
  8333                           	psect	text49
  8334     0E6E                     __ptext49:	
  8335 ;; *************** function _Tick_Init_SES *****************
  8336 ;; Defined at:
  8337 ;;		line 6 in file "tick.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;		None
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;		None
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  1    wreg      void 
  8344 ;; Registers used:
  8345 ;;		wreg, status,2, status,0, pclath, cstack
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8351 ;;      Params:         0       0       0       0       0       0       0       0
  8352 ;;      Locals:         0       0       0       0       0       0       0       0
  8353 ;;      Temps:          0       0       0       0       0       0       0       0
  8354 ;;      Totals:         0       0       0       0       0       0       0       0
  8355 ;;Total ram usage:        0 bytes
  8356 ;; Hardware stack levels used: 1
  8357 ;; Hardware stack levels required when called: 8
  8358 ;; This function calls:
  8359 ;;		_TMR1_SetInterruptHandler
  8360 ;; This function is called by:
  8361 ;;		_App_Init
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365     0E6E                     _Tick_Init_SES:	
  8366                           ;psect for function _Tick_Init_SES
  8367                           
  8368     0E6E                     l3781:	
  8369                           ;incstack = 0
  8370                           ; Regs used in _Tick_Init_SES: [wreg+status,2+status,0+pclath+cstack]
  8371                           
  8372                           
  8373                           ;tick.c: 8:     device_time = 0;
  8374     0E6E  3000               	movlw	0
  8375     0E6F  0021               	movlb	1	; select bank1
  8376     0E70  00C0               	movwf	(_device_time+3)^(0+128)	;volatile
  8377     0E71  3000               	movlw	0
  8378     0E72  00BF               	movwf	(_device_time+2)^(0+128)	;volatile
  8379     0E73  3000               	movlw	0
  8380     0E74  00BE               	movwf	(_device_time+1)^(0+128)	;volatile
  8381     0E75  3000               	movlw	0
  8382     0E76  00BD               	movwf	_device_time^(0+128)	;volatile
  8383     0E77                     l3783:
  8384                           
  8385                           ;tick.c: 9:     TMR1_SetInterruptHandler(&rtcc_handle);
  8386     0E77  306E               	movlw	low _rtcc_handle
  8387     0E78  0020               	movlb	0	; select bank0
  8388     0E79  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  8389     0E7A  300D               	movlw	high _rtcc_handle
  8390     0E7B  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  8391     0E7C  318D  252F  318E   	fcall	_TMR1_SetInterruptHandler
  8392     0E7F                     l989:
  8393     0E7F  0008               	return
  8394     0E80                     __end_of_Tick_Init_SES:
  8395                           
  8396                           	psect	text50
  8397     0D2F                     __ptext50:	
  8398 ;; *************** function _TMR1_SetInterruptHandler *****************
  8399 ;; Defined at:
  8400 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  8403 ;;		 -> rtcc_handle(1), TMR1_DefaultInterruptHandler(1), 
  8404 ;; Auto vars:     Size  Location     Type
  8405 ;;		None
  8406 ;; Return value:  Size  Location     Type
  8407 ;;                  1    wreg      void 
  8408 ;; Registers used:
  8409 ;;		wreg
  8410 ;; Tracked objects:
  8411 ;;		On entry : 0/0
  8412 ;;		On exit  : 0/0
  8413 ;;		Unchanged: 0/0
  8414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8415 ;;      Params:         0       2       0       0       0       0       0       0
  8416 ;;      Locals:         0       0       0       0       0       0       0       0
  8417 ;;      Temps:          0       0       0       0       0       0       0       0
  8418 ;;      Totals:         0       2       0       0       0       0       0       0
  8419 ;;Total ram usage:        2 bytes
  8420 ;; Hardware stack levels used: 1
  8421 ;; Hardware stack levels required when called: 7
  8422 ;; This function calls:
  8423 ;;		Nothing
  8424 ;; This function is called by:
  8425 ;;		_TMR1_Initialize
  8426 ;;		_Tick_Init_SES
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430     0D2F                     _TMR1_SetInterruptHandler:	
  8431                           ;psect for function _TMR1_SetInterruptHandler
  8432                           
  8433     0D2F                     l3575:	
  8434                           ;incstack = 0
  8435                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  8436                           
  8437                           
  8438                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  8439     0D2F  0020               	movlb	0	; select bank0
  8440     0D30  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  8441     0D31  0021               	movlb	1	; select bank1
  8442     0D32  00CE               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  8443     0D33  0020               	movlb	0	; select bank0
  8444     0D34  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  8445     0D35  0021               	movlb	1	; select bank1
  8446     0D36  00CD               	movwf	_TMR1_InterruptHandler^(0+128)
  8447     0D37                     l749:
  8448     0D37  0008               	return
  8449     0D38                     __end_of_TMR1_SetInterruptHandler:
  8450                           
  8451                           	psect	text51
  8452     0C9A                     __ptext51:	
  8453 ;; *************** function _TMR1_StartTimer *****************
  8454 ;; Defined at:
  8455 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;		None
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;		None
  8460 ;; Return value:  Size  Location     Type
  8461 ;;                  1    wreg      void 
  8462 ;; Registers used:
  8463 ;;		None
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8469 ;;      Params:         0       0       0       0       0       0       0       0
  8470 ;;      Locals:         0       0       0       0       0       0       0       0
  8471 ;;      Temps:          0       0       0       0       0       0       0       0
  8472 ;;      Totals:         0       0       0       0       0       0       0       0
  8473 ;;Total ram usage:        0 bytes
  8474 ;; Hardware stack levels used: 1
  8475 ;; Hardware stack levels required when called: 7
  8476 ;; This function calls:
  8477 ;;		Nothing
  8478 ;; This function is called by:
  8479 ;;		_App_Init
  8480 ;; This function uses a non-reentrant model
  8481 ;;
  8482                           
  8483     0C9A                     _TMR1_StartTimer:	
  8484                           ;psect for function _TMR1_StartTimer
  8485                           
  8486     0C9A                     l3719:	
  8487                           ;incstack = 0
  8488                           ; Regs used in _TMR1_StartTimer: []
  8489                           
  8490                           
  8491                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  8492     0C9A  0020               	movlb	0	; select bank0
  8493     0C9B  1418               	bsf	24,0	;volatile
  8494     0C9C                     l719:
  8495     0C9C  0008               	return
  8496     0C9D                     __end_of_TMR1_StartTimer:
  8497                           
  8498                           	psect	text52
  8499     0685                     __ptext52:	
  8500 ;; *************** function _Device_Init *****************
  8501 ;; Defined at:
  8502 ;;		line 82 in file "MCU.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;		None
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;		None
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  1    wreg      void 
  8509 ;; Registers used:
  8510 ;;		wreg, status,2, status,0
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8516 ;;      Params:         0       0       0       0       0       0       0       0
  8517 ;;      Locals:         0       0       0       0       0       0       0       0
  8518 ;;      Temps:          0       3       0       0       0       0       0       0
  8519 ;;      Totals:         0       3       0       0       0       0       0       0
  8520 ;;Total ram usage:        3 bytes
  8521 ;; Hardware stack levels used: 1
  8522 ;; Hardware stack levels required when called: 7
  8523 ;; This function calls:
  8524 ;;		Nothing
  8525 ;; This function is called by:
  8526 ;;		_App_Init
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530     0685                     _Device_Init:	
  8531                           ;psect for function _Device_Init
  8532                           
  8533     0685                     l3777:	
  8534                           ;incstack = 0
  8535                           ; Regs used in _Device_Init: [wreg+status,2+status,0]
  8536                           
  8537                           
  8538                           ;MCU.c: 84:     static int8_t value_SW1, value_SW2, value_SW3, value_SW4;;MCU.c: 86:    
      +                           value_SW1 = PORTAbits.RA0;
  8539     0685  3000               	movlw	0
  8540     0686  0020               	movlb	0	; select bank0
  8541     0687  180C               	btfsc	12,0	;volatile
  8542     0688  3001               	movlw	1
  8543     0689  0021               	movlb	1	; select bank1
  8544     068A  00DC               	movwf	Device_Init@value_SW1^(0+128)
  8545                           
  8546                           ;MCU.c: 87:     value_SW2 = PORTAbits.RA1;
  8547     068B  3000               	movlw	0
  8548     068C  0020               	movlb	0	; select bank0
  8549     068D  188C               	btfsc	12,1	;volatile
  8550     068E  3001               	movlw	1
  8551     068F  0021               	movlb	1	; select bank1
  8552     0690  00DB               	movwf	Device_Init@value_SW2^(0+128)
  8553                           
  8554                           ;MCU.c: 88:     value_SW3 = PORTAbits.RA2;
  8555     0691  3000               	movlw	0
  8556     0692  0020               	movlb	0	; select bank0
  8557     0693  190C               	btfsc	12,2	;volatile
  8558     0694  3001               	movlw	1
  8559     0695  0021               	movlb	1	; select bank1
  8560     0696  00DA               	movwf	Device_Init@value_SW3^(0+128)
  8561                           
  8562                           ;MCU.c: 89:     value_SW4 = PORTAbits.RA3;
  8563     0697  3000               	movlw	0
  8564     0698  0020               	movlb	0	; select bank0
  8565     0699  198C               	btfsc	12,3	;volatile
  8566     069A  3001               	movlw	1
  8567     069B  0021               	movlb	1	; select bank1
  8568     069C  00D9               	movwf	Device_Init@value_SW4^(0+128)
  8569     069D                     l3779:
  8570                           
  8571                           ;MCU.c: 92:     SW_Ad = (((value_SW1 & 0x01) | (value_SW2 & 0x02) | (value_SW3 & 0x04) |
      +                           (value_SW4 & 0x08)) & (0xFF));
  8572     069D  3008               	movlw	8
  8573     069E  0559               	andwf	Device_Init@value_SW4^(0+128),w
  8574     069F  0020               	movlb	0	; select bank0
  8575     06A0  00A0               	movwf	??_Device_Init
  8576     06A1  3004               	movlw	4
  8577     06A2  0021               	movlb	1	; select bank1
  8578     06A3  055A               	andwf	Device_Init@value_SW3^(0+128),w
  8579     06A4  0020               	movlb	0	; select bank0
  8580     06A5  00A1               	movwf	??_Device_Init+1
  8581     06A6  3002               	movlw	2
  8582     06A7  0021               	movlb	1	; select bank1
  8583     06A8  055B               	andwf	Device_Init@value_SW2^(0+128),w
  8584     06A9  0020               	movlb	0	; select bank0
  8585     06AA  00A2               	movwf	??_Device_Init+2
  8586     06AB  0021               	movlb	1	; select bank1
  8587     06AC  085C               	movf	Device_Init@value_SW1^(0+128),w
  8588     06AD  3901               	andlw	1
  8589     06AE  0020               	movlb	0	; select bank0
  8590     06AF  0422               	iorwf	??_Device_Init+2,w
  8591     06B0  0421               	iorwf	??_Device_Init+1,w
  8592     06B1  0420               	iorwf	??_Device_Init,w
  8593     06B2  00EF               	movwf	_SW_Ad
  8594     06B3                     l875:
  8595     06B3  0008               	return
  8596     06B4                     __end_of_Device_Init:
  8597                           
  8598                           	psect	intentry
  8599     0004                     __pintentry:	
  8600 ;; *************** function _INTERRUPT_InterruptManager *****************
  8601 ;; Defined at:
  8602 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;		None
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;		None
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  1    wreg      void 
  8609 ;; Registers used:
  8610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8616 ;;      Params:         0       0       0       0       0       0       0       0
  8617 ;;      Locals:         0       0       0       0       0       0       0       0
  8618 ;;      Temps:          0       0       0       0       0       0       0       0
  8619 ;;      Totals:         0       0       0       0       0       0       0       0
  8620 ;;Total ram usage:        0 bytes
  8621 ;; Hardware stack levels used: 1
  8622 ;; Hardware stack levels required when called: 6
  8623 ;; This function calls:
  8624 ;;		NULL
  8625 ;;		_EUSART_Receive_ISR
  8626 ;;		_EUSART_Transmit_ISR
  8627 ;;		_I2C_MasterIsr
  8628 ;;		_TMR1_ISR
  8629 ;; This function is called by:
  8630 ;;		Interrupt level 1
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634     0004                     _INTERRUPT_InterruptManager:
  8635                           
  8636                           ;incstack = 0
  8637     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  8638                           
  8639                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8640     0005  3180               	pagesel	$
  8641     0006                     i1l3943:
  8642                           
  8643                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  8644     0006  1F0B               	btfss	11,6	;volatile
  8645     0007  2809               	goto	u156_21
  8646     0008  280A               	goto	u156_20
  8647     0009                     u156_21:
  8648     0009  2855               	goto	i1l543
  8649     000A                     u156_20:
  8650     000A                     i1l3945:
  8651                           
  8652                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  8653     000A  0021               	movlb	1	; select bank1
  8654     000B  1E11               	btfss	17,4	;volatile
  8655     000C  280E               	goto	u157_21
  8656     000D  280F               	goto	u157_20
  8657     000E                     u157_21:
  8658     000E  281B               	goto	i1l532
  8659     000F                     u157_20:
  8660     000F                     i1l3947:
  8661     000F  0020               	movlb	0	; select bank0
  8662     0010  1E11               	btfss	17,4	;volatile
  8663     0011  2813               	goto	u158_21
  8664     0012  2814               	goto	u158_20
  8665     0013                     u158_21:
  8666     0013  281B               	goto	i1l532
  8667     0014                     u158_20:
  8668     0014                     i1l3949:
  8669                           
  8670                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  8671     0014  0021               	movlb	1	; select bank1
  8672     0015  0858               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
  8673     0016  008A               	movwf	10
  8674     0017  0857               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
  8675     0018  000A               	callw
  8676     0019  3180               	pagesel	$
  8677                           
  8678                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  8679     001A  2855               	goto	i1l543
  8680     001B                     i1l532:	
  8681                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  8682                           
  8683     001B  0021               	movlb	1	; select bank1
  8684     001C  1E91               	btfss	17,5	;volatile
  8685     001D  281F               	goto	u159_21
  8686     001E  2820               	goto	u159_20
  8687     001F                     u159_21:
  8688     001F  282C               	goto	i1l534
  8689     0020                     u159_20:
  8690     0020                     i1l3951:
  8691     0020  0020               	movlb	0	; select bank0
  8692     0021  1E91               	btfss	17,5	;volatile
  8693     0022  2824               	goto	u160_21
  8694     0023  2825               	goto	u160_20
  8695     0024                     u160_21:
  8696     0024  282C               	goto	i1l534
  8697     0025                     u160_20:
  8698     0025                     i1l3953:
  8699                           
  8700                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  8701     0025  0021               	movlb	1	; select bank1
  8702     0026  0856               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  8703     0027  008A               	movwf	10
  8704     0028  0855               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  8705     0029  000A               	callw
  8706     002A  3180               	pagesel	$
  8707                           
  8708                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  8709     002B  2855               	goto	i1l543
  8710     002C                     i1l534:	
  8711                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE2bits.BCLIE == 1 && PIR
      +                          2bits.BCLIF == 1)
  8712                           
  8713     002C  0021               	movlb	1	; select bank1
  8714     002D  1D92               	btfss	18,3	;volatile
  8715     002E  2830               	goto	u161_21
  8716     002F  2831               	goto	u161_20
  8717     0030                     u161_21:
  8718     0030  283C               	goto	i1l536
  8719     0031                     u161_20:
  8720     0031                     i1l3955:
  8721     0031  0020               	movlb	0	; select bank0
  8722     0032  1D92               	btfss	18,3	;volatile
  8723     0033  2835               	goto	u162_21
  8724     0034  2836               	goto	u162_20
  8725     0035                     u162_21:
  8726     0035  283C               	goto	i1l536
  8727     0036                     u162_20:
  8728     0036                     i1l3957:
  8729                           
  8730                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             MSSP_InterruptHandler();
  8731     0036  0864               	movf	_MSSP_InterruptHandler+1,w
  8732     0037  008A               	movwf	10
  8733     0038  0863               	movf	_MSSP_InterruptHandler,w
  8734     0039  000A               	callw
  8735     003A  3180               	pagesel	$
  8736                           
  8737                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  8738     003B  2855               	goto	i1l543
  8739     003C                     i1l536:	
  8740                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.SSPIE == 1 && PIR
      +                          1bits.SSPIF == 1)
  8741                           
  8742     003C  0021               	movlb	1	; select bank1
  8743     003D  1D91               	btfss	17,3	;volatile
  8744     003E  2840               	goto	u163_21
  8745     003F  2841               	goto	u163_20
  8746     0040                     u163_21:
  8747     0040  2847               	goto	i1l538
  8748     0041                     u163_20:
  8749     0041                     i1l3959:
  8750     0041  0020               	movlb	0	; select bank0
  8751     0042  1D91               	btfss	17,3	;volatile
  8752     0043  2845               	goto	u164_21
  8753     0044  2846               	goto	u164_20
  8754     0045                     u164_21:
  8755     0045  2847               	goto	i1l538
  8756     0046                     u164_20:
  8757     0046  2836               	goto	i1l3957
  8758     0047                     i1l538:	
  8759                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
  8760                           
  8761     0047  0021               	movlb	1	; select bank1
  8762     0048  1C11               	btfss	17,0	;volatile
  8763     0049  284B               	goto	u165_21
  8764     004A  284C               	goto	u165_20
  8765     004B                     u165_21:
  8766     004B  2855               	goto	i1l537
  8767     004C                     u165_20:
  8768     004C                     i1l3963:
  8769     004C  0020               	movlb	0	; select bank0
  8770     004D  1C11               	btfss	17,0	;volatile
  8771     004E  2850               	goto	u166_21
  8772     004F  2851               	goto	u166_20
  8773     0050                     u166_21:
  8774     0050  2855               	goto	i1l537
  8775     0051                     u166_20:
  8776     0051                     i1l3965:
  8777                           
  8778                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR1_ISR();
  8779     0051  318D  25E0  3180   	fcall	_TMR1_ISR
  8780                           
  8781                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  8782     0054  2855               	goto	i1l543
  8783     0055                     i1l537:
  8784     0055                     i1l543:
  8785     0055  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8786     0056  0009               	retfie
  8787     0057                     __end_of_INTERRUPT_InterruptManager:
  8788                           
  8789                           	psect	text54
  8790     0DE0                     __ptext54:	
  8791 ;; *************** function _TMR1_ISR *****************
  8792 ;; Defined at:
  8793 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		wreg, status,2, status,0, pclath, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8807 ;;      Params:         0       0       0       0       0       0       0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0       0
  8810 ;;      Totals:         0       0       0       0       0       0       0       0
  8811 ;;Total ram usage:        0 bytes
  8812 ;; Hardware stack levels used: 1
  8813 ;; Hardware stack levels required when called: 2
  8814 ;; This function calls:
  8815 ;;		_TMR1_CallBack
  8816 ;;		_TMR1_WriteTimer
  8817 ;; This function is called by:
  8818 ;;		_INTERRUPT_InterruptManager
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822     0DE0                     _TMR1_ISR:	
  8823                           ;psect for function _TMR1_ISR
  8824                           
  8825     0DE0                     i1l3789:	
  8826                           ;incstack = 0
  8827                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  8828                           
  8829                           
  8830                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  8831     0DE0  0020               	movlb	0	; select bank0
  8832     0DE1  1011               	bcf	17,0	;volatile
  8833     0DE2                     i1l3791:
  8834                           
  8835                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  8836     0DE2  087D               	movf	_timer1ReloadVal+1,w	;volatile
  8837     0DE3  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  8838     0DE4  087C               	movf	_timer1ReloadVal,w	;volatile
  8839     0DE5  00F0               	movwf	TMR1_WriteTimer@timerVal
  8840     0DE6  318E  264C  318D   	fcall	_TMR1_WriteTimer
  8841                           
  8842                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
  8843     0DE9  318D  25D3  318D   	fcall	_TMR1_CallBack
  8844     0DEC                     i1l742:
  8845     0DEC  0008               	return
  8846     0DED                     __end_of_TMR1_ISR:
  8847                           
  8848                           	psect	text55
  8849     0E4C                     __ptext55:	
  8850 ;; *************** function _TMR1_WriteTimer *****************
  8851 ;; Defined at:
  8852 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  8853 ;; Parameters:    Size  Location     Type
  8854 ;;  timerVal        2    0[COMMON] unsigned short 
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;		None
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      void 
  8859 ;; Registers used:
  8860 ;;		wreg, status,2
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8866 ;;      Params:         2       0       0       0       0       0       0       0
  8867 ;;      Locals:         0       0       0       0       0       0       0       0
  8868 ;;      Temps:          0       0       0       0       0       0       0       0
  8869 ;;      Totals:         2       0       0       0       0       0       0       0
  8870 ;;Total ram usage:        2 bytes
  8871 ;; Hardware stack levels used: 1
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_TMR1_ISR
  8876 ;;		_TMR1_Reload
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880     0E4C                     _TMR1_WriteTimer:	
  8881                           ;psect for function _TMR1_WriteTimer
  8882                           
  8883     0E4C                     i1l3721:	
  8884                           ;incstack = 0
  8885                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  8886                           
  8887                           
  8888                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  8889     0E4C  0020               	movlb	0	; select bank0
  8890     0E4D  1D18               	btfss	24,2	;volatile
  8891     0E4E  2E50               	goto	u134_21
  8892     0E4F  2E51               	goto	u134_20
  8893     0E50                     u134_21:
  8894     0E50  2E58               	goto	i1l3731
  8895     0E51                     u134_20:
  8896     0E51                     i1l3723:
  8897                           
  8898                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  8899     0E51  1018               	bcf	24,0	;volatile
  8900     0E52                     i1l3725:
  8901                           
  8902                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (uint8_t)(timerVal >> 8);
  8903     0E52  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  8904     0E53  0097               	movwf	23	;volatile
  8905     0E54                     i1l3727:
  8906                           
  8907                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = (uint8_t)timerVal;
  8908     0E54  0870               	movf	TMR1_WriteTimer@timerVal,w
  8909     0E55  0096               	movwf	22	;volatile
  8910     0E56                     i1l3729:
  8911                           
  8912                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  8913     0E56  1418               	bsf	24,0	;volatile
  8914                           
  8915                           ;mcc_generated_files/tmr1.c: 133:     }
  8916     0E57  2E5C               	goto	i1l730
  8917     0E58                     i1l3731:
  8918                           
  8919                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
  8920     0E58  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  8921     0E59  0097               	movwf	23	;volatile
  8922     0E5A                     i1l3733:
  8923                           
  8924                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = (uint8_t)timerVal;
  8925     0E5A  0870               	movf	TMR1_WriteTimer@timerVal,w
  8926     0E5B  0096               	movwf	22	;volatile
  8927     0E5C                     i1l730:
  8928     0E5C  0008               	return
  8929     0E5D                     __end_of_TMR1_WriteTimer:
  8930                           
  8931                           	psect	text56
  8932     0DD3                     __ptext56:	
  8933 ;; *************** function _TMR1_CallBack *****************
  8934 ;; Defined at:
  8935 ;;		line 169 in file "mcc_generated_files/tmr1.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  1    wreg      void 
  8942 ;; Registers used:
  8943 ;;		wreg, status,2, status,0, pclath, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8949 ;;      Params:         0       0       0       0       0       0       0       0
  8950 ;;      Locals:         0       0       0       0       0       0       0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0
  8952 ;;      Totals:         0       0       0       0       0       0       0       0
  8953 ;;Total ram usage:        0 bytes
  8954 ;; Hardware stack levels used: 1
  8955 ;; Hardware stack levels required when called: 1
  8956 ;; This function calls:
  8957 ;;		NULL
  8958 ;;		_TMR1_DefaultInterruptHandler
  8959 ;;		_rtcc_handle
  8960 ;; This function is called by:
  8961 ;;		_TMR1_ISR
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965     0DD3                     _TMR1_CallBack:	
  8966                           ;psect for function _TMR1_CallBack
  8967                           
  8968     0DD3                     i1l3735:	
  8969                           ;incstack = 0
  8970                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  8971                           
  8972                           
  8973                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
  8974     0DD3  0021               	movlb	1	; select bank1
  8975     0DD4  084D               	movf	_TMR1_InterruptHandler^(0+128),w
  8976     0DD5  044E               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  8977     0DD6  1903               	btfsc	3,2
  8978     0DD7  2DD9               	goto	u135_21
  8979     0DD8  2DDA               	goto	u135_20
  8980     0DD9                     u135_21:
  8981     0DD9  2DDF               	goto	i1l746
  8982     0DDA                     u135_20:
  8983     0DDA                     i1l3737:
  8984                           
  8985                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
  8986     0DDA  084E               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  8987     0DDB  008A               	movwf	10
  8988     0DDC  084D               	movf	_TMR1_InterruptHandler^(0+128),w
  8989     0DDD  000A               	callw
  8990     0DDE  318D               	pagesel	$
  8991     0DDF                     i1l746:
  8992     0DDF  0008               	return
  8993     0DE0                     __end_of_TMR1_CallBack:
  8994                           
  8995                           	psect	text57
  8996     07FF                     __ptext57:	
  8997 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  8998 ;; Defined at:
  8999 ;;		line 182 in file "mcc_generated_files/tmr1.c"
  9000 ;; Parameters:    Size  Location     Type
  9001 ;;		None
  9002 ;; Auto vars:     Size  Location     Type
  9003 ;;		None
  9004 ;; Return value:  Size  Location     Type
  9005 ;;                  1    wreg      void 
  9006 ;; Registers used:
  9007 ;;		None
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9013 ;;      Params:         0       0       0       0       0       0       0       0
  9014 ;;      Locals:         0       0       0       0       0       0       0       0
  9015 ;;      Temps:          0       0       0       0       0       0       0       0
  9016 ;;      Totals:         0       0       0       0       0       0       0       0
  9017 ;;Total ram usage:        0 bytes
  9018 ;; Hardware stack levels used: 1
  9019 ;; This function calls:
  9020 ;;		Nothing
  9021 ;; This function is called by:
  9022 ;;		_TMR1_Initialize
  9023 ;;		_TMR1_CallBack
  9024 ;; This function uses a non-reentrant model
  9025 ;;
  9026                           
  9027     07FF                     _TMR1_DefaultInterruptHandler:	
  9028                           ;psect for function _TMR1_DefaultInterruptHandler
  9029                           
  9030     07FF                     i1l752:	
  9031                           ;incstack = 0
  9032                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  9033                           
  9034     07FF  0008               	return
  9035     0800                     __end_of_TMR1_DefaultInterruptHandler:
  9036                           
  9037                           	psect	text58
  9038     0D6E                     __ptext58:	
  9039 ;; *************** function _rtcc_handle *****************
  9040 ;; Defined at:
  9041 ;;		line 12 in file "tick.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;		None
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;		None
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  1    wreg      void 
  9048 ;; Registers used:
  9049 ;;		wreg
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9055 ;;      Params:         0       0       0       0       0       0       0       0
  9056 ;;      Locals:         0       0       0       0       0       0       0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0
  9058 ;;      Totals:         0       0       0       0       0       0       0       0
  9059 ;;Total ram usage:        0 bytes
  9060 ;; Hardware stack levels used: 1
  9061 ;; This function calls:
  9062 ;;		Nothing
  9063 ;; This function is called by:
  9064 ;;		_Tick_Init_SES
  9065 ;;		_TMR1_CallBack
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069     0D6E                     _rtcc_handle:	
  9070                           ;psect for function _rtcc_handle
  9071                           
  9072     0D6E                     i1l3613:	
  9073                           ;incstack = 0
  9074                           ; Regs used in _rtcc_handle: [wreg]
  9075                           
  9076                           
  9077                           ;tick.c: 14:     device_time++;
  9078     0D6E  3001               	movlw	1
  9079     0D6F  0021               	movlb	1	; select bank1
  9080     0D70  07BD               	addwf	_device_time^(0+128),f	;volatile
  9081     0D71  3000               	movlw	0
  9082     0D72  3DBE               	addwfc	(_device_time+1)^(0+128),f	;volatile
  9083     0D73  3000               	movlw	0
  9084     0D74  3DBF               	addwfc	(_device_time+2)^(0+128),f	;volatile
  9085     0D75  3000               	movlw	0
  9086     0D76  3DC0               	addwfc	(_device_time+3)^(0+128),f	;volatile
  9087     0D77                     i1l992:
  9088     0D77  0008               	return
  9089     0D78                     __end_of_rtcc_handle:
  9090                           
  9091                           	psect	text59
  9092     0CBC                     __ptext59:	
  9093 ;; *************** function _I2C_MasterIsr *****************
  9094 ;; Defined at:
  9095 ;;		line 318 in file "mcc_generated_files/i2c_master.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;		None
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;		None
  9100 ;; Return value:  Size  Location     Type
  9101 ;;                  1    wreg      void 
  9102 ;; Registers used:
  9103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9104 ;; Tracked objects:
  9105 ;;		On entry : 0/0
  9106 ;;		On exit  : 0/0
  9107 ;;		Unchanged: 0/0
  9108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9109 ;;      Params:         0       0       0       0       0       0       0       0
  9110 ;;      Locals:         0       0       0       0       0       0       0       0
  9111 ;;      Temps:          0       0       0       0       0       0       0       0
  9112 ;;      Totals:         0       0       0       0       0       0       0       0
  9113 ;;Total ram usage:        0 bytes
  9114 ;; Hardware stack levels used: 1
  9115 ;; Hardware stack levels required when called: 5
  9116 ;; This function calls:
  9117 ;;		_I2C_MasterFsm
  9118 ;; This function is called by:
  9119 ;;		_I2C_Open
  9120 ;;		_INTERRUPT_InterruptManager
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124     0CBC                     _I2C_MasterIsr:	
  9125                           ;psect for function _I2C_MasterIsr
  9126                           
  9127     0CBC                     i1l3787:	
  9128                           ;incstack = 0
  9129                           ; Regs used in _I2C_MasterIsr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9130                           
  9131                           
  9132                           ;mcc_generated_files/i2c_master.c: 320:     I2C_MasterFsm();
  9133     0CBC  3187  278A  318C   	fcall	_I2C_MasterFsm
  9134     0CBF                     i1l331:
  9135     0CBF  0008               	return
  9136     0CC0                     __end_of_I2C_MasterIsr:
  9137                           
  9138                           	psect	text60
  9139     078A                     __ptext60:	
  9140 ;; *************** function _I2C_MasterFsm *****************
  9141 ;; Defined at:
  9142 ;;		line 323 in file "mcc_generated_files/i2c_master.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;		None
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;		None
  9147 ;; Return value:  Size  Location     Type
  9148 ;;                  1    wreg      void 
  9149 ;; Registers used:
  9150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9156 ;;      Params:         0       0       0       0       0       0       0       0
  9157 ;;      Locals:         0       0       0       0       0       0       0       0
  9158 ;;      Temps:          2       0       0       0       0       0       0       0
  9159 ;;      Totals:         2       0       0       0       0       0       0       0
  9160 ;;Total ram usage:        2 bytes
  9161 ;; Hardware stack levels used: 1
  9162 ;; Hardware stack levels required when called: 4
  9163 ;; This function calls:
  9164 ;;		_I2C_DO_ADDRESS_NACK
  9165 ;;		_I2C_DO_IDLE
  9166 ;;		_I2C_DO_RCEN
  9167 ;;		_I2C_DO_RESET
  9168 ;;		_I2C_DO_RX
  9169 ;;		_I2C_DO_RX_ACK
  9170 ;;		_I2C_DO_RX_NACK_RESTART
  9171 ;;		_I2C_DO_RX_NACK_STOP
  9172 ;;		_I2C_DO_SEND_ADR_READ
  9173 ;;		_I2C_DO_SEND_ADR_WRITE
  9174 ;;		_I2C_DO_SEND_RESTART
  9175 ;;		_I2C_DO_SEND_RESTART_READ
  9176 ;;		_I2C_DO_SEND_RESTART_WRITE
  9177 ;;		_I2C_DO_SEND_STOP
  9178 ;;		_I2C_DO_TX
  9179 ;;		_I2C_DO_TX_EMPTY
  9180 ;;		_I2C_MasterIsNack
  9181 ;;		i1_I2C_MasterClearIrq
  9182 ;; This function is called by:
  9183 ;;		_I2C_MasterIsr
  9184 ;; This function uses a non-reentrant model
  9185 ;;
  9186                           
  9187     078A                     _I2C_MasterFsm:	
  9188                           ;psect for function _I2C_MasterFsm
  9189                           
  9190     078A                     i1l3705:	
  9191                           ;incstack = 0
  9192                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9193                           
  9194                           
  9195                           ;mcc_generated_files/i2c_master.c: 325:     I2C_MasterClearIrq();
  9196     078A  318C  2497  3187   	fcall	i1_I2C_MasterClearIrq
  9197     078D                     i1l3707:
  9198                           
  9199                           ;mcc_generated_files/i2c_master.c: 327:     if(I2C_Status.addressNackCheck && I2C_Master
      +                          IsNack())
  9200     078D  0021               	movlb	1	; select bank1
  9201     078E  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
  9202     078F  2F91               	goto	u132_21
  9203     0790  2F92               	goto	u132_20
  9204     0791                     u132_21:
  9205     0791  2F9D               	goto	i1l3713
  9206     0792                     u132_20:
  9207     0792                     i1l3709:
  9208     0792  318D  2504  3187   	fcall	_I2C_MasterIsNack
  9209     0795  3A00               	xorlw	0
  9210     0796  1903               	skipnz
  9211     0797  2F99               	goto	u133_21
  9212     0798  2F9A               	goto	u133_20
  9213     0799                     u133_21:
  9214     0799  2F9D               	goto	i1l3713
  9215     079A                     u133_20:
  9216     079A                     i1l3711:
  9217                           
  9218                           ;mcc_generated_files/i2c_master.c: 328:     {;mcc_generated_files/i2c_master.c: 329:    
      +                               I2C_Status.state = I2C_ADDRESS_NACK;
  9219     079A  300F               	movlw	15
  9220     079B  0021               	movlb	1	; select bank1
  9221     079C  00BA               	movwf	(_I2C_Status^(0+128)+26)
  9222     079D                     i1l3713:
  9223                           
  9224                           ;mcc_generated_files/i2c_master.c: 331:     I2C_Status.state = i2c_fsmStateTable[I2C_Sta
      +                          tus.state]();
  9225     079D  0021               	movlb	1	; select bank1
  9226     079E  083A               	movf	(_I2C_Status^(0+128)+26),w
  9227     079F  00FA               	movwf	??_I2C_MasterFsm
  9228     07A0  01FB               	clrf	??_I2C_MasterFsm+1
  9229     07A1  35FA               	lslf	??_I2C_MasterFsm,f
  9230     07A2  0DFB               	rlf	??_I2C_MasterFsm+1,f
  9231     07A3  3000               	movlw	low _i2c_fsmStateTable
  9232     07A4  077A               	addwf	??_I2C_MasterFsm,w
  9233     07A5  0084               	movwf	4
  9234     07A6  3010               	movlw	high _i2c_fsmStateTable
  9235     07A7  3D7B               	addwfc	??_I2C_MasterFsm+1,w
  9236     07A8  3880               	iorlw	128
  9237     07A9  0085               	movwf	5
  9238     07AA  3F01               	moviw [1]fsr0
  9239     07AB  008A               	movwf	10
  9240     07AC  3F00               	moviw [0]fsr0
  9241     07AD  000A               	callw
  9242     07AE  3187               	pagesel	$
  9243     07AF  0021               	movlb	1	; select bank1
  9244     07B0  00BA               	movwf	(_I2C_Status^(0+128)+26)
  9245     07B1                     i1l335:
  9246     07B1  0008               	return
  9247     07B2                     __end_of_I2C_MasterFsm:
  9248                           
  9249                           	psect	text61
  9250     0C97                     __ptext61:	
  9251 ;; *************** function i1_I2C_MasterClearIrq *****************
  9252 ;; Defined at:
  9253 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
  9254 ;; Parameters:    Size  Location     Type
  9255 ;;		None
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;		None
  9258 ;; Return value:  Size  Location     Type
  9259 ;;                  1    wreg      void 
  9260 ;; Registers used:
  9261 ;;		None
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9267 ;;      Params:         0       0       0       0       0       0       0       0
  9268 ;;      Locals:         0       0       0       0       0       0       0       0
  9269 ;;      Temps:          0       0       0       0       0       0       0       0
  9270 ;;      Totals:         0       0       0       0       0       0       0       0
  9271 ;;Total ram usage:        0 bytes
  9272 ;; Hardware stack levels used: 1
  9273 ;; This function calls:
  9274 ;;		Nothing
  9275 ;; This function is called by:
  9276 ;;		_I2C_MasterFsm
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280     0C97                     i1_I2C_MasterClearIrq:	
  9281                           ;psect for function i1_I2C_MasterClearIrq
  9282                           
  9283     0C97                     i1l3615:	
  9284                           ;incstack = 0
  9285                           ; Regs used in i1_I2C_MasterClearIrq: []
  9286                           
  9287                           
  9288                           ;mcc_generated_files/i2c_master.c: 644:     PIR1bits.SSPIF = 0;
  9289     0C97  0020               	movlb	0	; select bank0
  9290     0C98  1191               	bcf	17,3	;volatile
  9291     0C99                     i1l498:
  9292     0C99  0008               	return
  9293     0C9A                     __end_ofi1_I2C_MasterClearIrq:
  9294                           
  9295                           	psect	text62
  9296     07B2                     __ptext62:	
  9297 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  9298 ;; Defined at:
  9299 ;;		line 501 in file "mcc_generated_files/i2c_master.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;		None
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      enum E3112
  9306 ;; Registers used:
  9307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9313 ;;      Params:         0       0       0       0       0       0       0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0       0
  9315 ;;      Temps:          2       0       0       0       0       0       0       0
  9316 ;;      Totals:         2       0       0       0       0       0       0       0
  9317 ;;Total ram usage:        2 bytes
  9318 ;; Hardware stack levels used: 1
  9319 ;; Hardware stack levels required when called: 3
  9320 ;; This function calls:
  9321 ;;		NULL
  9322 ;;		_I2C_CallbackReturnReset
  9323 ;;		_I2C_CallbackReturnStop
  9324 ;;		_I2C_DO_SEND_RESTART
  9325 ;;		_I2C_DO_SEND_STOP
  9326 ;;		_rd1RegCompleteHandler
  9327 ;;		_rd2RegCompleteHandler
  9328 ;;		_rdBlkRegCompleteHandler
  9329 ;;		_wr1RegCompleteHandler
  9330 ;;		_wr2RegCompleteHandler
  9331 ;; This function is called by:
  9332 ;;		_I2C_MasterFsm
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336     07B2                     _I2C_DO_ADDRESS_NACK:	
  9337                           ;psect for function _I2C_DO_ADDRESS_NACK
  9338                           
  9339     07B2                     i1l3533:	
  9340                           ;incstack = 0
  9341                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9342                           
  9343                           
  9344                           ;mcc_generated_files/i2c_master.c: 503:     I2C_Status.addressNackCheck = 0;
  9345     07B2  0021               	movlb	1	; select bank1
  9346     07B3  103C               	bcf	(_I2C_Status^(0+128)+28),0
  9347     07B4                     i1l3535:
  9348                           
  9349                           ;mcc_generated_files/i2c_master.c: 504:     I2C_Status.error = I2C_FAIL;
  9350     07B4  3002               	movlw	2
  9351     07B5  00BB               	movwf	(_I2C_Status^(0+128)+27)
  9352                           
  9353                           ;mcc_generated_files/i2c_master.c: 505:     switch(I2C_Status.callbackTable[I2C_ADDR_NAC
      +                          K](I2C_Status.callbackPayload[I2C_ADDR_NACK]))
  9354     07B6  2FBF               	goto	i1l3547
  9355     07B7                     i1l3537:
  9356                           
  9357                           ;mcc_generated_files/i2c_master.c: 509:             return I2C_DO_SEND_RESTART();
  9358     07B7  318C  24DC  3187   	fcall	_I2C_DO_SEND_RESTART
  9359     07BA  2FD9               	goto	i1l426
  9360     07BB                     i1l3541:
  9361                           
  9362                           ;mcc_generated_files/i2c_master.c: 511:             return I2C_DO_SEND_STOP();
  9363     07BB  318C  24E1  3187   	fcall	_I2C_DO_SEND_STOP
  9364     07BE  2FD9               	goto	i1l426
  9365     07BF                     i1l3547:
  9366     07BF  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
  9367     07C0  00F7               	movwf	I2C_CallbackReturnReset@funPtr
  9368     07C1  3004               	movlw	4
  9369     07C2  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  9370     07C3  0086               	movwf	6
  9371     07C4  0187               	clrf	7
  9372     07C5  3F41               	moviw [1]fsr1
  9373     07C6  008A               	movwf	10
  9374     07C7  3F40               	moviw [0]fsr1
  9375     07C8  000A               	callw
  9376     07C9  3187               	pagesel	$
  9377     07CA  00F8               	movwf	??_I2C_DO_ADDRESS_NACK
  9378     07CB  01F9               	clrf	??_I2C_DO_ADDRESS_NACK+1
  9379                           
  9380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9381                           ; Switch size 1, requested type "simple"
  9382                           ; Number of cases is 1, Range of values is 0 to 0
  9383                           ; switch strategies available:
  9384                           ; Name         Instructions Cycles
  9385                           ; simple_byte            4     3 (average)
  9386                           ; direct_byte            8     6 (fixed)
  9387                           ; jumptable            260     6 (fixed)
  9388                           ;	Chosen strategy is simple_byte
  9389     07CC  0879               	movf	??_I2C_DO_ADDRESS_NACK+1,w
  9390     07CD  3A00               	xorlw	0	; case 0
  9391     07CE  1903               	skipnz
  9392     07CF  2FD1               	goto	i1l4109
  9393     07D0  2FBB               	goto	i1l3541
  9394     07D1                     i1l4109:
  9395                           
  9396                           ; Switch size 1, requested type "simple"
  9397                           ; Number of cases is 2, Range of values is 2 to 3
  9398                           ; switch strategies available:
  9399                           ; Name         Instructions Cycles
  9400                           ; simple_byte            7     4 (average)
  9401                           ; direct_byte           13     9 (fixed)
  9402                           ; jumptable            263     9 (fixed)
  9403                           ;	Chosen strategy is simple_byte
  9404     07D1  0878               	movf	??_I2C_DO_ADDRESS_NACK,w
  9405     07D2  3A02               	xorlw	2	; case 2
  9406     07D3  1903               	skipnz
  9407     07D4  2FB7               	goto	i1l3537
  9408     07D5  3A01               	xorlw	1	; case 3
  9409     07D6  1903               	skipnz
  9410     07D7  2FB7               	goto	i1l3537
  9411     07D8  2FBB               	goto	i1l3541
  9412     07D9                     i1l426:
  9413     07D9  0008               	return
  9414     07DA                     __end_of_I2C_DO_ADDRESS_NACK:
  9415                           
  9416                           	psect	text63
  9417     0CF5                     __ptext63:	
  9418 ;; *************** function _I2C_DO_RESET *****************
  9419 ;; Defined at:
  9420 ;;		line 495 in file "mcc_generated_files/i2c_master.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;		None
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;		None
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      enum E3112
  9427 ;; Registers used:
  9428 ;;		wreg, status,2
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9434 ;;      Params:         0       0       0       0       0       0       0       0
  9435 ;;      Locals:         0       0       0       0       0       0       0       0
  9436 ;;      Temps:          0       0       0       0       0       0       0       0
  9437 ;;      Totals:         0       0       0       0       0       0       0       0
  9438 ;;Total ram usage:        0 bytes
  9439 ;; Hardware stack levels used: 1
  9440 ;; This function calls:
  9441 ;;		Nothing
  9442 ;; This function is called by:
  9443 ;;		_I2C_MasterFsm
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447     0CF5                     _I2C_DO_RESET:	
  9448                           ;psect for function _I2C_DO_RESET
  9449                           
  9450     0CF5                     i1l3525:	
  9451                           ;incstack = 0
  9452                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  9453                           
  9454                           
  9455                           ;mcc_generated_files/i2c_master.c: 497:     I2C_Status.busy = 0;
  9456     0CF5  0021               	movlb	1	; select bank1
  9457     0CF6  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  9458     0CF7                     i1l3527:
  9459                           
  9460                           ;mcc_generated_files/i2c_master.c: 498:     I2C_Status.error = I2C_NOERR;
  9461     0CF7  01BB               	clrf	(_I2C_Status^(0+128)+27)
  9462     0CF8                     i1l3529:
  9463                           
  9464                           ;mcc_generated_files/i2c_master.c: 499:     return I2C_RESET;
  9465     0CF8  300E               	movlw	14
  9466     0CF9                     i1l420:
  9467     0CF9  0008               	return
  9468     0CFA                     __end_of_I2C_DO_RESET:
  9469                           
  9470                           	psect	text64
  9471     0CF0                     __ptext64:	
  9472 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  9473 ;; Defined at:
  9474 ;;		line 489 in file "mcc_generated_files/i2c_master.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;		None
  9477 ;; Auto vars:     Size  Location     Type
  9478 ;;		None
  9479 ;; Return value:  Size  Location     Type
  9480 ;;                  1    wreg      enum E3112
  9481 ;; Registers used:
  9482 ;;		wreg, status,2, status,0, pclath, cstack
  9483 ;; Tracked objects:
  9484 ;;		On entry : 0/0
  9485 ;;		On exit  : 0/0
  9486 ;;		Unchanged: 0/0
  9487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9488 ;;      Params:         0       0       0       0       0       0       0       0
  9489 ;;      Locals:         0       0       0       0       0       0       0       0
  9490 ;;      Temps:          0       0       0       0       0       0       0       0
  9491 ;;      Totals:         0       0       0       0       0       0       0       0
  9492 ;;Total ram usage:        0 bytes
  9493 ;; Hardware stack levels used: 1
  9494 ;; Hardware stack levels required when called: 1
  9495 ;; This function calls:
  9496 ;;		_I2C_MasterSendNack
  9497 ;; This function is called by:
  9498 ;;		_I2C_DO_RX
  9499 ;;		_I2C_MasterFsm
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503     0CF0                     _I2C_DO_RX_NACK_RESTART:	
  9504                           ;psect for function _I2C_DO_RX_NACK_RESTART
  9505                           
  9506     0CF0                     i1l3297:	
  9507                           ;incstack = 0
  9508                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9509                           
  9510                           
  9511                           ;mcc_generated_files/i2c_master.c: 491:     I2C_MasterSendNack();
  9512     0CF0  318C  24B4  318C   	fcall	_I2C_MasterSendNack
  9513     0CF3                     i1l3299:
  9514                           
  9515                           ;mcc_generated_files/i2c_master.c: 492:     return I2C_SEND_RESTART;
  9516     0CF3  3009               	movlw	9
  9517     0CF4                     i1l417:
  9518     0CF4  0008               	return
  9519     0CF5                     __end_of_I2C_DO_RX_NACK_RESTART:
  9520                           
  9521                           	psect	text65
  9522     0CEB                     __ptext65:	
  9523 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  9524 ;; Defined at:
  9525 ;;		line 483 in file "mcc_generated_files/i2c_master.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;		None
  9528 ;; Auto vars:     Size  Location     Type
  9529 ;;		None
  9530 ;; Return value:  Size  Location     Type
  9531 ;;                  1    wreg      enum E3112
  9532 ;; Registers used:
  9533 ;;		wreg, status,2, status,0, pclath, cstack
  9534 ;; Tracked objects:
  9535 ;;		On entry : 0/0
  9536 ;;		On exit  : 0/0
  9537 ;;		Unchanged: 0/0
  9538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9539 ;;      Params:         0       0       0       0       0       0       0       0
  9540 ;;      Locals:         0       0       0       0       0       0       0       0
  9541 ;;      Temps:          0       0       0       0       0       0       0       0
  9542 ;;      Totals:         0       0       0       0       0       0       0       0
  9543 ;;Total ram usage:        0 bytes
  9544 ;; Hardware stack levels used: 1
  9545 ;; Hardware stack levels required when called: 1
  9546 ;; This function calls:
  9547 ;;		_I2C_MasterSendNack
  9548 ;; This function is called by:
  9549 ;;		_I2C_DO_RX
  9550 ;;		_I2C_MasterFsm
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554     0CEB                     _I2C_DO_RX_NACK_STOP:	
  9555                           ;psect for function _I2C_DO_RX_NACK_STOP
  9556                           
  9557     0CEB                     i1l3303:	
  9558                           ;incstack = 0
  9559                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  9560                           
  9561                           
  9562                           ;mcc_generated_files/i2c_master.c: 485:     I2C_MasterSendNack();
  9563     0CEB  318C  24B4  318C   	fcall	_I2C_MasterSendNack
  9564     0CEE                     i1l3305:
  9565                           
  9566                           ;mcc_generated_files/i2c_master.c: 486:     return I2C_SEND_STOP;
  9567     0CEE  300A               	movlw	10
  9568     0CEF                     i1l414:
  9569     0CEF  0008               	return
  9570     0CF0                     __end_of_I2C_DO_RX_NACK_STOP:
  9571                           
  9572                           	psect	text66
  9573     0CE6                     __ptext66:	
  9574 ;; *************** function _I2C_DO_RX_ACK *****************
  9575 ;; Defined at:
  9576 ;;		line 476 in file "mcc_generated_files/i2c_master.c"
  9577 ;; Parameters:    Size  Location     Type
  9578 ;;		None
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;		None
  9581 ;; Return value:  Size  Location     Type
  9582 ;;                  1    wreg      enum E3112
  9583 ;; Registers used:
  9584 ;;		wreg, status,2, status,0, pclath, cstack
  9585 ;; Tracked objects:
  9586 ;;		On entry : 0/0
  9587 ;;		On exit  : 0/0
  9588 ;;		Unchanged: 0/0
  9589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9590 ;;      Params:         0       0       0       0       0       0       0       0
  9591 ;;      Locals:         0       0       0       0       0       0       0       0
  9592 ;;      Temps:          0       0       0       0       0       0       0       0
  9593 ;;      Totals:         0       0       0       0       0       0       0       0
  9594 ;;Total ram usage:        0 bytes
  9595 ;; Hardware stack levels used: 1
  9596 ;; Hardware stack levels required when called: 1
  9597 ;; This function calls:
  9598 ;;		_I2C_MasterSendAck
  9599 ;; This function is called by:
  9600 ;;		_I2C_MasterFsm
  9601 ;; This function uses a non-reentrant model
  9602 ;;
  9603                           
  9604     0CE6                     _I2C_DO_RX_ACK:	
  9605                           ;psect for function _I2C_DO_RX_ACK
  9606                           
  9607     0CE6                     i1l3519:	
  9608                           ;incstack = 0
  9609                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  9610                           
  9611                           
  9612                           ;mcc_generated_files/i2c_master.c: 478:     I2C_MasterSendAck();
  9613     0CE6  318C  24B8  318C   	fcall	_I2C_MasterSendAck
  9614     0CE9                     i1l3521:
  9615                           
  9616                           ;mcc_generated_files/i2c_master.c: 479:     return I2C_RCEN;
  9617     0CE9  3005               	movlw	5
  9618     0CEA                     i1l411:
  9619     0CEA  0008               	return
  9620     0CEB                     __end_of_I2C_DO_RX_ACK:
  9621                           
  9622                           	psect	text67
  9623     0CE1                     __ptext67:	
  9624 ;; *************** function _I2C_DO_SEND_STOP *****************
  9625 ;; Defined at:
  9626 ;;		line 470 in file "mcc_generated_files/i2c_master.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;		None
  9629 ;; Auto vars:     Size  Location     Type
  9630 ;;		None
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  1    wreg      enum E3112
  9633 ;; Registers used:
  9634 ;;		wreg, status,2, status,0, pclath, cstack
  9635 ;; Tracked objects:
  9636 ;;		On entry : 0/0
  9637 ;;		On exit  : 0/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9640 ;;      Params:         0       0       0       0       0       0       0       0
  9641 ;;      Locals:         0       0       0       0       0       0       0       0
  9642 ;;      Temps:          0       0       0       0       0       0       0       0
  9643 ;;      Totals:         0       0       0       0       0       0       0       0
  9644 ;;Total ram usage:        0 bytes
  9645 ;; Hardware stack levels used: 1
  9646 ;; Hardware stack levels required when called: 1
  9647 ;; This function calls:
  9648 ;;		_I2C_MasterStop
  9649 ;; This function is called by:
  9650 ;;		_I2C_DO_TX
  9651 ;;		_I2C_DO_TX_EMPTY
  9652 ;;		_I2C_DO_ADDRESS_NACK
  9653 ;;		_I2C_MasterFsm
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657     0CE1                     _I2C_DO_SEND_STOP:	
  9658                           ;psect for function _I2C_DO_SEND_STOP
  9659                           
  9660     0CE1                     i1l3285:	
  9661                           ;incstack = 0
  9662                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  9663                           
  9664                           
  9665                           ;mcc_generated_files/i2c_master.c: 472:     I2C_MasterStop();
  9666     0CE1  318C  248B  318C   	fcall	_I2C_MasterStop
  9667     0CE4                     i1l3287:
  9668                           
  9669                           ;mcc_generated_files/i2c_master.c: 473:     return I2C_IDLE;
  9670     0CE4  3000               	movlw	0
  9671     0CE5                     i1l408:
  9672     0CE5  0008               	return
  9673     0CE6                     __end_of_I2C_DO_SEND_STOP:
  9674                           
  9675                           	psect	text68
  9676     0CDC                     __ptext68:	
  9677 ;; *************** function _I2C_DO_SEND_RESTART *****************
  9678 ;; Defined at:
  9679 ;;		line 464 in file "mcc_generated_files/i2c_master.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;		None
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;		None
  9684 ;; Return value:  Size  Location     Type
  9685 ;;                  1    wreg      enum E3112
  9686 ;; Registers used:
  9687 ;;		wreg, status,2, status,0, pclath, cstack
  9688 ;; Tracked objects:
  9689 ;;		On entry : 0/0
  9690 ;;		On exit  : 0/0
  9691 ;;		Unchanged: 0/0
  9692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9693 ;;      Params:         0       0       0       0       0       0       0       0
  9694 ;;      Locals:         0       0       0       0       0       0       0       0
  9695 ;;      Temps:          0       0       0       0       0       0       0       0
  9696 ;;      Totals:         0       0       0       0       0       0       0       0
  9697 ;;Total ram usage:        0 bytes
  9698 ;; Hardware stack levels used: 1
  9699 ;; Hardware stack levels required when called: 1
  9700 ;; This function calls:
  9701 ;;		_I2C_MasterEnableRestart
  9702 ;; This function is called by:
  9703 ;;		_I2C_DO_TX_EMPTY
  9704 ;;		_I2C_DO_ADDRESS_NACK
  9705 ;;		_I2C_MasterFsm
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709     0CDC                     _I2C_DO_SEND_RESTART:	
  9710                           ;psect for function _I2C_DO_SEND_RESTART
  9711                           
  9712     0CDC                     i1l3311:	
  9713                           ;incstack = 0
  9714                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9715                           
  9716                           
  9717                           ;mcc_generated_files/i2c_master.c: 466:     I2C_MasterEnableRestart();
  9718     0CDC  318C  2488  318C   	fcall	_I2C_MasterEnableRestart
  9719     0CDF                     i1l3313:
  9720                           
  9721                           ;mcc_generated_files/i2c_master.c: 467:     return I2C_SEND_ADR_READ;
  9722     0CDF  3001               	movlw	1
  9723     0CE0                     i1l405:
  9724     0CE0  0008               	return
  9725     0CE1                     __end_of_I2C_DO_SEND_RESTART:
  9726                           
  9727                           	psect	text69
  9728     0CD7                     __ptext69:	
  9729 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  9730 ;; Defined at:
  9731 ;;		line 457 in file "mcc_generated_files/i2c_master.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;		None
  9734 ;; Auto vars:     Size  Location     Type
  9735 ;;		None
  9736 ;; Return value:  Size  Location     Type
  9737 ;;                  1    wreg      enum E3112
  9738 ;; Registers used:
  9739 ;;		wreg, status,2, status,0, pclath, cstack
  9740 ;; Tracked objects:
  9741 ;;		On entry : 0/0
  9742 ;;		On exit  : 0/0
  9743 ;;		Unchanged: 0/0
  9744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9745 ;;      Params:         0       0       0       0       0       0       0       0
  9746 ;;      Locals:         0       0       0       0       0       0       0       0
  9747 ;;      Temps:          0       0       0       0       0       0       0       0
  9748 ;;      Totals:         0       0       0       0       0       0       0       0
  9749 ;;Total ram usage:        0 bytes
  9750 ;; Hardware stack levels used: 1
  9751 ;; Hardware stack levels required when called: 1
  9752 ;; This function calls:
  9753 ;;		_I2C_MasterEnableRestart
  9754 ;; This function is called by:
  9755 ;;		_I2C_DO_TX
  9756 ;;		_I2C_MasterFsm
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760     0CD7                     _I2C_DO_SEND_RESTART_WRITE:	
  9761                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  9762                           
  9763     0CD7                     i1l3279:	
  9764                           ;incstack = 0
  9765                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9766                           
  9767                           
  9768                           ;mcc_generated_files/i2c_master.c: 459:     I2C_MasterEnableRestart();
  9769     0CD7  318C  2488  318C   	fcall	_I2C_MasterEnableRestart
  9770     0CDA                     i1l3281:
  9771                           
  9772                           ;mcc_generated_files/i2c_master.c: 460:     return I2C_SEND_ADR_WRITE;
  9773     0CDA  3002               	movlw	2
  9774     0CDB                     i1l402:
  9775     0CDB  0008               	return
  9776     0CDC                     __end_of_I2C_DO_SEND_RESTART_WRITE:
  9777                           
  9778                           	psect	text70
  9779     0CD2                     __ptext70:	
  9780 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  9781 ;; Defined at:
  9782 ;;		line 451 in file "mcc_generated_files/i2c_master.c"
  9783 ;; Parameters:    Size  Location     Type
  9784 ;;		None
  9785 ;; Auto vars:     Size  Location     Type
  9786 ;;		None
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      enum E3112
  9789 ;; Registers used:
  9790 ;;		wreg, status,2, status,0, pclath, cstack
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9796 ;;      Params:         0       0       0       0       0       0       0       0
  9797 ;;      Locals:         0       0       0       0       0       0       0       0
  9798 ;;      Temps:          0       0       0       0       0       0       0       0
  9799 ;;      Totals:         0       0       0       0       0       0       0       0
  9800 ;;Total ram usage:        0 bytes
  9801 ;; Hardware stack levels used: 1
  9802 ;; Hardware stack levels required when called: 1
  9803 ;; This function calls:
  9804 ;;		_I2C_MasterEnableRestart
  9805 ;; This function is called by:
  9806 ;;		_I2C_DO_TX
  9807 ;;		_I2C_MasterFsm
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811     0CD2                     _I2C_DO_SEND_RESTART_READ:	
  9812                           ;psect for function _I2C_DO_SEND_RESTART_READ
  9813                           
  9814     0CD2                     i1l3273:	
  9815                           ;incstack = 0
  9816                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  9817                           
  9818                           
  9819                           ;mcc_generated_files/i2c_master.c: 453:     I2C_MasterEnableRestart();
  9820     0CD2  318C  2488  318C   	fcall	_I2C_MasterEnableRestart
  9821     0CD5                     i1l3275:
  9822                           
  9823                           ;mcc_generated_files/i2c_master.c: 454:     return I2C_SEND_ADR_READ;
  9824     0CD5  3001               	movlw	1
  9825     0CD6                     i1l399:
  9826     0CD6  0008               	return
  9827     0CD7                     __end_of_I2C_DO_SEND_RESTART_READ:
  9828                           
  9829                           	psect	text71
  9830     0D10                     __ptext71:	
  9831 ;; *************** function _I2C_DO_RCEN *****************
  9832 ;; Defined at:
  9833 ;;		line 404 in file "mcc_generated_files/i2c_master.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;		None
  9836 ;; Auto vars:     Size  Location     Type
  9837 ;;		None
  9838 ;; Return value:  Size  Location     Type
  9839 ;;                  1    wreg      enum E3112
  9840 ;; Registers used:
  9841 ;;		wreg, status,2, status,0, pclath, cstack
  9842 ;; Tracked objects:
  9843 ;;		On entry : 0/0
  9844 ;;		On exit  : 0/0
  9845 ;;		Unchanged: 0/0
  9846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9847 ;;      Params:         0       0       0       0       0       0       0       0
  9848 ;;      Locals:         0       0       0       0       0       0       0       0
  9849 ;;      Temps:          0       0       0       0       0       0       0       0
  9850 ;;      Totals:         0       0       0       0       0       0       0       0
  9851 ;;Total ram usage:        0 bytes
  9852 ;; Hardware stack levels used: 1
  9853 ;; Hardware stack levels required when called: 1
  9854 ;; This function calls:
  9855 ;;		_I2C_MasterStartRx
  9856 ;; This function is called by:
  9857 ;;		_I2C_MasterFsm
  9858 ;; This function uses a non-reentrant model
  9859 ;;
  9860                           
  9861     0D10                     _I2C_DO_RCEN:	
  9862                           ;psect for function _I2C_DO_RCEN
  9863                           
  9864     0D10                     i1l3485:	
  9865                           ;incstack = 0
  9866                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  9867                           
  9868                           
  9869                           ;mcc_generated_files/i2c_master.c: 406:     I2C_Status.addressNackCheck = 0;
  9870     0D10  0021               	movlb	1	; select bank1
  9871     0D11  103C               	bcf	(_I2C_Status^(0+128)+28),0
  9872     0D12                     i1l3487:
  9873                           
  9874                           ;mcc_generated_files/i2c_master.c: 407:     I2C_MasterStartRx();
  9875     0D12  318C  248E  318D   	fcall	_I2C_MasterStartRx
  9876     0D15                     i1l3489:
  9877                           
  9878                           ;mcc_generated_files/i2c_master.c: 408:     return I2C_RX;
  9879     0D15  3004               	movlw	4
  9880     0D16                     i1l375:
  9881     0D16  0008               	return
  9882     0D17                     __end_of_I2C_DO_RCEN:
  9883                           
  9884                           	psect	text72
  9885     0580                     __ptext72:	
  9886 ;; *************** function _I2C_DO_RX *****************
  9887 ;; Defined at:
  9888 ;;		line 380 in file "mcc_generated_files/i2c_master.c"
  9889 ;; Parameters:    Size  Location     Type
  9890 ;;		None
  9891 ;; Auto vars:     Size  Location     Type
  9892 ;;		None
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  1    wreg      enum E3112
  9895 ;; Registers used:
  9896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9902 ;;      Params:         0       0       0       0       0       0       0       0
  9903 ;;      Locals:         0       0       0       0       0       0       0       0
  9904 ;;      Temps:          2       0       0       0       0       0       0       0
  9905 ;;      Totals:         2       0       0       0       0       0       0       0
  9906 ;;Total ram usage:        2 bytes
  9907 ;; Hardware stack levels used: 1
  9908 ;; Hardware stack levels required when called: 3
  9909 ;; This function calls:
  9910 ;;		NULL
  9911 ;;		_I2C_CallbackReturnReset
  9912 ;;		_I2C_CallbackReturnStop
  9913 ;;		_I2C_DO_RX_NACK_RESTART
  9914 ;;		_I2C_DO_RX_NACK_STOP
  9915 ;;		_I2C_MasterGetRxData
  9916 ;;		_I2C_MasterSendAck
  9917 ;;		_rd1RegCompleteHandler
  9918 ;;		_rd2RegCompleteHandler
  9919 ;;		_rdBlkRegCompleteHandler
  9920 ;;		_wr1RegCompleteHandler
  9921 ;;		_wr2RegCompleteHandler
  9922 ;; This function is called by:
  9923 ;;		_I2C_MasterFsm
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927     0580                     _I2C_DO_RX:	
  9928                           ;psect for function _I2C_DO_RX
  9929                           
  9930     0580                     i1l3453:	
  9931                           ;incstack = 0
  9932                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9933                           
  9934                           
  9935                           ;mcc_generated_files/i2c_master.c: 382:     *I2C_Status.data_ptr++ = I2C_MasterGetRxData
      +                          ();
  9936     0580  0021               	movlb	1	; select bank1
  9937     0581  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
  9938     0582  0086               	movwf	6
  9939     0583  0187               	clrf	7
  9940     0584  318C  2491  3185   	fcall	_I2C_MasterGetRxData
  9941     0587  0081               	movwf	1
  9942     0588                     i1l3455:
  9943     0588  3001               	movlw	1
  9944     0589  00F8               	movwf	??_I2C_DO_RX
  9945     058A  0878               	movf	??_I2C_DO_RX,w
  9946     058B  0021               	movlb	1	; select bank1
  9947     058C  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
  9948     058D                     i1l3457:
  9949                           
  9950                           ;mcc_generated_files/i2c_master.c: 383:     if(--I2C_Status.data_length)
  9951     058D  3001               	movlw	1
  9952     058E  02B8               	subwf	(_I2C_Status^(0+128)+24),f
  9953     058F  3000               	movlw	0
  9954     0590  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
  9955     0591  0838               	movf	(_I2C_Status^(0+128)+24),w
  9956     0592  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
  9957     0593  1903               	btfsc	3,2
  9958     0594  2D96               	goto	u129_21
  9959     0595  2D97               	goto	u129_20
  9960     0596                     u129_21:
  9961     0596  2D9C               	goto	i1l363
  9962     0597                     u129_20:
  9963     0597                     i1l3459:
  9964                           
  9965                           ;mcc_generated_files/i2c_master.c: 384:     {;mcc_generated_files/i2c_master.c: 385:    
      +                               I2C_MasterSendAck();
  9966     0597  318C  24B8  3185   	fcall	_I2C_MasterSendAck
  9967     059A                     i1l3461:
  9968                           
  9969                           ;mcc_generated_files/i2c_master.c: 386:         return I2C_RCEN;
  9970     059A  3005               	movlw	5
  9971     059B  2DC2               	goto	i1l364
  9972     059C                     i1l363:	
  9973                           ;mcc_generated_files/i2c_master.c: 388:     else
  9974                           
  9975                           
  9976                           ;mcc_generated_files/i2c_master.c: 389:     {;mcc_generated_files/i2c_master.c: 390:    
      +                               I2C_Status.bufferFree = 1;
  9977     059C  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  9978                           
  9979                           ;mcc_generated_files/i2c_master.c: 391:         switch(I2C_Status.callbackTable[I2C_DATA
      +                          _COMPLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
  9980     059D  2DA6               	goto	i1l3477
  9981     059E                     i1l3467:
  9982                           
  9983                           ;mcc_generated_files/i2c_master.c: 395:                 return I2C_DO_RX_NACK_RESTART();
  9984     059E  318C  24F0  3185   	fcall	_I2C_DO_RX_NACK_RESTART
  9985     05A1  2DC2               	goto	i1l364
  9986     05A2                     i1l3471:
  9987                           
  9988                           ;mcc_generated_files/i2c_master.c: 399:                 return I2C_DO_RX_NACK_STOP();
  9989     05A2  318C  24EB  3185   	fcall	_I2C_DO_RX_NACK_STOP
  9990     05A5  2DC2               	goto	i1l364
  9991     05A6                     i1l3477:
  9992     05A6  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
  9993     05A7  00F7               	movwf	I2C_CallbackReturnReset@funPtr
  9994     05A8  0821               	movf	(_I2C_Status+1)^(0+128),w
  9995     05A9  008A               	movwf	10
  9996     05AA  0820               	movf	_I2C_Status^(0+128),w
  9997     05AB  000A               	callw
  9998     05AC  3185               	pagesel	$
  9999     05AD  00F8               	movwf	??_I2C_DO_RX
 10000     05AE  01F9               	clrf	??_I2C_DO_RX+1
 10001                           
 10002                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10003                           ; Switch size 1, requested type "simple"
 10004                           ; Number of cases is 1, Range of values is 0 to 0
 10005                           ; switch strategies available:
 10006                           ; Name         Instructions Cycles
 10007                           ; simple_byte            4     3 (average)
 10008                           ; direct_byte            8     6 (fixed)
 10009                           ; jumptable            260     6 (fixed)
 10010                           ;	Chosen strategy is simple_byte
 10011     05AF  0879               	movf	??_I2C_DO_RX+1,w
 10012     05B0  3A00               	xorlw	0	; case 0
 10013     05B1  1903               	skipnz
 10014     05B2  2DB4               	goto	i1l4111
 10015     05B3  2DA2               	goto	i1l3471
 10016     05B4                     i1l4111:
 10017                           
 10018                           ; Switch size 1, requested type "simple"
 10019                           ; Number of cases is 4, Range of values is 1 to 4
 10020                           ; switch strategies available:
 10021                           ; Name         Instructions Cycles
 10022                           ; simple_byte           13     7 (average)
 10023                           ; direct_byte           17     9 (fixed)
 10024                           ; jumptable            263     9 (fixed)
 10025                           ;	Chosen strategy is simple_byte
 10026     05B4  0878               	movf	??_I2C_DO_RX,w
 10027     05B5  3A01               	xorlw	1	; case 1
 10028     05B6  1903               	skipnz
 10029     05B7  2DA2               	goto	i1l3471
 10030     05B8  3A03               	xorlw	3	; case 2
 10031     05B9  1903               	skipnz
 10032     05BA  2D9E               	goto	i1l3467
 10033     05BB  3A01               	xorlw	1	; case 3
 10034     05BC  1903               	skipnz
 10035     05BD  2D9E               	goto	i1l3467
 10036     05BE  3A07               	xorlw	7	; case 4
 10037     05BF  1903               	skipnz
 10038     05C0  2DA2               	goto	i1l3471
 10039     05C1  2DA2               	goto	i1l3471
 10040     05C2                     i1l364:
 10041     05C2  0008               	return
 10042     05C3                     __end_of_I2C_DO_RX:
 10043                           
 10044                           	psect	text73
 10045     04E7                     __ptext73:	
 10046 ;; *************** function _I2C_DO_TX *****************
 10047 ;; Defined at:
 10048 ;;		line 356 in file "mcc_generated_files/i2c_master.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;		None
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;		None
 10053 ;; Return value:  Size  Location     Type
 10054 ;;                  1    wreg      enum E3112
 10055 ;; Registers used:
 10056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/0
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10062 ;;      Params:         0       0       0       0       0       0       0       0
 10063 ;;      Locals:         0       0       0       0       0       0       0       0
 10064 ;;      Temps:          2       0       0       0       0       0       0       0
 10065 ;;      Totals:         2       0       0       0       0       0       0       0
 10066 ;;Total ram usage:        2 bytes
 10067 ;; Hardware stack levels used: 1
 10068 ;; Hardware stack levels required when called: 3
 10069 ;; This function calls:
 10070 ;;		NULL
 10071 ;;		_I2C_CallbackReturnReset
 10072 ;;		_I2C_CallbackReturnStop
 10073 ;;		_I2C_DO_SEND_RESTART_READ
 10074 ;;		_I2C_DO_SEND_RESTART_WRITE
 10075 ;;		_I2C_DO_SEND_STOP
 10076 ;;		_I2C_MasterIsNack
 10077 ;;		_I2C_MasterSendTxData
 10078 ;;		_rd1RegCompleteHandler
 10079 ;;		_rd2RegCompleteHandler
 10080 ;;		_rdBlkRegCompleteHandler
 10081 ;;		_wr1RegCompleteHandler
 10082 ;;		_wr2RegCompleteHandler
 10083 ;; This function is called by:
 10084 ;;		_I2C_MasterFsm
 10085 ;; This function uses a non-reentrant model
 10086 ;;
 10087                           
 10088     04E7                     _I2C_DO_TX:	
 10089                           ;psect for function _I2C_DO_TX
 10090                           
 10091     04E7                     i1l3419:	
 10092                           ;incstack = 0
 10093                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10094                           
 10095                           
 10096                           ;mcc_generated_files/i2c_master.c: 358:     if(I2C_MasterIsNack())
 10097     04E7  318D  2504  3184   	fcall	_I2C_MasterIsNack
 10098     04EA  3A00               	xorlw	0
 10099     04EB  1903               	skipnz
 10100     04EC  2CEE               	goto	u127_21
 10101     04ED  2CEF               	goto	u127_20
 10102     04EE                     u127_21:
 10103     04EE  2D1D               	goto	i1l347
 10104     04EF                     u127_20:
 10105     04EF  2CFC               	goto	i1l3437
 10106     04F0                     i1l3423:
 10107                           
 10108                           ;mcc_generated_files/i2c_master.c: 363:                 return I2C_DO_SEND_RESTART_READ(
      +                          );
 10109     04F0  318C  24D2  3184   	fcall	_I2C_DO_SEND_RESTART_READ
 10110     04F3  2D39               	goto	i1l350
 10111     04F4                     i1l3427:
 10112                           
 10113                           ;mcc_generated_files/i2c_master.c: 365:                   return I2C_DO_SEND_RESTART_WRI
      +                          TE();
 10114     04F4  318C  24D7  3184   	fcall	_I2C_DO_SEND_RESTART_WRITE
 10115     04F7  2D39               	goto	i1l350
 10116     04F8                     i1l3431:
 10117                           
 10118                           ;mcc_generated_files/i2c_master.c: 369:                 return I2C_DO_SEND_STOP();
 10119     04F8  318C  24E1  3184   	fcall	_I2C_DO_SEND_STOP
 10120     04FB  2D39               	goto	i1l350
 10121     04FC                     i1l3437:
 10122     04FC  0021               	movlb	1	; select bank1
 10123     04FD  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
 10124     04FE  00F7               	movwf	I2C_CallbackReturnReset@funPtr
 10125     04FF  3006               	movlw	6
 10126     0500  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 10127     0501  0086               	movwf	6
 10128     0502  0187               	clrf	7
 10129     0503  3F41               	moviw [1]fsr1
 10130     0504  008A               	movwf	10
 10131     0505  3F40               	moviw [0]fsr1
 10132     0506  000A               	callw
 10133     0507  3184               	pagesel	$
 10134     0508  00F8               	movwf	??_I2C_DO_TX
 10135     0509  01F9               	clrf	??_I2C_DO_TX+1
 10136                           
 10137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10138                           ; Switch size 1, requested type "simple"
 10139                           ; Number of cases is 1, Range of values is 0 to 0
 10140                           ; switch strategies available:
 10141                           ; Name         Instructions Cycles
 10142                           ; simple_byte            4     3 (average)
 10143                           ; direct_byte            8     6 (fixed)
 10144                           ; jumptable            260     6 (fixed)
 10145                           ;	Chosen strategy is simple_byte
 10146     050A  0879               	movf	??_I2C_DO_TX+1,w
 10147     050B  3A00               	xorlw	0	; case 0
 10148     050C  1903               	skipnz
 10149     050D  2D0F               	goto	i1l4113
 10150     050E  2CF8               	goto	i1l3431
 10151     050F                     i1l4113:
 10152                           
 10153                           ; Switch size 1, requested type "simple"
 10154                           ; Number of cases is 4, Range of values is 1 to 4
 10155                           ; switch strategies available:
 10156                           ; Name         Instructions Cycles
 10157                           ; simple_byte           13     7 (average)
 10158                           ; direct_byte           17     9 (fixed)
 10159                           ; jumptable            263     9 (fixed)
 10160                           ;	Chosen strategy is simple_byte
 10161     050F  0878               	movf	??_I2C_DO_TX,w
 10162     0510  3A01               	xorlw	1	; case 1
 10163     0511  1903               	skipnz
 10164     0512  2CF8               	goto	i1l3431
 10165     0513  3A03               	xorlw	3	; case 2
 10166     0514  1903               	skipnz
 10167     0515  2CF0               	goto	i1l3423
 10168     0516  3A01               	xorlw	1	; case 3
 10169     0517  1903               	skipnz
 10170     0518  2CF4               	goto	i1l3427
 10171     0519  3A07               	xorlw	7	; case 4
 10172     051A  1903               	skipnz
 10173     051B  2CF8               	goto	i1l3431
 10174     051C  2CF8               	goto	i1l3431
 10175     051D                     i1l347:	
 10176                           ;mcc_generated_files/i2c_master.c: 372:     else
 10177                           
 10178                           
 10179                           ;mcc_generated_files/i2c_master.c: 373:     {;mcc_generated_files/i2c_master.c: 374:    
      +                               I2C_Status.addressNackCheck = 0;
 10180     051D  0021               	movlb	1	; select bank1
 10181     051E  103C               	bcf	(_I2C_Status^(0+128)+28),0
 10182     051F                     i1l3439:
 10183                           
 10184                           ;mcc_generated_files/i2c_master.c: 375:         I2C_MasterSendTxData(*I2C_Status.data_pt
      +                          r++);
 10185     051F  3017               	movlw	23
 10186     0520  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 10187     0521  0086               	movwf	6
 10188     0522  0187               	clrf	7
 10189     0523  3F40               	moviw [0]fsr1
 10190     0524  0084               	movwf	4
 10191     0525  0185               	clrf	5
 10192     0526  0A81               	incf	1,f
 10193     0527  0800               	movf	0,w
 10194     0528  318C  24C8  3184   	fcall	_I2C_MasterSendTxData
 10195     052B                     i1l3441:
 10196                           
 10197                           ;mcc_generated_files/i2c_master.c: 376:         return (--I2C_Status.data_length)?I2C_TX
      +                          :I2C_TX_EMPTY;
 10198     052B  3001               	movlw	1
 10199     052C  0021               	movlb	1	; select bank1
 10200     052D  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 10201     052E  3000               	movlw	0
 10202     052F  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 10203     0530  0838               	movf	(_I2C_Status^(0+128)+24),w
 10204     0531  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 10205     0532  1D03               	btfss	3,2
 10206     0533  2D35               	goto	u128_21
 10207     0534  2D36               	goto	u128_20
 10208     0535                     u128_21:
 10209     0535  2D38               	goto	i1l3445
 10210     0536                     u128_20:
 10211     0536                     i1l3443:
 10212     0536  3006               	movlw	6
 10213     0537  2D39               	goto	i1l350
 10214     0538                     i1l3445:
 10215     0538  3003               	movlw	3
 10216     0539                     i1l350:
 10217     0539  0008               	return
 10218     053A                     __end_of_I2C_DO_TX:
 10219                           
 10220                           	psect	text74
 10221     0D1E                     __ptext74:	
 10222 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
 10223 ;; Defined at:
 10224 ;;		line 349 in file "mcc_generated_files/i2c_master.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;		None
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;		None
 10229 ;; Return value:  Size  Location     Type
 10230 ;;                  1    wreg      enum E3112
 10231 ;; Registers used:
 10232 ;;		wreg, status,2, status,0, pclath, cstack
 10233 ;; Tracked objects:
 10234 ;;		On entry : 0/0
 10235 ;;		On exit  : 0/0
 10236 ;;		Unchanged: 0/0
 10237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10238 ;;      Params:         0       0       0       0       0       0       0       0
 10239 ;;      Locals:         0       0       0       0       0       0       0       0
 10240 ;;      Temps:          0       0       0       0       0       0       0       0
 10241 ;;      Totals:         0       0       0       0       0       0       0       0
 10242 ;;Total ram usage:        0 bytes
 10243 ;; Hardware stack levels used: 1
 10244 ;; Hardware stack levels required when called: 1
 10245 ;; This function calls:
 10246 ;;		_I2C_MasterSendTxData
 10247 ;; This function is called by:
 10248 ;;		_I2C_MasterFsm
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252     0D1E                     _I2C_DO_SEND_ADR_WRITE:	
 10253                           ;psect for function _I2C_DO_SEND_ADR_WRITE
 10254                           
 10255     0D1E                     i1l3411:	
 10256                           ;incstack = 0
 10257                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 10258                           
 10259                           
 10260                           ;mcc_generated_files/i2c_master.c: 351:     I2C_Status.addressNackCheck = 1;
 10261     0D1E  0021               	movlb	1	; select bank1
 10262     0D1F  143C               	bsf	(_I2C_Status^(0+128)+28),0
 10263     0D20                     i1l3413:
 10264                           
 10265                           ;mcc_generated_files/i2c_master.c: 352:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1));
 10266     0D20  3536               	lslf	(_I2C_Status^(0+128)+22),w
 10267     0D21  318C  24C8  318D   	fcall	_I2C_MasterSendTxData
 10268     0D24                     i1l3415:
 10269                           
 10270                           ;mcc_generated_files/i2c_master.c: 353:     return I2C_TX;
 10271     0D24  3003               	movlw	3
 10272     0D25                     i1l344:
 10273     0D25  0008               	return
 10274     0D26                     __end_of_I2C_DO_SEND_ADR_WRITE:
 10275                           
 10276                           	psect	text75
 10277     0D26                     __ptext75:	
 10278 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
 10279 ;; Defined at:
 10280 ;;		line 342 in file "mcc_generated_files/i2c_master.c"
 10281 ;; Parameters:    Size  Location     Type
 10282 ;;		None
 10283 ;; Auto vars:     Size  Location     Type
 10284 ;;		None
 10285 ;; Return value:  Size  Location     Type
 10286 ;;                  1    wreg      enum E3112
 10287 ;; Registers used:
 10288 ;;		wreg, status,2, status,0, pclath, cstack
 10289 ;; Tracked objects:
 10290 ;;		On entry : 0/0
 10291 ;;		On exit  : 0/0
 10292 ;;		Unchanged: 0/0
 10293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10294 ;;      Params:         0       0       0       0       0       0       0       0
 10295 ;;      Locals:         0       0       0       0       0       0       0       0
 10296 ;;      Temps:          0       0       0       0       0       0       0       0
 10297 ;;      Totals:         0       0       0       0       0       0       0       0
 10298 ;;Total ram usage:        0 bytes
 10299 ;; Hardware stack levels used: 1
 10300 ;; Hardware stack levels required when called: 1
 10301 ;; This function calls:
 10302 ;;		_I2C_MasterSendTxData
 10303 ;; This function is called by:
 10304 ;;		_I2C_MasterFsm
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308     0D26                     _I2C_DO_SEND_ADR_READ:	
 10309                           ;psect for function _I2C_DO_SEND_ADR_READ
 10310                           
 10311     0D26                     i1l3403:	
 10312                           ;incstack = 0
 10313                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 10314                           
 10315                           
 10316                           ;mcc_generated_files/i2c_master.c: 344:     I2C_Status.addressNackCheck = 1;
 10317     0D26  0021               	movlb	1	; select bank1
 10318     0D27  143C               	bsf	(_I2C_Status^(0+128)+28),0
 10319     0D28                     i1l3405:
 10320                           
 10321                           ;mcc_generated_files/i2c_master.c: 345:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1 | 1));
 10322     0D28  1403               	setc
 10323     0D29  0D36               	rlf	(_I2C_Status^(0+128)+22),w
 10324     0D2A  318C  24C8  318D   	fcall	_I2C_MasterSendTxData
 10325     0D2D                     i1l3407:
 10326                           
 10327                           ;mcc_generated_files/i2c_master.c: 346:     return I2C_RCEN;
 10328     0D2D  3005               	movlw	5
 10329     0D2E                     i1l341:
 10330     0D2E  0008               	return
 10331     0D2F                     __end_of_I2C_DO_SEND_ADR_READ:
 10332                           
 10333                           	psect	text76
 10334     0CCD                     __ptext76:	
 10335 ;; *************** function _I2C_DO_IDLE *****************
 10336 ;; Defined at:
 10337 ;;		line 335 in file "mcc_generated_files/i2c_master.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;		None
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;		None
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  1    wreg      enum E3112
 10344 ;; Registers used:
 10345 ;;		wreg, status,2
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10351 ;;      Params:         0       0       0       0       0       0       0       0
 10352 ;;      Locals:         0       0       0       0       0       0       0       0
 10353 ;;      Temps:          0       0       0       0       0       0       0       0
 10354 ;;      Totals:         0       0       0       0       0       0       0       0
 10355 ;;Total ram usage:        0 bytes
 10356 ;; Hardware stack levels used: 1
 10357 ;; This function calls:
 10358 ;;		Nothing
 10359 ;; This function is called by:
 10360 ;;		_I2C_MasterFsm
 10361 ;; This function uses a non-reentrant model
 10362 ;;
 10363                           
 10364     0CCD                     _I2C_DO_IDLE:	
 10365                           ;psect for function _I2C_DO_IDLE
 10366                           
 10367     0CCD                     i1l3395:	
 10368                           ;incstack = 0
 10369                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
 10370                           
 10371                           
 10372                           ;mcc_generated_files/i2c_master.c: 337:     I2C_Status.busy = 0;
 10373     0CCD  0021               	movlb	1	; select bank1
 10374     0CCE  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 10375     0CCF                     i1l3397:
 10376                           
 10377                           ;mcc_generated_files/i2c_master.c: 338:     I2C_Status.error = I2C_NOERR;
 10378     0CCF  01BB               	clrf	(_I2C_Status^(0+128)+27)
 10379     0CD0                     i1l3399:
 10380                           
 10381                           ;mcc_generated_files/i2c_master.c: 339:     return I2C_RESET;
 10382     0CD0  300E               	movlw	14
 10383     0CD1                     i1l338:
 10384     0CD1  0008               	return
 10385     0CD2                     __end_of_I2C_DO_IDLE:
 10386                           
 10387                           	psect	text77
 10388     06B4                     __ptext77:	
 10389 ;; *************** function _I2C_DO_TX_EMPTY *****************
 10390 ;; Defined at:
 10391 ;;		line 411 in file "mcc_generated_files/i2c_master.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;		None
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;		None
 10396 ;; Return value:  Size  Location     Type
 10397 ;;                  1    wreg      enum E3112
 10398 ;; Registers used:
 10399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/0
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10405 ;;      Params:         0       0       0       0       0       0       0       0
 10406 ;;      Locals:         0       0       0       0       0       0       0       0
 10407 ;;      Temps:          2       0       0       0       0       0       0       0
 10408 ;;      Totals:         2       0       0       0       0       0       0       0
 10409 ;;Total ram usage:        2 bytes
 10410 ;; Hardware stack levels used: 1
 10411 ;; Hardware stack levels required when called: 3
 10412 ;; This function calls:
 10413 ;;		NULL
 10414 ;;		_I2C_CallbackReturnReset
 10415 ;;		_I2C_CallbackReturnStop
 10416 ;;		_I2C_DO_SEND_RESTART
 10417 ;;		_I2C_DO_SEND_STOP
 10418 ;;		_I2C_MasterSetIrq
 10419 ;;		_rd1RegCompleteHandler
 10420 ;;		_rd2RegCompleteHandler
 10421 ;;		_rdBlkRegCompleteHandler
 10422 ;;		_wr1RegCompleteHandler
 10423 ;;		_wr2RegCompleteHandler
 10424 ;; This function is called by:
 10425 ;;		_I2C_MasterFsm
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429     06B4                     _I2C_DO_TX_EMPTY:	
 10430                           ;psect for function _I2C_DO_TX_EMPTY
 10431                           
 10432     06B4                     i1l3493:	
 10433                           ;incstack = 0
 10434                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10435                           
 10436                           
 10437                           ;mcc_generated_files/i2c_master.c: 413:     I2C_Status.bufferFree = 1;
 10438     06B4  0021               	movlb	1	; select bank1
 10439     06B5  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 10440                           
 10441                           ;mcc_generated_files/i2c_master.c: 414:     switch(I2C_Status.callbackTable[I2C_DATA_COM
      +                          PLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
 10442     06B6  2EC4               	goto	i1l3511
 10443     06B7                     i1l3495:
 10444                           
 10445                           ;mcc_generated_files/i2c_master.c: 418:             return I2C_DO_SEND_RESTART();
 10446     06B7  318C  24DC  3186   	fcall	_I2C_DO_SEND_RESTART
 10447     06BA  2EE0               	goto	i1l381
 10448     06BB                     i1l3499:
 10449                           
 10450                           ;mcc_generated_files/i2c_master.c: 420:             I2C_MasterSetIrq();
 10451     06BB  318C  2494  3186   	fcall	_I2C_MasterSetIrq
 10452     06BE                     i1l3501:
 10453                           
 10454                           ;mcc_generated_files/i2c_master.c: 421:             return I2C_TX;
 10455     06BE  3003               	movlw	3
 10456     06BF  2EE0               	goto	i1l381
 10457     06C0                     i1l3505:
 10458                           
 10459                           ;mcc_generated_files/i2c_master.c: 424:             return I2C_DO_SEND_STOP();
 10460     06C0  318C  24E1  3186   	fcall	_I2C_DO_SEND_STOP
 10461     06C3  2EE0               	goto	i1l381
 10462     06C4                     i1l3511:
 10463     06C4  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 10464     06C5  00F7               	movwf	I2C_CallbackReturnReset@funPtr
 10465     06C6  0821               	movf	(_I2C_Status+1)^(0+128),w
 10466     06C7  008A               	movwf	10
 10467     06C8  0820               	movf	_I2C_Status^(0+128),w
 10468     06C9  000A               	callw
 10469     06CA  3186               	pagesel	$
 10470     06CB  00F8               	movwf	??_I2C_DO_TX_EMPTY
 10471     06CC  01F9               	clrf	??_I2C_DO_TX_EMPTY+1
 10472                           
 10473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10474                           ; Switch size 1, requested type "simple"
 10475                           ; Number of cases is 1, Range of values is 0 to 0
 10476                           ; switch strategies available:
 10477                           ; Name         Instructions Cycles
 10478                           ; simple_byte            4     3 (average)
 10479                           ; direct_byte            8     6 (fixed)
 10480                           ; jumptable            260     6 (fixed)
 10481                           ;	Chosen strategy is simple_byte
 10482     06CD  0879               	movf	??_I2C_DO_TX_EMPTY+1,w
 10483     06CE  3A00               	xorlw	0	; case 0
 10484     06CF  1903               	skipnz
 10485     06D0  2ED2               	goto	i1l4115
 10486     06D1  2EC0               	goto	i1l3505
 10487     06D2                     i1l4115:
 10488                           
 10489                           ; Switch size 1, requested type "simple"
 10490                           ; Number of cases is 4, Range of values is 1 to 4
 10491                           ; switch strategies available:
 10492                           ; Name         Instructions Cycles
 10493                           ; simple_byte           13     7 (average)
 10494                           ; direct_byte           17     9 (fixed)
 10495                           ; jumptable            263     9 (fixed)
 10496                           ;	Chosen strategy is simple_byte
 10497     06D2  0878               	movf	??_I2C_DO_TX_EMPTY,w
 10498     06D3  3A01               	xorlw	1	; case 1
 10499     06D4  1903               	skipnz
 10500     06D5  2EC0               	goto	i1l3505
 10501     06D6  3A03               	xorlw	3	; case 2
 10502     06D7  1903               	skipnz
 10503     06D8  2EB7               	goto	i1l3495
 10504     06D9  3A01               	xorlw	1	; case 3
 10505     06DA  1903               	skipnz
 10506     06DB  2EB7               	goto	i1l3495
 10507     06DC  3A07               	xorlw	7	; case 4
 10508     06DD  1903               	skipnz
 10509     06DE  2EBB               	goto	i1l3499
 10510     06DF  2EC0               	goto	i1l3505
 10511     06E0                     i1l381:
 10512     06E0  0008               	return
 10513     06E1                     __end_of_I2C_DO_TX_EMPTY:
 10514                           
 10515                           	psect	text78
 10516     0C94                     __ptext78:	
 10517 ;; *************** function _I2C_MasterSetIrq *****************
 10518 ;; Defined at:
 10519 ;;		line 647 in file "mcc_generated_files/i2c_master.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;		None
 10522 ;; Auto vars:     Size  Location     Type
 10523 ;;		None
 10524 ;; Return value:  Size  Location     Type
 10525 ;;                  1    wreg      void 
 10526 ;; Registers used:
 10527 ;;		None
 10528 ;; Tracked objects:
 10529 ;;		On entry : 0/0
 10530 ;;		On exit  : 0/0
 10531 ;;		Unchanged: 0/0
 10532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10533 ;;      Params:         0       0       0       0       0       0       0       0
 10534 ;;      Locals:         0       0       0       0       0       0       0       0
 10535 ;;      Temps:          0       0       0       0       0       0       0       0
 10536 ;;      Totals:         0       0       0       0       0       0       0       0
 10537 ;;Total ram usage:        0 bytes
 10538 ;; Hardware stack levels used: 1
 10539 ;; This function calls:
 10540 ;;		Nothing
 10541 ;; This function is called by:
 10542 ;;		_I2C_DO_TX_EMPTY
 10543 ;; This function uses a non-reentrant model
 10544 ;;
 10545                           
 10546     0C94                     _I2C_MasterSetIrq:	
 10547                           ;psect for function _I2C_MasterSetIrq
 10548                           
 10549     0C94                     i1l3317:	
 10550                           ;incstack = 0
 10551                           ; Regs used in _I2C_MasterSetIrq: []
 10552                           
 10553                           
 10554                           ;mcc_generated_files/i2c_master.c: 649:     PIR1bits.SSPIF = 1;
 10555     0C94  0020               	movlb	0	; select bank0
 10556     0C95  1591               	bsf	17,3	;volatile
 10557     0C96                     i1l501:
 10558     0C96  0008               	return
 10559     0C97                     __end_of_I2C_MasterSetIrq:
 10560                           
 10561                           	psect	text79
 10562     0D04                     __ptext79:	
 10563 ;; *************** function _I2C_MasterIsNack *****************
 10564 ;; Defined at:
 10565 ;;		line 599 in file "mcc_generated_files/i2c_master.c"
 10566 ;; Parameters:    Size  Location     Type
 10567 ;;		None
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;		None
 10570 ;; Return value:  Size  Location     Type
 10571 ;;                  1    wreg      _Bool 
 10572 ;; Registers used:
 10573 ;;		wreg, status,2, status,0
 10574 ;; Tracked objects:
 10575 ;;		On entry : 0/0
 10576 ;;		On exit  : 0/0
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10579 ;;      Params:         0       0       0       0       0       0       0       0
 10580 ;;      Locals:         0       0       0       0       0       0       0       0
 10581 ;;      Temps:          0       0       0       0       0       0       0       0
 10582 ;;      Totals:         0       0       0       0       0       0       0       0
 10583 ;;Total ram usage:        0 bytes
 10584 ;; Hardware stack levels used: 1
 10585 ;; This function calls:
 10586 ;;		Nothing
 10587 ;; This function is called by:
 10588 ;;		_I2C_MasterFsm
 10589 ;;		_I2C_DO_TX
 10590 ;; This function uses a non-reentrant model
 10591 ;;
 10592                           
 10593     0D04                     _I2C_MasterIsNack:	
 10594                           ;psect for function _I2C_MasterIsNack
 10595                           
 10596     0D04                     i1l3267:	
 10597                           ;incstack = 0
 10598                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
 10599                           
 10600                           
 10601                           ;mcc_generated_files/i2c_master.c: 601:     return SSPCON2bits.ACKSTAT;
 10602     0D04  0024               	movlb	4	; select bank4
 10603     0D05  0E16               	swapf	22,w	;volatile
 10604     0D06  0C89               	rrf	9,f
 10605     0D07  0C89               	rrf	9,f
 10606     0D08  3901               	andlw	1
 10607     0D09                     i1l474:
 10608     0D09  0008               	return
 10609     0D0A                     __end_of_I2C_MasterIsNack:
 10610                           
 10611                           	psect	text80
 10612     0CC8                     __ptext80:	
 10613 ;; *************** function _I2C_MasterSendTxData *****************
 10614 ;; Defined at:
 10615 ;;		line 569 in file "mcc_generated_files/i2c_master.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;  data            1    wreg     unsigned char 
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;  data            1    0[COMMON] unsigned char 
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  1    wreg      void 
 10622 ;; Registers used:
 10623 ;;		wreg
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10629 ;;      Params:         0       0       0       0       0       0       0       0
 10630 ;;      Locals:         1       0       0       0       0       0       0       0
 10631 ;;      Temps:          0       0       0       0       0       0       0       0
 10632 ;;      Totals:         1       0       0       0       0       0       0       0
 10633 ;;Total ram usage:        1 bytes
 10634 ;; Hardware stack levels used: 1
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		_I2C_DO_SEND_ADR_READ
 10639 ;;		_I2C_DO_SEND_ADR_WRITE
 10640 ;;		_I2C_DO_TX
 10641 ;; This function uses a non-reentrant model
 10642 ;;
 10643                           
 10644     0CC8                     _I2C_MasterSendTxData:	
 10645                           ;psect for function _I2C_MasterSendTxData
 10646                           
 10647                           
 10648                           ;incstack = 0
 10649                           ; Regs used in _I2C_MasterSendTxData: [wreg]
 10650                           ;I2C_MasterSendTxData@data stored from wreg
 10651     0CC8  00F0               	movwf	I2C_MasterSendTxData@data
 10652     0CC9                     i1l3271:
 10653                           
 10654                           ;mcc_generated_files/i2c_master.c: 569: static __attribute__((inline)) void I2C_MasterSe
      +                          ndTxData(uint8_t data);mcc_generated_files/i2c_master.c: 570: {;mcc_generated_files/i2c_
      +                          master.c: 571:     SSPBUF = data;
 10655     0CC9  0870               	movf	I2C_MasterSendTxData@data,w
 10656     0CCA  0024               	movlb	4	; select bank4
 10657     0CCB  0091               	movwf	17	;volatile
 10658     0CCC                     i1l456:
 10659     0CCC  0008               	return
 10660     0CCD                     __end_of_I2C_MasterSendTxData:
 10661                           
 10662                           	psect	text81
 10663     0CB8                     __ptext81:	
 10664 ;; *************** function _I2C_MasterSendAck *****************
 10665 ;; Defined at:
 10666 ;;		line 604 in file "mcc_generated_files/i2c_master.c"
 10667 ;; Parameters:    Size  Location     Type
 10668 ;;		None
 10669 ;; Auto vars:     Size  Location     Type
 10670 ;;		None
 10671 ;; Return value:  Size  Location     Type
 10672 ;;                  1    wreg      void 
 10673 ;; Registers used:
 10674 ;;		None
 10675 ;; Tracked objects:
 10676 ;;		On entry : 0/0
 10677 ;;		On exit  : 0/0
 10678 ;;		Unchanged: 0/0
 10679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10680 ;;      Params:         0       0       0       0       0       0       0       0
 10681 ;;      Locals:         0       0       0       0       0       0       0       0
 10682 ;;      Temps:          0       0       0       0       0       0       0       0
 10683 ;;      Totals:         0       0       0       0       0       0       0       0
 10684 ;;Total ram usage:        0 bytes
 10685 ;; Hardware stack levels used: 1
 10686 ;; This function calls:
 10687 ;;		Nothing
 10688 ;; This function is called by:
 10689 ;;		_I2C_DO_RX
 10690 ;;		_I2C_DO_RX_ACK
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694     0CB8                     _I2C_MasterSendAck:	
 10695                           ;psect for function _I2C_MasterSendAck
 10696                           
 10697     0CB8                     i1l3295:	
 10698                           ;incstack = 0
 10699                           ; Regs used in _I2C_MasterSendAck: []
 10700                           
 10701                           
 10702                           ;mcc_generated_files/i2c_master.c: 606:     SSPCON2bits.ACKDT = 0;
 10703     0CB8  0024               	movlb	4	; select bank4
 10704     0CB9  1296               	bcf	22,5	;volatile
 10705                           
 10706                           ;mcc_generated_files/i2c_master.c: 607:     SSPCON2bits.ACKEN = 1;
 10707     0CBA  1616               	bsf	22,4	;volatile
 10708     0CBB                     i1l477:
 10709     0CBB  0008               	return
 10710     0CBC                     __end_of_I2C_MasterSendAck:
 10711                           
 10712                           	psect	text82
 10713     0C91                     __ptext82:	
 10714 ;; *************** function _I2C_MasterGetRxData *****************
 10715 ;; Defined at:
 10716 ;;		line 564 in file "mcc_generated_files/i2c_master.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;		None
 10719 ;; Auto vars:     Size  Location     Type
 10720 ;;		None
 10721 ;; Return value:  Size  Location     Type
 10722 ;;                  1    wreg      unsigned char 
 10723 ;; Registers used:
 10724 ;;		wreg
 10725 ;; Tracked objects:
 10726 ;;		On entry : 0/0
 10727 ;;		On exit  : 0/0
 10728 ;;		Unchanged: 0/0
 10729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10730 ;;      Params:         0       0       0       0       0       0       0       0
 10731 ;;      Locals:         0       0       0       0       0       0       0       0
 10732 ;;      Temps:          0       0       0       0       0       0       0       0
 10733 ;;      Totals:         0       0       0       0       0       0       0       0
 10734 ;;Total ram usage:        0 bytes
 10735 ;; Hardware stack levels used: 1
 10736 ;; This function calls:
 10737 ;;		Nothing
 10738 ;; This function is called by:
 10739 ;;		_I2C_DO_RX
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743     0C91                     _I2C_MasterGetRxData:	
 10744                           ;psect for function _I2C_MasterGetRxData
 10745                           
 10746     0C91                     i1l3291:	
 10747                           ;incstack = 0
 10748                           ; Regs used in _I2C_MasterGetRxData: [wreg]
 10749                           
 10750                           
 10751                           ;mcc_generated_files/i2c_master.c: 566:     return SSPBUF;
 10752     0C91  0024               	movlb	4	; select bank4
 10753     0C92  0811               	movf	17,w	;volatile
 10754     0C93                     i1l453:
 10755     0C93  0008               	return
 10756     0C94                     __end_of_I2C_MasterGetRxData:
 10757                           
 10758                           	psect	text83
 10759     0CB4                     __ptext83:	
 10760 ;; *************** function _I2C_MasterSendNack *****************
 10761 ;; Defined at:
 10762 ;;		line 610 in file "mcc_generated_files/i2c_master.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;		None
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;		None
 10767 ;; Return value:  Size  Location     Type
 10768 ;;                  1    wreg      void 
 10769 ;; Registers used:
 10770 ;;		None
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10776 ;;      Params:         0       0       0       0       0       0       0       0
 10777 ;;      Locals:         0       0       0       0       0       0       0       0
 10778 ;;      Temps:          0       0       0       0       0       0       0       0
 10779 ;;      Totals:         0       0       0       0       0       0       0       0
 10780 ;;Total ram usage:        0 bytes
 10781 ;; Hardware stack levels used: 1
 10782 ;; This function calls:
 10783 ;;		Nothing
 10784 ;; This function is called by:
 10785 ;;		_I2C_DO_RX_NACK_STOP
 10786 ;;		_I2C_DO_RX_NACK_RESTART
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790     0CB4                     _I2C_MasterSendNack:	
 10791                           ;psect for function _I2C_MasterSendNack
 10792                           
 10793     0CB4                     i1l3107:	
 10794                           ;incstack = 0
 10795                           ; Regs used in _I2C_MasterSendNack: []
 10796                           
 10797                           
 10798                           ;mcc_generated_files/i2c_master.c: 612:     SSPCON2bits.ACKDT = 1;
 10799     0CB4  0024               	movlb	4	; select bank4
 10800     0CB5  1696               	bsf	22,5	;volatile
 10801                           
 10802                           ;mcc_generated_files/i2c_master.c: 613:     SSPCON2bits.ACKEN = 1;
 10803     0CB6  1616               	bsf	22,4	;volatile
 10804     0CB7                     i1l480:
 10805     0CB7  0008               	return
 10806     0CB8                     __end_of_I2C_MasterSendNack:
 10807                           
 10808                           	psect	text84
 10809     0C8E                     __ptext84:	
 10810 ;; *************** function _I2C_MasterStartRx *****************
 10811 ;; Defined at:
 10812 ;;		line 584 in file "mcc_generated_files/i2c_master.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;		None
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;		None
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  1    wreg      void 
 10819 ;; Registers used:
 10820 ;;		None
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10826 ;;      Params:         0       0       0       0       0       0       0       0
 10827 ;;      Locals:         0       0       0       0       0       0       0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0
 10829 ;;      Totals:         0       0       0       0       0       0       0       0
 10830 ;;Total ram usage:        0 bytes
 10831 ;; Hardware stack levels used: 1
 10832 ;; This function calls:
 10833 ;;		Nothing
 10834 ;; This function is called by:
 10835 ;;		_I2C_DO_RCEN
 10836 ;; This function uses a non-reentrant model
 10837 ;;
 10838                           
 10839     0C8E                     _I2C_MasterStartRx:	
 10840                           ;psect for function _I2C_MasterStartRx
 10841                           
 10842     0C8E                     i1l3309:	
 10843                           ;incstack = 0
 10844                           ; Regs used in _I2C_MasterStartRx: []
 10845                           
 10846                           
 10847                           ;mcc_generated_files/i2c_master.c: 586:     SSPCON2bits.RCEN = 1;
 10848     0C8E  0024               	movlb	4	; select bank4
 10849     0C8F  1596               	bsf	22,3	;volatile
 10850     0C90                     i1l465:
 10851     0C90  0008               	return
 10852     0C91                     __end_of_I2C_MasterStartRx:
 10853                           
 10854                           	psect	text85
 10855     0002                     __ptext85:	
 10856 ;; *************** function _I2C_CallbackReturnReset *****************
 10857 ;; Defined at:
 10858 ;;		line 526 in file "mcc_generated_files/i2c_master.c"
 10859 ;; Parameters:    Size  Location     Type
 10860 ;;  funPtr          1    7[COMMON] PTR void 
 10861 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 10862 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 10863 ;; Auto vars:     Size  Location     Type
 10864 ;;		None
 10865 ;; Return value:  Size  Location     Type
 10866 ;;                  1    wreg      enum E363
 10867 ;; Registers used:
 10868 ;;		wreg
 10869 ;; Tracked objects:
 10870 ;;		On entry : 0/0
 10871 ;;		On exit  : 0/0
 10872 ;;		Unchanged: 0/0
 10873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10874 ;;      Params:         1       0       0       0       0       0       0       0
 10875 ;;      Locals:         0       0       0       0       0       0       0       0
 10876 ;;      Temps:          0       0       0       0       0       0       0       0
 10877 ;;      Totals:         1       0       0       0       0       0       0       0
 10878 ;;Total ram usage:        1 bytes
 10879 ;; Hardware stack levels used: 1
 10880 ;; This function calls:
 10881 ;;		Nothing
 10882 ;; This function is called by:
 10883 ;;		_I2C_Open
 10884 ;;		_I2C_DO_TX
 10885 ;;		_I2C_DO_RX
 10886 ;;		_I2C_DO_TX_EMPTY
 10887 ;;		_I2C_DO_ADDRESS_NACK
 10888 ;;		_I2C_DO_RX_EMPTY
 10889 ;; This function uses a non-reentrant model
 10890 ;;
 10891                           
 10892     0002                     _I2C_CallbackReturnReset:	
 10893                           ;psect for function _I2C_CallbackReturnReset
 10894                           
 10895     0002                     i1l3323:	
 10896                           ;incstack = 0
 10897                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
 10898                           
 10899                           
 10900                           ;mcc_generated_files/i2c_master.c: 526: i2c_operations_t I2C_CallbackReturnReset(void *f
      +                          unPtr);mcc_generated_files/i2c_master.c: 527: {;mcc_generated_files/i2c_master.c: 528:  
      +                             return I2C_RESET_LINK;
 10901     0002  3005               	movlw	5
 10902     0003                     i1l437:
 10903     0003  0008               	return
 10904     0004                     __end_of_I2C_CallbackReturnReset:
 10905                           
 10906                           	psect	text86
 10907     0C86                     __ptext86:	
 10908 ;; *************** function _I2C_CallbackReturnStop *****************
 10909 ;; Defined at:
 10910 ;;		line 521 in file "mcc_generated_files/i2c_master.c"
 10911 ;; Parameters:    Size  Location     Type
 10912 ;;  funPtr          1    7[COMMON] PTR void 
 10913 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 10914 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 10915 ;; Auto vars:     Size  Location     Type
 10916 ;;		None
 10917 ;; Return value:  Size  Location     Type
 10918 ;;                  1    wreg      enum E363
 10919 ;; Registers used:
 10920 ;;		wreg
 10921 ;; Tracked objects:
 10922 ;;		On entry : 0/0
 10923 ;;		On exit  : 0/0
 10924 ;;		Unchanged: 0/0
 10925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10926 ;;      Params:         1       0       0       0       0       0       0       0
 10927 ;;      Locals:         0       0       0       0       0       0       0       0
 10928 ;;      Temps:          0       0       0       0       0       0       0       0
 10929 ;;      Totals:         1       0       0       0       0       0       0       0
 10930 ;;Total ram usage:        1 bytes
 10931 ;; Hardware stack levels used: 1
 10932 ;; This function calls:
 10933 ;;		Nothing
 10934 ;; This function is called by:
 10935 ;;		_I2C_Open
 10936 ;;		_I2C_SetCallback
 10937 ;;		i1_I2C_SetCallback
 10938 ;;		_I2C_DO_TX
 10939 ;;		_I2C_DO_RX
 10940 ;;		_I2C_DO_TX_EMPTY
 10941 ;;		_I2C_DO_ADDRESS_NACK
 10942 ;;		_I2C_DO_RX_EMPTY
 10943 ;; This function uses a non-reentrant model
 10944 ;;
 10945                           
 10946     0C86                     _I2C_CallbackReturnStop:	
 10947                           ;psect for function _I2C_CallbackReturnStop
 10948                           
 10949     0C86                     i1l3319:	
 10950                           ;incstack = 0
 10951                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
 10952                           
 10953                           
 10954                           ;mcc_generated_files/i2c_master.c: 521: i2c_operations_t I2C_CallbackReturnStop(void *fu
      +                          nPtr);mcc_generated_files/i2c_master.c: 522: {;mcc_generated_files/i2c_master.c: 523:   
      +                            return I2C_STOP;
 10955     0C86  3001               	movlw	1
 10956     0C87                     i1l434:
 10957     0C87  0008               	return
 10958     0C88                     __end_of_I2C_CallbackReturnStop:
 10959                           
 10960                           	psect	text87
 10961     0EBA                     __ptext87:	
 10962 ;; *************** function _rdBlkRegCompleteHandler *****************
 10963 ;; Defined at:
 10964 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;  ptr             1    7[COMMON] PTR void 
 10967 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 10968 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;		None
 10971 ;; Return value:  Size  Location     Type
 10972 ;;                  1    wreg      enum E363
 10973 ;; Registers used:
 10974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10980 ;;      Params:         1       0       0       0       0       0       0       0
 10981 ;;      Locals:         0       0       0       0       0       0       0       0
 10982 ;;      Temps:          0       0       0       0       0       0       0       0
 10983 ;;      Totals:         1       0       0       0       0       0       0       0
 10984 ;;Total ram usage:        1 bytes
 10985 ;; Hardware stack levels used: 1
 10986 ;; Hardware stack levels required when called: 2
 10987 ;; This function calls:
 10988 ;;		_I2C_SetDataCompleteCallback
 10989 ;;		i1_I2C_SetBuffer
 10990 ;; This function is called by:
 10991 ;;		_I2C_ReadDataBlock
 10992 ;;		_I2C_DO_TX
 10993 ;;		_I2C_DO_RX
 10994 ;;		_I2C_DO_TX_EMPTY
 10995 ;;		_I2C_DO_ADDRESS_NACK
 10996 ;;		_I2C_DO_RX_EMPTY
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000     0EBA                     _rdBlkRegCompleteHandler:	
 11001                           ;psect for function _rdBlkRegCompleteHandler
 11002                           
 11003     0EBA                     i1l3261:	
 11004                           ;incstack = 0
 11005                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11006                           
 11007                           
 11008                           ;mcc_generated_files/examples/i2c_master_example.c: 170: static i2c_operations_t rdBlkRe
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 171: {;mc
      +                          c_generated_files/examples/i2c_master_example.c: 172:     I2C_SetBuffer(((i2c_buffer_t *
      +                          )ptr)->data,((i2c_buffer_t*)ptr)->len);
 11009     0EBA  0877               	movf	rdBlkRegCompleteHandler@ptr,w
 11010     0EBB  0086               	movwf	6
 11011     0EBC  0187               	clrf	7
 11012     0EBD  3F40               	moviw [0]fsr1
 11013     0EBE  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11014     0EBF  3F41               	moviw [1]fsr1
 11015     0EC0  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11016     0EC1  0877               	movf	rdBlkRegCompleteHandler@ptr,w
 11017     0EC2  3E02               	addlw	2
 11018     0EC3  0086               	movwf	6
 11019     0EC4  0187               	clrf	7
 11020     0EC5  0801               	movf	1,w
 11021     0EC6  318D  25FA  318E   	fcall	i1_I2C_SetBuffer
 11022                           
 11023                           ;mcc_generated_files/examples/i2c_master_example.c: 173:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11024     0EC9  3000               	movlw	0
 11025     0ECA  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11026     0ECB  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11027     0ECC  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11028     0ECD  318D  258C  318E   	fcall	_I2C_SetDataCompleteCallback
 11029     0ED0                     i1l3263:
 11030                           
 11031                           ;mcc_generated_files/examples/i2c_master_example.c: 174:     return I2C_RESTART_READ;
 11032     0ED0  3002               	movlw	2
 11033     0ED1                     i1l104:
 11034     0ED1  0008               	return
 11035     0ED2                     __end_of_rdBlkRegCompleteHandler:
 11036                           
 11037                           	psect	text88
 11038     0E3B                     __ptext88:	
 11039 ;; *************** function _wr1RegCompleteHandler *****************
 11040 ;; Defined at:
 11041 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 11042 ;; Parameters:    Size  Location     Type
 11043 ;;  ptr             1    7[COMMON] PTR void 
 11044 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11045 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;		None
 11048 ;; Return value:  Size  Location     Type
 11049 ;;                  1    wreg      enum E363
 11050 ;; Registers used:
 11051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11052 ;; Tracked objects:
 11053 ;;		On entry : 0/0
 11054 ;;		On exit  : 0/0
 11055 ;;		Unchanged: 0/0
 11056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11057 ;;      Params:         1       0       0       0       0       0       0       0
 11058 ;;      Locals:         0       0       0       0       0       0       0       0
 11059 ;;      Temps:          0       0       0       0       0       0       0       0
 11060 ;;      Totals:         1       0       0       0       0       0       0       0
 11061 ;;Total ram usage:        1 bytes
 11062 ;; Hardware stack levels used: 1
 11063 ;; Hardware stack levels required when called: 2
 11064 ;; This function calls:
 11065 ;;		_I2C_SetDataCompleteCallback
 11066 ;;		i1_I2C_SetBuffer
 11067 ;; This function is called by:
 11068 ;;		_I2C_Write1ByteRegister
 11069 ;;		_I2C_DO_TX
 11070 ;;		_I2C_DO_RX
 11071 ;;		_I2C_DO_TX_EMPTY
 11072 ;;		_I2C_DO_ADDRESS_NACK
 11073 ;;		_I2C_DO_RX_EMPTY
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077     0E3B                     _wr1RegCompleteHandler:	
 11078                           ;psect for function _wr1RegCompleteHandler
 11079                           
 11080     0E3B                     i1l3245:	
 11081                           ;incstack = 0
 11082                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11083                           
 11084                           
 11085                           ;mcc_generated_files/examples/i2c_master_example.c: 156: static i2c_operations_t wr1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 157: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 158:     I2C_SetBuffer(ptr,1);
 11086     0E3B  3001               	movlw	1
 11087     0E3C  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11088     0E3D  3000               	movlw	0
 11089     0E3E  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11090     0E3F  0877               	movf	wr1RegCompleteHandler@ptr,w
 11091     0E40  318D  25FA  318E   	fcall	i1_I2C_SetBuffer
 11092     0E43                     i1l3247:
 11093                           
 11094                           ;mcc_generated_files/examples/i2c_master_example.c: 159:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11095     0E43  3000               	movlw	0
 11096     0E44  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11097     0E45  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11098     0E46  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11099     0E47  318D  258C  318E   	fcall	_I2C_SetDataCompleteCallback
 11100     0E4A                     i1l3249:
 11101                           
 11102                           ;mcc_generated_files/examples/i2c_master_example.c: 160:     return I2C_CONTINUE;
 11103     0E4A  3004               	movlw	4
 11104     0E4B                     i1l98:
 11105     0E4B  0008               	return
 11106     0E4C                     __end_of_wr1RegCompleteHandler:
 11107                           
 11108                           	psect	text89
 11109     0E2A                     __ptext89:	
 11110 ;; *************** function _rd2RegCompleteHandler *****************
 11111 ;; Defined at:
 11112 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;  ptr             1    7[COMMON] PTR void 
 11115 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11116 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 11117 ;; Auto vars:     Size  Location     Type
 11118 ;;		None
 11119 ;; Return value:  Size  Location     Type
 11120 ;;                  1    wreg      enum E363
 11121 ;; Registers used:
 11122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11123 ;; Tracked objects:
 11124 ;;		On entry : 0/0
 11125 ;;		On exit  : 0/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11128 ;;      Params:         1       0       0       0       0       0       0       0
 11129 ;;      Locals:         0       0       0       0       0       0       0       0
 11130 ;;      Temps:          0       0       0       0       0       0       0       0
 11131 ;;      Totals:         1       0       0       0       0       0       0       0
 11132 ;;Total ram usage:        1 bytes
 11133 ;; Hardware stack levels used: 1
 11134 ;; Hardware stack levels required when called: 2
 11135 ;; This function calls:
 11136 ;;		_I2C_SetDataCompleteCallback
 11137 ;;		i1_I2C_SetBuffer
 11138 ;; This function is called by:
 11139 ;;		_I2C_Read2ByteRegister
 11140 ;;		_I2C_DO_TX
 11141 ;;		_I2C_DO_RX
 11142 ;;		_I2C_DO_TX_EMPTY
 11143 ;;		_I2C_DO_ADDRESS_NACK
 11144 ;;		_I2C_DO_RX_EMPTY
 11145 ;; This function uses a non-reentrant model
 11146 ;;
 11147                           
 11148     0E2A                     _rd2RegCompleteHandler:	
 11149                           ;psect for function _rd2RegCompleteHandler
 11150                           
 11151     0E2A                     i1l3237:	
 11152                           ;incstack = 0
 11153                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11154                           
 11155                           
 11156                           ;mcc_generated_files/examples/i2c_master_example.c: 149: static i2c_operations_t rd2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 150: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 151:     I2C_SetBuffer(ptr,2);
 11157     0E2A  3002               	movlw	2
 11158     0E2B  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11159     0E2C  3000               	movlw	0
 11160     0E2D  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11161     0E2E  0877               	movf	rd2RegCompleteHandler@ptr,w
 11162     0E2F  318D  25FA  318E   	fcall	i1_I2C_SetBuffer
 11163     0E32                     i1l3239:
 11164                           
 11165                           ;mcc_generated_files/examples/i2c_master_example.c: 152:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11166     0E32  3000               	movlw	0
 11167     0E33  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11168     0E34  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11169     0E35  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11170     0E36  318D  258C  318E   	fcall	_I2C_SetDataCompleteCallback
 11171     0E39                     i1l3241:
 11172                           
 11173                           ;mcc_generated_files/examples/i2c_master_example.c: 153:     return I2C_RESTART_READ;
 11174     0E39  3002               	movlw	2
 11175     0E3A                     i1l95:
 11176     0E3A  0008               	return
 11177     0E3B                     __end_of_rd2RegCompleteHandler:
 11178                           
 11179                           	psect	text90
 11180     0E19                     __ptext90:	
 11181 ;; *************** function _rd1RegCompleteHandler *****************
 11182 ;; Defined at:
 11183 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 11184 ;; Parameters:    Size  Location     Type
 11185 ;;  ptr             1    7[COMMON] PTR void 
 11186 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11187 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 11188 ;; Auto vars:     Size  Location     Type
 11189 ;;		None
 11190 ;; Return value:  Size  Location     Type
 11191 ;;                  1    wreg      enum E363
 11192 ;; Registers used:
 11193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11194 ;; Tracked objects:
 11195 ;;		On entry : 0/0
 11196 ;;		On exit  : 0/0
 11197 ;;		Unchanged: 0/0
 11198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11199 ;;      Params:         1       0       0       0       0       0       0       0
 11200 ;;      Locals:         0       0       0       0       0       0       0       0
 11201 ;;      Temps:          0       0       0       0       0       0       0       0
 11202 ;;      Totals:         1       0       0       0       0       0       0       0
 11203 ;;Total ram usage:        1 bytes
 11204 ;; Hardware stack levels used: 1
 11205 ;; Hardware stack levels required when called: 2
 11206 ;; This function calls:
 11207 ;;		_I2C_SetDataCompleteCallback
 11208 ;;		i1_I2C_SetBuffer
 11209 ;; This function is called by:
 11210 ;;		_I2C_Read1ByteRegister
 11211 ;;		_I2C_DO_TX
 11212 ;;		_I2C_DO_RX
 11213 ;;		_I2C_DO_TX_EMPTY
 11214 ;;		_I2C_DO_ADDRESS_NACK
 11215 ;;		_I2C_DO_RX_EMPTY
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219     0E19                     _rd1RegCompleteHandler:	
 11220                           ;psect for function _rd1RegCompleteHandler
 11221                           
 11222     0E19                     i1l3229:	
 11223                           ;incstack = 0
 11224                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11225                           
 11226                           
 11227                           ;mcc_generated_files/examples/i2c_master_example.c: 142: static i2c_operations_t rd1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 143: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 144:     I2C_SetBuffer(ptr,1);
 11228     0E19  3001               	movlw	1
 11229     0E1A  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11230     0E1B  3000               	movlw	0
 11231     0E1C  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11232     0E1D  0877               	movf	rd1RegCompleteHandler@ptr,w
 11233     0E1E  318D  25FA  318E   	fcall	i1_I2C_SetBuffer
 11234     0E21                     i1l3231:
 11235                           
 11236                           ;mcc_generated_files/examples/i2c_master_example.c: 145:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11237     0E21  3000               	movlw	0
 11238     0E22  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11239     0E23  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11240     0E24  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11241     0E25  318D  258C  318E   	fcall	_I2C_SetDataCompleteCallback
 11242     0E28                     i1l3233:
 11243                           
 11244                           ;mcc_generated_files/examples/i2c_master_example.c: 146:     return I2C_RESTART_READ;
 11245     0E28  3002               	movlw	2
 11246     0E29                     i1l92:
 11247     0E29  0008               	return
 11248     0E2A                     __end_of_rd1RegCompleteHandler:
 11249                           
 11250                           	psect	text91
 11251     0E08                     __ptext91:	
 11252 ;; *************** function _wr2RegCompleteHandler *****************
 11253 ;; Defined at:
 11254 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;  ptr             1    7[COMMON] PTR void 
 11257 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11258 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 11259 ;; Auto vars:     Size  Location     Type
 11260 ;;		None
 11261 ;; Return value:  Size  Location     Type
 11262 ;;                  1    wreg      enum E363
 11263 ;; Registers used:
 11264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11265 ;; Tracked objects:
 11266 ;;		On entry : 0/0
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11270 ;;      Params:         1       0       0       0       0       0       0       0
 11271 ;;      Locals:         0       0       0       0       0       0       0       0
 11272 ;;      Temps:          0       0       0       0       0       0       0       0
 11273 ;;      Totals:         1       0       0       0       0       0       0       0
 11274 ;;Total ram usage:        1 bytes
 11275 ;; Hardware stack levels used: 1
 11276 ;; Hardware stack levels required when called: 2
 11277 ;; This function calls:
 11278 ;;		_I2C_SetDataCompleteCallback
 11279 ;;		i1_I2C_SetBuffer
 11280 ;; This function is called by:
 11281 ;;		_I2C_Write2ByteRegister
 11282 ;;		_I2C_DO_TX
 11283 ;;		_I2C_DO_RX
 11284 ;;		_I2C_DO_TX_EMPTY
 11285 ;;		_I2C_DO_ADDRESS_NACK
 11286 ;;		_I2C_DO_RX_EMPTY
 11287 ;; This function uses a non-reentrant model
 11288 ;;
 11289                           
 11290     0E08                     _wr2RegCompleteHandler:	
 11291                           ;psect for function _wr2RegCompleteHandler
 11292                           
 11293     0E08                     i1l3253:	
 11294                           ;incstack = 0
 11295                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11296                           
 11297                           
 11298                           ;mcc_generated_files/examples/i2c_master_example.c: 163: static i2c_operations_t wr2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 164: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 165:     I2C_SetBuffer(ptr,2);
 11299     0E08  3002               	movlw	2
 11300     0E09  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11301     0E0A  3000               	movlw	0
 11302     0E0B  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11303     0E0C  0877               	movf	wr2RegCompleteHandler@ptr,w
 11304     0E0D  318D  25FA  318E   	fcall	i1_I2C_SetBuffer
 11305     0E10                     i1l3255:
 11306                           
 11307                           ;mcc_generated_files/examples/i2c_master_example.c: 166:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 11308     0E10  3000               	movlw	0
 11309     0E11  00F4               	movwf	I2C_SetDataCompleteCallback@cb
 11310     0E12  00F5               	movwf	I2C_SetDataCompleteCallback@cb+1
 11311     0E13  01F6               	clrf	I2C_SetDataCompleteCallback@ptr
 11312     0E14  318D  258C  318E   	fcall	_I2C_SetDataCompleteCallback
 11313     0E17                     i1l3257:
 11314                           
 11315                           ;mcc_generated_files/examples/i2c_master_example.c: 167:     return I2C_CONTINUE;
 11316     0E17  3004               	movlw	4
 11317     0E18                     i1l101:
 11318     0E18  0008               	return
 11319     0E19                     __end_of_wr2RegCompleteHandler:
 11320                           
 11321                           	psect	text92
 11322     0DFA                     __ptext92:	
 11323 ;; *************** function i1_I2C_SetBuffer *****************
 11324 ;; Defined at:
 11325 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
 11326 ;; Parameters:    Size  Location     Type
 11327 ;;  buffer          1    wreg     PTR void 
 11328 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
 11329 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Disable(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), 
 11330 ;;		 -> bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1
      +), 
 11331 ;;		 -> I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), 
 11332 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 11333 ;;  bufferSize      2    0[COMMON] unsigned int 
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;  buffer          1    2[COMMON] PTR void 
 11336 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
 11337 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Disable(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), 
 11338 ;;		 -> bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1
      +), 
 11339 ;;		 -> I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), 
 11340 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 11341 ;; Return value:  Size  Location     Type
 11342 ;;                  1    wreg      void 
 11343 ;; Registers used:
 11344 ;;		wreg
 11345 ;; Tracked objects:
 11346 ;;		On entry : 0/0
 11347 ;;		On exit  : 0/0
 11348 ;;		Unchanged: 0/0
 11349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11350 ;;      Params:         2       0       0       0       0       0       0       0
 11351 ;;      Locals:         1       0       0       0       0       0       0       0
 11352 ;;      Temps:          0       0       0       0       0       0       0       0
 11353 ;;      Totals:         3       0       0       0       0       0       0       0
 11354 ;;Total ram usage:        3 bytes
 11355 ;; Hardware stack levels used: 1
 11356 ;; This function calls:
 11357 ;;		Nothing
 11358 ;; This function is called by:
 11359 ;;		_rd1RegCompleteHandler
 11360 ;;		_rd2RegCompleteHandler
 11361 ;;		_wr1RegCompleteHandler
 11362 ;;		_wr2RegCompleteHandler
 11363 ;;		_rdBlkRegCompleteHandler
 11364 ;; This function uses a non-reentrant model
 11365 ;;
 11366                           
 11367     0DFA                     i1_I2C_SetBuffer:	
 11368                           ;psect for function i1_I2C_SetBuffer
 11369                           
 11370                           
 11371                           ;incstack = 0
 11372                           ; Regs used in i1_I2C_SetBuffer: [wreg]
 11373                           ;i1I2C_SetBuffer@buffer stored from wreg
 11374     0DFA  00F2               	movwf	i1I2C_SetBuffer@buffer
 11375     0DFB                     i1l3203:
 11376                           
 11377                           ;mcc_generated_files/i2c_master.c: 264: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 265: {;mcc_generated_files/i2c_master.c: 266:     
      +                          if(I2C_Status.bufferFree)
 11378     0DFB  0021               	movlb	1	; select bank1
 11379     0DFC  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
 11380     0DFD  2DFF               	goto	u115_21
 11381     0DFE  2E00               	goto	u115_20
 11382     0DFF                     u115_21:
 11383     0DFF  2E07               	goto	i1l305
 11384     0E00                     u115_20:
 11385     0E00                     i1l3205:
 11386                           
 11387                           ;mcc_generated_files/i2c_master.c: 267:     {;mcc_generated_files/i2c_master.c: 268:    
      +                               I2C_Status.data_ptr = buffer;
 11388     0E00  0872               	movf	i1I2C_SetBuffer@buffer,w
 11389     0E01  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
 11390                           
 11391                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.data_length = bufferSize;
 11392     0E02  0871               	movf	i1I2C_SetBuffer@bufferSize+1,w
 11393     0E03  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
 11394     0E04  0870               	movf	i1I2C_SetBuffer@bufferSize,w
 11395     0E05  00B8               	movwf	(_I2C_Status^(0+128)+24)
 11396     0E06                     i1l3207:
 11397                           
 11398                           ;mcc_generated_files/i2c_master.c: 270:         I2C_Status.bufferFree = 0;
 11399     0E06  11BC               	bcf	(_I2C_Status^(0+128)+28),3
 11400     0E07                     i1l305:
 11401     0E07  0008               	return
 11402     0E08                     __end_ofi1_I2C_SetBuffer:
 11403                           
 11404                           	psect	text93
 11405     0D8C                     __ptext93:	
 11406 ;; *************** function _I2C_SetDataCompleteCallback *****************
 11407 ;; Defined at:
 11408 ;;		line 274 in file "mcc_generated_files/i2c_master.c"
 11409 ;; Parameters:    Size  Location     Type
 11410 ;;  cb              2    4[COMMON] PTR FTN(PTR void ,)enum 
 11411 ;;		 -> NULL(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 11412 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 11413 ;;  ptr             1    6[COMMON] PTR void 
 11414 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11415 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 11416 ;; Auto vars:     Size  Location     Type
 11417 ;;		None
 11418 ;; Return value:  Size  Location     Type
 11419 ;;                  1    wreg      void 
 11420 ;; Registers used:
 11421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11427 ;;      Params:         3       0       0       0       0       0       0       0
 11428 ;;      Locals:         0       0       0       0       0       0       0       0
 11429 ;;      Temps:          0       0       0       0       0       0       0       0
 11430 ;;      Totals:         3       0       0       0       0       0       0       0
 11431 ;;Total ram usage:        3 bytes
 11432 ;; Hardware stack levels used: 1
 11433 ;; Hardware stack levels required when called: 1
 11434 ;; This function calls:
 11435 ;;		i1_I2C_SetCallback
 11436 ;; This function is called by:
 11437 ;;		_rd1RegCompleteHandler
 11438 ;;		_rd2RegCompleteHandler
 11439 ;;		_wr1RegCompleteHandler
 11440 ;;		_wr2RegCompleteHandler
 11441 ;;		_rdBlkRegCompleteHandler
 11442 ;;		_I2C_Read1ByteRegister
 11443 ;;		_I2C_Read2ByteRegister
 11444 ;;		_I2C_Write1ByteRegister
 11445 ;;		_I2C_Write2ByteRegister
 11446 ;;		_I2C_ReadDataBlock
 11447 ;; This function uses a non-reentrant model
 11448 ;;
 11449                           
 11450     0D8C                     _I2C_SetDataCompleteCallback:	
 11451                           ;psect for function _I2C_SetDataCompleteCallback
 11452                           
 11453     0D8C                     i1l3067:	
 11454                           ;incstack = 0
 11455                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11456                           
 11457                           
 11458                           ;mcc_generated_files/i2c_master.c: 274: void I2C_SetDataCompleteCallback(i2c_callback_t 
      +                          cb, void *ptr);mcc_generated_files/i2c_master.c: 275: {;mcc_generated_files/i2c_master.c
      +                          : 276:     I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 11459     0D8C  0875               	movf	I2C_SetDataCompleteCallback@cb+1,w
 11460     0D8D  00F1               	movwf	i1I2C_SetCallback@cb+1
 11461     0D8E  0874               	movf	I2C_SetDataCompleteCallback@cb,w
 11462     0D8F  00F0               	movwf	i1I2C_SetCallback@cb
 11463     0D90  0876               	movf	I2C_SetDataCompleteCallback@ptr,w
 11464     0D91  00F2               	movwf	i1I2C_SetCallback@ptr
 11465     0D92  3000               	movlw	0
 11466     0D93  318F  27B8  318D   	fcall	i1_I2C_SetCallback
 11467     0D96                     i1l308:
 11468     0D96  0008               	return
 11469     0D97                     __end_of_I2C_SetDataCompleteCallback:
 11470                           
 11471                           	psect	text94
 11472     0FB8                     __ptext94:	
 11473 ;; *************** function i1_I2C_SetCallback *****************
 11474 ;; Defined at:
 11475 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
 11476 ;; Parameters:    Size  Location     Type
 11477 ;;  idx             1    wreg     enum E3130
 11478 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 11479 ;;		 -> NULL(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 11480 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 11481 ;;  ptr             1    2[COMMON] PTR void 
 11482 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 11483 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;  idx             1    3[COMMON] enum E3130
 11486 ;; Return value:  Size  Location     Type
 11487 ;;                  1    wreg      void 
 11488 ;; Registers used:
 11489 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11495 ;;      Params:         3       0       0       0       0       0       0       0
 11496 ;;      Locals:         1       0       0       0       0       0       0       0
 11497 ;;      Temps:          0       0       0       0       0       0       0       0
 11498 ;;      Totals:         4       0       0       0       0       0       0       0
 11499 ;;Total ram usage:        4 bytes
 11500 ;; Hardware stack levels used: 1
 11501 ;; This function calls:
 11502 ;;		Nothing
 11503 ;; This function is called by:
 11504 ;;		_I2C_SetDataCompleteCallback
 11505 ;; This function uses a non-reentrant model
 11506 ;;
 11507                           
 11508     0FB8                     i1_I2C_SetCallback:	
 11509                           ;psect for function i1_I2C_SetCallback
 11510                           
 11511                           
 11512                           ;incstack = 0
 11513                           ; Regs used in i1_I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 11514                           ;i1I2C_SetCallback@idx stored from wreg
 11515     0FB8  00F3               	movwf	i1I2C_SetCallback@idx
 11516     0FB9                     i1l3025:
 11517                           
 11518                           ;mcc_generated_files/i2c_master.c: 304: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 305: {;mcc_generate
      +                          d_files/i2c_master.c: 306:     if(cb)
 11519     0FB9  0870               	movf	i1I2C_SetCallback@cb,w
 11520     0FBA  0471               	iorwf	i1I2C_SetCallback@cb+1,w
 11521     0FBB  1903               	btfsc	3,2
 11522     0FBC  2FBE               	goto	u103_21
 11523     0FBD  2FBF               	goto	u103_20
 11524     0FBE                     u103_21:
 11525     0FBE  2FCE               	goto	i1l3029
 11526     0FBF                     u103_20:
 11527     0FBF                     i1l3027:
 11528                           
 11529                           ;mcc_generated_files/i2c_master.c: 307:     {;mcc_generated_files/i2c_master.c: 308:    
      +                               I2C_Status.callbackTable[idx] = cb;
 11530     0FBF  3573               	lslf	i1I2C_SetCallback@idx,w
 11531     0FC0  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11532     0FC1  0086               	movwf	6
 11533     0FC2  0187               	clrf	7
 11534     0FC3  0870               	movf	i1I2C_SetCallback@cb,w
 11535     0FC4  3FC0               	movwi [0]fsr1
 11536     0FC5  0871               	movf	i1I2C_SetCallback@cb+1,w
 11537     0FC6  3FC1               	movwi [1]fsr1
 11538                           
 11539                           ;mcc_generated_files/i2c_master.c: 309:         I2C_Status.callbackPayload[idx] = ptr;
 11540     0FC7  0873               	movf	i1I2C_SetCallback@idx,w
 11541     0FC8  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 11542     0FC9  0086               	movwf	6
 11543     0FCA  0187               	clrf	7
 11544     0FCB  0872               	movf	i1I2C_SetCallback@ptr,w
 11545     0FCC  0081               	movwf	1
 11546                           
 11547                           ;mcc_generated_files/i2c_master.c: 310:     }
 11548     0FCD  2FDB               	goto	i1l328
 11549     0FCE                     i1l3029:
 11550                           
 11551                           ;mcc_generated_files/i2c_master.c: 312:     {;mcc_generated_files/i2c_master.c: 313:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 11552     0FCE  3573               	lslf	i1I2C_SetCallback@idx,w
 11553     0FCF  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11554     0FD0  0086               	movwf	6
 11555     0FD1  0187               	clrf	7
 11556     0FD2  3086               	movlw	low _I2C_CallbackReturnStop
 11557     0FD3  3FC0               	movwi [0]fsr1
 11558     0FD4  300C               	movlw	high _I2C_CallbackReturnStop
 11559     0FD5  3FC1               	movwi [1]fsr1
 11560                           
 11561                           ;mcc_generated_files/i2c_master.c: 314:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
 11562     0FD6  0873               	movf	i1I2C_SetCallback@idx,w
 11563     0FD7  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 11564     0FD8  0086               	movwf	6
 11565     0FD9  0187               	clrf	7
 11566     0FDA  0181               	clrf	1
 11567     0FDB                     i1l328:
 11568     0FDB  0008               	return
 11569     0FDC                     __end_ofi1_I2C_SetCallback:
 11570                           
 11571                           	psect	text95
 11572     0C8B                     __ptext95:	
 11573 ;; *************** function _I2C_MasterStop *****************
 11574 ;; Defined at:
 11575 ;;		line 594 in file "mcc_generated_files/i2c_master.c"
 11576 ;; Parameters:    Size  Location     Type
 11577 ;;		None
 11578 ;; Auto vars:     Size  Location     Type
 11579 ;;		None
 11580 ;; Return value:  Size  Location     Type
 11581 ;;                  1    wreg      void 
 11582 ;; Registers used:
 11583 ;;		None
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11589 ;;      Params:         0       0       0       0       0       0       0       0
 11590 ;;      Locals:         0       0       0       0       0       0       0       0
 11591 ;;      Temps:          0       0       0       0       0       0       0       0
 11592 ;;      Totals:         0       0       0       0       0       0       0       0
 11593 ;;Total ram usage:        0 bytes
 11594 ;; Hardware stack levels used: 1
 11595 ;; This function calls:
 11596 ;;		Nothing
 11597 ;; This function is called by:
 11598 ;;		_I2C_DO_SEND_STOP
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602     0C8B                     _I2C_MasterStop:	
 11603                           ;psect for function _I2C_MasterStop
 11604                           
 11605     0C8B                     i1l3105:	
 11606                           ;incstack = 0
 11607                           ; Regs used in _I2C_MasterStop: []
 11608                           
 11609                           
 11610                           ;mcc_generated_files/i2c_master.c: 596:     SSPCON2bits.PEN = 1;
 11611     0C8B  0024               	movlb	4	; select bank4
 11612     0C8C  1516               	bsf	22,2	;volatile
 11613     0C8D                     i1l471:
 11614     0C8D  0008               	return
 11615     0C8E                     __end_of_I2C_MasterStop:
 11616                           
 11617                           	psect	text96
 11618     0C88                     __ptext96:	
 11619 ;; *************** function _I2C_MasterEnableRestart *****************
 11620 ;; Defined at:
 11621 ;;		line 574 in file "mcc_generated_files/i2c_master.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;		None
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;		None
 11626 ;; Return value:  Size  Location     Type
 11627 ;;                  1    wreg      void 
 11628 ;; Registers used:
 11629 ;;		None
 11630 ;; Tracked objects:
 11631 ;;		On entry : 0/0
 11632 ;;		On exit  : 0/0
 11633 ;;		Unchanged: 0/0
 11634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11635 ;;      Params:         0       0       0       0       0       0       0       0
 11636 ;;      Locals:         0       0       0       0       0       0       0       0
 11637 ;;      Temps:          0       0       0       0       0       0       0       0
 11638 ;;      Totals:         0       0       0       0       0       0       0       0
 11639 ;;Total ram usage:        0 bytes
 11640 ;; Hardware stack levels used: 1
 11641 ;; This function calls:
 11642 ;;		Nothing
 11643 ;; This function is called by:
 11644 ;;		_I2C_DO_SEND_RESTART_READ
 11645 ;;		_I2C_DO_SEND_RESTART_WRITE
 11646 ;;		_I2C_DO_SEND_RESTART
 11647 ;;		_I2C_DO_RX_EMPTY
 11648 ;; This function uses a non-reentrant model
 11649 ;;
 11650                           
 11651     0C88                     _I2C_MasterEnableRestart:	
 11652                           ;psect for function _I2C_MasterEnableRestart
 11653                           
 11654     0C88                     i1l3103:	
 11655                           ;incstack = 0
 11656                           ; Regs used in _I2C_MasterEnableRestart: []
 11657                           
 11658                           
 11659                           ;mcc_generated_files/i2c_master.c: 576:     SSPCON2bits.RSEN = 1;
 11660     0C88  0024               	movlb	4	; select bank4
 11661     0C89  1496               	bsf	22,1	;volatile
 11662     0C8A                     i1l459:
 11663     0C8A  0008               	return
 11664     0C8B                     __end_of_I2C_MasterEnableRestart:
 11665                           
 11666                           	psect	text97
 11667     0F95                     __ptext97:	
 11668 ;; *************** function _EUSART_Transmit_ISR *****************
 11669 ;; Defined at:
 11670 ;;		line 197 in file "mcc_generated_files/eusart.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;		None
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;		None
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      void 
 11677 ;; Registers used:
 11678 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11684 ;;      Params:         0       0       0       0       0       0       0       0
 11685 ;;      Locals:         0       0       0       0       0       0       0       0
 11686 ;;      Temps:          1       0       0       0       0       0       0       0
 11687 ;;      Totals:         1       0       0       0       0       0       0       0
 11688 ;;Total ram usage:        1 bytes
 11689 ;; Hardware stack levels used: 1
 11690 ;; This function calls:
 11691 ;;		Nothing
 11692 ;; This function is called by:
 11693 ;;		_EUSART_Initialize
 11694 ;;		_INTERRUPT_InterruptManager
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698     0F95                     _EUSART_Transmit_ISR:	
 11699                           ;psect for function _EUSART_Transmit_ISR
 11700                           
 11701     0F95                     i1l3793:	
 11702                           ;incstack = 0
 11703                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11704                           
 11705                           
 11706                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 11707     0F95  3010               	movlw	16
 11708     0F96  0020               	movlb	0	; select bank0
 11709     0F97  026C               	subwf	_eusartTxBufferRemaining,w	;volatile
 11710     0F98  1803               	skipnc
 11711     0F99  2F9B               	goto	u140_21
 11712     0F9A  2F9C               	goto	u140_20
 11713     0F9B                     u140_21:
 11714     0F9B  2FB5               	goto	i1l649
 11715     0F9C                     u140_20:
 11716     0F9C                     i1l3795:
 11717                           
 11718                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 11719     0F9C  086D               	movf	_eusartTxTail,w
 11720     0F9D  3E40               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 11721     0F9E  0086               	movwf	6
 11722     0F9F  3001               	movlw	1	; select bank2/3
 11723     0FA0  0087               	movwf	7
 11724     0FA1  0801               	movf	1,w
 11725     0FA2  0023               	movlb	3	; select bank3
 11726     0FA3  009A               	movwf	26	;volatile
 11727     0FA4                     i1l3797:
 11728     0FA4  3001               	movlw	1
 11729     0FA5  00F0               	movwf	??_EUSART_Transmit_ISR
 11730     0FA6  0870               	movf	??_EUSART_Transmit_ISR,w
 11731     0FA7  0020               	movlb	0	; select bank0
 11732     0FA8  07ED               	addwf	_eusartTxTail,f	;volatile
 11733     0FA9                     i1l3799:
 11734                           
 11735                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 11736     0FA9  3010               	movlw	16
 11737     0FAA  026D               	subwf	_eusartTxTail,w	;volatile
 11738     0FAB  1C03               	skipc
 11739     0FAC  2FAE               	goto	u141_21
 11740     0FAD  2FAF               	goto	u141_20
 11741     0FAE                     u141_21:
 11742     0FAE  2FB0               	goto	i1l3803
 11743     0FAF                     u141_20:
 11744     0FAF                     i1l3801:
 11745                           
 11746                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 11747     0FAF  01ED               	clrf	_eusartTxTail	;volatile
 11748     0FB0                     i1l3803:
 11749                           
 11750                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 11751     0FB0  3001               	movlw	1
 11752     0FB1  00F0               	movwf	??_EUSART_Transmit_ISR
 11753     0FB2  0870               	movf	??_EUSART_Transmit_ISR,w
 11754     0FB3  07EC               	addwf	_eusartTxBufferRemaining,f	;volatile
 11755                           
 11756                           ;mcc_generated_files/eusart.c: 209:     }
 11757     0FB4  2FB7               	goto	i1l652
 11758     0FB5                     i1l649:	
 11759                           ;mcc_generated_files/eusart.c: 210:     else
 11760                           
 11761                           
 11762                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 11763     0FB5  0021               	movlb	1	; select bank1
 11764     0FB6  1211               	bcf	17,4	;volatile
 11765     0FB7                     i1l652:
 11766     0FB7  0008               	return
 11767     0FB8                     __end_of_EUSART_Transmit_ISR:
 11768                           
 11769                           	psect	text98
 11770     0605                     __ptext98:	
 11771 ;; *************** function _EUSART_Receive_ISR *****************
 11772 ;; Defined at:
 11773 ;;		line 216 in file "mcc_generated_files/eusart.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;		None
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      void 
 11780 ;; Registers used:
 11781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11787 ;;      Params:         0       0       0       0       0       0       0       0
 11788 ;;      Locals:         0       0       0       0       0       0       0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0       0
 11790 ;;      Totals:         0       0       0       0       0       0       0       0
 11791 ;;Total ram usage:        0 bytes
 11792 ;; Hardware stack levels used: 1
 11793 ;; Hardware stack levels required when called: 2
 11794 ;; This function calls:
 11795 ;;		NULL
 11796 ;;		_EUSART_DefaultErrorHandler
 11797 ;;		_EUSART_DefaultFramingErrorHandler
 11798 ;;		_EUSART_DefaultOverrunErrorHandler
 11799 ;;		_EUSART_RxDataHandler
 11800 ;; This function is called by:
 11801 ;;		_EUSART_Initialize
 11802 ;;		_INTERRUPT_InterruptManager
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806     0605                     _EUSART_Receive_ISR:	
 11807                           ;psect for function _EUSART_Receive_ISR
 11808                           
 11809     0605                     i1l3805:	
 11810                           ;incstack = 0
 11811                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11812                           
 11813                           
 11814                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 11815     0605  0020               	movlb	0	; select bank0
 11816     0606  086B               	movf	_eusartRxHead,w	;volatile
 11817     0607  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 11818     0608  0086               	movwf	6
 11819     0609  3001               	movlw	1	; select bank2/3
 11820     060A  0087               	movwf	7
 11821     060B  0181               	clrf	1
 11822     060C                     i1l3807:
 11823                           
 11824                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 11825     060C  0023               	movlb	3	; select bank3
 11826     060D  1D1D               	btfss	29,2	;volatile
 11827     060E  2E10               	goto	u142_21
 11828     060F  2E11               	goto	u142_20
 11829     0610                     u142_21:
 11830     0610  2E1E               	goto	i1l3813
 11831     0611                     u142_20:
 11832     0611                     i1l3809:
 11833                           
 11834                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 11835     0611  0020               	movlb	0	; select bank0
 11836     0612  086B               	movf	_eusartRxHead,w	;volatile
 11837     0613  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 11838     0614  0086               	movwf	6
 11839     0615  3001               	movlw	1	; select bank2/3
 11840     0616  0087               	movwf	7
 11841     0617  1481               	bsf	1,1
 11842     0618                     i1l3811:
 11843                           
 11844                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 11845     0618  0021               	movlb	1	; select bank1
 11846     0619  0854               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 11847     061A  008A               	movwf	10
 11848     061B  0853               	movf	_EUSART_FramingErrorHandler^(0+128),w
 11849     061C  000A               	callw
 11850     061D  3186               	pagesel	$
 11851     061E                     i1l3813:
 11852                           
 11853                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 11854     061E  0023               	movlb	3	; select bank3
 11855     061F  1C9D               	btfss	29,1	;volatile
 11856     0620  2E22               	goto	u143_21
 11857     0621  2E23               	goto	u143_20
 11858     0622                     u143_21:
 11859     0622  2E30               	goto	i1l3819
 11860     0623                     u143_20:
 11861     0623                     i1l3815:
 11862                           
 11863                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 11864     0623  0020               	movlb	0	; select bank0
 11865     0624  086B               	movf	_eusartRxHead,w	;volatile
 11866     0625  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 11867     0626  0086               	movwf	6
 11868     0627  3001               	movlw	1	; select bank2/3
 11869     0628  0087               	movwf	7
 11870     0629  1501               	bsf	1,2
 11871     062A                     i1l3817:
 11872                           
 11873                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 11874     062A  0021               	movlb	1	; select bank1
 11875     062B  0852               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 11876     062C  008A               	movwf	10
 11877     062D  0851               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 11878     062E  000A               	callw
 11879     062F  3186               	pagesel	$
 11880     0630                     i1l3819:
 11881                           
 11882                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 11883     0630  0020               	movlb	0	; select bank0
 11884     0631  086B               	movf	_eusartRxHead,w	;volatile
 11885     0632  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 11886     0633  0086               	movwf	6
 11887     0634  3001               	movlw	1	; select bank2/3
 11888     0635  0087               	movwf	7
 11889     0636  0801               	movf	1,w
 11890     0637  1903               	btfsc	3,2
 11891     0638  2E3A               	goto	u144_21
 11892     0639  2E3B               	goto	u144_20
 11893     063A                     u144_21:
 11894     063A  2E42               	goto	i1l3823
 11895     063B                     u144_20:
 11896     063B                     i1l3821:
 11897                           
 11898                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 11899     063B  0021               	movlb	1	; select bank1
 11900     063C  0850               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 11901     063D  008A               	movwf	10
 11902     063E  084F               	movf	_EUSART_ErrorHandler^(0+128),w
 11903     063F  000A               	callw
 11904     0640  3186               	pagesel	$
 11905                           
 11906                           ;mcc_generated_files/eusart.c: 233:     } else {
 11907     0641  2E45               	goto	i1l659
 11908     0642                     i1l3823:
 11909                           
 11910                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 11911     0642  318E  26EB  3186   	fcall	_EUSART_RxDataHandler
 11912     0645                     i1l659:
 11913     0645  0008               	return
 11914     0646                     __end_of_EUSART_Receive_ISR:
 11915                           
 11916                           	psect	text99
 11917     0CB0                     __ptext99:	
 11918 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 11919 ;; Defined at:
 11920 ;;		line 252 in file "mcc_generated_files/eusart.c"
 11921 ;; Parameters:    Size  Location     Type
 11922 ;;		None
 11923 ;; Auto vars:     Size  Location     Type
 11924 ;;		None
 11925 ;; Return value:  Size  Location     Type
 11926 ;;                  1    wreg      void 
 11927 ;; Registers used:
 11928 ;;		None
 11929 ;; Tracked objects:
 11930 ;;		On entry : 0/0
 11931 ;;		On exit  : 0/0
 11932 ;;		Unchanged: 0/0
 11933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11934 ;;      Params:         0       0       0       0       0       0       0       0
 11935 ;;      Locals:         0       0       0       0       0       0       0       0
 11936 ;;      Temps:          0       0       0       0       0       0       0       0
 11937 ;;      Totals:         0       0       0       0       0       0       0       0
 11938 ;;Total ram usage:        0 bytes
 11939 ;; Hardware stack levels used: 1
 11940 ;; This function calls:
 11941 ;;		Nothing
 11942 ;; This function is called by:
 11943 ;;		_EUSART_Initialize
 11944 ;;		_EUSART_Receive_ISR
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948     0CB0                     _EUSART_DefaultOverrunErrorHandler:	
 11949                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 11950                           
 11951     0CB0                     i1l3715:	
 11952                           ;incstack = 0
 11953                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 11954                           
 11955                           
 11956                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 11957     0CB0  0023               	movlb	3	; select bank3
 11958     0CB1  121D               	bcf	29,4	;volatile
 11959                           
 11960                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 11961     0CB2  161D               	bsf	29,4	;volatile
 11962     0CB3                     i1l669:
 11963     0CB3  0008               	return
 11964     0CB4                     __end_of_EUSART_DefaultOverrunErrorHandler:
 11965                           
 11966                           	psect	text100
 11967     0C85                     __ptext100:	
 11968 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 11969 ;; Defined at:
 11970 ;;		line 250 in file "mcc_generated_files/eusart.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;		None
 11973 ;; Auto vars:     Size  Location     Type
 11974 ;;		None
 11975 ;; Return value:  Size  Location     Type
 11976 ;;                  1    wreg      void 
 11977 ;; Registers used:
 11978 ;;		None
 11979 ;; Tracked objects:
 11980 ;;		On entry : 0/0
 11981 ;;		On exit  : 0/0
 11982 ;;		Unchanged: 0/0
 11983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11984 ;;      Params:         0       0       0       0       0       0       0       0
 11985 ;;      Locals:         0       0       0       0       0       0       0       0
 11986 ;;      Temps:          0       0       0       0       0       0       0       0
 11987 ;;      Totals:         0       0       0       0       0       0       0       0
 11988 ;;Total ram usage:        0 bytes
 11989 ;; Hardware stack levels used: 1
 11990 ;; This function calls:
 11991 ;;		Nothing
 11992 ;; This function is called by:
 11993 ;;		_EUSART_Initialize
 11994 ;;		_EUSART_Receive_ISR
 11995 ;; This function uses a non-reentrant model
 11996 ;;
 11997                           
 11998     0C85                     _EUSART_DefaultFramingErrorHandler:	
 11999                           ;psect for function _EUSART_DefaultFramingErrorHandler
 12000                           
 12001     0C85                     i1l666:	
 12002                           ;incstack = 0
 12003                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 12004                           
 12005     0C85  0008               	return
 12006     0C86                     __end_of_EUSART_DefaultFramingErrorHandler:
 12007                           
 12008                           	psect	text101
 12009     0CAC                     __ptext101:	
 12010 ;; *************** function _EUSART_DefaultErrorHandler *****************
 12011 ;; Defined at:
 12012 ;;		line 260 in file "mcc_generated_files/eusart.c"
 12013 ;; Parameters:    Size  Location     Type
 12014 ;;		None
 12015 ;; Auto vars:     Size  Location     Type
 12016 ;;		None
 12017 ;; Return value:  Size  Location     Type
 12018 ;;                  1    wreg      void 
 12019 ;; Registers used:
 12020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12021 ;; Tracked objects:
 12022 ;;		On entry : 0/0
 12023 ;;		On exit  : 0/0
 12024 ;;		Unchanged: 0/0
 12025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12026 ;;      Params:         0       0       0       0       0       0       0       0
 12027 ;;      Locals:         0       0       0       0       0       0       0       0
 12028 ;;      Temps:          0       0       0       0       0       0       0       0
 12029 ;;      Totals:         0       0       0       0       0       0       0       0
 12030 ;;Total ram usage:        0 bytes
 12031 ;; Hardware stack levels used: 1
 12032 ;; Hardware stack levels required when called: 1
 12033 ;; This function calls:
 12034 ;;		_EUSART_RxDataHandler
 12035 ;; This function is called by:
 12036 ;;		_EUSART_Initialize
 12037 ;;		_EUSART_Receive_ISR
 12038 ;; This function uses a non-reentrant model
 12039 ;;
 12040                           
 12041     0CAC                     _EUSART_DefaultErrorHandler:	
 12042                           ;psect for function _EUSART_DefaultErrorHandler
 12043                           
 12044     0CAC                     i1l3717:	
 12045                           ;incstack = 0
 12046                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12047                           
 12048                           
 12049                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 12050     0CAC  318E  26EB  318C   	fcall	_EUSART_RxDataHandler
 12051     0CAF                     i1l672:
 12052     0CAF  0008               	return
 12053     0CB0                     __end_of_EUSART_DefaultErrorHandler:
 12054                           
 12055                           	psect	text102
 12056     0EEB                     __ptext102:	
 12057 ;; *************** function _EUSART_RxDataHandler *****************
 12058 ;; Defined at:
 12059 ;;		line 240 in file "mcc_generated_files/eusart.c"
 12060 ;; Parameters:    Size  Location     Type
 12061 ;;		None
 12062 ;; Auto vars:     Size  Location     Type
 12063 ;;		None
 12064 ;; Return value:  Size  Location     Type
 12065 ;;                  1    wreg      void 
 12066 ;; Registers used:
 12067 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12068 ;; Tracked objects:
 12069 ;;		On entry : 0/0
 12070 ;;		On exit  : 0/0
 12071 ;;		Unchanged: 0/0
 12072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12073 ;;      Params:         0       0       0       0       0       0       0       0
 12074 ;;      Locals:         0       0       0       0       0       0       0       0
 12075 ;;      Temps:          1       0       0       0       0       0       0       0
 12076 ;;      Totals:         1       0       0       0       0       0       0       0
 12077 ;;Total ram usage:        1 bytes
 12078 ;; Hardware stack levels used: 1
 12079 ;; This function calls:
 12080 ;;		Nothing
 12081 ;; This function is called by:
 12082 ;;		_EUSART_Receive_ISR
 12083 ;;		_EUSART_DefaultErrorHandler
 12084 ;; This function uses a non-reentrant model
 12085 ;;
 12086                           
 12087     0EEB                     _EUSART_RxDataHandler:	
 12088                           ;psect for function _EUSART_RxDataHandler
 12089                           
 12090     0EEB                     i1l3565:	
 12091                           ;incstack = 0
 12092                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 12093                           
 12094                           
 12095                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 12096     0EEB  0020               	movlb	0	; select bank0
 12097     0EEC  086B               	movf	_eusartRxHead,w
 12098     0EED  3E30               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12099     0EEE  0086               	movwf	6
 12100     0EEF  3001               	movlw	1	; select bank2/3
 12101     0EF0  0087               	movwf	7
 12102     0EF1  0023               	movlb	3	; select bank3
 12103     0EF2  0819               	movf	25,w	;volatile
 12104     0EF3  0081               	movwf	1
 12105     0EF4                     i1l3567:
 12106     0EF4  3001               	movlw	1
 12107     0EF5  00F0               	movwf	??_EUSART_RxDataHandler
 12108     0EF6  0870               	movf	??_EUSART_RxDataHandler,w
 12109     0EF7  0020               	movlb	0	; select bank0
 12110     0EF8  07EB               	addwf	_eusartRxHead,f	;volatile
 12111     0EF9                     i1l3569:
 12112                           
 12113                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 12114     0EF9  3010               	movlw	16
 12115     0EFA  026B               	subwf	_eusartRxHead,w	;volatile
 12116     0EFB  1C03               	skipc
 12117     0EFC  2EFE               	goto	u130_21
 12118     0EFD  2EFF               	goto	u130_20
 12119     0EFE                     u130_21:
 12120     0EFE  2F00               	goto	i1l3573
 12121     0EFF                     u130_20:
 12122     0EFF                     i1l3571:
 12123                           
 12124                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 12125     0EFF  01EB               	clrf	_eusartRxHead	;volatile
 12126     0F00                     i1l3573:
 12127                           
 12128                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 12129     0F00  3001               	movlw	1
 12130     0F01  00F0               	movwf	??_EUSART_RxDataHandler
 12131     0F02  0870               	movf	??_EUSART_RxDataHandler,w
 12132     0F03  07E9               	addwf	_eusartRxCount,f	;volatile
 12133     0F04                     i1l663:
 12134     0F04  0008               	return
 12135     0F05                     __end_of_EUSART_RxDataHandler:
 12136     007E                     btemp	set	126	;btemp
 12137     007E                     int$flags	set	126
 12138     007E                     wtemp0	set	126
 12139     20D4                     
 12140                           	psect	idloc
 12141                           
 12142                           ;Config register IDLOC0 @ 0x8000
 12143                           ;	unspecified, using default values
 12144     8000                     	org	32768
 12145     8000  3FFF               	dw	16383
 12146                           
 12147                           ;Config register IDLOC1 @ 0x8001
 12148                           ;	unspecified, using default values
 12149     8001                     	org	32769
 12150     8001  3FFF               	dw	16383
 12151                           
 12152                           ;Config register IDLOC2 @ 0x8002
 12153                           ;	unspecified, using default values
 12154     8002                     	org	32770
 12155     8002  3FFF               	dw	16383
 12156                           
 12157                           ;Config register IDLOC3 @ 0x8003
 12158                           ;	unspecified, using default values
 12159     8003                     	org	32771
 12160     8003  3FFF               	dw	16383
 12161                           
 12162                           	psect	config
 12163                           
 12164                           ;Config register CONFIG1 @ 0x8007
 12165                           ;	Oscillator Selection
 12166                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 12167                           ;	Watchdog Timer Enable
 12168                           ;	WDTE = SWDTEN, WDT controlled by the SWDTEN bit in the WDTCON register
 12169                           ;	Power-up Timer Enable
 12170                           ;	PWRTE = OFF, PWRT disabled
 12171                           ;	MCLR Pin Function Select
 12172                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 12173                           ;	Flash Program Memory Code Protection
 12174                           ;	CP = OFF, Program memory code protection is disabled
 12175                           ;	Data Memory Code Protection
 12176                           ;	CPD = OFF, Data memory code protection is disabled
 12177                           ;	Brown-out Reset Enable
 12178                           ;	BOREN = ON, Brown-out Reset enabled
 12179                           ;	Clock Out Enable
 12180                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 12181                           ;	Internal/External Switchover
 12182                           ;	IESO = ON, Internal/External Switchover mode is enabled
 12183                           ;	Fail-Safe Clock Monitor Enable
 12184                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 12185     8007                     	org	32775
 12186     8007  3FEC               	dw	16364
 12187                           
 12188                           ;Config register CONFIG2 @ 0x8008
 12189                           ;	Flash Memory Self-Write Protection
 12190                           ;	WRT = OFF, Write protection off
 12191                           ;	Voltage Regulator Capacitor Enable
 12192                           ;	VCAPEN = RA5, VCAP functionality is enabled on RA5
 12193                           ;	PLL Enable
 12194                           ;	PLLEN = OFF, 4x PLL disabled
 12195                           ;	Stack Overflow/Underflow Reset Enable
 12196                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 12197                           ;	Brown-out Reset Voltage Selection
 12198                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 12199                           ;	Low-Voltage Programming Enable
 12200                           ;	LVP = ON, Low-voltage programming enabled
 12201     8008                     	org	32776
 12202     8008  3EDF               	dw	16095

Data Sizes:
    Strings     0
    Constant    40
    Data        12
    BSS         111
    Persistent  49
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     63      80
    BANK1            80      0      73
    BANK2            52      0      48
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_DO_TX$2353$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$2358	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$2353	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$2352	const PTR FTN()enum E3112 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    NULL$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S335$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    ModbusRTU_Slave_Poll@reg	PTR short  size(1) Largest target is 4
		 -> MB_Register(BANK1[4]), 

    ModbusSlaveF04@reg	PTR unsigned short  size(2) Largest target is 4096
		 -> MB_Register(BANK1[4]), RAM(DATA[4096]), 

    S1470$INPUT_REGS	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.INPUT_REGS	PTR unsigned short  size(2) Largest target is 0

    S1470$HOLDING_REGS	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.HOLDING_REGS	PTR unsigned short  size(2) Largest target is 0

    S1470$au16regs	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.au16regs	PTR unsigned short  size(2) Largest target is 0

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> rtcc_handle(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> rtcc_handle(), TMR1_DefaultInterruptHandler(), NULL(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), 

    MSSP_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), NULL(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 6
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Disable(BANK1[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S335$data_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Disable(BANK1[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> I2C_Read1ByteRegister@returnValue.data(COMMON[2]), I2C_Read2ByteRegister@returnValue.data(COMMON[2]), I2C_Write1ByteRegister@data.data(COMMON[2]), I2C_Write2ByteRegister@data.data(COMMON[2]), 
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Disable(BANK1[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> bufferBlock.data(COMMON[2]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), 
		 -> I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S335$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S335$callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    i2c_fsmStateTable	const PTR FTN()enum E3112[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(2) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S95$data	PTR unsigned char  size(2) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(2) Largest target is 0

    I2C_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 6
		 -> ReadData@aData(BANK0[6]), 

    I2C_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 2
		 -> SHT30_CMD_MEASURE_H_Disable(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _I2C_MasterIsr->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_ADDRESS_NACK
    _I2C_MasterFsm->_I2C_DO_RX
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_MasterFsm->_I2C_DO_TX_EMPTY
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->i1_I2C_SetCallback
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _Task_Sensor->_ReadData
    _ReadData->_I2C_WriteNBytes
    _I2C_WriteNBytes->_I2C_SetAddressNackCallback
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_ReadNBytes->_I2C_Open
    _I2C_Open->_I2C_SetInterruptHandler
    _I2C_MasterRead->_I2C_MasterOperation
    _ModbusSlave_Process->_ModbusRTU_Slave_Poll
    _ModbusRTU_Slave_Poll->_ModbusSlaveF04
    _validateRequest->_Modbus_calcCRC
    _Modbus_getRxBuff->_EUSART_Read
    _ModbusSlaveF04->_Modbus_sendTxBuff
    _Modbus_sendTxBuff->_Modbus_calcCRC
    _App_Init->_Device_Init
    _Tick_Init_SES->_TMR1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8277
                           _App_Init
                        _App_Process
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     664
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     490
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _App_Process                                          0     0      0    7439
                     _Task_Indicator
                            _Task_MB
                        _Task_Sensor
 ---------------------------------------------------------------------------------
 (2) _Task_Sensor                                          4     4      0    5265
                                             26 BANK0      4     4      0
                         _Get_millis
                           _ReadData
 ---------------------------------------------------------------------------------
 (3) _ReadData                                            14    14      0    5265
                                             12 BANK0     14    14      0
                         _Get_millis
                     _I2C_ReadNBytes
                    _I2C_WriteNBytes
 ---------------------------------------------------------------------------------
 (4) _I2C_WriteNBytes                                      4     1      3    3472
                                              8 BANK0      4     1      3
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C_SetAddressNackCallback                           4     0      4    1818
                                              4 BANK0      4     0      4
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (6) _I2C_SetCallback                                      4     1      3     862
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWrite                                      0     0      0      46
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (4) _I2C_ReadNBytes                                       4     1      3    1654
                                              4 BANK0      4     1      3
                          _I2C_Close
                     _I2C_MasterRead
                           _I2C_Open
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C_SetBuffer                                        3     1      2    1222
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _I2C_Open                                             2     2      0     144
                                              2 BANK0      2     2      0
                 _I2C_MasterClearIrq
                _I2C_MasterEnableIrq
                     _I2C_MasterOpen
            _I2C_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (6) _I2C_SetInterruptHandler                              2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterEnableIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterRead                                       0     0      0      46
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterOperation                                  2     2      0      46
                                              0 BANK0      2     2      0
                    _I2C_MasterStart
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_Close                                            1     1      0      24
                                              0 BANK0      1     1      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Task_MB                                              0     0      0    2174
                   _ModbusSlave_Init
                _ModbusSlave_Process
 ---------------------------------------------------------------------------------
 (3) _ModbusSlave_Process                                  1     1      0    2152
               _ModbusRTU_Slave_Poll
 ---------------------------------------------------------------------------------
 (4) _ModbusRTU_Slave_Poll                                14    12      2    2150
                                             49 BANK0     14    12      2
                         _Get_millis
                     _ModbusSlaveF04
                   _Modbus_getRxBuff
                  _Modbus_sendTxBuff
                     _buildException
                    _validateRequest
 ---------------------------------------------------------------------------------
 (5) _validateRequest                                     17    17      0     393
                                             15 BANK0     17    17      0
                     _Modbus_calcCRC
 ---------------------------------------------------------------------------------
 (5) _buildException                                       3     3      0      45
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _Modbus_getRxBuff                                     8     8      0      48
                                              2 BANK0      8     8      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _ModbusSlaveF04                                      20    17      3     787
                                             30 BANK0     19    16      3
                  _Modbus_sendTxBuff
 ---------------------------------------------------------------------------------
 (5) _Modbus_sendTxBuff                                   15    15      0     435
                                             15 BANK0     15    15      0
                       _EUSART_Write
                  _EUSART_is_tx_done
                         _Get_millis
                     _Modbus_calcCRC
 ---------------------------------------------------------------------------------
 (6) _Modbus_calcCRC                                      15    13      2     277
                                              0 BANK0     15    13      2
 ---------------------------------------------------------------------------------
 (4) _Get_millis                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) _EUSART_is_tx_done                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ModbusSlave_Init                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Task_Indicator                                       2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _App_Init                                             0     0      0     174
                        _Device_Init
                    _TMR1_StartTimer
                      _Tick_Init_SES
 ---------------------------------------------------------------------------------
 (2) _Tick_Init_SES                                        0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Device_Init                                          3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0   40774
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                      _I2C_MasterIsr *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     240
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                                NULL *
       _TMR1_DefaultInterruptHandler *
                        _rtcc_handle *
 ---------------------------------------------------------------------------------
 (11) _rtcc_handle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterIsr                                        0     0      0   40534
                      _I2C_MasterFsm
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterFsm                                       2     2      0   40534
                                             10 COMMON     2     2      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                   _I2C_MasterIsNack
               i1_I2C_MasterClearIrq
 ---------------------------------------------------------------------------------
 (11) i1_I2C_MasterClearIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_TX_EMPTY                                     2     2      0   10117
                                              8 COMMON     2     2      0
                                NULL *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_TX                                           2     2      0   10139
                                              8 COMMON     2     2      0
                                NULL *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_RESTART_WRITE                           0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_RESTART_READ                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_ADR_WRITE                               0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_SEND_ADR_READ                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterSendTxData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RX_ACK                                       0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RX                                           2     2      0   10117
                                              8 COMMON     2     2      0
                                NULL *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterSendAck                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RX_NACK_STOP                                 0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RX_NACK_RESTART                              0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterSendNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_RCEN                                         0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_DO_ADDRESS_NACK                                 2     2      0   10117
                                              8 COMMON     2     2      0
                                NULL *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _wr2RegCompleteHandler                               1     0      1    1966
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) _wr1RegCompleteHandler                               1     0      1    1966
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) _rdBlkRegCompleteHandler                             1     0      1    1988
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) _rd2RegCompleteHandler                               1     0      1    1966
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (12) _rd1RegCompleteHandler                               1     0      1    1966
                                              7 COMMON     1     0      1
        _I2C_SetDataCompleteCallback
                    i1_I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (13) i1_I2C_SetBuffer                                     3     1      2     174
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (13) _I2C_SetDataCompleteCallback                         3     0      3    1770
                                              4 COMMON     3     0      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (14) i1_I2C_SetCallback                                   4     1      3     206
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_STOP                                    0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_RESTART                                 0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_CallbackReturnStop                              1     0      1       0
                                              7 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (12) _I2C_CallbackReturnReset                             1     0      1     265
                                              7 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) NULL(Fake)                                           1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _App_Init
     _Device_Init
     _TMR1_StartTimer
     _Tick_Init_SES
       _TMR1_SetInterruptHandler
   _App_Process
     _Task_Indicator
     _Task_MB
       _ModbusSlave_Init
       _ModbusSlave_Process
         _ModbusRTU_Slave_Poll
           _Get_millis
           _ModbusSlaveF04
             _Modbus_sendTxBuff
               _EUSART_Write
               _EUSART_is_tx_done
               _Get_millis
               _Modbus_calcCRC
           _Modbus_getRxBuff
             _EUSART_Read
           _Modbus_sendTxBuff
           _buildException
           _validateRequest
             _Modbus_calcCRC
     _Task_Sensor
       _Get_millis
       _ReadData
         _Get_millis
         _I2C_ReadNBytes
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterRead
             _I2C_MasterOperation
               _I2C_MasterStart
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterEnableIrq
             _I2C_MasterOpen
             _I2C_SetInterruptHandler
           _I2C_SetBuffer
         _I2C_WriteNBytes
           _I2C_Close
           _I2C_MasterWrite
             _I2C_MasterOperation
           _I2C_Open
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _I2C_MasterIsr *
     _I2C_MasterFsm
       _I2C_DO_ADDRESS_NACK *
         NULL(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART *
           _I2C_MasterEnableRestart
         _I2C_DO_SEND_STOP *
           _I2C_MasterStop
         _rd1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
         _rd2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
           i1_I2C_SetBuffer
         _rdBlkRegCompleteHandler *
           _I2C_SetDataCompleteCallback
           i1_I2C_SetBuffer
         _wr1RegCompleteHandler *
           _I2C_SetDataCompleteCallback
           i1_I2C_SetBuffer
         _wr2RegCompleteHandler *
           _I2C_SetDataCompleteCallback
           i1_I2C_SetBuffer
       _I2C_DO_IDLE *
       _I2C_DO_RCEN *
         _I2C_MasterStartRx
       _I2C_DO_RESET *
       _I2C_DO_RX *
         NULL(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_RX_NACK_RESTART *
           _I2C_MasterSendNack
         _I2C_DO_RX_NACK_STOP *
           _I2C_MasterSendNack
         _I2C_MasterGetRxData *
         _I2C_MasterSendAck *
         _rd1RegCompleteHandler *
         _rd2RegCompleteHandler *
         _rdBlkRegCompleteHandler *
         _wr1RegCompleteHandler *
         _wr2RegCompleteHandler *
       _I2C_DO_RX_ACK *
         _I2C_MasterSendAck
       _I2C_DO_RX_NACK_RESTART *
       _I2C_DO_RX_NACK_STOP *
       _I2C_DO_SEND_ADR_READ *
         _I2C_MasterSendTxData
       _I2C_DO_SEND_ADR_WRITE *
         _I2C_MasterSendTxData
       _I2C_DO_SEND_RESTART *
       _I2C_DO_SEND_RESTART_READ *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_RESTART_WRITE *
         _I2C_MasterEnableRestart
       _I2C_DO_SEND_STOP *
       _I2C_DO_TX *
         NULL(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART_READ *
         _I2C_DO_SEND_RESTART_WRITE *
         _I2C_DO_SEND_STOP *
         _I2C_MasterIsNack *
         _I2C_MasterSendTxData *
         _rd1RegCompleteHandler *
         _rd2RegCompleteHandler *
         _rdBlkRegCompleteHandler *
         _wr1RegCompleteHandler *
         _wr2RegCompleteHandler *
       _I2C_DO_TX_EMPTY *
         NULL(Fake) *
         _I2C_CallbackReturnReset *
         _I2C_CallbackReturnStop *
         _I2C_DO_SEND_RESTART *
         _I2C_DO_SEND_STOP *
         _I2C_MasterSetIrq *
         _rd1RegCompleteHandler *
         _rd2RegCompleteHandler *
         _rdBlkRegCompleteHandler *
         _wr1RegCompleteHandler *
         _wr2RegCompleteHandler *
       _I2C_MasterIsNack *
       i1_I2C_MasterClearIrq *
   _TMR1_ISR *
     _TMR1_CallBack
       NULL(Fake) *
       _TMR1_DefaultInterruptHandler *
       _rtcc_handle *
     _TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D7       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3F      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      49       8       91.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               34      0      30      10       92.3%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      D7      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Apr 12 16:29:07 2023

                            _Modbus_sendTxBuff 0099                           ?_ModbusSlave_Process 0070  
                ?_EUSART_SetRxInterruptHandler 0020                         ??_I2C_DO_SEND_ADR_READ 0070  
                      ??_I2C_DO_SEND_ADR_WRITE 0071                                    _SSPSTATbits 0214  
                           ?_Modbus_sendTxBuff 0070                                             l71 070B  
                                           l80 0F94                        buildException@exception 0021  
                        ??_I2C_DO_SEND_RESTART 0070                                            l135 0F55  
                                          l305 0EB9                                            l314 0DA2  
                                          l323 0D0F                                            l163 0EA4  
                                          l166 0D1D                                            l328 07FE  
                                          l169 0CC7                                            l450 0CA2  
                                          l282 057F                                            l292 0F73  
                                          l286 0F39                                            l278 0D6D  
                                          l295 0CFE                                            l447 0DF9  
                                          l642 073E                                            l298 0D03  
                                          l802 03D3                                            l618 0604  
                                          l643 0748                                            l627 0CC3  
                                          l468 0CA8                                            l716 0EEA  
                                          l637 0789                                            l646 0760  
                                          l719 0C9C                                            l495 0CA5  
                                          l489 0CAB                                            l681 0D40  
                                          l498 0C9F                                            l851 0FDF  
                                          l915 02EF                                            l931 0374  
                                          l675 0D49                                            l860 0FE5  
                                          l844 0E91                                            l684 0D64  
                                          l749 0D37                                            l837 04E6  
                                          l862 0FE7                                            l918 0736  
                                          l678 0D52                                            l855 0FE1  
                                          l927 048E                                            l687 0D5B  
                                          l864 0FFF                                            l857 0FE3  
                                          l849 0FDD                                            l961 015B  
                                          l881 0D8B                                            l875 06B3  
                                          l963 017B                                            l939 0248  
                                          l972 0432                                            l949 00F1  
                                          l878 0D81                                            l975 0684  
                                          l978 0F1E                                            l995 0E6D  
                                          l989 0E7F                            __end_of_App_Process 0D8C  
                                          u900 0410                                            u901 040F  
                                          u910 041A                                            u911 0419  
                                          u920 0DF2                                            u921 0DF1  
                                          u850 073E                                            u930 0F5F  
                                          u851 073D                                            u931 0F5E  
                                          u860 0743                                            u940 0F67  
                                          u861 0742                                            u941 0F66  
                                          u870 075B                                            u950 07E2  
                                          u871 075A                                            u951 07E1  
                                          u960 0767                                            u961 0766  
                                          u890 0402                                            u970 077F  
                                          u891 0401                                            u971 077E  
                                          u980 00F1                                            u885 03F8  
                                          u981 00F0                                            u990 011C  
                                          u991 011B                                            u995 0118  
                              _timer1ReloadVal 007C                         ??_EUSART_RxDataHandler 0070  
                          ??_Modbus_sendTxBuff 002F                 ?_EUSART_SetFramingErrorHandler 0020  
                                          wreg 0009                            __end_of_Device_Init 06B4  
                 ??_I2C_SetAddressNackCallback 0028                                   ?_EUSART_Read 0070  
                     ??_I2C_CallbackReturnStop 0078                                   _I2C_DO_RESET 0CF5  
                              ?_buildException 0070                        ??_rd2RegCompleteHandler 0078  
                                         l3001 00F3                                           l3003 00F7  
                                         l3021 0162                                           l3013 0127  
                                         l3005 0106                                           l3023 0172  
                                         l3015 012F                                           l3007 010B  
                                         l3111 0266                                           l3031 053C  
                                         l3017 013C                                           l3009 011C  
                                         l3121 02DB                                           l3113 026E  
                                         l3041 0550                                           l3033 0543  
                                         l3019 015D                                           l3123 02EC  
                                         l3115 0274                                           l3131 0721  
                                         l3051 0564                                           l3043 0555  
                                         l3035 0547                                           l3211 06E3  
                                         l3125 02EC                                           l3117 0279  
                                         l3109 0249                                           l3141 0435  
                                         l3133 072A                                           l3061 0578  
                                         l3053 0565                                           l3045 0556  
                                         l3037 0548                                           l3221 0F76  
                                         l3213 06ED                                           l3119 02D7  
                                         l3143 043B                                           l3151 046B  
                                         l3135 0730                                           l3055 056A  
                                         l3047 055B                                           l3039 0549  
                                         l3063 057D                                           l3071 0EAC  
                                         l3223 0F76                                           l3215 06F6  
                                         l3153 0470                                           l3145 0457  
                                         l3137 0433                                           l3129 070E  
                                         l3081 0F1F                                           l3057 0572  
                                         l3049 055F                                           l3073 0EB8  
                                         l3225 0F80                                           l3217 0700  
                                         l3209 06E3                                           l4107 0FF4  
                                         l3163 0489                                           l3155 0479  
                                         l3147 045F                                           l3171 0336  
                                         l3331 0188                                           l3091 0F30  
                                         l3083 0F27                                           l3059 0575  
                                         l3227 0F8C                                           l3075 0D97  
                                         l3219 0703                                           l3157 047E  
                                         l3149 0469                                           l3173 033F  
                                         l3341 019F                                           l3333 018D  
                                         l3093 0F33                                           l3085 0F28  
                                         l3069 0EA7                                           l3077 0CFF  
                                         l3159 0487                                           l3191 0363  
                                         l3183 0344                                           l3167 02F0  
                                         l3327 017E                                           l3087 0F2A  
                                         l3095 0F37                                           l3601 065C  
                                         l3193 0368                                           l3185 0356  
                                         l3177 0341                                           l3169 0322  
                                         l3361 01F7                                           l3353 01E0  
                                         l3337 018F                                           l3329 0186  
                                         l3089 0F2D                                           l3603 0665  
                                         l3195 0371                                           l3187 0359  
                                         l3371 020A                                           l3355 01E5  
                                         l3339 0199                                           l3347 01B0  
                                         l3611 0F15                                           l3099 0CFA  
                                         l3605 066F                                           l2901 03FC  
                                         l3189 035D                                           l3381 0227  
                                         l3373 020F                                           l3365 01FA  
                                         l3357 01EA                                           l3701 0601  
                                         l3621 0F40                                           l2903 0402  
                                         l2911 0414                                           l3199 0373  
                                         l3375 0214                                           l3359 01F0  
                                         l3607 0F05                                           l3703 0602  
                                         l3631 0F4C                                           l3623 0F43  
                                         l2913 041A                                           l2905 0406  
                                         l3377 0219                                           l3385 0229  
                                         l3609 0F15                                           l2921 0D0A  
                                         l3561 0D4A                                           l3641 0D65  
                                         l3633 0F4E                                           l3625 0F45  
                                         l3617 0F3A                                           l2915 0425  
                                         l2907 040A                                           l3387 0239  
                                         l3379 0220                                           l2923 0C9D  
                                         l2931 0DF5                                           l3563 0D38  
                                         l3555 0D53                                           l3643 0D67  
                                         l3651 0D1A                                           l3635 0F50  
                                         l3627 0F47                                           l3619 0F3E  
                                         l2861 0739                                           l2917 042E  
                                         l2909 0410                                           l3389 023F  
                                         l2941 0CA0                                           l2933 0DF8  
                                         l2925 0DED                                           l3581 038C  
                                         l3741 0491                                           l3557 0D5C  
                                         l3645 0D69                                           l3653 0D1B  
                                         l3637 0F51                                           l3629 0F49  
                                         l3661 0ED6                                           l3719 0C9A  
                                         l3575 0D2F                                           l2871 0755  
                                         l2863 0739                                           l2855 0CA6  
                                         l2951 0F67                                           l2943 0F58  
                                         l2927 0DF2                                           l3591 03C5  
                                         l3583 03AB                                           l3751 04D0  
                                         l3743 0494                                           l3831 0D82  
                                         l3559 0D41                                           l3647 0D6C  
                                         l3639 0F53                                           l3671 0EE7  
                                         l3663 0ED8                                           l3655 0CC4  
                                         l3825 0D78                                           l2873 075B  
                                         l2865 0743                                           l2857 0CC0  
                                         l3761 0E86                                           l2953 0F6B  
                                         l2945 0F5F                                           l2937 0CA9  
                                         l2929 0DF3                                           l2961 07DC  
                                         l3593 03C8                                           l3585 03B6  
                                         l3577 0375                                           l3753 04D3  
                                         l3833 0D85                                           l3681 05DA  
                                         l3673 05C3                                           l3649 0D17  
                                         l3665 0ED9                                           l3657 0ED2  
                                         l3827 0D7B                                           l3771 0FE9  
                                         l2875 075C                                           l2867 0749  
                                         l2891 03EF                                           l2883 03D6  
                                         l2971 0767                                           l3763 0E8A  
                                         l2939 0CA3                                           l2955 0F6E  
                                         l2947 0F60                                           l2963 07E2  
                                         l3595 03CC                                           l3587 03BA  
                                         l3579 0380                                           l3755 04D8  
                                         l3747 04BA                                           l3739 048F  
                                         l3835 0D88                                           l3691 05E9  
                                         l3683 05DC                                           l3675 05C5  
                                         l3667 0EDD                                           l3659 0ED4  
                                         l3781 0E6E                                           l3829 0D7E  
                                         l3597 0648                                           l2869 0751  
                                         l2877 075E                                           l2885 03DA  
                                         l2981 0782                                           l2973 0775  
                                         l3765 0E8E                                           l2949 0F62  
                                         l2957 0F71                                           l2965 07F1  
                                         l3589 03BE                                           l3757 04DC  
                                         l3749 04CD                                           l3693 05F1  
                                         l3685 05DE                                           l3677 05CD  
                                         l3669 0EDF                                           l3783 0E77  
                                         l3767 0FDC                                           l3599 0654  
                                         l2879 0E5D                                           l2887 03DD  
                                         l2991 00A6                                           l2983 0785  
                                         l2975 0779                                           l2967 0761  
                                         l3759 0E80                                           l3695 05FD  
                                         l3687 05E0                                           l3679 05D7  
                                         l3777 0685                                           l2897 03F1  
                                         l2889 03EF                                           l2993 00BF  
                                         l2985 0787                                           l2977 077F  
                                         l2969 0761                                           l3697 05FF  
                                         l3689 05E1                                           l3785 0E92  
                                         l3779 069D                                           l2899 03F7  
                                         l2995 00C7                                           l2979 0780  
                                         l3699 0600                                           l3971 0DA9  
                                         l2997 00DE                                           l2989 0099  
                                         l2999 00E6                                           l3969 0DA3  
                                         u1000 0127                                           u1001 0126  
                                         u1010 012F                                           u1011 012E  
                                         u1020 015B                                           u1100 047E  
                                         u1021 015A                                           u1101 047D  
                                         u1110 0336                                           u1111 0335  
                                         u1120 0356                                           u1200 018D  
                                         u1040 0543                                           u1121 0355  
                                         u1201 018C                                           u1041 0542  
                                         u1130 0363                                           u1210 0199  
                                         u1050 0EAC                                           u1131 0362  
                                         u1115 0332                                           u1211 0198  
                                         u1051 0EAB                                           u1140 0368  
                                         u1220 01DF                                           u1060 0F27  
                                         u1141 0367                                           u1221 01DE  
                                         u1061 0F26                                           u1070 02EC  
                                         u1230 01F7                                           u1310 03AB  
                                         u1071 02EB                                           u1231 01F6  
                                         u1311 03AA                                           u1080 0469  
                                         u1240 0209                                           u1160 06ED  
                                         u1081 0468                                           u1241 0208  
                                         u1161 06EC                                           u1090 0470  
                                         u1250 0214                                           u1170 070B  
                                         u1075 02E8                                           u1091 046F  
                                         u1251 0213                                           u1171 070A  
                                         u1260 0219                                           u1180 0F80  
                                         u1261 0218                                           u1181 0F7F  
                                         _LATA 010C                                           u1190 0F94  
                                         _LATB 010D                                           u1191 0F93  
                                         _LATC 010E                                           u1360 04B9  
                                         u1361 04B8                                           _LATE 0110  
                                         u1370 04D8                                           u1371 04D7  
                                         u1380 04DC                                           u1381 04DB  
                                         u1390 0E86                                           u1391 0E85  
                                         i1l92 0E29                                           i1l95 0E3A  
                                         i1l98 0E4B                                           _WPUB 020D  
                                         _WPUE 0210                        ??_wr2RegCompleteHandler 0078  
                                         _main 0DA3                       ?_I2C_CallbackReturnReset 0077  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                             __end_of_I2C_Open 0580                                           btemp 007E  
                                         start 0057                      __end_of_Modbus_sendTxBuff 017C  
                      _I2C_SetInterruptHandler 0D0A                                ?_Task_Indicator 0070  
                   ??_TMR1_SetInterruptHandler 0022                          ??_ModbusSlave_Process 005F  
                             ?_I2C_MasterClose 0070                                __end_of_Task_MB 0E92  
                              _I2C_WriteNBytes 06E1                                  ?_EUSART_Write 0070  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 0CE6  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 0D1E  
                                        ?_main 0070                                _TMR1_StartTimer 0C9A  
                                        _T1CON 0018                                          i1l101 0E18  
                                        i1l104 0ED1                                          i1l305 0E07  
                                        i1l402 0CDB                                          i1l411 0CEA  
                                        i1l331 0CBF                                          i1l308 0D96  
                                        i1l420 0CF9                                          i1l501 0C96  
                                        i1l341 0D2E                                          i1l405 0CE0  
                                        i1l350 0539                                          i1l414 0CEF  
                                        i1l335 07B1                                          i1l328 0FDB  
                                        i1l344 0D25                                          i1l408 0CE5  
                                        i1l417 0CF4                                          i1l434 0C87  
                                        i1l338 0CD1                                          i1l426 07D9  
                                        i1l347 051D                                          i1l363 059C  
                                        i1l364 05C2                                          i1l532 001B  
                                        i1l437 0003                                          i1l453 0C93  
                                        i1l381 06E0                                          i1l534 002C  
                                        i1l471 0C8D                                          i1l375 0D16  
                                        i1l543 0055                                          i1l480 0CB7  
                                        i1l456 0CCC                                          i1l536 003C  
                                        i1l465 0C90                                          i1l537 0055  
                                        i1l474 0D09                                          i1l730 0E5C  
                                        i1l538 0047                                          i1l459 0C8A  
                                        i1l652 0FB7                                          i1l477 0CBB  
                                        i1l742 0DEC                                          i1l663 0F04  
                                        i1l399 0CD6                                          i1l672 0CAF  
                                        i1l752 07FF                                          i1l649 0FB5  
                                        i1l666 0C85                                          i1l498 0C99  
                                        i1l746 0DDF                                          i1l659 0645  
                                        i1l669 0CB3                                          i1l992 0D77  
                                        _RCREG 0199                                          _RCSTA 019D  
                             ?_validateRequest 0070                                          _TMR1H 0017  
                                        _TMR1L 0016                              ??_I2C_DO_TX_EMPTY 0078  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _TRISE 0090  
                                        _TXREG 019A                                          _TXSTA 019E  
                                        _SW_Ad 006F                                     _Get_millis 0E5D  
                             __end_of_TMR1_ISR 0DED                              __end_of_I2C_DO_RX 05C3  
                            __end_of_I2C_DO_TX 053A                                 _WDT_Initialize 0CC4  
                            __end_of_I2C_Close 0F3A                 I2C_MasterOperation@returnValue 0021  
                      _I2C_MasterEnableRestart 0C88                        __end_of_TMR1_Initialize 0EEB  
                                        pclath 000A                               ?_I2C_SetCallback 0020  
                 I2C_SetAddressNackCallback@cb 0024                                          status 0003  
                                        wtemp0 007E                              ?_I2C_DO_SEND_STOP 0070  
                            ??i1_I2C_SetBuffer 0072                                _TMR1_WriteTimer 0E4C  
                             __end_of_App_Init 0D82                             ??_I2C_DO_SEND_STOP 0070  
                              __initialization 0059                                   __end_of_main 0DAF  
                                  _App_Process 0D82                      ?_I2C_DO_SEND_RESTART_READ 0070  
                             __end_of_ReadData 03D4                                 ??_EUSART_Write 0020  
                               ?_I2C_DO_RX_ACK 0070                    ?_INTERRUPT_InterruptManager 0070  
                 __end_of_ModbusRTU_Slave_Poll 0249                 ??_EUSART_SetRxInterruptHandler 0022  
                                  _Device_Init 0685                                         ??_main 005F  
                 __end_ofi1_I2C_MasterClearIrq 0C9A                              ?_I2C_MasterIsNack 0070  
                            ?_I2C_MasterSetIrq 0070                             ??_I2C_MasterIsNack 0070  
                         i1I2C_SetCallback@idx 0073                           i1I2C_SetCallback@ptr 0072  
                       __end_of_WDT_Initialize 0CC8                             ??_I2C_MasterSetIrq 0070  
                                ??_Task_Sensor 003A      __end_of_EUSART_DefaultFramingErrorHandler 0C86  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0C85                     _EUSART_OverrunErrorHandler 00D1  
              __end_of_I2C_CallbackReturnReset 0004                                         _APFCON 011D  
                I2C_SetDataCompleteCallback@cb 0074                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _BORCON 0116  
                                       _T1GCON 0019                        TMR1_WriteTimer@timerVal 0070  
                                       u103_20 0FBF                                         u103_21 0FBE  
                                       i1l3103 0C88                                         i1l3105 0C8B  
                                       i1l3025 0FB9                                         i1l3027 0FBF  
                                       i1l3203 0DFB                                         i1l3107 0CB4  
                                       i1l3029 0FCE                                         i1l3205 0E00  
                                       i1l3207 0E06                                         i1l3231 0E21  
                                       i1l4111 05B4                                         i1l3311 0CDC  
                                       i1l3303 0CEB                                         i1l3233 0E28  
                                       i1l3241 0E39                                         i1l4113 050F  
                                       i1l3313 0CDF                                         i1l3305 0CEE  
                                       i1l3067 0D8C                                         i1l3323 0002  
                                       i1l4115 06D2                                         i1l3403 0D26  
                                       i1l3411 0D1E                                         i1l3253 0E08  
                                       i1l3229 0E19                                         i1l3237 0E2A  
                                       i1l3245 0E3B                                         i1l3261 0EBA  
                                       i1l3309 0C8E                                         i1l3317 0C94  
                                       i1l3501 06BE                                         i1l3405 0D28  
                                       i1l3413 0D20                                         i1l4109 07D1  
                                       i1l3255 0E10                                         i1l3239 0E32  
                                       i1l3247 0E43                                         i1l3263 0ED0  
                                       i1l3319 0C86                                         i1l3271 0CC9  
                                       i1l3511 06C4                                         i1l3407 0D2D  
                                       i1l3415 0D24                                         i1l3431 04F8  
                                       i1l3423 04F0                                         u130_20 0EFF  
                                       u130_21 0EFE                                         i1l3257 0E17  
                                       i1l3249 0E4A                                         i1l3505 06C0  
                                       i1l3441 052B                                         i1l3273 0CD2  
                                       i1l3281 0CDA                                         i1l3521 0CE9  
                                       i1l3291 0C91                                         i1l3267 0D04  
                                       i1l3443 0536                                         i1l3427 04F4  
                                       i1l3419 04E7                                         i1l3275 0CD5  
                                       i1l3445 0538                                         i1l3437 04FC  
                                       i1l3461 059A                                         i1l3453 0580  
                                       i1l3285 0CE1                                         i1l3525 0CF5  
                                       i1l3541 07BB                                         i1l3533 07B2  
                                       i1l3613 0D6E                                         i1l3295 0CB8  
                                       i1l3439 051F                                         i1l3471 05A2  
                                       i1l3455 0588                                         i1l3279 0CD7  
                                       i1l3287 0CE4                                         i1l3519 0CE6  
                                       i1l3527 0CF7                                         i1l3535 07B4  
                                       i1l3615 0C97                                         i1l3711 079A  
                                       u115_20 0E00                                         i1l3801 0FAF  
                                       u115_21 0DFF                                         i1l3457 058D  
                                       i1l3297 0CF0                                         i1l3529 0CF8  
                                       i1l3537 07B7                                         i1l3713 079D  
                                       i1l3705 078A                                         i1l3721 0E4C  
                                       i1l3571 0EFF                                         i1l3715 0CB0  
                                       i1l3811 0618                                         i1l3803 0FB0  
                                       i1l3395 0CCD                                         i1l3467 059E  
                                       i1l3459 0597                                         i1l3299 0CF3  
                                       i1l3547 07BF                                         i1l3707 078D  
                                       i1l3723 0E51                                         i1l3731 0E58  
                                       i1l3573 0F00                                         i1l3565 0EEB  
                                       i1l3717 0CAC                                         i1l3821 063B  
                                       i1l3813 061E                                         i1l3805 0605  
                                       i1l3493 06B4                                         i1l3397 0CCF  
                                       i1l3477 05A6                                         i1l3485 0D10  
                                       i1l3709 0792                                         i1l3733 0E5A  
                                       i1l3725 0E52                                         i1l3567 0EF4  
                                       i1l3823 0642                                         i1l3815 0623  
                                       i1l3807 060C                                         i1l3495 06B7  
                                       i1l3399 0CD0                                         i1l3487 0D12  
                                       i1l3735 0DD3                                         i1l3727 0E54  
                                       u140_20 0F9C                                         u132_20 0792  
                                       i1l3569 0EF9                                         i1l3817 062A  
                                       i1l3809 0611                                         u140_21 0F9B  
                                       i1l3489 0D15                                         u132_21 0791  
                                       i1l3737 0DDA                                         i1l3729 0E56  
                                       i1l3819 0630                                         i1l3499 06BB  
                                       i1l3791 0DE2                                         i1l3951 0020  
                                       i1l3943 0006                                         u141_20 0FAF  
                                       u133_20 079A                                         u141_21 0FAE  
                                       i1l3793 0F95                                         u133_21 0799  
                                       i1l3953 0025                                         i1l3945 000A  
                                       i1l3795 0F9C                                         i1l3787 0CBC  
                                       i1l3963 004C                                         i1l3955 0031  
                                       i1l3947 000F                                         i1l3797 0FA4  
                                       i1l3789 0DE0                                         i1l3965 0051  
                                       i1l3957 0036                                         i1l3949 0014  
                                       i1l3799 0FA9                                         i1l3959 0041  
                                       u142_20 0611                                         u134_20 0E51  
                                       u142_21 0610                                         u134_21 0E50  
                                       u143_20 0623                                         u127_20 04EF  
                                       u135_20 0DDA                                         u143_21 0622  
                                       u127_21 04EE                                         u135_21 0DD9  
                                       u144_20 063B                                         u128_20 0536  
                                       u160_20 0025                                         u144_21 063A  
                                       u128_21 0535                                         u160_21 0024  
                                       u129_20 0597                                         u161_20 0031  
                                       u129_21 0596                                         u161_21 0030  
                                       u162_20 0036                                         u162_21 0035  
                                       u163_20 0041                                         u163_21 0040  
                                       u164_20 0046                                         u156_20 000A  
                                       u164_21 0045                                         u156_21 0009  
                                       u165_20 004C                                         u157_20 000F  
                                       u165_21 004B                                         u157_21 000E  
                                       u166_20 0051                                         u158_20 0014  
                                       u166_21 0050                                         u158_21 0013  
                                       u159_20 0020                                         u159_21 001F  
                                       _MB_UID 0065                                         _OSCCON 0099  
                    ??_I2C_SetInterruptHandler 0022                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                                       _SSPADD 0212                                         _SSPBUF 0211  
                          _I2C_MasterEnableIrq 0CA9                            _I2C_MasterGetRxData 0C91  
                      __end_of_I2C_WriteNBytes 070C                                      ??_Task_MB 005F  
         __end_of_TMR1_DefaultInterruptHandler 0800                   _TMR1_DefaultInterruptHandler 07FF  
                      __end_of_TMR1_StartTimer 0C9D                                  _I2C_MasterFsm 078A  
                                _I2C_MasterIsr 0CBC                            _EUSART_Transmit_ISR 0F95  
                            I2C_SetCallback@cb 0020                                  _I2C_SetBuffer 0EA5  
                 __end_of_I2C_MasterDisableIrq 0CA6                           ?_I2C_MasterEnableIrq 0070  
                          _I2C_DO_ADDRESS_NACK 07B2                           ?_I2C_MasterGetRxData 0070  
                                    ?_I2C_Open 0070             __end_of_I2C_SetAddressNackCallback 0DA3  
                   _I2C_SetAddressNackCallback 0D97                                    ?_Get_millis 0020  
                                 ?_rtcc_handle 0070                                ?_WDT_Initialize 0070  
                    ??_I2C_MasterEnableRestart 0070       TMR1_SetInterruptHandler@InterruptHandler 0020  
      I2C_SetInterruptHandler@InterruptHandler 0020                        __end_of_TMR1_WriteTimer 0E5D  
                         ?_EUSART_Transmit_ISR 0070                          __end_of_TMR1_CallBack 0DE0  
                             ?_TMR1_Initialize 0070                              _SYSTEM_Initialize 0E92  
                      __end_of__initialization 0095                            _I2C_MasterOperation 0F56  
                          __end_of_Task_Sensor 04E7                       validateRequest@u16MsgCRC 003C  
                           ?_SYSTEM_Initialize 0070                           ?_I2C_DO_ADDRESS_NACK 0070  
         __end_of_EUSART_SetTxInterruptHandler 0D65                   _EUSART_SetTxInterruptHandler 0D5C  
                      _rdBlkRegCompleteHandler 0EBA                                 __pcstackCOMMON 0070  
                               ?_I2C_MasterFsm 0070                                 ?_I2C_MasterIsr 0070  
                              ??_I2C_DO_RX_ACK 0070                                   __pidataBANK1 0DC7  
                       _I2C_CallbackReturnStop 0C86                            ??_SYSTEM_Initialize 0022  
                                    ?_TMR1_ISR 0070                  ?_TMR1_DefaultInterruptHandler 0070  
                         __end_of_fctsupported 1028                                 ?_I2C_SetBuffer 0020  
                __end_of_I2C_DO_SEND_ADR_WRITE 0D26                     ?_I2C_DO_SEND_RESTART_WRITE 0070  
                         ?_I2C_MasterOperation 0070                          ??_I2C_MasterEnableIrq 0020  
                        ??_I2C_MasterGetRxData 0070                                 _OPTION_REGbits 0095  
                             ??_buildException 0020                          I2C_ReadNBytes@address 0027  
                                   ??_I2C_Open 0022                           _eusartRxStatusBuffer 0120  
                                    ?_App_Init 0070                     __end_of_I2C_MasterClearIrq 0CA0  
              ??_EUSART_SetOverrunErrorHandler 0022                      __end_of_SYSTEM_Initialize 0EA5  
                        ??_EUSART_Transmit_ISR 0070                              _I2C_MasterSendAck 0CB8  
                                   __pbssBANK0 005F                                     __pbssBANK1 00A0  
                                   __pbssBANK2 0120                           __end_of_EUSART_Write 0761  
                                ??_I2C_DO_IDLE 0070                                      ?_ReadData 0070  
                                ??_I2C_DO_RCEN 0070                               ??_Task_Indicator 0020  
                __end_of_rd2RegCompleteHandler 0E3B                   __end_of_I2C_MasterSendTxData 0CCD  
                           ?_I2C_MasterSendAck 0070                              _I2C_MasterStartRx 0C8E  
                         _ModbusRTU_Slave_Poll 017C                          ??_I2C_DO_ADDRESS_NACK 0078  
                __end_of_wr2RegCompleteHandler 0E19                           Task_MB@f_Modbus_Init 0066  
                          _I2C_DO_RX_NACK_STOP 0CEB                           i1_I2C_MasterClearIrq 0C97  
                        _rd1RegCompleteHandler 0E19                             ?_I2C_MasterStartRx 0070  
                   __end_of_I2C_MasterSendNack 0CB8                               ?_I2C_WriteNBytes 0028  
                       I2C_WriteNBytes@address 002B                          _wr1RegCompleteHandler 0E3B  
                     ModbusRTU_Slave_Poll@size 0051                                     __pmaintext 0DA3  
                          ??_I2C_MasterSendAck 0070                       rd1RegCompleteHandler@ptr 0077  
                                ReadData@aData 0030                  ?_EUSART_SetTxInterruptHandler 0020  
             _EUSART_TxDefaultInterruptHandler 00D7                    __end_of_I2C_DO_SEND_RESTART 0CE1  
                              _I2C_DO_TX_EMPTY 06B4                            I2C_SetBuffer@buffer 0022  
                             ?_TMR1_StartTimer 0070                                     ??_TMR1_ISR 0072  
                                   __pintentry 0004                            ??_I2C_MasterStartRx 0070  
                                      _BAUDCON 019F                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 0020                 I2C_SetDataCompleteCallback@ptr 0076  
                     ??_I2C_DO_RX_NACK_RESTART 0070              __end_of_I2C_DO_SEND_RESTART_WRITE 0CDC  
                         ?_I2C_DO_RX_NACK_STOP 0070                                  _eusartRxCount 0069  
                                   ??_App_Init 0023                                i1_I2C_SetBuffer 0DFA  
                    __end_of_I2C_MasterSendAck 0CBC                                        _OSCTUNE 0098  
                             _ModbusSlave_Init 0646                                    _Task_Sensor 048F  
                     ??_EUSART_SetErrorHandler 0022                                        _SSPCON1 0215  
                                      _SSPCON2 0216                                        _SSPSTAT 0214  
                   validateRequest@isSupported 003E                               ?_TMR1_WriteTimer 0070  
                    __end_of_I2C_MasterStartRx 0C91                           I2C_Close@returnValue 0020  
                 ?_I2C_SetDataCompleteCallback 0074                                      _I2C_DO_RX 0580  
                                    _I2C_DO_TX 04E7                                ReadData@valTime 0036  
             __end_of_I2C_DO_SEND_RESTART_READ 0CD7                                     ??_ReadData 002C  
                        ?_ModbusRTU_Slave_Poll 0051                    __end_of_ModbusSlave_Process 0F1F  
                                    _I2C_Close 0F1F                      ??_rdBlkRegCompleteHandler 0078  
                        ?i1_I2C_MasterClearIrq 0070                           _I2C_MasterDisableIrq 0CA3  
                              ??_I2C_MasterFsm 007A                                ??_I2C_MasterIsr 007C  
                                      _Task_MB 0E80                                 _I2C_ReadNBytes 0F74  
                          __end_of_I2C_DO_IDLE 0CD2                            __end_of_I2C_DO_RCEN 0D17  
                                 ?_App_Process 0070                                ??_I2C_SetBuffer 0022  
                      I2C_SetBuffer@bufferSize 0020                             I2C_ReadNBytes@data 0024  
                               _I2C_MasterRead 0CFA                                 _I2C_MasterOpen 0DED  
                                  _Temperature 0061                                 _I2C_MasterStop 0C8B  
                               _I2C_Initialize 0D65                                   ?_Device_Init 0070  
                                      __ptext1 0E92                                        __ptext2 0CC4  
                                      __ptext3 0ED2                                        __ptext4 0F3A  
                                      __ptext5 0D17                                        __ptext6 0D65  
                                      __ptext7 05C3                                        __ptext8 0D5C  
                                      __ptext9 0D53                          ??_I2C_DO_RX_NACK_STOP 0070  
               ??_TMR1_DefaultInterruptHandler 0070                                      _T1CONbits 0018  
                        _OSCILLATOR_Initialize 0D17                             I2C_SetCallback@idx 0023  
                     ??_PIN_MANAGER_Initialize 0020                  I2C_CallbackReturnReset@funPtr 0077  
                    ?_TMR1_SetInterruptHandler 0020                             I2C_SetCallback@ptr 0022  
                     wr1RegCompleteHandler@ptr 0077                     _SHT30_CMD_MEASURE_H_Enable 00E5  
                              ModbusSlaveF04@i 004F                      i1I2C_SetBuffer@bufferSize 0070  
                                      clrloop0 0DB0                     _SHT30_CMD_MEASURE_L_Enable 00E1  
                         end_of_initialization 0095                         Modbus_sendTxBuff@index 0038  
                   _SHT30_CMD_MEASURE_M_Enable 00E3                                     ?_I2C_DO_RX 0070  
                                   ?_I2C_DO_TX 0070          __end_of_EUSART_SetOverrunErrorHandler 0D53  
                _EUSART_SetOverrunErrorHandler 0D4A                                        init_ram 0DBB  
                             _Modbus_getRxBuff 0433                                     ?_I2C_Close 0070  
                       ?_rd1RegCompleteHandler 0077                              i1_I2C_SetCallback 0FB8  
                                      initloop 0DBC                        __end_of_I2C_DO_TX_EMPTY 06E1  
                        ?_I2C_MasterDisableIrq 0070                         __end_of_I2C_ReadNBytes 0F95  
                            _EUSART_Initialize 05C3                    _SHT30_CMD_MEASURE_H_Disable 00E7  
                       ?_wr1RegCompleteHandler 0077                             ?i1_I2C_SetCallback 0070  
                           ?_EUSART_Initialize 0070                                      _RCSTAbits 019D  
                                _Tick_Init_SES 0E6E                         __end_of_I2C_MasterRead 0CFF  
                       __end_of_I2C_MasterOpen 0DFA                         __end_of_I2C_MasterStop 0C8E  
                       __end_of_I2C_Initialize 0D6E                    _SHT30_CMD_MEASURE_L_Disable 00DD  
                          ??i1_I2C_SetCallback 0073                    _SHT30_CMD_MEASURE_M_Disable 00DF  
                          ??_EUSART_Initialize 0022                               ??_WDT_Initialize 0020  
                           ModbusSlaveF04@size 0040                 ??_EUSART_SetTxInterruptHandler 0022  
                      __end_ofi1_I2C_SetBuffer 0E08                                      _PORTAbits 000C  
              __end_of_rdBlkRegCompleteHandler 0ED2                           _I2C_MasterSendTxData 0CC8  
                              Modbus_calcCRC@i 002B                                Modbus_calcCRC@j 002C  
                                 ??_Get_millis 0024                    ?_I2C_SetAddressNackCallback 0024  
                                  _f_Indicator 0067                         ??_ModbusRTU_Slave_Poll 0053  
                ModbusRTU_Slave_Poll@u8Current 005C                      __end_ofi1_I2C_SetCallback 0FDC  
                                 _fctsupported 1020                         ??i1_I2C_MasterClearIrq 0070  
                    __end_of_EUSART_Initialize 0605                                    _I2C_DO_IDLE 0CCD  
                                  _I2C_DO_RCEN 0D10                     rdBlkRegCompleteHandler@ptr 0077  
                             validateRequest@i 003F                                      _TXSTAbits 019E  
                              ?_I2C_ReadNBytes 0024                        ?_I2C_CallbackReturnStop 0077  
                     _I2C_DO_SEND_RESTART_READ 0CD2                                 ?_Tick_Init_SES 0070  
                           __end_of_Get_millis 0E6E                   I2C_CallbackReturnStop@funPtr 0077  
                              ?_I2C_MasterRead 0070                                ?_I2C_MasterOpen 0070  
                              ?_I2C_MasterStop 0070                                ?_I2C_Initialize 0070  
                      _I2C_CallbackReturnReset 0002             __end_of_EUSART_DefaultErrorHandler 0CB0  
                   _EUSART_DefaultErrorHandler 0CAC                                   _EUSART_Write 0737  
                        ?_I2C_MasterSendTxData 0070                         ?_OSCILLATOR_Initialize 0070  
                  ??_I2C_DO_SEND_RESTART_WRITE 0070                            start_initialization 0059  
                                ??_EUSART_Read 0020                                  ?_I2C_DO_RESET 0070  
                     ?_I2C_SetInterruptHandler 0020   EUSART_SetRxInterruptHandler@interruptHandler 0020  
 EUSART_SetTxInterruptHandler@interruptHandler 0020                                    ??_I2C_DO_RX 0078  
                                  ??_I2C_DO_TX 0078                            i1I2C_SetCallback@cb 0070  
                            ??_I2C_MasterClose 0020                    ModbusRTU_Slave_Poll@i8state 005D  
                       ??_I2C_MasterDisableIrq 0020                                    ??_I2C_Close 0020  
                            ??_I2C_MasterStart 0020                              ??_I2C_MasterWrite 0022  
               __end_of_I2C_CallbackReturnStop 0C88                         _I2C_DO_RX_NACK_RESTART 0CF0  
                               _ModbusSlaveF04 0249                               ?_I2C_DO_TX_EMPTY 0070  
                           _I2C_MasterClearIrq 0C9D                                      __Humidity 00C5  
                            ??_validateRequest 002F                 ?_EUSART_SetOverrunErrorHandler 0020  
                   _EUSART_FramingErrorHandler 00D3                                 _Modbus_calcCRC 03D4  
                     __end_of_ModbusSlave_Init 0685                         _EUSART_SetErrorHandler 0D38  
                  __end_of_I2C_MasterEnableIrq 0CAC                            ?_I2C_MasterClearIrq 0070  
                  __end_of_I2C_MasterGetRxData 0C94                                    __pdataBANK1 00DD  
                        __end_of_I2C_DO_RX_ACK 0CEB                         ModbusSlave_Init@_SW_Ad 0020  
                             _I2C_DO_SEND_STOP 0CE1                              ??_I2C_SetCallback 0023  
                             ?i1_I2C_SetBuffer 0070                            I2C_Open@returnValue 0023  
                           _I2C_MasterSendNack 0CB4                       ?_I2C_MasterEnableRestart 0070  
                            _i2c_fsmStateTable 1000                                    __pbssBIGRAM 20D4  
                  __end_of_EUSART_Transmit_ISR 0FB8                          _I2C_DO_SEND_ADR_WRITE 0D1E  
                                  __pbssCOMMON 007C                                      ___latbits 0002  
                                __pcstackBANK0 0020                                 ??_I2C_DO_RESET 0070  
                          ?_I2C_MasterSendNack 0070                                   ?_Task_Sensor 0070  
                 __end_of_I2C_DO_SEND_ADR_READ 0D2F                           ??_I2C_MasterClearIrq 0020  
                  __end_of_I2C_DO_ADDRESS_NACK 07DA                         __end_of_ModbusSlaveF04 02F0  
                   __end_of_EUSART_Receive_ISR 0646                               _I2C_MasterIsNack 0D04  
                    _I2C_DO_SEND_RESTART_WRITE 0CD7               _EUSART_RxDefaultInterruptHandler 00D5  
                          __end_of_EUSART_Read 078A                               _I2C_MasterSetIrq 0C94  
                                    __pnvBANK0 006F                                      __pnvBANK1 00CD  
                        _rd2RegCompleteHandler 0E2A                                ??_Tick_Init_SES 0022  
                       __end_of_Modbus_calcCRC 0433                   __end_of_EUSART_RxDataHandler 0F05  
                                     ?_Task_MB 0070                         _PIN_MANAGER_Initialize 0F3A  
                        _wr2RegCompleteHandler 0E08                      ??_I2C_CallbackReturnReset 0078  
                      ModbusRTU_Slave_Poll@reg 005B                           EUSART_Read@readValue 0021  
                  __end_of_I2C_MasterOperation 0F74                           ??_I2C_MasterSendNack 0070  
                     rd2RegCompleteHandler@ptr 0077               __end_of_TMR1_SetInterruptHandler 0D38  
                                    __ptext100 0C85                                      __ptext101 0CAC  
                                    __ptext102 0EEB                                   _eusartRxHead 006B  
                                 _eusartTxHead 006E                                   _eusartRxTail 006A  
                       ??_I2C_MasterSendTxData 0070                                   _eusartTxTail 006D  
                    __end_of_i2c_fsmStateTable 1020                   ??_INTERRUPT_InterruptManager 007C  
                     __end_of_Modbus_getRxBuff 048F                        _eusartTxBufferRemaining 006C  
              __end_of_I2C_SetInterruptHandler 0D10                         ModbusSlaveF04@u8regsno 004E  
                      I2C_MasterOperation@read 0020                                       _I2C_Open 053A  
                                  _device_time 00BD                              I2C_ReadNBytes@len 0025  
                      ??_rd1RegCompleteHandler 0078                                 _eusartRxBuffer 0130  
                              ?_ModbusSlaveF04 003E                        ??_wr1RegCompleteHandler 0078  
                     ModbusSlaveF04@u8StartAdd 004C                                  _TMR1_CallBack 0DD3  
                               _eusartTxBuffer 0140         EUSART_SetErrorHandler@interruptHandler 0020  
                                     _LATCbits 010E                                      clear_ram0 0DAF  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 0068                                ?_Modbus_calcCRC 0020  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0022  
                                     _PIR2bits 0012                          __end_of_I2C_MasterFsm 07B2  
                        __end_of_I2C_MasterIsr 0CC0                              _EUSART_is_tx_done 0CC0  
                  __end_of_I2C_DO_RX_NACK_STOP 0CF0      __end_of_EUSART_DefaultOverrunErrorHandler 0CB4  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 0CB0                                       _TMR1_ISR 0DE0  
                            ModbusSlaveF04@reg 003E                __end_of_I2C_MasterEnableRestart 0C8B  
                           ?_EUSART_is_tx_done 0070                           buildException@u8func 0022  
                        __end_of_I2C_SetBuffer 0EBA                              ??_TMR1_Initialize 0022  
                       ?_I2C_DO_SEND_ADR_WRITE 0070                       I2C_MasterSendTxData@data 0070  
                          ??_EUSART_is_tx_done 0020                                  ??_rtcc_handle 0070  
                                     _App_Init 0D78                       wr2RegCompleteHandler@ptr 0077  
                                  _EUSART_Read 0761                     ??_I2C_DO_SEND_RESTART_READ 0070  
                     ?_rdBlkRegCompleteHandler 0077                               ??_I2C_ReadNBytes 0027  
                               ?_TMR1_CallBack 0070          Modbus_sendTxBuff@u32overTimecountDown 003A  
                                   _I2C_Status 00A0                                       _ReadData 0375  
                                 ?_I2C_DO_IDLE 0070                                   ?_I2C_DO_RCEN 0070  
                       ?_rd2RegCompleteHandler 0077                                       _Humidity 005F  
                             ??_I2C_MasterRead 0022                            I2C_WriteNBytes@data 0028  
                             ??_I2C_MasterOpen 0020                         ?_wr2RegCompleteHandler 0077  
                             ??_I2C_MasterStop 0070                               ??_I2C_Initialize 0020  
                    __end_of_EUSART_is_tx_done 0CC4                          i1I2C_SetBuffer@buffer 0072  
                         __end_of_I2C_DO_RESET 0CFA                        ??_OSCILLATOR_Initialize 0020  
                          _EUSART_ErrorHandler 00CF                           _I2C_DO_SEND_ADR_READ 0D26  
                  ?_EUSART_DefaultErrorHandler 0070                       _TMR1_SetInterruptHandler 0D2F  
                        _TMR1_InterruptHandler 00CD                                _I2C_MasterClose 0CA0  
                I2C_SetAddressNackCallback@ptr 0026                                I2C_Open@address 0022  
                              _I2C_MasterStart 0CA6                                _I2C_MasterWrite 0CFF  
                         _EUSART_RxDataHandler 0EEB                              ??_I2C_WriteNBytes 002B  
                                     __ptext10 0D4A                                       __ptext11 0D41  
                                     __ptext20 0F74                                       __ptext12 0D38  
                                     __ptext21 0EA5                                       __ptext13 0D82  
                                   _T1GCONbits 0019                                       __ptext30 0CA3  
                                     __ptext22 053A                                       __ptext14 048F  
                                     __ptext31 0CA0                                       __ptext23 0D0A  
                                     __ptext15 0375                                       __ptext40 0249  
                                     __ptext32 0C9D                                       __ptext24 0DED  
                                     __ptext16 06E1                                       __ptext41 0099  
                                     __ptext33 0E80                                       __ptext25 0CA9  
                                     __ptext17 0D97                                       __ptext50 0D2F  
                                     __ptext42 03D4                                       __ptext34 0F05  
                                     __ptext26 0CFA                                       __ptext18 07DA  
                                     __ptext51 0C9A                                       __ptext43 0E5D  
                                     __ptext35 017C                                       __ptext27 0F56  
                                     __ptext19 0CFF                                       __ptext60 078A  
                                     __ptext52 0685                                       __ptext44 0CC0  
                                     __ptext36 02F0                                       __ptext28 0CA6  
                                     __ptext61 0C97                                       __ptext45 0737  
                                     __ptext37 070C                                       __ptext29 0F1F  
                                     __ptext70 0CD2                                       __ptext62 07B2  
                                     __ptext54 0DE0                                       __ptext46 0646  
                                     __ptext38 0433                                       __ptext71 0D10  
                                     __ptext63 0CF5                                       __ptext55 0E4C  
                                     __ptext47 0FDC                                       __ptext39 0761  
                                     __ptext80 0CC8                                       __ptext72 0580  
                                     __ptext64 0CF0                                       __ptext56 0DD3  
                                     __ptext48 0D78                                       __ptext81 0CB8  
                                     __ptext73 04E7                                       __ptext65 0CEB  
                                     __ptext57 07FF                                       __ptext49 0E6E  
                                     __ptext90 0E19                                       __ptext82 0C91  
                                     __ptext74 0D1E                                       __ptext66 0CE6  
                                     __ptext58 0D6E                                       __ptext91 0E08  
                                     __ptext83 0CB4                                       __ptext75 0D26  
                                     __ptext67 0CE1                                       __ptext59 0CBC  
                                     __ptext92 0DFA                                       __ptext84 0C8E  
                                     __ptext76 0CCD                                       __ptext68 0CDC  
                                     __ptext93 0D8C                                       __ptext85 0002  
                                     __ptext77 06B4                                       __ptext69 0CD7  
                                     __ptext94 0FB8                                       __ptext86 0C86  
                                     __ptext78 0C94                                       __ptext95 0C8B  
                                     __ptext87 0EBA                                       __ptext79 0D04  
                                     __ptext96 0C88                                       __ptext88 0E3B  
                                     __ptext97 0F95                                       __ptext89 0E2A  
                                     __ptext98 0605                                       __ptext99 0CB0  
                              _validateRequest 02F0            __end_of_I2C_SetDataCompleteCallback 0D97  
                  _I2C_SetDataCompleteCallback 0D8C                              ??_TMR1_StartTimer 0020  
                      ?_I2C_DO_RX_NACK_RESTART 0070                                   __Temperature 00C7  
                          __end_of_rtcc_handle 0D78                       __end_of_I2C_DO_SEND_STOP 0CE6  
                Modbus_getRxBuff@bBuffOverflow 0029                        ?_EUSART_SetErrorHandler 0020  
                              _I2C_SetCallback 07DA                  ??_I2C_SetDataCompleteCallback 0077  
EUSART_SetOverrunErrorHandler@interruptHandler 0020                            Modbus_calcCRC@temp2 0026  
                      Modbus_sendTxBuff@u16crc 0036                                    _MB_Register 00C9  
                                     int$flags 007E                              ?_ModbusSlave_Init 0070  
                        ?_I2C_DO_SEND_ADR_READ 0070             __end_of_INTERRUPT_InterruptManager 0057  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0D4A  
                _EUSART_SetFramingErrorHandler 0D41                              ??_TMR1_WriteTimer 0072  
                           ??_ModbusSlave_Init 0020                       __end_of_I2C_MasterIsNack 0D0A  
                     __end_of_I2C_MasterSetIrq 0C97                                     _INTCONbits 000B  
                           I2C_WriteNBytes@len 0029                          ?_EUSART_RxDataHandler 0070  
               __end_of_I2C_DO_RX_NACK_RESTART 0CF5                                ??_TMR1_CallBack 0070  
                                     intlevel1 0000                                 _buildException 070C  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 0D41  
                          _I2C_DO_SEND_RESTART 0CDC           __end_of_EUSART_SetRxInterruptHandler 0D5C  
                 _EUSART_SetRxInterruptHandler 0D53                           Device_Init@value_SW1 00DC  
                         Device_Init@value_SW2 00DB                           Device_Init@value_SW3 00DA  
                         Device_Init@value_SW4 00D9                             Modbus_calcCRC@flag 0028  
                           Modbus_calcCRC@temp 002D                                  ??_App_Process 005F  
                               _Task_Indicator 0FDC                             _EUSART_Receive_ISR 0605  
EUSART_SetFramingErrorHandler@interruptHandler 0020                        __end_of_I2C_MasterClose 0CA3  
                      __end_of_I2C_MasterStart 0CA9                ModbusRTU_Slave_Poll@u8exception 005E  
                      __end_of_I2C_MasterWrite 0D04                                  ??_Device_Init 0020  
                                __pstringtext1 1000                                  __pstringtext2 1020  
                         ?_I2C_DO_SEND_RESTART 0070                              ?_Modbus_getRxBuff 0070  
                          ?_EUSART_Receive_ISR 0070                        __end_of_validateRequest 0375  
                           ??_Modbus_getRxBuff 0022                                    _rtcc_handle 0D6E  
                             ??_ModbusSlaveF04 0041                              Modbus_calcCRC@len 002A  
                                  _SSPCON1bits 0215                                    _SSPCON2bits 0216  
                          _ModbusSlave_Process 0F05                         __end_of_buildException 0737  
                                   _SES_Modbus 20D4                             EUSART_Write@txData 0021  
                      __end_of_I2C_SetCallback 07FF                 __end_of_PIN_MANAGER_Initialize 0F56  
                             ??_Modbus_calcCRC 0022                  __end_of_rd1RegCompleteHandler 0E2A  
                         ??_EUSART_Receive_ISR 0071                  __end_of_wr1RegCompleteHandler 0E4C  
                        _MSSP_InterruptHandler 0063                                _TMR1_Initialize 0ED2  
                           Task_Sensor@valTime 00C1                         __end_of_Task_Indicator 1000  
                        __end_of_Tick_Init_SES 0E80  
