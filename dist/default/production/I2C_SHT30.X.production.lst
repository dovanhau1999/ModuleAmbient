

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Thu Apr 13 17:13:54 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F1936
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	intentry,global,class=CODE,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    86                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    87                           	dabs	1,0x320,16
    88                           	dabs	1,0x2A0,80
    89                           	dabs	1,0x220,80
    90                           	dabs	1,0x1A0,80
    91                           	dabs	1,0x154,28
    92                           	dabs	1,0x20D4,0,_SES_Modbus
    93                           	dabs	1,0x7E,2
    94     0000                     
    95                           ; Version 2.40
    96                           ; Generated 17/11/2021 GMT
    97                           ; 
    98                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution. Publication is not required when
   112                           ;        this file is used in an embedded application.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC16F1936 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130     0000                     	;# 
   131     0001                     	;# 
   132     0002                     	;# 
   133     0003                     	;# 
   134     0004                     	;# 
   135     0005                     	;# 
   136     0006                     	;# 
   137     0007                     	;# 
   138     0008                     	;# 
   139     0009                     	;# 
   140     000A                     	;# 
   141     000B                     	;# 
   142     000C                     	;# 
   143     000D                     	;# 
   144     000E                     	;# 
   145     0010                     	;# 
   146     0011                     	;# 
   147     0012                     	;# 
   148     0013                     	;# 
   149     0015                     	;# 
   150     0016                     	;# 
   151     0016                     	;# 
   152     0017                     	;# 
   153     0018                     	;# 
   154     0019                     	;# 
   155     001A                     	;# 
   156     001B                     	;# 
   157     001C                     	;# 
   158     001E                     	;# 
   159     001F                     	;# 
   160     008C                     	;# 
   161     008D                     	;# 
   162     008E                     	;# 
   163     0090                     	;# 
   164     0091                     	;# 
   165     0092                     	;# 
   166     0093                     	;# 
   167     0095                     	;# 
   168     0096                     	;# 
   169     0097                     	;# 
   170     0098                     	;# 
   171     0099                     	;# 
   172     009A                     	;# 
   173     009B                     	;# 
   174     009B                     	;# 
   175     009C                     	;# 
   176     009D                     	;# 
   177     009E                     	;# 
   178     010C                     	;# 
   179     010D                     	;# 
   180     010E                     	;# 
   181     0110                     	;# 
   182     0111                     	;# 
   183     0112                     	;# 
   184     0113                     	;# 
   185     0114                     	;# 
   186     0115                     	;# 
   187     0116                     	;# 
   188     0117                     	;# 
   189     0118                     	;# 
   190     0119                     	;# 
   191     011A                     	;# 
   192     011B                     	;# 
   193     011D                     	;# 
   194     018C                     	;# 
   195     018D                     	;# 
   196     0191                     	;# 
   197     0191                     	;# 
   198     0192                     	;# 
   199     0193                     	;# 
   200     0193                     	;# 
   201     0193                     	;# 
   202     0194                     	;# 
   203     0195                     	;# 
   204     0196                     	;# 
   205     0199                     	;# 
   206     019A                     	;# 
   207     019B                     	;# 
   208     019B                     	;# 
   209     019B                     	;# 
   210     019B                     	;# 
   211     019C                     	;# 
   212     019C                     	;# 
   213     019D                     	;# 
   214     019E                     	;# 
   215     019F                     	;# 
   216     020D                     	;# 
   217     0210                     	;# 
   218     0211                     	;# 
   219     0212                     	;# 
   220     0213                     	;# 
   221     0214                     	;# 
   222     0215                     	;# 
   223     0215                     	;# 
   224     0216                     	;# 
   225     0217                     	;# 
   226     0291                     	;# 
   227     0291                     	;# 
   228     0292                     	;# 
   229     0293                     	;# 
   230     0294                     	;# 
   231     0295                     	;# 
   232     0295                     	;# 
   233     0296                     	;# 
   234     0298                     	;# 
   235     0298                     	;# 
   236     0299                     	;# 
   237     029A                     	;# 
   238     029B                     	;# 
   239     029C                     	;# 
   240     029C                     	;# 
   241     029D                     	;# 
   242     029E                     	;# 
   243     029F                     	;# 
   244     0311                     	;# 
   245     0311                     	;# 
   246     0312                     	;# 
   247     0313                     	;# 
   248     0314                     	;# 
   249     0315                     	;# 
   250     0315                     	;# 
   251     0316                     	;# 
   252     0318                     	;# 
   253     0318                     	;# 
   254     0319                     	;# 
   255     031A                     	;# 
   256     031C                     	;# 
   257     031C                     	;# 
   258     031D                     	;# 
   259     031E                     	;# 
   260     0394                     	;# 
   261     0395                     	;# 
   262     0396                     	;# 
   263     0415                     	;# 
   264     0416                     	;# 
   265     0417                     	;# 
   266     041C                     	;# 
   267     041D                     	;# 
   268     041E                     	;# 
   269     0791                     	;# 
   270     0792                     	;# 
   271     0793                     	;# 
   272     0794                     	;# 
   273     0795                     	;# 
   274     0798                     	;# 
   275     0799                     	;# 
   276     07A0                     	;# 
   277     07A1                     	;# 
   278     07A3                     	;# 
   279     07A4                     	;# 
   280     07A6                     	;# 
   281     07A7                     	;# 
   282     07A9                     	;# 
   283     07AA                     	;# 
   284     0FE4                     	;# 
   285     0FE5                     	;# 
   286     0FE6                     	;# 
   287     0FE7                     	;# 
   288     0FE8                     	;# 
   289     0FE9                     	;# 
   290     0FEA                     	;# 
   291     0FEB                     	;# 
   292     0FED                     	;# 
   293     0FEE                     	;# 
   294     0FEF                     	;# 
   295     0000                     	;# 
   296     0001                     	;# 
   297     0002                     	;# 
   298     0003                     	;# 
   299     0004                     	;# 
   300     0005                     	;# 
   301     0006                     	;# 
   302     0007                     	;# 
   303     0008                     	;# 
   304     0009                     	;# 
   305     000A                     	;# 
   306     000B                     	;# 
   307     000C                     	;# 
   308     000D                     	;# 
   309     000E                     	;# 
   310     0010                     	;# 
   311     0011                     	;# 
   312     0012                     	;# 
   313     0013                     	;# 
   314     0015                     	;# 
   315     0016                     	;# 
   316     0016                     	;# 
   317     0017                     	;# 
   318     0018                     	;# 
   319     0019                     	;# 
   320     001A                     	;# 
   321     001B                     	;# 
   322     001C                     	;# 
   323     001E                     	;# 
   324     001F                     	;# 
   325     008C                     	;# 
   326     008D                     	;# 
   327     008E                     	;# 
   328     0090                     	;# 
   329     0091                     	;# 
   330     0092                     	;# 
   331     0093                     	;# 
   332     0095                     	;# 
   333     0096                     	;# 
   334     0097                     	;# 
   335     0098                     	;# 
   336     0099                     	;# 
   337     009A                     	;# 
   338     009B                     	;# 
   339     009B                     	;# 
   340     009C                     	;# 
   341     009D                     	;# 
   342     009E                     	;# 
   343     010C                     	;# 
   344     010D                     	;# 
   345     010E                     	;# 
   346     0110                     	;# 
   347     0111                     	;# 
   348     0112                     	;# 
   349     0113                     	;# 
   350     0114                     	;# 
   351     0115                     	;# 
   352     0116                     	;# 
   353     0117                     	;# 
   354     0118                     	;# 
   355     0119                     	;# 
   356     011A                     	;# 
   357     011B                     	;# 
   358     011D                     	;# 
   359     018C                     	;# 
   360     018D                     	;# 
   361     0191                     	;# 
   362     0191                     	;# 
   363     0192                     	;# 
   364     0193                     	;# 
   365     0193                     	;# 
   366     0193                     	;# 
   367     0194                     	;# 
   368     0195                     	;# 
   369     0196                     	;# 
   370     0199                     	;# 
   371     019A                     	;# 
   372     019B                     	;# 
   373     019B                     	;# 
   374     019B                     	;# 
   375     019B                     	;# 
   376     019C                     	;# 
   377     019C                     	;# 
   378     019D                     	;# 
   379     019E                     	;# 
   380     019F                     	;# 
   381     020D                     	;# 
   382     0210                     	;# 
   383     0211                     	;# 
   384     0212                     	;# 
   385     0213                     	;# 
   386     0214                     	;# 
   387     0215                     	;# 
   388     0215                     	;# 
   389     0216                     	;# 
   390     0217                     	;# 
   391     0291                     	;# 
   392     0291                     	;# 
   393     0292                     	;# 
   394     0293                     	;# 
   395     0294                     	;# 
   396     0295                     	;# 
   397     0295                     	;# 
   398     0296                     	;# 
   399     0298                     	;# 
   400     0298                     	;# 
   401     0299                     	;# 
   402     029A                     	;# 
   403     029B                     	;# 
   404     029C                     	;# 
   405     029C                     	;# 
   406     029D                     	;# 
   407     029E                     	;# 
   408     029F                     	;# 
   409     0311                     	;# 
   410     0311                     	;# 
   411     0312                     	;# 
   412     0313                     	;# 
   413     0314                     	;# 
   414     0315                     	;# 
   415     0315                     	;# 
   416     0316                     	;# 
   417     0318                     	;# 
   418     0318                     	;# 
   419     0319                     	;# 
   420     031A                     	;# 
   421     031C                     	;# 
   422     031C                     	;# 
   423     031D                     	;# 
   424     031E                     	;# 
   425     0394                     	;# 
   426     0395                     	;# 
   427     0396                     	;# 
   428     0415                     	;# 
   429     0416                     	;# 
   430     0417                     	;# 
   431     041C                     	;# 
   432     041D                     	;# 
   433     041E                     	;# 
   434     0791                     	;# 
   435     0792                     	;# 
   436     0793                     	;# 
   437     0794                     	;# 
   438     0795                     	;# 
   439     0798                     	;# 
   440     0799                     	;# 
   441     07A0                     	;# 
   442     07A1                     	;# 
   443     07A3                     	;# 
   444     07A4                     	;# 
   445     07A6                     	;# 
   446     07A7                     	;# 
   447     07A9                     	;# 
   448     07AA                     	;# 
   449     0FE4                     	;# 
   450     0FE5                     	;# 
   451     0FE6                     	;# 
   452     0FE7                     	;# 
   453     0FE8                     	;# 
   454     0FE9                     	;# 
   455     0FEA                     	;# 
   456     0FEB                     	;# 
   457     0FED                     	;# 
   458     0FEE                     	;# 
   459     0FEF                     	;# 
   460     0000                     	;# 
   461     0001                     	;# 
   462     0002                     	;# 
   463     0003                     	;# 
   464     0004                     	;# 
   465     0005                     	;# 
   466     0006                     	;# 
   467     0007                     	;# 
   468     0008                     	;# 
   469     0009                     	;# 
   470     000A                     	;# 
   471     000B                     	;# 
   472     000C                     	;# 
   473     000D                     	;# 
   474     000E                     	;# 
   475     0010                     	;# 
   476     0011                     	;# 
   477     0012                     	;# 
   478     0013                     	;# 
   479     0015                     	;# 
   480     0016                     	;# 
   481     0016                     	;# 
   482     0017                     	;# 
   483     0018                     	;# 
   484     0019                     	;# 
   485     001A                     	;# 
   486     001B                     	;# 
   487     001C                     	;# 
   488     001E                     	;# 
   489     001F                     	;# 
   490     008C                     	;# 
   491     008D                     	;# 
   492     008E                     	;# 
   493     0090                     	;# 
   494     0091                     	;# 
   495     0092                     	;# 
   496     0093                     	;# 
   497     0095                     	;# 
   498     0096                     	;# 
   499     0097                     	;# 
   500     0098                     	;# 
   501     0099                     	;# 
   502     009A                     	;# 
   503     009B                     	;# 
   504     009B                     	;# 
   505     009C                     	;# 
   506     009D                     	;# 
   507     009E                     	;# 
   508     010C                     	;# 
   509     010D                     	;# 
   510     010E                     	;# 
   511     0110                     	;# 
   512     0111                     	;# 
   513     0112                     	;# 
   514     0113                     	;# 
   515     0114                     	;# 
   516     0115                     	;# 
   517     0116                     	;# 
   518     0117                     	;# 
   519     0118                     	;# 
   520     0119                     	;# 
   521     011A                     	;# 
   522     011B                     	;# 
   523     011D                     	;# 
   524     018C                     	;# 
   525     018D                     	;# 
   526     0191                     	;# 
   527     0191                     	;# 
   528     0192                     	;# 
   529     0193                     	;# 
   530     0193                     	;# 
   531     0193                     	;# 
   532     0194                     	;# 
   533     0195                     	;# 
   534     0196                     	;# 
   535     0199                     	;# 
   536     019A                     	;# 
   537     019B                     	;# 
   538     019B                     	;# 
   539     019B                     	;# 
   540     019B                     	;# 
   541     019C                     	;# 
   542     019C                     	;# 
   543     019D                     	;# 
   544     019E                     	;# 
   545     019F                     	;# 
   546     020D                     	;# 
   547     0210                     	;# 
   548     0211                     	;# 
   549     0212                     	;# 
   550     0213                     	;# 
   551     0214                     	;# 
   552     0215                     	;# 
   553     0215                     	;# 
   554     0216                     	;# 
   555     0217                     	;# 
   556     0291                     	;# 
   557     0291                     	;# 
   558     0292                     	;# 
   559     0293                     	;# 
   560     0294                     	;# 
   561     0295                     	;# 
   562     0295                     	;# 
   563     0296                     	;# 
   564     0298                     	;# 
   565     0298                     	;# 
   566     0299                     	;# 
   567     029A                     	;# 
   568     029B                     	;# 
   569     029C                     	;# 
   570     029C                     	;# 
   571     029D                     	;# 
   572     029E                     	;# 
   573     029F                     	;# 
   574     0311                     	;# 
   575     0311                     	;# 
   576     0312                     	;# 
   577     0313                     	;# 
   578     0314                     	;# 
   579     0315                     	;# 
   580     0315                     	;# 
   581     0316                     	;# 
   582     0318                     	;# 
   583     0318                     	;# 
   584     0319                     	;# 
   585     031A                     	;# 
   586     031C                     	;# 
   587     031C                     	;# 
   588     031D                     	;# 
   589     031E                     	;# 
   590     0394                     	;# 
   591     0395                     	;# 
   592     0396                     	;# 
   593     0415                     	;# 
   594     0416                     	;# 
   595     0417                     	;# 
   596     041C                     	;# 
   597     041D                     	;# 
   598     041E                     	;# 
   599     0791                     	;# 
   600     0792                     	;# 
   601     0793                     	;# 
   602     0794                     	;# 
   603     0795                     	;# 
   604     0798                     	;# 
   605     0799                     	;# 
   606     07A0                     	;# 
   607     07A1                     	;# 
   608     07A3                     	;# 
   609     07A4                     	;# 
   610     07A6                     	;# 
   611     07A7                     	;# 
   612     07A9                     	;# 
   613     07AA                     	;# 
   614     0FE4                     	;# 
   615     0FE5                     	;# 
   616     0FE6                     	;# 
   617     0FE7                     	;# 
   618     0FE8                     	;# 
   619     0FE9                     	;# 
   620     0FEA                     	;# 
   621     0FEB                     	;# 
   622     0FED                     	;# 
   623     0FEE                     	;# 
   624     0FEF                     	;# 
   625     0000                     	;# 
   626     0001                     	;# 
   627     0002                     	;# 
   628     0003                     	;# 
   629     0004                     	;# 
   630     0005                     	;# 
   631     0006                     	;# 
   632     0007                     	;# 
   633     0008                     	;# 
   634     0009                     	;# 
   635     000A                     	;# 
   636     000B                     	;# 
   637     000C                     	;# 
   638     000D                     	;# 
   639     000E                     	;# 
   640     0010                     	;# 
   641     0011                     	;# 
   642     0012                     	;# 
   643     0013                     	;# 
   644     0015                     	;# 
   645     0016                     	;# 
   646     0016                     	;# 
   647     0017                     	;# 
   648     0018                     	;# 
   649     0019                     	;# 
   650     001A                     	;# 
   651     001B                     	;# 
   652     001C                     	;# 
   653     001E                     	;# 
   654     001F                     	;# 
   655     008C                     	;# 
   656     008D                     	;# 
   657     008E                     	;# 
   658     0090                     	;# 
   659     0091                     	;# 
   660     0092                     	;# 
   661     0093                     	;# 
   662     0095                     	;# 
   663     0096                     	;# 
   664     0097                     	;# 
   665     0098                     	;# 
   666     0099                     	;# 
   667     009A                     	;# 
   668     009B                     	;# 
   669     009B                     	;# 
   670     009C                     	;# 
   671     009D                     	;# 
   672     009E                     	;# 
   673     010C                     	;# 
   674     010D                     	;# 
   675     010E                     	;# 
   676     0110                     	;# 
   677     0111                     	;# 
   678     0112                     	;# 
   679     0113                     	;# 
   680     0114                     	;# 
   681     0115                     	;# 
   682     0116                     	;# 
   683     0117                     	;# 
   684     0118                     	;# 
   685     0119                     	;# 
   686     011A                     	;# 
   687     011B                     	;# 
   688     011D                     	;# 
   689     018C                     	;# 
   690     018D                     	;# 
   691     0191                     	;# 
   692     0191                     	;# 
   693     0192                     	;# 
   694     0193                     	;# 
   695     0193                     	;# 
   696     0193                     	;# 
   697     0194                     	;# 
   698     0195                     	;# 
   699     0196                     	;# 
   700     0199                     	;# 
   701     019A                     	;# 
   702     019B                     	;# 
   703     019B                     	;# 
   704     019B                     	;# 
   705     019B                     	;# 
   706     019C                     	;# 
   707     019C                     	;# 
   708     019D                     	;# 
   709     019E                     	;# 
   710     019F                     	;# 
   711     020D                     	;# 
   712     0210                     	;# 
   713     0211                     	;# 
   714     0212                     	;# 
   715     0213                     	;# 
   716     0214                     	;# 
   717     0215                     	;# 
   718     0215                     	;# 
   719     0216                     	;# 
   720     0217                     	;# 
   721     0291                     	;# 
   722     0291                     	;# 
   723     0292                     	;# 
   724     0293                     	;# 
   725     0294                     	;# 
   726     0295                     	;# 
   727     0295                     	;# 
   728     0296                     	;# 
   729     0298                     	;# 
   730     0298                     	;# 
   731     0299                     	;# 
   732     029A                     	;# 
   733     029B                     	;# 
   734     029C                     	;# 
   735     029C                     	;# 
   736     029D                     	;# 
   737     029E                     	;# 
   738     029F                     	;# 
   739     0311                     	;# 
   740     0311                     	;# 
   741     0312                     	;# 
   742     0313                     	;# 
   743     0314                     	;# 
   744     0315                     	;# 
   745     0315                     	;# 
   746     0316                     	;# 
   747     0318                     	;# 
   748     0318                     	;# 
   749     0319                     	;# 
   750     031A                     	;# 
   751     031C                     	;# 
   752     031C                     	;# 
   753     031D                     	;# 
   754     031E                     	;# 
   755     0394                     	;# 
   756     0395                     	;# 
   757     0396                     	;# 
   758     0415                     	;# 
   759     0416                     	;# 
   760     0417                     	;# 
   761     041C                     	;# 
   762     041D                     	;# 
   763     041E                     	;# 
   764     0791                     	;# 
   765     0792                     	;# 
   766     0793                     	;# 
   767     0794                     	;# 
   768     0795                     	;# 
   769     0798                     	;# 
   770     0799                     	;# 
   771     07A0                     	;# 
   772     07A1                     	;# 
   773     07A3                     	;# 
   774     07A4                     	;# 
   775     07A6                     	;# 
   776     07A7                     	;# 
   777     07A9                     	;# 
   778     07AA                     	;# 
   779     0FE4                     	;# 
   780     0FE5                     	;# 
   781     0FE6                     	;# 
   782     0FE7                     	;# 
   783     0FE8                     	;# 
   784     0FE9                     	;# 
   785     0FEA                     	;# 
   786     0FEB                     	;# 
   787     0FED                     	;# 
   788     0FEE                     	;# 
   789     0FEF                     	;# 
   790     0000                     	;# 
   791     0001                     	;# 
   792     0002                     	;# 
   793     0003                     	;# 
   794     0004                     	;# 
   795     0005                     	;# 
   796     0006                     	;# 
   797     0007                     	;# 
   798     0008                     	;# 
   799     0009                     	;# 
   800     000A                     	;# 
   801     000B                     	;# 
   802     000C                     	;# 
   803     000D                     	;# 
   804     000E                     	;# 
   805     0010                     	;# 
   806     0011                     	;# 
   807     0012                     	;# 
   808     0013                     	;# 
   809     0015                     	;# 
   810     0016                     	;# 
   811     0016                     	;# 
   812     0017                     	;# 
   813     0018                     	;# 
   814     0019                     	;# 
   815     001A                     	;# 
   816     001B                     	;# 
   817     001C                     	;# 
   818     001E                     	;# 
   819     001F                     	;# 
   820     008C                     	;# 
   821     008D                     	;# 
   822     008E                     	;# 
   823     0090                     	;# 
   824     0091                     	;# 
   825     0092                     	;# 
   826     0093                     	;# 
   827     0095                     	;# 
   828     0096                     	;# 
   829     0097                     	;# 
   830     0098                     	;# 
   831     0099                     	;# 
   832     009A                     	;# 
   833     009B                     	;# 
   834     009B                     	;# 
   835     009C                     	;# 
   836     009D                     	;# 
   837     009E                     	;# 
   838     010C                     	;# 
   839     010D                     	;# 
   840     010E                     	;# 
   841     0110                     	;# 
   842     0111                     	;# 
   843     0112                     	;# 
   844     0113                     	;# 
   845     0114                     	;# 
   846     0115                     	;# 
   847     0116                     	;# 
   848     0117                     	;# 
   849     0118                     	;# 
   850     0119                     	;# 
   851     011A                     	;# 
   852     011B                     	;# 
   853     011D                     	;# 
   854     018C                     	;# 
   855     018D                     	;# 
   856     0191                     	;# 
   857     0191                     	;# 
   858     0192                     	;# 
   859     0193                     	;# 
   860     0193                     	;# 
   861     0193                     	;# 
   862     0194                     	;# 
   863     0195                     	;# 
   864     0196                     	;# 
   865     0199                     	;# 
   866     019A                     	;# 
   867     019B                     	;# 
   868     019B                     	;# 
   869     019B                     	;# 
   870     019B                     	;# 
   871     019C                     	;# 
   872     019C                     	;# 
   873     019D                     	;# 
   874     019E                     	;# 
   875     019F                     	;# 
   876     020D                     	;# 
   877     0210                     	;# 
   878     0211                     	;# 
   879     0212                     	;# 
   880     0213                     	;# 
   881     0214                     	;# 
   882     0215                     	;# 
   883     0215                     	;# 
   884     0216                     	;# 
   885     0217                     	;# 
   886     0291                     	;# 
   887     0291                     	;# 
   888     0292                     	;# 
   889     0293                     	;# 
   890     0294                     	;# 
   891     0295                     	;# 
   892     0295                     	;# 
   893     0296                     	;# 
   894     0298                     	;# 
   895     0298                     	;# 
   896     0299                     	;# 
   897     029A                     	;# 
   898     029B                     	;# 
   899     029C                     	;# 
   900     029C                     	;# 
   901     029D                     	;# 
   902     029E                     	;# 
   903     029F                     	;# 
   904     0311                     	;# 
   905     0311                     	;# 
   906     0312                     	;# 
   907     0313                     	;# 
   908     0314                     	;# 
   909     0315                     	;# 
   910     0315                     	;# 
   911     0316                     	;# 
   912     0318                     	;# 
   913     0318                     	;# 
   914     0319                     	;# 
   915     031A                     	;# 
   916     031C                     	;# 
   917     031C                     	;# 
   918     031D                     	;# 
   919     031E                     	;# 
   920     0394                     	;# 
   921     0395                     	;# 
   922     0396                     	;# 
   923     0415                     	;# 
   924     0416                     	;# 
   925     0417                     	;# 
   926     041C                     	;# 
   927     041D                     	;# 
   928     041E                     	;# 
   929     0791                     	;# 
   930     0792                     	;# 
   931     0793                     	;# 
   932     0794                     	;# 
   933     0795                     	;# 
   934     0798                     	;# 
   935     0799                     	;# 
   936     07A0                     	;# 
   937     07A1                     	;# 
   938     07A3                     	;# 
   939     07A4                     	;# 
   940     07A6                     	;# 
   941     07A7                     	;# 
   942     07A9                     	;# 
   943     07AA                     	;# 
   944     0FE4                     	;# 
   945     0FE5                     	;# 
   946     0FE6                     	;# 
   947     0FE7                     	;# 
   948     0FE8                     	;# 
   949     0FE9                     	;# 
   950     0FEA                     	;# 
   951     0FEB                     	;# 
   952     0FED                     	;# 
   953     0FEE                     	;# 
   954     0FEF                     	;# 
   955     0000                     	;# 
   956     0001                     	;# 
   957     0002                     	;# 
   958     0003                     	;# 
   959     0004                     	;# 
   960     0005                     	;# 
   961     0006                     	;# 
   962     0007                     	;# 
   963     0008                     	;# 
   964     0009                     	;# 
   965     000A                     	;# 
   966     000B                     	;# 
   967     000C                     	;# 
   968     000D                     	;# 
   969     000E                     	;# 
   970     0010                     	;# 
   971     0011                     	;# 
   972     0012                     	;# 
   973     0013                     	;# 
   974     0015                     	;# 
   975     0016                     	;# 
   976     0016                     	;# 
   977     0017                     	;# 
   978     0018                     	;# 
   979     0019                     	;# 
   980     001A                     	;# 
   981     001B                     	;# 
   982     001C                     	;# 
   983     001E                     	;# 
   984     001F                     	;# 
   985     008C                     	;# 
   986     008D                     	;# 
   987     008E                     	;# 
   988     0090                     	;# 
   989     0091                     	;# 
   990     0092                     	;# 
   991     0093                     	;# 
   992     0095                     	;# 
   993     0096                     	;# 
   994     0097                     	;# 
   995     0098                     	;# 
   996     0099                     	;# 
   997     009A                     	;# 
   998     009B                     	;# 
   999     009B                     	;# 
  1000     009C                     	;# 
  1001     009D                     	;# 
  1002     009E                     	;# 
  1003     010C                     	;# 
  1004     010D                     	;# 
  1005     010E                     	;# 
  1006     0110                     	;# 
  1007     0111                     	;# 
  1008     0112                     	;# 
  1009     0113                     	;# 
  1010     0114                     	;# 
  1011     0115                     	;# 
  1012     0116                     	;# 
  1013     0117                     	;# 
  1014     0118                     	;# 
  1015     0119                     	;# 
  1016     011A                     	;# 
  1017     011B                     	;# 
  1018     011D                     	;# 
  1019     018C                     	;# 
  1020     018D                     	;# 
  1021     0191                     	;# 
  1022     0191                     	;# 
  1023     0192                     	;# 
  1024     0193                     	;# 
  1025     0193                     	;# 
  1026     0193                     	;# 
  1027     0194                     	;# 
  1028     0195                     	;# 
  1029     0196                     	;# 
  1030     0199                     	;# 
  1031     019A                     	;# 
  1032     019B                     	;# 
  1033     019B                     	;# 
  1034     019B                     	;# 
  1035     019B                     	;# 
  1036     019C                     	;# 
  1037     019C                     	;# 
  1038     019D                     	;# 
  1039     019E                     	;# 
  1040     019F                     	;# 
  1041     020D                     	;# 
  1042     0210                     	;# 
  1043     0211                     	;# 
  1044     0212                     	;# 
  1045     0213                     	;# 
  1046     0214                     	;# 
  1047     0215                     	;# 
  1048     0215                     	;# 
  1049     0216                     	;# 
  1050     0217                     	;# 
  1051     0291                     	;# 
  1052     0291                     	;# 
  1053     0292                     	;# 
  1054     0293                     	;# 
  1055     0294                     	;# 
  1056     0295                     	;# 
  1057     0295                     	;# 
  1058     0296                     	;# 
  1059     0298                     	;# 
  1060     0298                     	;# 
  1061     0299                     	;# 
  1062     029A                     	;# 
  1063     029B                     	;# 
  1064     029C                     	;# 
  1065     029C                     	;# 
  1066     029D                     	;# 
  1067     029E                     	;# 
  1068     029F                     	;# 
  1069     0311                     	;# 
  1070     0311                     	;# 
  1071     0312                     	;# 
  1072     0313                     	;# 
  1073     0314                     	;# 
  1074     0315                     	;# 
  1075     0315                     	;# 
  1076     0316                     	;# 
  1077     0318                     	;# 
  1078     0318                     	;# 
  1079     0319                     	;# 
  1080     031A                     	;# 
  1081     031C                     	;# 
  1082     031C                     	;# 
  1083     031D                     	;# 
  1084     031E                     	;# 
  1085     0394                     	;# 
  1086     0395                     	;# 
  1087     0396                     	;# 
  1088     0415                     	;# 
  1089     0416                     	;# 
  1090     0417                     	;# 
  1091     041C                     	;# 
  1092     041D                     	;# 
  1093     041E                     	;# 
  1094     0791                     	;# 
  1095     0792                     	;# 
  1096     0793                     	;# 
  1097     0794                     	;# 
  1098     0795                     	;# 
  1099     0798                     	;# 
  1100     0799                     	;# 
  1101     07A0                     	;# 
  1102     07A1                     	;# 
  1103     07A3                     	;# 
  1104     07A4                     	;# 
  1105     07A6                     	;# 
  1106     07A7                     	;# 
  1107     07A9                     	;# 
  1108     07AA                     	;# 
  1109     0FE4                     	;# 
  1110     0FE5                     	;# 
  1111     0FE6                     	;# 
  1112     0FE7                     	;# 
  1113     0FE8                     	;# 
  1114     0FE9                     	;# 
  1115     0FEA                     	;# 
  1116     0FEB                     	;# 
  1117     0FED                     	;# 
  1118     0FEE                     	;# 
  1119     0FEF                     	;# 
  1120     0000                     	;# 
  1121     0001                     	;# 
  1122     0002                     	;# 
  1123     0003                     	;# 
  1124     0004                     	;# 
  1125     0005                     	;# 
  1126     0006                     	;# 
  1127     0007                     	;# 
  1128     0008                     	;# 
  1129     0009                     	;# 
  1130     000A                     	;# 
  1131     000B                     	;# 
  1132     000C                     	;# 
  1133     000D                     	;# 
  1134     000E                     	;# 
  1135     0010                     	;# 
  1136     0011                     	;# 
  1137     0012                     	;# 
  1138     0013                     	;# 
  1139     0015                     	;# 
  1140     0016                     	;# 
  1141     0016                     	;# 
  1142     0017                     	;# 
  1143     0018                     	;# 
  1144     0019                     	;# 
  1145     001A                     	;# 
  1146     001B                     	;# 
  1147     001C                     	;# 
  1148     001E                     	;# 
  1149     001F                     	;# 
  1150     008C                     	;# 
  1151     008D                     	;# 
  1152     008E                     	;# 
  1153     0090                     	;# 
  1154     0091                     	;# 
  1155     0092                     	;# 
  1156     0093                     	;# 
  1157     0095                     	;# 
  1158     0096                     	;# 
  1159     0097                     	;# 
  1160     0098                     	;# 
  1161     0099                     	;# 
  1162     009A                     	;# 
  1163     009B                     	;# 
  1164     009B                     	;# 
  1165     009C                     	;# 
  1166     009D                     	;# 
  1167     009E                     	;# 
  1168     010C                     	;# 
  1169     010D                     	;# 
  1170     010E                     	;# 
  1171     0110                     	;# 
  1172     0111                     	;# 
  1173     0112                     	;# 
  1174     0113                     	;# 
  1175     0114                     	;# 
  1176     0115                     	;# 
  1177     0116                     	;# 
  1178     0117                     	;# 
  1179     0118                     	;# 
  1180     0119                     	;# 
  1181     011A                     	;# 
  1182     011B                     	;# 
  1183     011D                     	;# 
  1184     018C                     	;# 
  1185     018D                     	;# 
  1186     0191                     	;# 
  1187     0191                     	;# 
  1188     0192                     	;# 
  1189     0193                     	;# 
  1190     0193                     	;# 
  1191     0193                     	;# 
  1192     0194                     	;# 
  1193     0195                     	;# 
  1194     0196                     	;# 
  1195     0199                     	;# 
  1196     019A                     	;# 
  1197     019B                     	;# 
  1198     019B                     	;# 
  1199     019B                     	;# 
  1200     019B                     	;# 
  1201     019C                     	;# 
  1202     019C                     	;# 
  1203     019D                     	;# 
  1204     019E                     	;# 
  1205     019F                     	;# 
  1206     020D                     	;# 
  1207     0210                     	;# 
  1208     0211                     	;# 
  1209     0212                     	;# 
  1210     0213                     	;# 
  1211     0214                     	;# 
  1212     0215                     	;# 
  1213     0215                     	;# 
  1214     0216                     	;# 
  1215     0217                     	;# 
  1216     0291                     	;# 
  1217     0291                     	;# 
  1218     0292                     	;# 
  1219     0293                     	;# 
  1220     0294                     	;# 
  1221     0295                     	;# 
  1222     0295                     	;# 
  1223     0296                     	;# 
  1224     0298                     	;# 
  1225     0298                     	;# 
  1226     0299                     	;# 
  1227     029A                     	;# 
  1228     029B                     	;# 
  1229     029C                     	;# 
  1230     029C                     	;# 
  1231     029D                     	;# 
  1232     029E                     	;# 
  1233     029F                     	;# 
  1234     0311                     	;# 
  1235     0311                     	;# 
  1236     0312                     	;# 
  1237     0313                     	;# 
  1238     0314                     	;# 
  1239     0315                     	;# 
  1240     0315                     	;# 
  1241     0316                     	;# 
  1242     0318                     	;# 
  1243     0318                     	;# 
  1244     0319                     	;# 
  1245     031A                     	;# 
  1246     031C                     	;# 
  1247     031C                     	;# 
  1248     031D                     	;# 
  1249     031E                     	;# 
  1250     0394                     	;# 
  1251     0395                     	;# 
  1252     0396                     	;# 
  1253     0415                     	;# 
  1254     0416                     	;# 
  1255     0417                     	;# 
  1256     041C                     	;# 
  1257     041D                     	;# 
  1258     041E                     	;# 
  1259     0791                     	;# 
  1260     0792                     	;# 
  1261     0793                     	;# 
  1262     0794                     	;# 
  1263     0795                     	;# 
  1264     0798                     	;# 
  1265     0799                     	;# 
  1266     07A0                     	;# 
  1267     07A1                     	;# 
  1268     07A3                     	;# 
  1269     07A4                     	;# 
  1270     07A6                     	;# 
  1271     07A7                     	;# 
  1272     07A9                     	;# 
  1273     07AA                     	;# 
  1274     0FE4                     	;# 
  1275     0FE5                     	;# 
  1276     0FE6                     	;# 
  1277     0FE7                     	;# 
  1278     0FE8                     	;# 
  1279     0FE9                     	;# 
  1280     0FEA                     	;# 
  1281     0FEB                     	;# 
  1282     0FED                     	;# 
  1283     0FEE                     	;# 
  1284     0FEF                     	;# 
  1285     0000                     	;# 
  1286     0001                     	;# 
  1287     0002                     	;# 
  1288     0003                     	;# 
  1289     0004                     	;# 
  1290     0005                     	;# 
  1291     0006                     	;# 
  1292     0007                     	;# 
  1293     0008                     	;# 
  1294     0009                     	;# 
  1295     000A                     	;# 
  1296     000B                     	;# 
  1297     000C                     	;# 
  1298     000D                     	;# 
  1299     000E                     	;# 
  1300     0010                     	;# 
  1301     0011                     	;# 
  1302     0012                     	;# 
  1303     0013                     	;# 
  1304     0015                     	;# 
  1305     0016                     	;# 
  1306     0016                     	;# 
  1307     0017                     	;# 
  1308     0018                     	;# 
  1309     0019                     	;# 
  1310     001A                     	;# 
  1311     001B                     	;# 
  1312     001C                     	;# 
  1313     001E                     	;# 
  1314     001F                     	;# 
  1315     008C                     	;# 
  1316     008D                     	;# 
  1317     008E                     	;# 
  1318     0090                     	;# 
  1319     0091                     	;# 
  1320     0092                     	;# 
  1321     0093                     	;# 
  1322     0095                     	;# 
  1323     0096                     	;# 
  1324     0097                     	;# 
  1325     0098                     	;# 
  1326     0099                     	;# 
  1327     009A                     	;# 
  1328     009B                     	;# 
  1329     009B                     	;# 
  1330     009C                     	;# 
  1331     009D                     	;# 
  1332     009E                     	;# 
  1333     010C                     	;# 
  1334     010D                     	;# 
  1335     010E                     	;# 
  1336     0110                     	;# 
  1337     0111                     	;# 
  1338     0112                     	;# 
  1339     0113                     	;# 
  1340     0114                     	;# 
  1341     0115                     	;# 
  1342     0116                     	;# 
  1343     0117                     	;# 
  1344     0118                     	;# 
  1345     0119                     	;# 
  1346     011A                     	;# 
  1347     011B                     	;# 
  1348     011D                     	;# 
  1349     018C                     	;# 
  1350     018D                     	;# 
  1351     0191                     	;# 
  1352     0191                     	;# 
  1353     0192                     	;# 
  1354     0193                     	;# 
  1355     0193                     	;# 
  1356     0193                     	;# 
  1357     0194                     	;# 
  1358     0195                     	;# 
  1359     0196                     	;# 
  1360     0199                     	;# 
  1361     019A                     	;# 
  1362     019B                     	;# 
  1363     019B                     	;# 
  1364     019B                     	;# 
  1365     019B                     	;# 
  1366     019C                     	;# 
  1367     019C                     	;# 
  1368     019D                     	;# 
  1369     019E                     	;# 
  1370     019F                     	;# 
  1371     020D                     	;# 
  1372     0210                     	;# 
  1373     0211                     	;# 
  1374     0212                     	;# 
  1375     0213                     	;# 
  1376     0214                     	;# 
  1377     0215                     	;# 
  1378     0215                     	;# 
  1379     0216                     	;# 
  1380     0217                     	;# 
  1381     0291                     	;# 
  1382     0291                     	;# 
  1383     0292                     	;# 
  1384     0293                     	;# 
  1385     0294                     	;# 
  1386     0295                     	;# 
  1387     0295                     	;# 
  1388     0296                     	;# 
  1389     0298                     	;# 
  1390     0298                     	;# 
  1391     0299                     	;# 
  1392     029A                     	;# 
  1393     029B                     	;# 
  1394     029C                     	;# 
  1395     029C                     	;# 
  1396     029D                     	;# 
  1397     029E                     	;# 
  1398     029F                     	;# 
  1399     0311                     	;# 
  1400     0311                     	;# 
  1401     0312                     	;# 
  1402     0313                     	;# 
  1403     0314                     	;# 
  1404     0315                     	;# 
  1405     0315                     	;# 
  1406     0316                     	;# 
  1407     0318                     	;# 
  1408     0318                     	;# 
  1409     0319                     	;# 
  1410     031A                     	;# 
  1411     031C                     	;# 
  1412     031C                     	;# 
  1413     031D                     	;# 
  1414     031E                     	;# 
  1415     0394                     	;# 
  1416     0395                     	;# 
  1417     0396                     	;# 
  1418     0415                     	;# 
  1419     0416                     	;# 
  1420     0417                     	;# 
  1421     041C                     	;# 
  1422     041D                     	;# 
  1423     041E                     	;# 
  1424     0791                     	;# 
  1425     0792                     	;# 
  1426     0793                     	;# 
  1427     0794                     	;# 
  1428     0795                     	;# 
  1429     0798                     	;# 
  1430     0799                     	;# 
  1431     07A0                     	;# 
  1432     07A1                     	;# 
  1433     07A3                     	;# 
  1434     07A4                     	;# 
  1435     07A6                     	;# 
  1436     07A7                     	;# 
  1437     07A9                     	;# 
  1438     07AA                     	;# 
  1439     0FE4                     	;# 
  1440     0FE5                     	;# 
  1441     0FE6                     	;# 
  1442     0FE7                     	;# 
  1443     0FE8                     	;# 
  1444     0FE9                     	;# 
  1445     0FEA                     	;# 
  1446     0FEB                     	;# 
  1447     0FED                     	;# 
  1448     0FEE                     	;# 
  1449     0FEF                     	;# 
  1450     0000                     	;# 
  1451     0001                     	;# 
  1452     0002                     	;# 
  1453     0003                     	;# 
  1454     0004                     	;# 
  1455     0005                     	;# 
  1456     0006                     	;# 
  1457     0007                     	;# 
  1458     0008                     	;# 
  1459     0009                     	;# 
  1460     000A                     	;# 
  1461     000B                     	;# 
  1462     000C                     	;# 
  1463     000D                     	;# 
  1464     000E                     	;# 
  1465     0010                     	;# 
  1466     0011                     	;# 
  1467     0012                     	;# 
  1468     0013                     	;# 
  1469     0015                     	;# 
  1470     0016                     	;# 
  1471     0016                     	;# 
  1472     0017                     	;# 
  1473     0018                     	;# 
  1474     0019                     	;# 
  1475     001A                     	;# 
  1476     001B                     	;# 
  1477     001C                     	;# 
  1478     001E                     	;# 
  1479     001F                     	;# 
  1480     008C                     	;# 
  1481     008D                     	;# 
  1482     008E                     	;# 
  1483     0090                     	;# 
  1484     0091                     	;# 
  1485     0092                     	;# 
  1486     0093                     	;# 
  1487     0095                     	;# 
  1488     0096                     	;# 
  1489     0097                     	;# 
  1490     0098                     	;# 
  1491     0099                     	;# 
  1492     009A                     	;# 
  1493     009B                     	;# 
  1494     009B                     	;# 
  1495     009C                     	;# 
  1496     009D                     	;# 
  1497     009E                     	;# 
  1498     010C                     	;# 
  1499     010D                     	;# 
  1500     010E                     	;# 
  1501     0110                     	;# 
  1502     0111                     	;# 
  1503     0112                     	;# 
  1504     0113                     	;# 
  1505     0114                     	;# 
  1506     0115                     	;# 
  1507     0116                     	;# 
  1508     0117                     	;# 
  1509     0118                     	;# 
  1510     0119                     	;# 
  1511     011A                     	;# 
  1512     011B                     	;# 
  1513     011D                     	;# 
  1514     018C                     	;# 
  1515     018D                     	;# 
  1516     0191                     	;# 
  1517     0191                     	;# 
  1518     0192                     	;# 
  1519     0193                     	;# 
  1520     0193                     	;# 
  1521     0193                     	;# 
  1522     0194                     	;# 
  1523     0195                     	;# 
  1524     0196                     	;# 
  1525     0199                     	;# 
  1526     019A                     	;# 
  1527     019B                     	;# 
  1528     019B                     	;# 
  1529     019B                     	;# 
  1530     019B                     	;# 
  1531     019C                     	;# 
  1532     019C                     	;# 
  1533     019D                     	;# 
  1534     019E                     	;# 
  1535     019F                     	;# 
  1536     020D                     	;# 
  1537     0210                     	;# 
  1538     0211                     	;# 
  1539     0212                     	;# 
  1540     0213                     	;# 
  1541     0214                     	;# 
  1542     0215                     	;# 
  1543     0215                     	;# 
  1544     0216                     	;# 
  1545     0217                     	;# 
  1546     0291                     	;# 
  1547     0291                     	;# 
  1548     0292                     	;# 
  1549     0293                     	;# 
  1550     0294                     	;# 
  1551     0295                     	;# 
  1552     0295                     	;# 
  1553     0296                     	;# 
  1554     0298                     	;# 
  1555     0298                     	;# 
  1556     0299                     	;# 
  1557     029A                     	;# 
  1558     029B                     	;# 
  1559     029C                     	;# 
  1560     029C                     	;# 
  1561     029D                     	;# 
  1562     029E                     	;# 
  1563     029F                     	;# 
  1564     0311                     	;# 
  1565     0311                     	;# 
  1566     0312                     	;# 
  1567     0313                     	;# 
  1568     0314                     	;# 
  1569     0315                     	;# 
  1570     0315                     	;# 
  1571     0316                     	;# 
  1572     0318                     	;# 
  1573     0318                     	;# 
  1574     0319                     	;# 
  1575     031A                     	;# 
  1576     031C                     	;# 
  1577     031C                     	;# 
  1578     031D                     	;# 
  1579     031E                     	;# 
  1580     0394                     	;# 
  1581     0395                     	;# 
  1582     0396                     	;# 
  1583     0415                     	;# 
  1584     0416                     	;# 
  1585     0417                     	;# 
  1586     041C                     	;# 
  1587     041D                     	;# 
  1588     041E                     	;# 
  1589     0791                     	;# 
  1590     0792                     	;# 
  1591     0793                     	;# 
  1592     0794                     	;# 
  1593     0795                     	;# 
  1594     0798                     	;# 
  1595     0799                     	;# 
  1596     07A0                     	;# 
  1597     07A1                     	;# 
  1598     07A3                     	;# 
  1599     07A4                     	;# 
  1600     07A6                     	;# 
  1601     07A7                     	;# 
  1602     07A9                     	;# 
  1603     07AA                     	;# 
  1604     0FE4                     	;# 
  1605     0FE5                     	;# 
  1606     0FE6                     	;# 
  1607     0FE7                     	;# 
  1608     0FE8                     	;# 
  1609     0FE9                     	;# 
  1610     0FEA                     	;# 
  1611     0FEB                     	;# 
  1612     0FED                     	;# 
  1613     0FEE                     	;# 
  1614     0FEF                     	;# 
  1615     0000                     	;# 
  1616     0001                     	;# 
  1617     0002                     	;# 
  1618     0003                     	;# 
  1619     0004                     	;# 
  1620     0005                     	;# 
  1621     0006                     	;# 
  1622     0007                     	;# 
  1623     0008                     	;# 
  1624     0009                     	;# 
  1625     000A                     	;# 
  1626     000B                     	;# 
  1627     000C                     	;# 
  1628     000D                     	;# 
  1629     000E                     	;# 
  1630     0010                     	;# 
  1631     0011                     	;# 
  1632     0012                     	;# 
  1633     0013                     	;# 
  1634     0015                     	;# 
  1635     0016                     	;# 
  1636     0016                     	;# 
  1637     0017                     	;# 
  1638     0018                     	;# 
  1639     0019                     	;# 
  1640     001A                     	;# 
  1641     001B                     	;# 
  1642     001C                     	;# 
  1643     001E                     	;# 
  1644     001F                     	;# 
  1645     008C                     	;# 
  1646     008D                     	;# 
  1647     008E                     	;# 
  1648     0090                     	;# 
  1649     0091                     	;# 
  1650     0092                     	;# 
  1651     0093                     	;# 
  1652     0095                     	;# 
  1653     0096                     	;# 
  1654     0097                     	;# 
  1655     0098                     	;# 
  1656     0099                     	;# 
  1657     009A                     	;# 
  1658     009B                     	;# 
  1659     009B                     	;# 
  1660     009C                     	;# 
  1661     009D                     	;# 
  1662     009E                     	;# 
  1663     010C                     	;# 
  1664     010D                     	;# 
  1665     010E                     	;# 
  1666     0110                     	;# 
  1667     0111                     	;# 
  1668     0112                     	;# 
  1669     0113                     	;# 
  1670     0114                     	;# 
  1671     0115                     	;# 
  1672     0116                     	;# 
  1673     0117                     	;# 
  1674     0118                     	;# 
  1675     0119                     	;# 
  1676     011A                     	;# 
  1677     011B                     	;# 
  1678     011D                     	;# 
  1679     018C                     	;# 
  1680     018D                     	;# 
  1681     0191                     	;# 
  1682     0191                     	;# 
  1683     0192                     	;# 
  1684     0193                     	;# 
  1685     0193                     	;# 
  1686     0193                     	;# 
  1687     0194                     	;# 
  1688     0195                     	;# 
  1689     0196                     	;# 
  1690     0199                     	;# 
  1691     019A                     	;# 
  1692     019B                     	;# 
  1693     019B                     	;# 
  1694     019B                     	;# 
  1695     019B                     	;# 
  1696     019C                     	;# 
  1697     019C                     	;# 
  1698     019D                     	;# 
  1699     019E                     	;# 
  1700     019F                     	;# 
  1701     020D                     	;# 
  1702     0210                     	;# 
  1703     0211                     	;# 
  1704     0212                     	;# 
  1705     0213                     	;# 
  1706     0214                     	;# 
  1707     0215                     	;# 
  1708     0215                     	;# 
  1709     0216                     	;# 
  1710     0217                     	;# 
  1711     0291                     	;# 
  1712     0291                     	;# 
  1713     0292                     	;# 
  1714     0293                     	;# 
  1715     0294                     	;# 
  1716     0295                     	;# 
  1717     0295                     	;# 
  1718     0296                     	;# 
  1719     0298                     	;# 
  1720     0298                     	;# 
  1721     0299                     	;# 
  1722     029A                     	;# 
  1723     029B                     	;# 
  1724     029C                     	;# 
  1725     029C                     	;# 
  1726     029D                     	;# 
  1727     029E                     	;# 
  1728     029F                     	;# 
  1729     0311                     	;# 
  1730     0311                     	;# 
  1731     0312                     	;# 
  1732     0313                     	;# 
  1733     0314                     	;# 
  1734     0315                     	;# 
  1735     0315                     	;# 
  1736     0316                     	;# 
  1737     0318                     	;# 
  1738     0318                     	;# 
  1739     0319                     	;# 
  1740     031A                     	;# 
  1741     031C                     	;# 
  1742     031C                     	;# 
  1743     031D                     	;# 
  1744     031E                     	;# 
  1745     0394                     	;# 
  1746     0395                     	;# 
  1747     0396                     	;# 
  1748     0415                     	;# 
  1749     0416                     	;# 
  1750     0417                     	;# 
  1751     041C                     	;# 
  1752     041D                     	;# 
  1753     041E                     	;# 
  1754     0791                     	;# 
  1755     0792                     	;# 
  1756     0793                     	;# 
  1757     0794                     	;# 
  1758     0795                     	;# 
  1759     0798                     	;# 
  1760     0799                     	;# 
  1761     07A0                     	;# 
  1762     07A1                     	;# 
  1763     07A3                     	;# 
  1764     07A4                     	;# 
  1765     07A6                     	;# 
  1766     07A7                     	;# 
  1767     07A9                     	;# 
  1768     07AA                     	;# 
  1769     0FE4                     	;# 
  1770     0FE5                     	;# 
  1771     0FE6                     	;# 
  1772     0FE7                     	;# 
  1773     0FE8                     	;# 
  1774     0FE9                     	;# 
  1775     0FEA                     	;# 
  1776     0FEB                     	;# 
  1777     0FED                     	;# 
  1778     0FEE                     	;# 
  1779     0FEF                     	;# 
  1780     0000                     	;# 
  1781     0001                     	;# 
  1782     0002                     	;# 
  1783     0003                     	;# 
  1784     0004                     	;# 
  1785     0005                     	;# 
  1786     0006                     	;# 
  1787     0007                     	;# 
  1788     0008                     	;# 
  1789     0009                     	;# 
  1790     000A                     	;# 
  1791     000B                     	;# 
  1792     000C                     	;# 
  1793     000D                     	;# 
  1794     000E                     	;# 
  1795     0010                     	;# 
  1796     0011                     	;# 
  1797     0012                     	;# 
  1798     0013                     	;# 
  1799     0015                     	;# 
  1800     0016                     	;# 
  1801     0016                     	;# 
  1802     0017                     	;# 
  1803     0018                     	;# 
  1804     0019                     	;# 
  1805     001A                     	;# 
  1806     001B                     	;# 
  1807     001C                     	;# 
  1808     001E                     	;# 
  1809     001F                     	;# 
  1810     008C                     	;# 
  1811     008D                     	;# 
  1812     008E                     	;# 
  1813     0090                     	;# 
  1814     0091                     	;# 
  1815     0092                     	;# 
  1816     0093                     	;# 
  1817     0095                     	;# 
  1818     0096                     	;# 
  1819     0097                     	;# 
  1820     0098                     	;# 
  1821     0099                     	;# 
  1822     009A                     	;# 
  1823     009B                     	;# 
  1824     009B                     	;# 
  1825     009C                     	;# 
  1826     009D                     	;# 
  1827     009E                     	;# 
  1828     010C                     	;# 
  1829     010D                     	;# 
  1830     010E                     	;# 
  1831     0110                     	;# 
  1832     0111                     	;# 
  1833     0112                     	;# 
  1834     0113                     	;# 
  1835     0114                     	;# 
  1836     0115                     	;# 
  1837     0116                     	;# 
  1838     0117                     	;# 
  1839     0118                     	;# 
  1840     0119                     	;# 
  1841     011A                     	;# 
  1842     011B                     	;# 
  1843     011D                     	;# 
  1844     018C                     	;# 
  1845     018D                     	;# 
  1846     0191                     	;# 
  1847     0191                     	;# 
  1848     0192                     	;# 
  1849     0193                     	;# 
  1850     0193                     	;# 
  1851     0193                     	;# 
  1852     0194                     	;# 
  1853     0195                     	;# 
  1854     0196                     	;# 
  1855     0199                     	;# 
  1856     019A                     	;# 
  1857     019B                     	;# 
  1858     019B                     	;# 
  1859     019B                     	;# 
  1860     019B                     	;# 
  1861     019C                     	;# 
  1862     019C                     	;# 
  1863     019D                     	;# 
  1864     019E                     	;# 
  1865     019F                     	;# 
  1866     020D                     	;# 
  1867     0210                     	;# 
  1868     0211                     	;# 
  1869     0212                     	;# 
  1870     0213                     	;# 
  1871     0214                     	;# 
  1872     0215                     	;# 
  1873     0215                     	;# 
  1874     0216                     	;# 
  1875     0217                     	;# 
  1876     0291                     	;# 
  1877     0291                     	;# 
  1878     0292                     	;# 
  1879     0293                     	;# 
  1880     0294                     	;# 
  1881     0295                     	;# 
  1882     0295                     	;# 
  1883     0296                     	;# 
  1884     0298                     	;# 
  1885     0298                     	;# 
  1886     0299                     	;# 
  1887     029A                     	;# 
  1888     029B                     	;# 
  1889     029C                     	;# 
  1890     029C                     	;# 
  1891     029D                     	;# 
  1892     029E                     	;# 
  1893     029F                     	;# 
  1894     0311                     	;# 
  1895     0311                     	;# 
  1896     0312                     	;# 
  1897     0313                     	;# 
  1898     0314                     	;# 
  1899     0315                     	;# 
  1900     0315                     	;# 
  1901     0316                     	;# 
  1902     0318                     	;# 
  1903     0318                     	;# 
  1904     0319                     	;# 
  1905     031A                     	;# 
  1906     031C                     	;# 
  1907     031C                     	;# 
  1908     031D                     	;# 
  1909     031E                     	;# 
  1910     0394                     	;# 
  1911     0395                     	;# 
  1912     0396                     	;# 
  1913     0415                     	;# 
  1914     0416                     	;# 
  1915     0417                     	;# 
  1916     041C                     	;# 
  1917     041D                     	;# 
  1918     041E                     	;# 
  1919     0791                     	;# 
  1920     0792                     	;# 
  1921     0793                     	;# 
  1922     0794                     	;# 
  1923     0795                     	;# 
  1924     0798                     	;# 
  1925     0799                     	;# 
  1926     07A0                     	;# 
  1927     07A1                     	;# 
  1928     07A3                     	;# 
  1929     07A4                     	;# 
  1930     07A6                     	;# 
  1931     07A7                     	;# 
  1932     07A9                     	;# 
  1933     07AA                     	;# 
  1934     0FE4                     	;# 
  1935     0FE5                     	;# 
  1936     0FE6                     	;# 
  1937     0FE7                     	;# 
  1938     0FE8                     	;# 
  1939     0FE9                     	;# 
  1940     0FEA                     	;# 
  1941     0FEB                     	;# 
  1942     0FED                     	;# 
  1943     0FEE                     	;# 
  1944     0FEF                     	;# 
  1945     0000                     	;# 
  1946     0001                     	;# 
  1947     0002                     	;# 
  1948     0003                     	;# 
  1949     0004                     	;# 
  1950     0005                     	;# 
  1951     0006                     	;# 
  1952     0007                     	;# 
  1953     0008                     	;# 
  1954     0009                     	;# 
  1955     000A                     	;# 
  1956     000B                     	;# 
  1957     000C                     	;# 
  1958     000D                     	;# 
  1959     000E                     	;# 
  1960     0010                     	;# 
  1961     0011                     	;# 
  1962     0012                     	;# 
  1963     0013                     	;# 
  1964     0015                     	;# 
  1965     0016                     	;# 
  1966     0016                     	;# 
  1967     0017                     	;# 
  1968     0018                     	;# 
  1969     0019                     	;# 
  1970     001A                     	;# 
  1971     001B                     	;# 
  1972     001C                     	;# 
  1973     001E                     	;# 
  1974     001F                     	;# 
  1975     008C                     	;# 
  1976     008D                     	;# 
  1977     008E                     	;# 
  1978     0090                     	;# 
  1979     0091                     	;# 
  1980     0092                     	;# 
  1981     0093                     	;# 
  1982     0095                     	;# 
  1983     0096                     	;# 
  1984     0097                     	;# 
  1985     0098                     	;# 
  1986     0099                     	;# 
  1987     009A                     	;# 
  1988     009B                     	;# 
  1989     009B                     	;# 
  1990     009C                     	;# 
  1991     009D                     	;# 
  1992     009E                     	;# 
  1993     010C                     	;# 
  1994     010D                     	;# 
  1995     010E                     	;# 
  1996     0110                     	;# 
  1997     0111                     	;# 
  1998     0112                     	;# 
  1999     0113                     	;# 
  2000     0114                     	;# 
  2001     0115                     	;# 
  2002     0116                     	;# 
  2003     0117                     	;# 
  2004     0118                     	;# 
  2005     0119                     	;# 
  2006     011A                     	;# 
  2007     011B                     	;# 
  2008     011D                     	;# 
  2009     018C                     	;# 
  2010     018D                     	;# 
  2011     0191                     	;# 
  2012     0191                     	;# 
  2013     0192                     	;# 
  2014     0193                     	;# 
  2015     0193                     	;# 
  2016     0193                     	;# 
  2017     0194                     	;# 
  2018     0195                     	;# 
  2019     0196                     	;# 
  2020     0199                     	;# 
  2021     019A                     	;# 
  2022     019B                     	;# 
  2023     019B                     	;# 
  2024     019B                     	;# 
  2025     019B                     	;# 
  2026     019C                     	;# 
  2027     019C                     	;# 
  2028     019D                     	;# 
  2029     019E                     	;# 
  2030     019F                     	;# 
  2031     020D                     	;# 
  2032     0210                     	;# 
  2033     0211                     	;# 
  2034     0212                     	;# 
  2035     0213                     	;# 
  2036     0214                     	;# 
  2037     0215                     	;# 
  2038     0215                     	;# 
  2039     0216                     	;# 
  2040     0217                     	;# 
  2041     0291                     	;# 
  2042     0291                     	;# 
  2043     0292                     	;# 
  2044     0293                     	;# 
  2045     0294                     	;# 
  2046     0295                     	;# 
  2047     0295                     	;# 
  2048     0296                     	;# 
  2049     0298                     	;# 
  2050     0298                     	;# 
  2051     0299                     	;# 
  2052     029A                     	;# 
  2053     029B                     	;# 
  2054     029C                     	;# 
  2055     029C                     	;# 
  2056     029D                     	;# 
  2057     029E                     	;# 
  2058     029F                     	;# 
  2059     0311                     	;# 
  2060     0311                     	;# 
  2061     0312                     	;# 
  2062     0313                     	;# 
  2063     0314                     	;# 
  2064     0315                     	;# 
  2065     0315                     	;# 
  2066     0316                     	;# 
  2067     0318                     	;# 
  2068     0318                     	;# 
  2069     0319                     	;# 
  2070     031A                     	;# 
  2071     031C                     	;# 
  2072     031C                     	;# 
  2073     031D                     	;# 
  2074     031E                     	;# 
  2075     0394                     	;# 
  2076     0395                     	;# 
  2077     0396                     	;# 
  2078     0415                     	;# 
  2079     0416                     	;# 
  2080     0417                     	;# 
  2081     041C                     	;# 
  2082     041D                     	;# 
  2083     041E                     	;# 
  2084     0791                     	;# 
  2085     0792                     	;# 
  2086     0793                     	;# 
  2087     0794                     	;# 
  2088     0795                     	;# 
  2089     0798                     	;# 
  2090     0799                     	;# 
  2091     07A0                     	;# 
  2092     07A1                     	;# 
  2093     07A3                     	;# 
  2094     07A4                     	;# 
  2095     07A6                     	;# 
  2096     07A7                     	;# 
  2097     07A9                     	;# 
  2098     07AA                     	;# 
  2099     0FE4                     	;# 
  2100     0FE5                     	;# 
  2101     0FE6                     	;# 
  2102     0FE7                     	;# 
  2103     0FE8                     	;# 
  2104     0FE9                     	;# 
  2105     0FEA                     	;# 
  2106     0FEB                     	;# 
  2107     0FED                     	;# 
  2108     0FEE                     	;# 
  2109     0FEF                     	;_SES_Modbus
  2110                           
  2111 ;; Function _rd1RegCompleteHandler is unused but had its address taken
  2112     0000                     
  2113 ;; Function _rd2RegCompleteHandler is unused but had its address taken
  2114     0000                     
  2115 ;; Function _wr1RegCompleteHandler is unused but had its address taken
  2116     0000                     
  2117 ;; Function _wr2RegCompleteHandler is unused but had its address taken
  2118     0000                     
  2119 ;; Function _rdBlkRegCompleteHandler is unused but had its address taken
  2120     0000                     
  2121 ;; Function _I2C_MasterIsr is unused but had its address taken
  2122     0000                     
  2123 ;; Function _I2C_DO_IDLE is unused but had its address taken
  2124     0000                     
  2125 ;; Function _I2C_DO_SEND_ADR_READ is unused but had its address taken
  2126     0000                     
  2127 ;; Function _I2C_DO_SEND_ADR_WRITE is unused but had its address taken
  2128     0000                     
  2129 ;; Function _I2C_DO_TX is unused but had its address taken
  2130     0000                     
  2131 ;; Function _I2C_DO_RX is unused but had its address taken
  2132     0000                     
  2133 ;; Function _I2C_DO_RCEN is unused but had its address taken
  2134     0000                     
  2135 ;; Function _I2C_DO_TX_EMPTY is unused but had its address taken
  2136     0000                     
  2137 ;; Function _I2C_DO_SEND_RESTART_READ is unused but had its address taken
  2138     0000                     
  2139 ;; Function _I2C_DO_SEND_RESTART_WRITE is unused but had its address taken
  2140     0000                     
  2141 ;; Function _I2C_DO_SEND_RESTART is unused but had its address taken
  2142     0000                     
  2143 ;; Function _I2C_DO_SEND_STOP is unused but had its address taken
  2144     0000                     
  2145 ;; Function _I2C_DO_RX_ACK is unused but had its address taken
  2146     0000                     
  2147 ;; Function _I2C_DO_RX_NACK_STOP is unused but had its address taken
  2148     0000                     
  2149 ;; Function _I2C_DO_RX_NACK_RESTART is unused but had its address taken
  2150     0000                     
  2151 ;; Function _I2C_DO_RESET is unused but had its address taken
  2152     0000                     
  2153 ;; Function _I2C_DO_ADDRESS_NACK is unused but had its address taken
  2154     0000                     
  2155 ;; Function _I2C_CallbackReturnStop is unused but had its address taken
  2156     0000                     
  2157 ;; Function _I2C_CallbackReturnReset is unused but had its address taken
  2158     0000                     
  2159                           	psect	idataBANK0
  2160     0002                     __pidataBANK0:
  2161                           
  2162                           ;initializer for _SHT30_CMD_MEASURE_H_Disable
  2163     0002  3424               	retlw	36
  2164     0003  3400               	retlw	0
  2165                           
  2166                           	psect	idataBANK1
  2167     0F82                     __pidataBANK1:
  2168                           
  2169                           ;initializer for _SHT30_CMD_MEASURE_L_Disable
  2170     0F82  3424               	retlw	36
  2171     0F83  3416               	retlw	22
  2172                           
  2173                           ;initializer for _SHT30_CMD_MEASURE_M_Disable
  2174     0F84  3424               	retlw	36
  2175     0F85  340B               	retlw	11
  2176                           
  2177                           ;initializer for _SHT30_CMD_MEASURE_L_Enable
  2178     0F86  342C               	retlw	44
  2179     0F87  3410               	retlw	16
  2180                           
  2181                           ;initializer for _SHT30_CMD_MEASURE_M_Enable
  2182     0F88  342C               	retlw	44
  2183     0F89  340D               	retlw	13
  2184                           
  2185                           ;initializer for _SHT30_CMD_MEASURE_H_Enable
  2186     0F8A  342C               	retlw	44
  2187     0F8B  3406               	retlw	6
  2188                           
  2189                           	psect	stringtext1
  2190     06F3                     __pstringtext1:
  2191     06F3                     _i2c_fsmStateTable:
  2192     06F3  3400               	retlw	0
  2193     06F4  3400               	retlw	0
  2194     06F5  3400               	retlw	0
  2195     06F6  3400               	retlw	0
  2196     06F7  3400               	retlw	0
  2197     06F8  3400               	retlw	0
  2198     06F9  3400               	retlw	0
  2199     06FA  3400               	retlw	0
  2200     06FB  3400               	retlw	0
  2201     06FC  3400               	retlw	0
  2202     06FD  3400               	retlw	0
  2203     06FE  3400               	retlw	0
  2204     06FF  3400               	retlw	0
  2205     0700  3400               	retlw	0
  2206     0701  3400               	retlw	0
  2207     0702  3400               	retlw	0
  2208     0703  3400               	retlw	0
  2209     0704  3400               	retlw	0
  2210     0705  3400               	retlw	0
  2211     0706  3400               	retlw	0
  2212     0707  3400               	retlw	0
  2213     0708  3400               	retlw	0
  2214     0709  3400               	retlw	0
  2215     070A  3400               	retlw	0
  2216     070B  3400               	retlw	0
  2217     070C  3400               	retlw	0
  2218     070D  3400               	retlw	0
  2219     070E  3400               	retlw	0
  2220     070F  3400               	retlw	0
  2221     0710  3400               	retlw	0
  2222     0711  3400               	retlw	0
  2223     0712  3400               	retlw	0
  2224     0713                     __end_of_i2c_fsmStateTable:
  2225                           
  2226                           	psect	stringtext2
  2227     1000                     __pstringtext2:
  2228     1000                     _fctsupported:
  2229     1000  3401               	retlw	1
  2230     1001  3402               	retlw	2
  2231     1002  3403               	retlw	3
  2232     1003  3404               	retlw	4
  2233     1004  3405               	retlw	5
  2234     1005  3406               	retlw	6
  2235     1006  340F               	retlw	15
  2236     1007  3410               	retlw	16
  2237     1008                     __end_of_fctsupported:
  2238                           
  2239                           	psect	nvBANK0
  2240     006F                     __pnvBANK0:
  2241     006F                     _SW_Ad:
  2242     006F                     	ds	1
  2243                           
  2244                           	psect	nvBANK1
  2245     00D5                     __pnvBANK1:
  2246     00D5                     _TMR1_InterruptHandler:
  2247     00D5                     	ds	2
  2248     00D7                     _EUSART_ErrorHandler:
  2249     00D7                     	ds	2
  2250     00D9                     _EUSART_OverrunErrorHandler:
  2251     00D9                     	ds	2
  2252     00DB                     _EUSART_FramingErrorHandler:
  2253     00DB                     	ds	2
  2254     00DD                     _EUSART_RxDefaultInterruptHandler:
  2255     00DD                     	ds	2
  2256     00DF                     _EUSART_TxDefaultInterruptHandler:
  2257     00DF                     	ds	2
  2258     00E1                     Device_Init@value_SW4:
  2259     00E1                     	ds	1
  2260     00E2                     Device_Init@value_SW3:
  2261     00E2                     	ds	1
  2262     00E3                     Device_Init@value_SW2:
  2263     00E3                     	ds	1
  2264     00E4                     Device_Init@value_SW1:
  2265     00E4                     	ds	1
  2266     000C                     _PORTAbits	set	12
  2267     0018                     _T1CONbits	set	24
  2268     0018                     _T1CON	set	24
  2269     0016                     _TMR1L	set	22
  2270     0017                     _TMR1H	set	23
  2271     0019                     _T1GCON	set	25
  2272     0012                     _PIR2bits	set	18
  2273     0011                     _PIR1bits	set	17
  2274     000B                     _INTCONbits	set	11
  2275     0092                     _PIE2bits	set	146
  2276     0091                     _PIE1bits	set	145
  2277     0097                     _WDTCON	set	151
  2278     0098                     _OSCTUNE	set	152
  2279     0099                     _OSCCON	set	153
  2280     0095                     _OPTION_REGbits	set	149
  2281     008E                     _TRISC	set	142
  2282     008D                     _TRISB	set	141
  2283     008C                     _TRISA	set	140
  2284     0090                     _TRISE	set	144
  2285     010E                     _LATCbits	set	270
  2286     0116                     _BORCON	set	278
  2287     011D                     _APFCON	set	285
  2288     010E                     _LATC	set	270
  2289     010D                     _LATB	set	269
  2290     010C                     _LATA	set	268
  2291     0110                     _LATE	set	272
  2292     0199                     _RCREG	set	409
  2293     019D                     _RCSTAbits	set	413
  2294     019A                     _TXREG	set	410
  2295     019E                     _TXSTAbits	set	414
  2296     019C                     _SPBRGH	set	412
  2297     019B                     _SPBRGL	set	411
  2298     019E                     _TXSTA	set	414
  2299     019D                     _RCSTA	set	413
  2300     019F                     _BAUDCON	set	415
  2301     018C                     _ANSELA	set	396
  2302     018D                     _ANSELB	set	397
  2303     0214                     _SSPSTATbits	set	532
  2304     0216                     _SSPCON2bits	set	534
  2305     0211                     _SSPBUF	set	529
  2306     0215                     _SSPCON1bits	set	533
  2307     0212                     _SSPADD	set	530
  2308     0216                     _SSPCON2	set	534
  2309     0215                     _SSPCON1	set	533
  2310     0214                     _SSPSTAT	set	532
  2311     020D                     _WPUB	set	525
  2312     0210                     _WPUE	set	528
  2313                           
  2314                           	psect	cinit
  2315     0054                     start_initialization:	
  2316                           ; #config settings
  2317                           
  2318     0054                     __initialization:	;BIGRAM
  2319                           
  2320                           ; Initialize objects allocated to BANK0
  2321     0054  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  2322     0057  00ED               	movwf	__pdataBANK0& (0+127)
  2323     0058  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  2324     005B  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  2325                           
  2326                           ; Initialize objects allocated to BANK1
  2327     005C  3082               	movlw	low __pidataBANK1
  2328     005D  0084               	movwf	4
  2329     005E  308F               	movlw	(high __pidataBANK1)| (0+128)
  2330     005F  0085               	movwf	5
  2331     0060  30E5               	movlw	low __pdataBANK1
  2332     0061  0086               	movwf	6
  2333     0062  3000               	movlw	high __pdataBANK1
  2334     0063  0087               	movwf	7
  2335     0064  3000               	movlw	0
  2336     0065  00FF               	movwf	btemp+1
  2337     0066  300A               	movlw	10
  2338     0067  318F  27AF  3180   	fcall	init_ram
  2339                           
  2340                           ; Clear objects allocated to BIGRAM
  2341     006A  30D4               	movlw	low (0+8404)
  2342     006B  0084               	movwf	4
  2343     006C  3020               	movlw	high (0+8404)
  2344     006D  0085               	movwf	5
  2345     006E  301C               	movlw	28
  2346     006F  00FE               	movwf	btemp
  2347     0070  3001               	movlw	1
  2348     0071  00FF               	movwf	btemp+1
  2349     0072  318F  27A3  3180   	fcall	clear_ram0
  2350                           
  2351                           ; Clear objects allocated to COMMON
  2352     0075  01FA               	clrf	__pbssCOMMON& (0+127)
  2353     0076  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2354                           
  2355                           ; Clear objects allocated to BANK0
  2356     0077  305A               	movlw	low __pbssBANK0
  2357     0078  0084               	movwf	4
  2358     0079  3000               	movlw	high __pbssBANK0
  2359     007A  0085               	movwf	5
  2360     007B  3013               	movlw	19
  2361     007C  00FE               	movwf	btemp
  2362     007D  3000               	movlw	0
  2363     007E  00FF               	movwf	btemp+1
  2364     007F  318F  27A3  3180   	fcall	clear_ram0
  2365                           
  2366                           ; Clear objects allocated to BANK1
  2367     0082  30A0               	movlw	low __pbssBANK1
  2368     0083  0084               	movwf	4
  2369     0084  3000               	movlw	high __pbssBANK1
  2370     0085  0085               	movwf	5
  2371     0086  3035               	movlw	53
  2372     0087  00FE               	movwf	btemp
  2373     0088  3000               	movlw	0
  2374     0089  00FF               	movwf	btemp+1
  2375     008A  318F  27A3  3180   	fcall	clear_ram0
  2376                           
  2377                           ; Clear objects allocated to BANK2
  2378     008D  3020               	movlw	low __pbssBANK2
  2379     008E  0084               	movwf	4
  2380     008F  3001               	movlw	high __pbssBANK2
  2381     0090  0085               	movwf	5
  2382     0091  3020               	movlw	32
  2383     0092  00FE               	movwf	btemp
  2384     0093  3000               	movlw	0
  2385     0094  00FF               	movwf	btemp+1
  2386     0095  318F  27A3  3180   	fcall	clear_ram0
  2387     0098                     end_of_initialization:	
  2388                           ;End of C runtime variable initialization code
  2389                           
  2390     0098                     __end_of__initialization:
  2391     0098  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2392     0099  0020               	movlb	0
  2393     009A  318F  2F97         	ljmp	_main	;jump to C main() function
  2394                           
  2395                           	psect	bssCOMMON
  2396     007A                     __pbssCOMMON:
  2397     007A                     _eusartRxTail:
  2398     007A                     	ds	1
  2399     007B                     _eusartRxHead:
  2400     007B                     	ds	1
  2401                           
  2402                           	psect	bssBANK0
  2403     005A                     __pbssBANK0:
  2404     005A                     _device_time:
  2405     005A                     	ds	4
  2406     005E                     _SensorAmbient:
  2407     005E                     	ds	4
  2408     0062                     _timer1ReloadVal:
  2409     0062                     	ds	2
  2410     0064                     _MSSP_InterruptHandler:
  2411     0064                     	ds	2
  2412     0066                     Task_MB@f_Modbus_Init:
  2413     0066                     	ds	1
  2414     0067                     _f_Indicator:
  2415     0067                     	ds	1
  2416     0068                     _eusartRxLastError:
  2417     0068                     	ds	1
  2418     0069                     _eusartRxCount:
  2419     0069                     	ds	1
  2420     006A                     _eusartTxBufferRemaining:
  2421     006A                     	ds	1
  2422     006B                     _eusartTxTail:
  2423     006B                     	ds	1
  2424     006C                     _eusartTxHead:
  2425     006C                     	ds	1
  2426                           
  2427                           	psect	dataBANK0
  2428     006D                     __pdataBANK0:
  2429     006D                     _SHT30_CMD_MEASURE_H_Disable:
  2430     006D                     	ds	2
  2431                           
  2432                           	psect	bssBANK1
  2433     00A0                     __pbssBANK1:
  2434     00A0                     _I2C_Status:
  2435     00A0                     	ds	29
  2436     00BD                     _eusartRxStatusBuffer:
  2437     00BD                     	ds	16
  2438     00CD                     Task_Sensor@valTime:
  2439     00CD                     	ds	4
  2440     00D1                     _MB_Register:
  2441     00D1                     	ds	4
  2442                           
  2443                           	psect	dataBANK1
  2444     00E5                     __pdataBANK1:
  2445     00E5                     _SHT30_CMD_MEASURE_L_Disable:
  2446     00E5                     	ds	2
  2447     00E7                     _SHT30_CMD_MEASURE_M_Disable:
  2448     00E7                     	ds	2
  2449     00E9                     _SHT30_CMD_MEASURE_L_Enable:
  2450     00E9                     	ds	2
  2451     00EB                     _SHT30_CMD_MEASURE_M_Enable:
  2452     00EB                     	ds	2
  2453     00ED                     _SHT30_CMD_MEASURE_H_Enable:
  2454     00ED                     	ds	2
  2455                           
  2456                           	psect	bssBANK2
  2457     0120                     __pbssBANK2:
  2458     0120                     _eusartRxBuffer:
  2459     0120                     	ds	16
  2460     0130                     _eusartTxBuffer:
  2461     0130                     	ds	16
  2462                           
  2463                           	psect	inittext
  2464     0FAF                     init_ram:
  2465     0FAF  00FE               	movwf	btemp
  2466     0FB0                     initloop:
  2467     0FB0  0012               	moviw fsr0++
  2468     0FB1  001E               	movwi fsr1++
  2469     0FB2  3001               	movlw	1
  2470     0FB3  02FE               	subwf	btemp,f
  2471     0FB4  3000               	movlw	0
  2472     0FB5  3BFF               	subwfb	btemp+1,f
  2473     0FB6  087F               	movf	btemp+1,w
  2474     0FB7  047E               	iorwf	btemp,w
  2475     0FB8  1D03               	skipz
  2476     0FB9  2FB0               	goto	initloop
  2477     0FBA  3400               	retlw	0
  2478                           
  2479                           	psect	clrtext
  2480     0FA3                     clear_ram0:	
  2481                           ;	Called with FSR0 containing the base address, and
  2482                           ;	btemp/btemp+1 has the size to clear
  2483                           
  2484     0FA3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2485     0FA4                     clrloop0:
  2486     0FA4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2487     0FA5  3101               	addfsr 0,1
  2488     0FA6  3001               	movlw	1
  2489     0FA7  02FE               	subwf	btemp,f
  2490     0FA8  3000               	movlw	0
  2491     0FA9  3BFF               	subwfb	btemp+1,f
  2492     0FAA  087F               	movf	btemp+1,w
  2493     0FAB  047E               	iorwf	btemp,w
  2494     0FAC  1D03               	skipz
  2495     0FAD  2FA4               	goto	clrloop0	;have we reached the end yet?
  2496     0FAE  3400               	retlw	0	;all done for this memory range, return
  2497                           
  2498                           	psect	cstackCOMMON
  2499     0070                     __pcstackCOMMON:
  2500     0070                     ?_I2C_Open:
  2501     0070                     ?_I2C_MasterWrite:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504     0070                     ?_I2C_Close:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507     0070                     ?_I2C_MasterRead:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510     0070                     ?_OSCILLATOR_Initialize:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513     0070                     ?_WDT_Initialize:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516     0070                     ?_TMR1_Initialize:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519     0070                     ?_EUSART_Initialize:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522     0070                     ?_TMR1_ISR:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525     0070                     ?_EUSART_Receive_ISR:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528     0070                     ?_EUSART_Transmit_ISR:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531     0070                     ??_EUSART_Transmit_ISR:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546     0070                     ?_EUSART_DefaultErrorHandler:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549     0070                     ?_EUSART_RxDataHandler:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552     0070                     ??_EUSART_RxDataHandler:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555     0070                     ?_TMR1_DefaultInterruptHandler:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558     0070                     ??_TMR1_DefaultInterruptHandler:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561     0070                     ?_TMR1_CallBack:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564     0070                     ??_TMR1_CallBack:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567     0070                     ?_App_Init:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570     0070                     ?_App_Process:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573     0070                     ?_Tick_Init_SES:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576     0070                     ?_Task_MB:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579     0070                     ?_Modbus_sendTxBuff:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582     0070                     ?_rtcc_handle:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585     0070                     ??_rtcc_handle:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588     0070                     ?_I2C_MasterClearIrq:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591     0070                     ?_I2C_MasterOpen:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594     0070                     ?_I2C_MasterEnableIrq:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597     0070                     ?_I2C_MasterDisableIrq:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600     0070                     ?_I2C_MasterClose:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603     0070                     ?_I2C_MasterStart:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606     0070                     ?_PIN_MANAGER_Initialize:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609     0070                     ?_SYSTEM_Initialize:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612     0070                     ?_INTERRUPT_InterruptManager:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615     0070                     ?_EUSART_is_tx_done:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618     0070                     ?_EUSART_Read:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621     0070                     ?_EUSART_Write:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624     0070                     ?_TMR1_StartTimer:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627     0070                     ?_TMR1_WriteTimer:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630     0070                     ?_main:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633     0070                     ?_ReadData:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636     0070                     ?_Task_Sensor:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639     0070                     ?_Task_Indicator:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642     0070                     ?_Device_Init:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645     0070                     ?_buildException:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648     0070                     ?_Modbus_getRxBuff:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651     0070                     ?_validateRequest:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654     0070                     ?_ModbusSlave_Init:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657     0070                     ?_ModbusSlave_Process:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660     0070                     ?_I2C_MasterOperation:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663     0070                     TMR1_WriteTimer@timerVal:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666                           
  2667                           ; 2 bytes @ 0x0
  2668     0070                     	ds	1
  2669     0071                     ??_EUSART_Receive_ISR:
  2670     0071                     ??_EUSART_DefaultErrorHandler:	
  2671                           ; 1 bytes @ 0x1
  2672                           
  2673                           
  2674                           ; 1 bytes @ 0x1
  2675     0071                     	ds	1
  2676     0072                     ?_I2C_SetBuffer:
  2677     0072                     ??_I2C_Close:	
  2678                           ; 1 bytes @ 0x2
  2679                           
  2680     0072                     ??_OSCILLATOR_Initialize:	
  2681                           ; 1 bytes @ 0x2
  2682                           
  2683     0072                     ??_WDT_Initialize:	
  2684                           ; 1 bytes @ 0x2
  2685                           
  2686     0072                     ??_TMR1_ISR:	
  2687                           ; 1 bytes @ 0x2
  2688                           
  2689     0072                     ?_EUSART_SetRxInterruptHandler:	
  2690                           ; 1 bytes @ 0x2
  2691                           
  2692     0072                     ?_EUSART_SetTxInterruptHandler:	
  2693                           ; 1 bytes @ 0x2
  2694                           
  2695     0072                     ?_EUSART_SetFramingErrorHandler:	
  2696                           ; 1 bytes @ 0x2
  2697                           
  2698     0072                     ?_EUSART_SetOverrunErrorHandler:	
  2699                           ; 1 bytes @ 0x2
  2700                           
  2701     0072                     ?_EUSART_SetErrorHandler:	
  2702                           ; 1 bytes @ 0x2
  2703                           
  2704     0072                     ?_TMR1_SetInterruptHandler:	
  2705                           ; 1 bytes @ 0x2
  2706                           
  2707     0072                     ?_I2C_SetInterruptHandler:	
  2708                           ; 1 bytes @ 0x2
  2709                           
  2710     0072                     ??_I2C_MasterClearIrq:	
  2711                           ; 1 bytes @ 0x2
  2712                           
  2713     0072                     ??_I2C_MasterOpen:	
  2714                           ; 1 bytes @ 0x2
  2715                           
  2716     0072                     ??_I2C_MasterEnableIrq:	
  2717                           ; 1 bytes @ 0x2
  2718                           
  2719     0072                     ??_I2C_MasterDisableIrq:	
  2720                           ; 1 bytes @ 0x2
  2721                           
  2722     0072                     ??_I2C_MasterClose:	
  2723                           ; 1 bytes @ 0x2
  2724                           
  2725     0072                     ??_I2C_MasterStart:	
  2726                           ; 1 bytes @ 0x2
  2727                           
  2728     0072                     ?_I2C_SetCallback:	
  2729                           ; 1 bytes @ 0x2
  2730                           
  2731     0072                     ??_PIN_MANAGER_Initialize:	
  2732                           ; 1 bytes @ 0x2
  2733                           
  2734     0072                     ??_INTERRUPT_InterruptManager:	
  2735                           ; 1 bytes @ 0x2
  2736                           
  2737     0072                     ??_EUSART_is_tx_done:	
  2738                           ; 1 bytes @ 0x2
  2739                           
  2740     0072                     ??_EUSART_Read:	
  2741                           ; 1 bytes @ 0x2
  2742                           
  2743     0072                     ??_EUSART_Write:	
  2744                           ; 1 bytes @ 0x2
  2745                           
  2746     0072                     ??_TMR1_StartTimer:	
  2747                           ; 1 bytes @ 0x2
  2748                           
  2749     0072                     ??_TMR1_WriteTimer:	
  2750                           ; 1 bytes @ 0x2
  2751                           
  2752     0072                     ??_Task_Indicator:	
  2753                           ; 1 bytes @ 0x2
  2754                           
  2755     0072                     ??_Device_Init:	
  2756                           ; 1 bytes @ 0x2
  2757                           
  2758     0072                     ??_buildException:	
  2759                           ; 1 bytes @ 0x2
  2760                           
  2761     0072                     ??_ModbusSlave_Init:	
  2762                           ; 1 bytes @ 0x2
  2763                           
  2764     0072                     ??_I2C_MasterOperation:	
  2765                           ; 1 bytes @ 0x2
  2766                           
  2767     0072                     ?_Modbus_calcCRC:	
  2768                           ; 1 bytes @ 0x2
  2769                           
  2770     0072                     ?_Get_millis:	
  2771                           ; 2 bytes @ 0x2
  2772                           
  2773     0072                     ModbusSlave_Init@_SW_Ad:	
  2774                           ; 4 bytes @ 0x2
  2775                           
  2776     0072                     I2C_Close@returnValue:	
  2777                           ; 1 bytes @ 0x2
  2778                           
  2779     0072                     I2C_MasterOperation@read:	
  2780                           ; 1 bytes @ 0x2
  2781                           
  2782     0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2783                           ; 1 bytes @ 0x2
  2784                           
  2785     0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2786                           ; 2 bytes @ 0x2
  2787                           
  2788     0072                     EUSART_SetErrorHandler@interruptHandler:	
  2789                           ; 2 bytes @ 0x2
  2790                           
  2791     0072                     EUSART_SetTxInterruptHandler@interruptHandler:	
  2792                           ; 2 bytes @ 0x2
  2793                           
  2794     0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2795                           ; 2 bytes @ 0x2
  2796                           
  2797     0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  2798                           ; 2 bytes @ 0x2
  2799                           
  2800     0072                     I2C_SetBuffer@bufferSize:	
  2801                           ; 2 bytes @ 0x2
  2802                           
  2803     0072                     I2C_SetInterruptHandler@InterruptHandler:	
  2804                           ; 2 bytes @ 0x2
  2805                           
  2806     0072                     I2C_SetCallback@cb:	
  2807                           ; 2 bytes @ 0x2
  2808                           
  2809                           
  2810                           ; 2 bytes @ 0x2
  2811     0072                     	ds	1
  2812     0073                     EUSART_Read@readValue:
  2813     0073                     EUSART_Write@txData:	
  2814                           ; 1 bytes @ 0x3
  2815                           
  2816     0073                     buildException@exception:	
  2817                           ; 1 bytes @ 0x3
  2818                           
  2819     0073                     I2C_MasterOperation@returnValue:	
  2820                           ; 1 bytes @ 0x3
  2821                           
  2822                           
  2823                           ; 1 bytes @ 0x3
  2824     0073                     	ds	1
  2825     0074                     ??_I2C_Open:
  2826     0074                     ??_I2C_SetBuffer:	
  2827                           ; 1 bytes @ 0x4
  2828                           
  2829     0074                     ??_I2C_MasterWrite:	
  2830                           ; 1 bytes @ 0x4
  2831                           
  2832     0074                     ??_I2C_MasterRead:	
  2833                           ; 1 bytes @ 0x4
  2834                           
  2835     0074                     ??_TMR1_Initialize:	
  2836                           ; 1 bytes @ 0x4
  2837                           
  2838     0074                     ??_EUSART_Initialize:	
  2839                           ; 1 bytes @ 0x4
  2840                           
  2841     0074                     ??_EUSART_SetRxInterruptHandler:	
  2842                           ; 1 bytes @ 0x4
  2843                           
  2844     0074                     ??_EUSART_SetTxInterruptHandler:	
  2845                           ; 1 bytes @ 0x4
  2846                           
  2847     0074                     ??_EUSART_SetFramingErrorHandler:	
  2848                           ; 1 bytes @ 0x4
  2849                           
  2850     0074                     ??_EUSART_SetOverrunErrorHandler:	
  2851                           ; 1 bytes @ 0x4
  2852                           
  2853     0074                     ??_EUSART_SetErrorHandler:	
  2854                           ; 1 bytes @ 0x4
  2855                           
  2856     0074                     ??_TMR1_SetInterruptHandler:	
  2857                           ; 1 bytes @ 0x4
  2858                           
  2859     0074                     ??_Tick_Init_SES:	
  2860                           ; 1 bytes @ 0x4
  2861                           
  2862     0074                     ??_Modbus_calcCRC:	
  2863                           ; 1 bytes @ 0x4
  2864                           
  2865     0074                     ??_I2C_SetInterruptHandler:	
  2866                           ; 1 bytes @ 0x4
  2867                           
  2868     0074                     ??_SYSTEM_Initialize:	
  2869                           ; 1 bytes @ 0x4
  2870                           
  2871     0074                     buildException@u8func:	
  2872                           ; 1 bytes @ 0x4
  2873                           
  2874     0074                     Modbus_getRxBuff@bBuffOverflow:	
  2875                           ; 1 bytes @ 0x4
  2876                           
  2877     0074                     I2C_Open@address:	
  2878                           ; 1 bytes @ 0x4
  2879                           
  2880     0074                     I2C_SetBuffer@buffer:	
  2881                           ; 1 bytes @ 0x4
  2882                           
  2883     0074                     I2C_SetCallback@ptr:	
  2884                           ; 1 bytes @ 0x4
  2885                           
  2886                           
  2887                           ; 1 bytes @ 0x4
  2888     0074                     	ds	1
  2889     0075                     ??_App_Init:
  2890     0075                     ??_I2C_SetCallback:	
  2891                           ; 1 bytes @ 0x5
  2892                           
  2893     0075                     I2C_Open@returnValue:	
  2894                           ; 1 bytes @ 0x5
  2895                           
  2896     0075                     I2C_SetCallback@idx:	
  2897                           ; 1 bytes @ 0x5
  2898                           
  2899                           
  2900                           ; 1 bytes @ 0x5
  2901     0075                     	ds	1
  2902     0076                     ?_I2C_SetAddressNackCallback:
  2903     0076                     ??_Get_millis:	
  2904                           ; 1 bytes @ 0x6
  2905                           
  2906     0076                     ?_I2C_ReadNBytes:	
  2907                           ; 1 bytes @ 0x6
  2908                           
  2909     0076                     I2C_ReadNBytes@data:	
  2910                           ; 1 bytes @ 0x6
  2911                           
  2912     0076                     I2C_SetAddressNackCallback@cb:	
  2913                           ; 1 bytes @ 0x6
  2914                           
  2915                           
  2916                           ; 2 bytes @ 0x6
  2917     0076                     	ds	1
  2918     0077                     I2C_ReadNBytes@len:
  2919                           
  2920                           ; 2 bytes @ 0x7
  2921     0077                     	ds	1
  2922     0078                     ?_ModbusSlaveF04:
  2923     0078                     ModbusSlaveF04@size:	
  2924                           ; 1 bytes @ 0x8
  2925                           
  2926     0078                     I2C_SetAddressNackCallback@ptr:	
  2927                           ; 2 bytes @ 0x8
  2928                           
  2929                           
  2930                           ; 2 bytes @ 0x8
  2931     0078                     	ds	1
  2932     0079                     ??_I2C_ReadNBytes:
  2933     0079                     I2C_ReadNBytes@address:	
  2934                           ; 1 bytes @ 0x9
  2935                           
  2936                           
  2937                           ; 1 bytes @ 0x9
  2938     0079                     	ds	1
  2939     007A                     ??_I2C_SetAddressNackCallback:
  2940     007A                     ??_App_Process:	
  2941                           ; 1 bytes @ 0xA
  2942                           
  2943     007A                     ??_Task_MB:	
  2944                           ; 1 bytes @ 0xA
  2945                           
  2946     007A                     ??_I2C_WriteNBytes:	
  2947                           ; 1 bytes @ 0xA
  2948                           
  2949     007A                     ??_main:	
  2950                           ; 1 bytes @ 0xA
  2951                           
  2952     007A                     ??_ModbusSlave_Process:	
  2953                           ; 1 bytes @ 0xA
  2954                           
  2955                           
  2956                           	psect	cstackBANK0
  2957     0020                     __pcstackBANK0:	
  2958                           ; 1 bytes @ 0xA
  2959                           
  2960     0020                     ?_I2C_WriteNBytes:
  2961     0020                     ??_Modbus_getRxBuff:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964     0020                     I2C_WriteNBytes@data:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967     0020                     Modbus_calcCRC@len:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970                           
  2971                           ; 1 bytes @ 0x0
  2972     0020                     	ds	1
  2973     0021                     I2C_WriteNBytes@len:
  2974     0021                     Modbus_calcCRC@temp2:	
  2975                           ; 2 bytes @ 0x1
  2976                           
  2977                           
  2978                           ; 2 bytes @ 0x1
  2979     0021                     	ds	2
  2980     0023                     I2C_WriteNBytes@address:
  2981     0023                     Modbus_calcCRC@flag:	
  2982                           ; 1 bytes @ 0x3
  2983                           
  2984                           
  2985                           ; 2 bytes @ 0x3
  2986     0023                     	ds	1
  2987     0024                     ??_ReadData:
  2988                           
  2989                           ; 1 bytes @ 0x4
  2990     0024                     	ds	1
  2991     0025                     Modbus_calcCRC@i:
  2992                           
  2993                           ; 1 bytes @ 0x5
  2994     0025                     	ds	1
  2995     0026                     Modbus_calcCRC@j:
  2996                           
  2997                           ; 1 bytes @ 0x6
  2998     0026                     	ds	1
  2999     0027                     Modbus_calcCRC@temp:
  3000                           
  3001                           ; 2 bytes @ 0x7
  3002     0027                     	ds	1
  3003     0028                     ReadData@aData:
  3004                           
  3005                           ; 6 bytes @ 0x8
  3006     0028                     	ds	1
  3007     0029                     ??_Modbus_sendTxBuff:
  3008     0029                     ??_validateRequest:	
  3009                           ; 1 bytes @ 0x9
  3010                           
  3011                           
  3012                           ; 1 bytes @ 0x9
  3013     0029                     	ds	5
  3014     002E                     ReadData@valTime:
  3015                           
  3016                           ; 4 bytes @ 0xE
  3017     002E                     	ds	2
  3018     0030                     Modbus_sendTxBuff@u16crc:
  3019                           
  3020                           ; 2 bytes @ 0x10
  3021     0030                     	ds	2
  3022     0032                     ??_Task_Sensor:
  3023     0032                     Modbus_sendTxBuff@index:	
  3024                           ; 1 bytes @ 0x12
  3025                           
  3026                           
  3027                           ; 2 bytes @ 0x12
  3028     0032                     	ds	2
  3029     0034                     Modbus_sendTxBuff@u32overTimecountDown:
  3030                           
  3031                           ; 4 bytes @ 0x14
  3032     0034                     	ds	2
  3033     0036                     validateRequest@u16MsgCRC:
  3034                           
  3035                           ; 2 bytes @ 0x16
  3036     0036                     	ds	2
  3037     0038                     ??_ModbusSlaveF04:
  3038     0038                     validateRequest@isSupported:	
  3039                           ; 1 bytes @ 0x18
  3040                           
  3041                           
  3042                           ; 1 bytes @ 0x18
  3043     0038                     	ds	1
  3044     0039                     validateRequest@i:
  3045                           
  3046                           ; 1 bytes @ 0x19
  3047     0039                     	ds	9
  3048     0042                     ModbusSlaveF04@u8StartAdd:
  3049                           
  3050                           ; 2 bytes @ 0x22
  3051     0042                     	ds	2
  3052     0044                     ModbusSlaveF04@reg:
  3053                           
  3054                           ; 1 bytes @ 0x24
  3055     0044                     	ds	1
  3056     0045                     ModbusSlaveF04@u8regsno:
  3057                           
  3058                           ; 1 bytes @ 0x25
  3059     0045                     	ds	1
  3060     0046                     ModbusSlaveF04@valueAdd:
  3061                           
  3062                           ; 2 bytes @ 0x26
  3063     0046                     	ds	2
  3064     0048                     ModbusSlaveF04@valueRegsno:
  3065                           
  3066                           ; 2 bytes @ 0x28
  3067     0048                     	ds	2
  3068     004A                     ModbusSlaveF04@i:
  3069                           
  3070                           ; 2 bytes @ 0x2A
  3071     004A                     	ds	2
  3072     004C                     ?_ModbusRTU_Slave_Poll:
  3073     004C                     ModbusRTU_Slave_Poll@size:	
  3074                           ; 1 bytes @ 0x2C
  3075                           
  3076                           
  3077                           ; 2 bytes @ 0x2C
  3078     004C                     	ds	2
  3079     004E                     ??_ModbusRTU_Slave_Poll:
  3080                           
  3081                           ; 1 bytes @ 0x2E
  3082     004E                     	ds	8
  3083     0056                     ModbusRTU_Slave_Poll@reg:
  3084                           
  3085                           ; 1 bytes @ 0x36
  3086     0056                     	ds	1
  3087     0057                     ModbusRTU_Slave_Poll@u8Current:
  3088                           
  3089                           ; 1 bytes @ 0x37
  3090     0057                     	ds	1
  3091     0058                     ModbusRTU_Slave_Poll@i8state:
  3092                           
  3093                           ; 1 bytes @ 0x38
  3094     0058                     	ds	1
  3095     0059                     ModbusRTU_Slave_Poll@u8exception:
  3096                           
  3097                           ; 1 bytes @ 0x39
  3098     0059                     	ds	1
  3099                           
  3100                           	psect	maintext
  3101     0F97                     __pmaintext:	
  3102 ;;
  3103 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3104 ;;
  3105 ;; *************** function _main *****************
  3106 ;; Defined at:
  3107 ;;		line 50 in file "main.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : B1F/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3121 ;;      Params:         0       0       0       0       0       0       0       0
  3122 ;;      Locals:         0       0       0       0       0       0       0       0
  3123 ;;      Temps:          0       0       0       0       0       0       0       0
  3124 ;;      Totals:         0       0       0       0       0       0       0       0
  3125 ;;Total ram usage:        0 bytes
  3126 ;; Hardware stack levels required when called: 11
  3127 ;; This function calls:
  3128 ;;		_App_Init
  3129 ;;		_App_Process
  3130 ;;		_SYSTEM_Initialize
  3131 ;; This function is called by:
  3132 ;;		Startup code after reset
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136     0F97                     _main:	
  3137                           ;psect for function _main
  3138                           
  3139     0F97                     l4299:	
  3140                           ;incstack = 0
  3141                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3142                           
  3143                           
  3144                           ;main.c: 52:     SYSTEM_Initialize();
  3145     0F97  318F  27F0  318F   	fcall	_SYSTEM_Initialize
  3146                           
  3147                           ;main.c: 53:     App_Init();
  3148     0F9A  318F  2764  318F   	fcall	_App_Init
  3149     0F9D                     l4301:
  3150                           
  3151                           ;main.c: 71:         App_Process();
  3152     0F9D  318F  2778  318F   	fcall	_App_Process
  3153     0FA0  2F9D               	goto	l4301
  3154     0FA1  3180  2852         	ljmp	start
  3155     0FA3                     __end_of_main:
  3156                           
  3157                           	psect	text1
  3158     0FF0                     __ptext1:	
  3159 ;; *************** function _SYSTEM_Initialize *****************
  3160 ;; Defined at:
  3161 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;		None
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      void 
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0, pclath, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3175 ;;      Params:         0       0       0       0       0       0       0       0
  3176 ;;      Locals:         0       0       0       0       0       0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0       0
  3178 ;;      Totals:         0       0       0       0       0       0       0       0
  3179 ;;Total ram usage:        0 bytes
  3180 ;; Hardware stack levels used: 1
  3181 ;; Hardware stack levels required when called: 6
  3182 ;; This function calls:
  3183 ;;		_EUSART_Initialize
  3184 ;;		_OSCILLATOR_Initialize
  3185 ;;		_PIN_MANAGER_Initialize
  3186 ;;		_TMR1_Initialize
  3187 ;;		_WDT_Initialize
  3188 ;; This function is called by:
  3189 ;;		_main
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193     0FF0                     _SYSTEM_Initialize:	
  3194                           ;psect for function _SYSTEM_Initialize
  3195                           
  3196     0FF0                     l3329:	
  3197                           ;incstack = 0
  3198                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3199                           
  3200                           
  3201                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  3202     0FF0  3187  2731  318F   	fcall	_PIN_MANAGER_Initialize
  3203                           
  3204                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  3205     0FF3  318F  2753  318F   	fcall	_OSCILLATOR_Initialize
  3206                           
  3207                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  3208     0FF6  318F  271B  318F   	fcall	_WDT_Initialize
  3209                           
  3210                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  3211     0FF9  3187  2799  318F   	fcall	_TMR1_Initialize
  3212                           
  3213                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  3214     0FFC  3185  2545  318F   	fcall	_EUSART_Initialize
  3215     0FFF                     l159:
  3216     0FFF  0008               	return
  3217     1000                     __end_of_SYSTEM_Initialize:
  3218                           
  3219                           	psect	text2
  3220     0F1B                     __ptext2:	
  3221 ;; *************** function _WDT_Initialize *****************
  3222 ;; Defined at:
  3223 ;;		line 71 in file "mcc_generated_files/mcc.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;		None
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      void 
  3230 ;; Registers used:
  3231 ;;		wreg
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3237 ;;      Params:         0       0       0       0       0       0       0       0
  3238 ;;      Locals:         0       0       0       0       0       0       0       0
  3239 ;;      Temps:          0       0       0       0       0       0       0       0
  3240 ;;      Totals:         0       0       0       0       0       0       0       0
  3241 ;;Total ram usage:        0 bytes
  3242 ;; Hardware stack levels used: 1
  3243 ;; Hardware stack levels required when called: 4
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_SYSTEM_Initialize
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251     0F1B                     _WDT_Initialize:	
  3252                           ;psect for function _WDT_Initialize
  3253                           
  3254     0F1B                     l2085:	
  3255                           ;incstack = 0
  3256                           ; Regs used in _WDT_Initialize: [wreg]
  3257                           
  3258                           
  3259                           ;mcc_generated_files/mcc.c: 74:     WDTCON = 0x16;
  3260     0F1B  3016               	movlw	22
  3261     0F1C  0021               	movlb	1	; select bank1
  3262     0F1D  0097               	movwf	23	;volatile
  3263     0F1E                     l165:
  3264     0F1E  0008               	return
  3265     0F1F                     __end_of_WDT_Initialize:
  3266                           
  3267                           	psect	text3
  3268     0799                     __ptext3:	
  3269 ;; *************** function _TMR1_Initialize *****************
  3270 ;; Defined at:
  3271 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;		None
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      void 
  3278 ;; Registers used:
  3279 ;;		wreg, status,2, status,0, pclath, cstack
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3285 ;;      Params:         0       0       0       0       0       0       0       0
  3286 ;;      Locals:         0       0       0       0       0       0       0       0
  3287 ;;      Temps:          0       0       0       0       0       0       0       0
  3288 ;;      Totals:         0       0       0       0       0       0       0       0
  3289 ;;Total ram usage:        0 bytes
  3290 ;; Hardware stack levels used: 1
  3291 ;; Hardware stack levels required when called: 5
  3292 ;; This function calls:
  3293 ;;		_TMR1_SetInterruptHandler
  3294 ;; This function is called by:
  3295 ;;		_SYSTEM_Initialize
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299     0799                     _TMR1_Initialize:	
  3300                           ;psect for function _TMR1_Initialize
  3301                           
  3302     0799                     l3179:	
  3303                           ;incstack = 0
  3304                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3305                           
  3306                           
  3307                           ;mcc_generated_files/tmr1.c: 68:     T1GCON = 0x00;
  3308     0799  0020               	movlb	0	; select bank0
  3309     079A  0199               	clrf	25	;volatile
  3310     079B                     l3181:
  3311                           
  3312                           ;mcc_generated_files/tmr1.c: 71:     TMR1H = 0xFE;
  3313     079B  30FE               	movlw	254
  3314     079C  0097               	movwf	23	;volatile
  3315     079D                     l3183:
  3316                           
  3317                           ;mcc_generated_files/tmr1.c: 74:     TMR1L = 0x0C;
  3318     079D  300C               	movlw	12
  3319     079E  0096               	movwf	22	;volatile
  3320     079F                     l3185:
  3321                           
  3322                           ;mcc_generated_files/tmr1.c: 77:     PIR1bits.TMR1IF = 0;
  3323     079F  1011               	bcf	17,0	;volatile
  3324     07A0                     l3187:
  3325                           
  3326                           ;mcc_generated_files/tmr1.c: 80:     timer1ReloadVal = (uint16_t) ((TMR1H << 8) | TMR1L)
      +                          ;
  3327     07A0  0817               	movf	23,w	;volatile
  3328     07A1  00E3               	movwf	_timer1ReloadVal+1	;volatile
  3329     07A2  0816               	movf	22,w	;volatile
  3330     07A3  00E2               	movwf	_timer1ReloadVal	;volatile
  3331     07A4                     l3189:
  3332                           
  3333                           ;mcc_generated_files/tmr1.c: 83:     PIE1bits.TMR1IE = 1;
  3334     07A4  0021               	movlb	1	; select bank1
  3335     07A5  1411               	bsf	17,0	;volatile
  3336     07A6                     l3191:
  3337                           
  3338                           ;mcc_generated_files/tmr1.c: 86:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  3339     07A6  30FF               	movlw	low _TMR1_DefaultInterruptHandler
  3340     07A7  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3341     07A8  300E               	movlw	high _TMR1_DefaultInterruptHandler
  3342     07A9  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3343     07AA  318F  2729  3187   	fcall	_TMR1_SetInterruptHandler
  3344     07AD                     l3193:
  3345                           
  3346                           ;mcc_generated_files/tmr1.c: 89:     T1CON = 0x41;
  3347     07AD  3041               	movlw	65
  3348     07AE  0020               	movlb	0	; select bank0
  3349     07AF  0098               	movwf	24	;volatile
  3350     07B0                     l360:
  3351     07B0  0008               	return
  3352     07B1                     __end_of_TMR1_Initialize:
  3353                           
  3354                           	psect	text4
  3355     0731                     __ptext4:	
  3356 ;; *************** function _PIN_MANAGER_Initialize *****************
  3357 ;; Defined at:
  3358 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;		None
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3372 ;;      Params:         0       0       0       0       0       0       0       0
  3373 ;;      Locals:         0       0       0       0       0       0       0       0
  3374 ;;      Temps:          0       0       0       0       0       0       0       0
  3375 ;;      Totals:         0       0       0       0       0       0       0       0
  3376 ;;Total ram usage:        0 bytes
  3377 ;; Hardware stack levels used: 1
  3378 ;; Hardware stack levels required when called: 4
  3379 ;; This function calls:
  3380 ;;		Nothing
  3381 ;; This function is called by:
  3382 ;;		_SYSTEM_Initialize
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386     0731                     _PIN_MANAGER_Initialize:	
  3387                           ;psect for function _PIN_MANAGER_Initialize
  3388                           
  3389     0731                     l2055:	
  3390                           ;incstack = 0
  3391                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3392                           
  3393                           
  3394                           ;mcc_generated_files/pin_manager.c: 60:     LATE = 0x00;
  3395     0731  0022               	movlb	2	; select bank2
  3396     0732  0190               	clrf	16	;volatile
  3397                           
  3398                           ;mcc_generated_files/pin_manager.c: 61:     LATA = 0x00;
  3399     0733  018C               	clrf	12	;volatile
  3400                           
  3401                           ;mcc_generated_files/pin_manager.c: 62:     LATB = 0x00;
  3402     0734  018D               	clrf	13	;volatile
  3403     0735                     l2057:
  3404                           
  3405                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x40;
  3406     0735  3040               	movlw	64
  3407     0736  008E               	movwf	14	;volatile
  3408     0737                     l2059:
  3409                           
  3410                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0x08;
  3411     0737  3008               	movlw	8
  3412     0738  0021               	movlb	1	; select bank1
  3413     0739  0090               	movwf	16	;volatile
  3414     073A                     l2061:
  3415                           
  3416                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0xFF;
  3417     073A  30FF               	movlw	255
  3418     073B  008C               	movwf	12	;volatile
  3419     073C                     l2063:
  3420                           
  3421                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xFF;
  3422     073C  30FF               	movlw	255
  3423     073D  008D               	movwf	13	;volatile
  3424     073E                     l2065:
  3425                           
  3426                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x9C;
  3427     073E  309C               	movlw	156
  3428     073F  008E               	movwf	14	;volatile
  3429     0740                     l2067:
  3430                           
  3431                           ;mcc_generated_files/pin_manager.c: 76:     ANSELB = 0x3F;
  3432     0740  303F               	movlw	63
  3433     0741  0023               	movlb	3	; select bank3
  3434     0742  008D               	movwf	13	;volatile
  3435     0743                     l2069:
  3436                           
  3437                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x30;
  3438     0743  3030               	movlw	48
  3439     0744  008C               	movwf	12	;volatile
  3440     0745                     l2071:
  3441                           
  3442                           ;mcc_generated_files/pin_manager.c: 82:     WPUE = 0x00;
  3443     0745  0024               	movlb	4	; select bank4
  3444     0746  0190               	clrf	16	;volatile
  3445     0747                     l2073:
  3446                           
  3447                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  3448     0747  018D               	clrf	13	;volatile
  3449     0748                     l2075:
  3450                           
  3451                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 1;
  3452     0748  0021               	movlb	1	; select bank1
  3453     0749  1795               	bsf	21,7	;volatile
  3454     074A                     l2077:
  3455                           
  3456                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  3457     074A  0022               	movlb	2	; select bank2
  3458     074B  019D               	clrf	29	;volatile
  3459     074C                     l135:
  3460     074C  0008               	return
  3461     074D                     __end_of_PIN_MANAGER_Initialize:
  3462                           
  3463                           	psect	text5
  3464     0F53                     __ptext5:	
  3465 ;; *************** function _OSCILLATOR_Initialize *****************
  3466 ;; Defined at:
  3467 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;		None
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;		None
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3481 ;;      Params:         0       0       0       0       0       0       0       0
  3482 ;;      Locals:         0       0       0       0       0       0       0       0
  3483 ;;      Temps:          0       0       0       0       0       0       0       0
  3484 ;;      Totals:         0       0       0       0       0       0       0       0
  3485 ;;Total ram usage:        0 bytes
  3486 ;; Hardware stack levels used: 1
  3487 ;; Hardware stack levels required when called: 4
  3488 ;; This function calls:
  3489 ;;		Nothing
  3490 ;; This function is called by:
  3491 ;;		_SYSTEM_Initialize
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495     0F53                     _OSCILLATOR_Initialize:	
  3496                           ;psect for function _OSCILLATOR_Initialize
  3497                           
  3498     0F53                     l2079:	
  3499                           ;incstack = 0
  3500                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3501                           
  3502                           
  3503                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  3504     0F53  3070               	movlw	112
  3505     0F54  0021               	movlb	1	; select bank1
  3506     0F55  0099               	movwf	25	;volatile
  3507     0F56                     l2081:
  3508                           
  3509                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  3510     0F56  0198               	clrf	24	;volatile
  3511     0F57                     l2083:
  3512                           
  3513                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  3514     0F57  0022               	movlb	2	; select bank2
  3515     0F58  0196               	clrf	22	;volatile
  3516     0F59                     l162:
  3517     0F59  0008               	return
  3518     0F5A                     __end_of_OSCILLATOR_Initialize:
  3519                           
  3520                           	psect	text6
  3521     0545                     __ptext6:	
  3522 ;; *************** function _EUSART_Initialize *****************
  3523 ;; Defined at:
  3524 ;;		line 88 in file "mcc_generated_files/eusart.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0, pclath, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3538 ;;      Params:         0       0       0       0       0       0       0       0
  3539 ;;      Locals:         0       0       0       0       0       0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0       0
  3541 ;;      Totals:         0       0       0       0       0       0       0       0
  3542 ;;Total ram usage:        0 bytes
  3543 ;; Hardware stack levels used: 1
  3544 ;; Hardware stack levels required when called: 5
  3545 ;; This function calls:
  3546 ;;		_EUSART_SetErrorHandler
  3547 ;;		_EUSART_SetFramingErrorHandler
  3548 ;;		_EUSART_SetOverrunErrorHandler
  3549 ;;		_EUSART_SetRxInterruptHandler
  3550 ;;		_EUSART_SetTxInterruptHandler
  3551 ;; This function is called by:
  3552 ;;		_SYSTEM_Initialize
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556     0545                     _EUSART_Initialize:	
  3557                           ;psect for function _EUSART_Initialize
  3558                           
  3559     0545                     l3195:	
  3560                           ;incstack = 0
  3561                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3562                           
  3563                           
  3564                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  3565     0545  0021               	movlb	1	; select bank1
  3566     0546  1291               	bcf	17,5	;volatile
  3567     0547                     l3197:
  3568                           
  3569                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3570     0547  3082               	movlw	low _EUSART_Receive_ISR
  3571     0548  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3572     0549  3005               	movlw	high _EUSART_Receive_ISR
  3573     054A  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3574     054B  318F  2747  3185   	fcall	_EUSART_SetRxInterruptHandler
  3575     054E                     l3199:
  3576                           
  3577                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  3578     054E  0021               	movlb	1	; select bank1
  3579     054F  1211               	bcf	17,4	;volatile
  3580                           
  3581                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3582     0550  30D0               	movlw	low _EUSART_Transmit_ISR
  3583     0551  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  3584     0552  3006               	movlw	high _EUSART_Transmit_ISR
  3585     0553  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  3586     0554  318F  274D  3185   	fcall	_EUSART_SetTxInterruptHandler
  3587     0557                     l3201:
  3588                           
  3589                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  3590     0557  3008               	movlw	8
  3591     0558  0023               	movlb	3	; select bank3
  3592     0559  009F               	movwf	31	;volatile
  3593     055A                     l3203:
  3594                           
  3595                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  3596     055A  3090               	movlw	144
  3597     055B  009D               	movwf	29	;volatile
  3598     055C                     l3205:
  3599                           
  3600                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  3601     055C  3024               	movlw	36
  3602     055D  009E               	movwf	30	;volatile
  3603     055E                     l3207:
  3604                           
  3605                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x0C;
  3606     055E  300C               	movlw	12
  3607     055F  009B               	movwf	27	;volatile
  3608     0560                     l3209:
  3609                           
  3610                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  3611     0560  019C               	clrf	28	;volatile
  3612     0561                     l3211:
  3613                           
  3614                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  3615     0561  30FE               	movlw	low _EUSART_DefaultFramingErrorHandler
  3616     0562  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  3617     0563  300E               	movlw	high _EUSART_DefaultFramingErrorHandler
  3618     0564  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  3619     0565  318F  273B  3185   	fcall	_EUSART_SetFramingErrorHandler
  3620     0568                     l3213:
  3621                           
  3622                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  3623     0568  3013               	movlw	low _EUSART_DefaultOverrunErrorHandler
  3624     0569  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  3625     056A  300F               	movlw	high _EUSART_DefaultOverrunErrorHandler
  3626     056B  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  3627     056C  318F  2741  3185   	fcall	_EUSART_SetOverrunErrorHandler
  3628     056F                     l3215:
  3629                           
  3630                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  3631     056F  300F               	movlw	low _EUSART_DefaultErrorHandler
  3632     0570  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  3633     0571  300F               	movlw	high _EUSART_DefaultErrorHandler
  3634     0572  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  3635     0573  318F  2735  3185   	fcall	_EUSART_SetErrorHandler
  3636                           
  3637                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  3638     0576  0020               	movlb	0	; select bank0
  3639     0577  01E8               	clrf	_eusartRxLastError	;volatile
  3640                           
  3641                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  3642     0578  01EC               	clrf	_eusartTxHead	;volatile
  3643                           
  3644                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  3645     0579  01EB               	clrf	_eusartTxTail	;volatile
  3646     057A                     l3217:
  3647                           
  3648                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3649     057A  3010               	movlw	16
  3650     057B  00EA               	movwf	_eusartTxBufferRemaining	;volatile
  3651     057C                     l3219:
  3652                           
  3653                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  3654     057C  01FB               	clrf	_eusartRxHead	;volatile
  3655     057D                     l3221:
  3656                           
  3657                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  3658     057D  01FA               	clrf	_eusartRxTail	;volatile
  3659     057E                     l3223:
  3660                           
  3661                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  3662     057E  01E9               	clrf	_eusartRxCount	;volatile
  3663     057F                     l3225:
  3664                           
  3665                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  3666     057F  0021               	movlb	1	; select bank1
  3667     0580  1691               	bsf	17,5	;volatile
  3668     0581                     l273:
  3669     0581  0008               	return
  3670     0582                     __end_of_EUSART_Initialize:
  3671                           
  3672                           	psect	text7
  3673     0F4D                     __ptext7:	
  3674 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3675 ;; Defined at:
  3676 ;;		line 276 in file "mcc_generated_files/eusart.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3679 ;;		 -> EUSART_Transmit_ISR(1), 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3691 ;;      Params:         2       0       0       0       0       0       0       0
  3692 ;;      Locals:         0       0       0       0       0       0       0       0
  3693 ;;      Temps:          0       0       0       0       0       0       0       0
  3694 ;;      Totals:         2       0       0       0       0       0       0       0
  3695 ;;Total ram usage:        2 bytes
  3696 ;; Hardware stack levels used: 1
  3697 ;; Hardware stack levels required when called: 4
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_EUSART_Initialize
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705     0F4D                     _EUSART_SetTxInterruptHandler:	
  3706                           ;psect for function _EUSART_SetTxInterruptHandler
  3707                           
  3708     0F4D                     l3121:	
  3709                           ;incstack = 0
  3710                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  3711                           
  3712                           
  3713                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  3714     0F4D  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  3715     0F4E  0021               	movlb	1	; select bank1
  3716     0F4F  00E0               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  3717     0F50  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  3718     0F51  00DF               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  3719     0F52                     l330:
  3720     0F52  0008               	return
  3721     0F53                     __end_of_EUSART_SetTxInterruptHandler:
  3722                           
  3723                           	psect	text8
  3724     0F47                     __ptext8:	
  3725 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  3726 ;; Defined at:
  3727 ;;		line 280 in file "mcc_generated_files/eusart.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3730 ;;		 -> EUSART_Receive_ISR(1), 
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      void 
  3735 ;; Registers used:
  3736 ;;		wreg
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3742 ;;      Params:         2       0       0       0       0       0       0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0       0
  3745 ;;      Totals:         2       0       0       0       0       0       0       0
  3746 ;;Total ram usage:        2 bytes
  3747 ;; Hardware stack levels used: 1
  3748 ;; Hardware stack levels required when called: 4
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		_EUSART_Initialize
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756     0F47                     _EUSART_SetRxInterruptHandler:	
  3757                           ;psect for function _EUSART_SetRxInterruptHandler
  3758                           
  3759     0F47                     l3119:	
  3760                           ;incstack = 0
  3761                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  3762                           
  3763                           
  3764                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  3765     0F47  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  3766     0F48  0021               	movlb	1	; select bank1
  3767     0F49  00DE               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  3768     0F4A  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  3769     0F4B  00DD               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  3770     0F4C                     l333:
  3771     0F4C  0008               	return
  3772     0F4D                     __end_of_EUSART_SetRxInterruptHandler:
  3773                           
  3774                           	psect	text9
  3775     0F41                     __ptext9:	
  3776 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  3777 ;; Defined at:
  3778 ;;		line 268 in file "mcc_generated_files/eusart.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3781 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;		None
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  1    wreg      void 
  3786 ;; Registers used:
  3787 ;;		wreg
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3793 ;;      Params:         2       0       0       0       0       0       0       0
  3794 ;;      Locals:         0       0       0       0       0       0       0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0       0
  3796 ;;      Totals:         2       0       0       0       0       0       0       0
  3797 ;;Total ram usage:        2 bytes
  3798 ;; Hardware stack levels used: 1
  3799 ;; Hardware stack levels required when called: 4
  3800 ;; This function calls:
  3801 ;;		Nothing
  3802 ;; This function is called by:
  3803 ;;		_EUSART_Initialize
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807     0F41                     _EUSART_SetOverrunErrorHandler:	
  3808                           ;psect for function _EUSART_SetOverrunErrorHandler
  3809                           
  3810     0F41                     l3125:	
  3811                           ;incstack = 0
  3812                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  3813                           
  3814                           
  3815                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  3816     0F41  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  3817     0F42  0021               	movlb	1	; select bank1
  3818     0F43  00DA               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  3819     0F44  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  3820     0F45  00D9               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  3821     0F46                     l324:
  3822     0F46  0008               	return
  3823     0F47                     __end_of_EUSART_SetOverrunErrorHandler:
  3824                           
  3825                           	psect	text10
  3826     0F3B                     __ptext10:	
  3827 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  3828 ;; Defined at:
  3829 ;;		line 264 in file "mcc_generated_files/eusart.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3832 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;		None
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  1    wreg      void 
  3837 ;; Registers used:
  3838 ;;		wreg
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3844 ;;      Params:         2       0       0       0       0       0       0       0
  3845 ;;      Locals:         0       0       0       0       0       0       0       0
  3846 ;;      Temps:          0       0       0       0       0       0       0       0
  3847 ;;      Totals:         2       0       0       0       0       0       0       0
  3848 ;;Total ram usage:        2 bytes
  3849 ;; Hardware stack levels used: 1
  3850 ;; Hardware stack levels required when called: 4
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_EUSART_Initialize
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858     0F3B                     _EUSART_SetFramingErrorHandler:	
  3859                           ;psect for function _EUSART_SetFramingErrorHandler
  3860                           
  3861     0F3B                     l3123:	
  3862                           ;incstack = 0
  3863                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  3864                           
  3865                           
  3866                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  3867     0F3B  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  3868     0F3C  0021               	movlb	1	; select bank1
  3869     0F3D  00DC               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  3870     0F3E  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  3871     0F3F  00DB               	movwf	_EUSART_FramingErrorHandler^(0+128)
  3872     0F40                     l321:
  3873     0F40  0008               	return
  3874     0F41                     __end_of_EUSART_SetFramingErrorHandler:
  3875                           
  3876                           	psect	text11
  3877     0F35                     __ptext11:	
  3878 ;; *************** function _EUSART_SetErrorHandler *****************
  3879 ;; Defined at:
  3880 ;;		line 272 in file "mcc_generated_files/eusart.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3883 ;;		 -> EUSART_DefaultErrorHandler(1), 
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;		None
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  1    wreg      void 
  3888 ;; Registers used:
  3889 ;;		wreg
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3895 ;;      Params:         2       0       0       0       0       0       0       0
  3896 ;;      Locals:         0       0       0       0       0       0       0       0
  3897 ;;      Temps:          0       0       0       0       0       0       0       0
  3898 ;;      Totals:         2       0       0       0       0       0       0       0
  3899 ;;Total ram usage:        2 bytes
  3900 ;; Hardware stack levels used: 1
  3901 ;; Hardware stack levels required when called: 4
  3902 ;; This function calls:
  3903 ;;		Nothing
  3904 ;; This function is called by:
  3905 ;;		_EUSART_Initialize
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909     0F35                     _EUSART_SetErrorHandler:	
  3910                           ;psect for function _EUSART_SetErrorHandler
  3911                           
  3912     0F35                     l3127:	
  3913                           ;incstack = 0
  3914                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  3915                           
  3916                           
  3917                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  3918     0F35  0873               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  3919     0F36  0021               	movlb	1	; select bank1
  3920     0F37  00D8               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  3921     0F38  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  3922     0F39  00D7               	movwf	_EUSART_ErrorHandler^(0+128)
  3923     0F3A                     l327:
  3924     0F3A  0008               	return
  3925     0F3B                     __end_of_EUSART_SetErrorHandler:
  3926                           
  3927                           	psect	text12
  3928     0F78                     __ptext12:	
  3929 ;; *************** function _App_Process *****************
  3930 ;; Defined at:
  3931 ;;		line 48 in file "MCU.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;		None
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;		None
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      void 
  3938 ;; Registers used:
  3939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3945 ;;      Params:         0       0       0       0       0       0       0       0
  3946 ;;      Locals:         0       0       0       0       0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0       0
  3948 ;;      Totals:         0       0       0       0       0       0       0       0
  3949 ;;Total ram usage:        0 bytes
  3950 ;; Hardware stack levels used: 1
  3951 ;; Hardware stack levels required when called: 10
  3952 ;; This function calls:
  3953 ;;		_Task_Indicator
  3954 ;;		_Task_MB
  3955 ;;		_Task_Sensor
  3956 ;; This function is called by:
  3957 ;;		_main
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961     0F78                     _App_Process:	
  3962                           ;psect for function _App_Process
  3963                           
  3964     0F78                     l4233:	
  3965                           ;incstack = 0
  3966                           ; Regs used in _App_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3967                           
  3968                           
  3969                           ;MCU.c: 49:     Task_Sensor();
  3970     0F78  3184  242B  318F   	fcall	_Task_Sensor
  3971     0F7B                     l4235:
  3972                           
  3973                           ;MCU.c: 50:     Task_MB();
  3974     0F7B  3187  27C9  318F   	fcall	_Task_MB
  3975     0F7E                     l4237:
  3976                           
  3977                           ;MCU.c: 51:     Task_Indicator();
  3978     0F7E  3186  26AC  318F   	fcall	_Task_Indicator
  3979     0F81                     l507:
  3980     0F81  0008               	return
  3981     0F82                     __end_of_App_Process:
  3982                           
  3983                           	psect	text13
  3984     042B                     __ptext13:	
  3985 ;; *************** function _Task_Sensor *****************
  3986 ;; Defined at:
  3987 ;;		line 44 in file "I2C_SHT30.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4001 ;;      Params:         0       0       0       0       0       0       0       0
  4002 ;;      Locals:         0       0       0       0       0       0       0       0
  4003 ;;      Temps:          0       4       0       0       0       0       0       0
  4004 ;;      Totals:         0       4       0       0       0       0       0       0
  4005 ;;Total ram usage:        4 bytes
  4006 ;; Hardware stack levels used: 1
  4007 ;; Hardware stack levels required when called: 9
  4008 ;; This function calls:
  4009 ;;		_Get_millis
  4010 ;;		_ReadData
  4011 ;; This function is called by:
  4012 ;;		_App_Process
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016     042B                     _Task_Sensor:	
  4017                           ;psect for function _Task_Sensor
  4018                           
  4019     042B                     l4171:	
  4020                           ;incstack = 0
  4021                           ; Regs used in _Task_Sensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4022                           
  4023                           
  4024                           ;I2C_SHT30.c: 45:     static uint32_t valTime = 0;;I2C_SHT30.c: 47:     f_Indicator = OF
      +                          F_Sensor;
  4025     042B  0020               	movlb	0	; select bank0
  4026     042C  01E7               	clrf	_f_Indicator
  4027     042D                     l4173:
  4028                           
  4029                           ;I2C_SHT30.c: 50:     if ((((uint32_t) Get_millis() - valTime) >= (uint32_t) 2 * 1000)) 
      +                          {
  4030     042D  318F  276E  3184   	fcall	_Get_millis
  4031     0430  0021               	movlb	1	; select bank1
  4032     0431  084D               	movf	Task_Sensor@valTime^(0+128),w
  4033     0432  0272               	subwf	?_Get_millis,w
  4034     0433  0020               	movlb	0	; select bank0
  4035     0434  00B2               	movwf	??_Task_Sensor
  4036     0435  0021               	movlb	1	; select bank1
  4037     0436  084E               	movf	(Task_Sensor@valTime+1)^(0+128),w
  4038     0437  3B73               	subwfb	?_Get_millis+1,w
  4039     0438  0020               	movlb	0	; select bank0
  4040     0439  00B3               	movwf	??_Task_Sensor+1
  4041     043A  0021               	movlb	1	; select bank1
  4042     043B  084F               	movf	(Task_Sensor@valTime+2)^(0+128),w
  4043     043C  3B74               	subwfb	?_Get_millis+2,w
  4044     043D  0020               	movlb	0	; select bank0
  4045     043E  00B4               	movwf	??_Task_Sensor+2
  4046     043F  0021               	movlb	1	; select bank1
  4047     0440  0850               	movf	(Task_Sensor@valTime+3)^(0+128),w
  4048     0441  3B75               	subwfb	?_Get_millis+3,w
  4049     0442  0020               	movlb	0	; select bank0
  4050     0443  00B5               	movwf	??_Task_Sensor+3
  4051     0444  0835               	movf	??_Task_Sensor+3,w
  4052     0445  1D03               	btfss	3,2
  4053     0446  2C52               	goto	u1970
  4054     0447  0834               	movf	??_Task_Sensor+2,w
  4055     0448  1D03               	btfss	3,2
  4056     0449  2C52               	goto	u1970
  4057     044A  30D0               	movlw	208
  4058     044B  0232               	subwf	??_Task_Sensor,w
  4059     044C  3007               	movlw	7
  4060     044D  3B33               	subwfb	??_Task_Sensor+1,w
  4061     044E  1C03               	btfss	3,0
  4062     044F  2C51               	goto	u1971
  4063     0450  2C52               	goto	u1970
  4064     0451                     u1971:
  4065     0451  2C7C               	goto	l448
  4066     0452                     u1970:
  4067     0452                     l4175:
  4068                           
  4069                           ;I2C_SHT30.c: 51:         valTime = Get_millis();
  4070     0452  318F  276E  3184   	fcall	_Get_millis
  4071     0455  0875               	movf	?_Get_millis+3,w
  4072     0456  0021               	movlb	1	; select bank1
  4073     0457  00D0               	movwf	(Task_Sensor@valTime+3)^(0+128)
  4074     0458  0874               	movf	?_Get_millis+2,w
  4075     0459  00CF               	movwf	(Task_Sensor@valTime+2)^(0+128)
  4076     045A  0873               	movf	?_Get_millis+1,w
  4077     045B  00CE               	movwf	(Task_Sensor@valTime+1)^(0+128)
  4078     045C  0872               	movf	?_Get_millis,w
  4079     045D  00CD               	movwf	Task_Sensor@valTime^(0+128)
  4080     045E                     l4177:
  4081                           
  4082                           ;I2C_SHT30.c: 52:         f_Indicator = ON_Sensor;
  4083     045E  0020               	movlb	0	; select bank0
  4084     045F  01E7               	clrf	_f_Indicator
  4085     0460  0AE7               	incf	_f_Indicator,f
  4086     0461                     l4179:
  4087                           
  4088                           ;I2C_SHT30.c: 53:         ReadData();
  4089     0461  3184  247D  3184   	fcall	_ReadData
  4090     0464                     l4181:
  4091                           
  4092                           ;I2C_SHT30.c: 54:         if ((SensorAmbient.T.Val16 < 0) || (SensorAmbient.H.Val16 < 0)
      +                          ) {
  4093     0464  0020               	movlb	0	; select bank0
  4094     0465  1BDF               	btfsc	_SensorAmbient+1,7
  4095     0466  2C68               	goto	u1981
  4096     0467  2C69               	goto	u1980
  4097     0468                     u1981:
  4098     0468  2C72               	goto	l4185
  4099     0469                     u1980:
  4100     0469                     l4183:
  4101     0469  3002               	movlw	2
  4102     046A  3E5E               	addlw	(low (_SensorAmbient| 0))& (0+255)
  4103     046B  0086               	movwf	6
  4104     046C  0187               	clrf	7
  4105     046D  3141               	addfsr 1,1
  4106     046E  1F81               	btfss	1,7
  4107     046F  2C71               	goto	u1991
  4108     0470  2C72               	goto	u1990
  4109     0471                     u1991:
  4110     0471  2C7C               	goto	l448
  4111     0472                     u1990:
  4112     0472                     l4185:
  4113                           
  4114                           ;I2C_SHT30.c: 55:             SensorAmbient.T.Val16 = (int16_t) 0x8000;
  4115     0472  3000               	movlw	0
  4116     0473  00DE               	movwf	_SensorAmbient
  4117     0474  3080               	movlw	128
  4118     0475  00DF               	movwf	_SensorAmbient+1
  4119                           
  4120                           ;I2C_SHT30.c: 56:             SensorAmbient.H.Val16 = (int16_t) 0x8000;
  4121     0476  3000               	movlw	0
  4122     0477  00E0               	movwf	_SensorAmbient+2
  4123     0478  3080               	movlw	128
  4124     0479  00E1               	movwf	_SensorAmbient+3
  4125                           
  4126                           ;I2C_SHT30.c: 57:             f_Indicator = ERR_Sensor;
  4127     047A  3002               	movlw	2
  4128     047B  00E7               	movwf	_f_Indicator
  4129     047C                     l448:
  4130     047C  0008               	return
  4131     047D                     __end_of_Task_Sensor:
  4132                           
  4133                           	psect	text14
  4134     047D                     __ptext14:	
  4135 ;; *************** function _ReadData *****************
  4136 ;; Defined at:
  4137 ;;		line 27 in file "I2C_SHT30.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  aData           6    8[BANK0 ] unsigned char [6]
  4142 ;;  valTime         4   14[BANK0 ] unsigned long 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      void 
  4145 ;; Registers used:
  4146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4152 ;;      Params:         0       0       0       0       0       0       0       0
  4153 ;;      Locals:         0      10       0       0       0       0       0       0
  4154 ;;      Temps:          0       4       0       0       0       0       0       0
  4155 ;;      Totals:         0      14       0       0       0       0       0       0
  4156 ;;Total ram usage:       14 bytes
  4157 ;; Hardware stack levels used: 1
  4158 ;; Hardware stack levels required when called: 8
  4159 ;; This function calls:
  4160 ;;		_Get_millis
  4161 ;;		_I2C_ReadNBytes
  4162 ;;		_I2C_WriteNBytes
  4163 ;; This function is called by:
  4164 ;;		_Task_Sensor
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168     047D                     _ReadData:	
  4169                           ;psect for function _ReadData
  4170                           
  4171     047D                     l4145:	
  4172                           ;incstack = 0
  4173                           ; Regs used in _ReadData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4174                           
  4175                           
  4176                           ;I2C_SHT30.c: 28:     uint8_t aData[6];;I2C_SHT30.c: 29:     uint32_t valTime;;I2C_SHT30
      +                          .c: 31:     I2C_WriteNBytes(0x88, SHT30_CMD_MEASURE_H_Disable, 2);
  4177     047D  306D               	movlw	(low (_SHT30_CMD_MEASURE_H_Disable| 0))& (0+255)
  4178     047E  0020               	movlb	0	; select bank0
  4179     047F  00A0               	movwf	I2C_WriteNBytes@data
  4180     0480  3002               	movlw	2
  4181     0481  00A1               	movwf	I2C_WriteNBytes@len
  4182     0482  3000               	movlw	0
  4183     0483  00A2               	movwf	I2C_WriteNBytes@len+1
  4184     0484  3088               	movlw	136
  4185     0485  3185  25BB  3184   	fcall	_I2C_WriteNBytes
  4186     0488                     l4147:
  4187                           
  4188                           ;I2C_SHT30.c: 32:     valTime = Get_millis();
  4189     0488  318F  276E  3184   	fcall	_Get_millis
  4190     048B  0875               	movf	?_Get_millis+3,w
  4191     048C  0020               	movlb	0	; select bank0
  4192     048D  00B1               	movwf	ReadData@valTime+3
  4193     048E  0874               	movf	?_Get_millis+2,w
  4194     048F  00B0               	movwf	ReadData@valTime+2
  4195     0490  0873               	movf	?_Get_millis+1,w
  4196     0491  00AF               	movwf	ReadData@valTime+1
  4197     0492  0872               	movf	?_Get_millis,w
  4198     0493  00AE               	movwf	ReadData@valTime
  4199     0494                     l4149:	
  4200                           ;I2C_SHT30.c: 33:     while (((uint32_t) Get_millis() - valTime) < (uint32_t) 2 * 1);
  4201                           
  4202     0494  318F  276E  3184   	fcall	_Get_millis
  4203     0497  0020               	movlb	0	; select bank0
  4204     0498  082E               	movf	ReadData@valTime,w
  4205     0499  0272               	subwf	?_Get_millis,w
  4206     049A  00A4               	movwf	??_ReadData
  4207     049B  082F               	movf	ReadData@valTime+1,w
  4208     049C  3B73               	subwfb	?_Get_millis+1,w
  4209     049D  00A5               	movwf	??_ReadData+1
  4210     049E  0830               	movf	ReadData@valTime+2,w
  4211     049F  3B74               	subwfb	?_Get_millis+2,w
  4212     04A0  00A6               	movwf	??_ReadData+2
  4213     04A1  0831               	movf	ReadData@valTime+3,w
  4214     04A2  3B75               	subwfb	?_Get_millis+3,w
  4215     04A3  00A7               	movwf	??_ReadData+3
  4216     04A4  0827               	movf	??_ReadData+3,w
  4217     04A5  1D03               	btfss	3,2
  4218     04A6  2CB3               	goto	u1960
  4219     04A7  0826               	movf	??_ReadData+2,w
  4220     04A8  1D03               	btfss	3,2
  4221     04A9  2CB3               	goto	u1960
  4222     04AA  0825               	movf	??_ReadData+1,w
  4223     04AB  1D03               	btfss	3,2
  4224     04AC  2CB3               	goto	u1960
  4225     04AD  3002               	movlw	2
  4226     04AE  0224               	subwf	??_ReadData,w
  4227     04AF  1C03               	btfss	3,0
  4228     04B0  2CB2               	goto	u1961
  4229     04B1  2CB3               	goto	u1960
  4230     04B2                     u1961:
  4231     04B2  2C94               	goto	l4149
  4232     04B3                     u1960:
  4233     04B3                     l4151:
  4234                           
  4235                           ;I2C_SHT30.c: 35:     I2C_ReadNBytes(0x89, aData, 6);
  4236     04B3  3028               	movlw	(low (ReadData@aData| 0))& (0+255)
  4237     04B4  00F6               	movwf	I2C_ReadNBytes@data
  4238     04B5  3006               	movlw	6
  4239     04B6  00F7               	movwf	I2C_ReadNBytes@len
  4240     04B7  3000               	movlw	0
  4241     04B8  00F8               	movwf	I2C_ReadNBytes@len+1
  4242     04B9  3089               	movlw	137
  4243     04BA  3187  2713  3184   	fcall	_I2C_ReadNBytes
  4244     04BD                     l4153:
  4245                           
  4246                           ;I2C_SHT30.c: 37:     SensorAmbient.T._Byte[1] = aData[0];
  4247     04BD  0020               	movlb	0	; select bank0
  4248     04BE  0828               	movf	ReadData@aData,w
  4249     04BF  00DF               	movwf	_SensorAmbient+1
  4250     04C0                     l4155:
  4251                           
  4252                           ;I2C_SHT30.c: 38:     SensorAmbient.T._Byte[0] = aData[1];
  4253     04C0  0829               	movf	ReadData@aData+1,w
  4254     04C1  00DE               	movwf	_SensorAmbient
  4255     04C2                     l4157:
  4256                           
  4257                           ;I2C_SHT30.c: 40:     SensorAmbient.H._Byte[1] = aData[3];
  4258     04C2  082B               	movf	ReadData@aData+3,w
  4259     04C3  00E1               	movwf	_SensorAmbient+3
  4260     04C4                     l4159:
  4261                           
  4262                           ;I2C_SHT30.c: 41:     SensorAmbient.H._Byte[0] = aData[4];
  4263     04C4  082C               	movf	ReadData@aData+4,w
  4264     04C5  00E0               	movwf	_SensorAmbient+2
  4265     04C6                     l439:
  4266     04C6  0008               	return
  4267     04C7                     __end_of_ReadData:
  4268                           
  4269                           	psect	text15
  4270     05BB                     __ptext15:	
  4271 ;; *************** function _I2C_WriteNBytes *****************
  4272 ;; Defined at:
  4273 ;;		line 111 in file "mcc_generated_files/examples/i2c_master_example.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;  address         1    wreg     unsigned char 
  4276 ;;  data            1    0[BANK0 ] PTR unsigned char 
  4277 ;;		 -> SHT30_CMD_MEASURE_H_Disable(2), 
  4278 ;;  len             2    1[BANK0 ] unsigned int 
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  address         1    3[BANK0 ] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4290 ;;      Params:         0       3       0       0       0       0       0       0
  4291 ;;      Locals:         0       1       0       0       0       0       0       0
  4292 ;;      Temps:          0       0       0       0       0       0       0       0
  4293 ;;      Totals:         0       4       0       0       0       0       0       0
  4294 ;;Total ram usage:        4 bytes
  4295 ;; Hardware stack levels used: 1
  4296 ;; Hardware stack levels required when called: 7
  4297 ;; This function calls:
  4298 ;;		_I2C_Close
  4299 ;;		_I2C_MasterWrite
  4300 ;;		_I2C_Open
  4301 ;;		_I2C_SetAddressNackCallback
  4302 ;;		_I2C_SetBuffer
  4303 ;; This function is called by:
  4304 ;;		_ReadData
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308     05BB                     _I2C_WriteNBytes:	
  4309                           ;psect for function _I2C_WriteNBytes
  4310                           
  4311                           
  4312                           ;incstack = 0
  4313                           ; Regs used in _I2C_WriteNBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4314                           ;I2C_WriteNBytes@address stored from wreg
  4315     05BB  0020               	movlb	0	; select bank0
  4316     05BC  00A3               	movwf	I2C_WriteNBytes@address
  4317     05BD                     l4057:
  4318     05BD                     l4059:	
  4319                           ;mcc_generated_files/examples/i2c_master_example.c: 111: void I2C_WriteNBytes(i2c_addres
      +                          s_t address, uint8_t* data, size_t len);mcc_generated_files/examples/i2c_master_example.
      +                          c: 112: {;mcc_generated_files/examples/i2c_master_example.c: 113:     while(!I2C_Open(ad
      +                          dress));
  4320                           
  4321     05BD  0020               	movlb	0	; select bank0
  4322     05BE  0823               	movf	I2C_WriteNBytes@address,w
  4323     05BF  3184  24C7  3185   	fcall	_I2C_Open
  4324     05C2  3A00               	xorlw	0
  4325     05C3  1903               	skipnz
  4326     05C4  2DC6               	goto	u1851
  4327     05C5  2DC7               	goto	u1850
  4328     05C6                     u1851:
  4329     05C6  2DBD               	goto	l4059
  4330     05C7                     u1850:
  4331     05C7                     l4061:
  4332                           
  4333                           ;mcc_generated_files/examples/i2c_master_example.c: 114:     I2C_SetBuffer(data,len);
  4334     05C7  0020               	movlb	0	; select bank0
  4335     05C8  0822               	movf	I2C_WriteNBytes@len+1,w
  4336     05C9  00F3               	movwf	I2C_SetBuffer@bufferSize+1
  4337     05CA  0821               	movf	I2C_WriteNBytes@len,w
  4338     05CB  00F2               	movwf	I2C_SetBuffer@bufferSize
  4339     05CC  0820               	movf	I2C_WriteNBytes@data,w
  4340     05CD  318F  27E2  3185   	fcall	_I2C_SetBuffer
  4341     05D0                     l4063:
  4342                           
  4343                           ;mcc_generated_files/examples/i2c_master_example.c: 115:     I2C_SetAddressNackCallback(
      +                          ((void*)0),((void*)0));
  4344     05D0  3000               	movlw	0
  4345     05D1  00F6               	movwf	I2C_SetAddressNackCallback@cb
  4346     05D2  00F7               	movwf	I2C_SetAddressNackCallback@cb+1
  4347     05D3  3000               	movlw	0
  4348     05D4  00F8               	movwf	I2C_SetAddressNackCallback@ptr
  4349     05D5  00F9               	movwf	I2C_SetAddressNackCallback@ptr+1
  4350     05D6  318F  278C  3185   	fcall	_I2C_SetAddressNackCallback
  4351     05D9                     l4065:
  4352                           
  4353                           ;mcc_generated_files/examples/i2c_master_example.c: 116:     I2C_MasterWrite();
  4354     05D9  318F  2724  3185   	fcall	_I2C_MasterWrite
  4355     05DC                     l4067:	
  4356                           ;mcc_generated_files/examples/i2c_master_example.c: 117:     while(I2C_BUSY == I2C_Close
      +                          ());
  4357                           
  4358     05DC  3187  27B1  3185   	fcall	_I2C_Close
  4359     05DF  3A01               	xorlw	1
  4360     05E0  1903               	skipnz
  4361     05E1  2DE3               	goto	u1861
  4362     05E2  2DE4               	goto	u1860
  4363     05E3                     u1861:
  4364     05E3  2DDC               	goto	l4067
  4365     05E4                     u1860:
  4366     05E4                     l71:
  4367     05E4  0008               	return
  4368     05E5                     __end_of_I2C_WriteNBytes:
  4369                           
  4370                           	psect	text16
  4371     0F8C                     __ptext16:	
  4372 ;; *************** function _I2C_SetAddressNackCallback *****************
  4373 ;; Defined at:
  4374 ;;		line 284 in file "mcc_generated_files/i2c_master.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;  cb              2    6[COMMON] PTR FTN(PTR void ,)enum 
  4377 ;;		 -> NULL(1), 
  4378 ;;  ptr             2    8[COMMON] PTR void 
  4379 ;;		 -> NULL(0), 
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;		None
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  1    wreg      void 
  4384 ;; Registers used:
  4385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4391 ;;      Params:         4       0       0       0       0       0       0       0
  4392 ;;      Locals:         0       0       0       0       0       0       0       0
  4393 ;;      Temps:          0       0       0       0       0       0       0       0
  4394 ;;      Totals:         4       0       0       0       0       0       0       0
  4395 ;;Total ram usage:        4 bytes
  4396 ;; Hardware stack levels used: 1
  4397 ;; Hardware stack levels required when called: 5
  4398 ;; This function calls:
  4399 ;;		_I2C_SetCallback
  4400 ;; This function is called by:
  4401 ;;		_I2C_WriteNBytes
  4402 ;;		_I2C_Read1ByteRegister
  4403 ;;		_I2C_Read2ByteRegister
  4404 ;;		_I2C_Write1ByteRegister
  4405 ;;		_I2C_Write2ByteRegister
  4406 ;;		_I2C_ReadDataBlock
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410     0F8C                     _I2C_SetAddressNackCallback:	
  4411                           ;psect for function _I2C_SetAddressNackCallback
  4412                           
  4413     0F8C                     l3935:	
  4414                           ;incstack = 0
  4415                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4416                           
  4417                           
  4418                           ;mcc_generated_files/i2c_master.c: 284: void I2C_SetAddressNackCallback(i2c_callback_t c
      +                          b, void *ptr);mcc_generated_files/i2c_master.c: 285: {;mcc_generated_files/i2c_master.c:
      +                           286:     I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  4419     0F8C  0877               	movf	I2C_SetAddressNackCallback@cb+1,w
  4420     0F8D  00F3               	movwf	I2C_SetCallback@cb+1
  4421     0F8E  0876               	movf	I2C_SetAddressNackCallback@cb,w
  4422     0F8F  00F2               	movwf	I2C_SetCallback@cb
  4423     0F90  0878               	movf	I2C_SetAddressNackCallback@ptr,w
  4424     0F91  00F4               	movwf	I2C_SetCallback@ptr
  4425     0F92  3002               	movlw	2
  4426     0F93  3186  2688  318F   	fcall	_I2C_SetCallback
  4427     0F96                     l773:
  4428     0F96  0008               	return
  4429     0F97                     __end_of_I2C_SetAddressNackCallback:
  4430                           
  4431                           	psect	text17
  4432     0688                     __ptext17:	
  4433 ;; *************** function _I2C_SetCallback *****************
  4434 ;; Defined at:
  4435 ;;		line 304 in file "mcc_generated_files/i2c_master.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  idx             1    wreg     enum E3130
  4438 ;;  cb              2    2[COMMON] PTR FTN(PTR void ,)enum 
  4439 ;;		 -> NULL(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
  4440 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  4441 ;;  ptr             1    4[COMMON] PTR void 
  4442 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  4443 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  idx             1    5[COMMON] enum E3130
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4455 ;;      Params:         3       0       0       0       0       0       0       0
  4456 ;;      Locals:         1       0       0       0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0
  4458 ;;      Totals:         4       0       0       0       0       0       0       0
  4459 ;;Total ram usage:        4 bytes
  4460 ;; Hardware stack levels used: 1
  4461 ;; Hardware stack levels required when called: 4
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_I2C_SetAddressNackCallback
  4466 ;;		_I2C_SetDataCompleteCallback
  4467 ;;		_I2C_SetWriteCollisionCallback
  4468 ;;		_I2C_SetDataNackCallback
  4469 ;;		_I2C_SetTimeoutCallback
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473     0688                     _I2C_SetCallback:	
  4474                           ;psect for function _I2C_SetCallback
  4475                           
  4476                           
  4477                           ;incstack = 0
  4478                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  4479                           ;I2C_SetCallback@idx stored from wreg
  4480     0688  00F5               	movwf	I2C_SetCallback@idx
  4481     0689                     l3887:
  4482                           
  4483                           ;mcc_generated_files/i2c_master.c: 304: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 305: {;mcc_generate
      +                          d_files/i2c_master.c: 306:     if(cb)
  4484     0689  0872               	movf	I2C_SetCallback@cb,w
  4485     068A  0473               	iorwf	I2C_SetCallback@cb+1,w
  4486     068B  1903               	btfsc	3,2
  4487     068C  2E8E               	goto	u1731
  4488     068D  2E8F               	goto	u1730
  4489     068E                     u1731:
  4490     068E  2E9E               	goto	l3891
  4491     068F                     u1730:
  4492     068F                     l3889:
  4493                           
  4494                           ;mcc_generated_files/i2c_master.c: 307:     {;mcc_generated_files/i2c_master.c: 308:    
      +                               I2C_Status.callbackTable[idx] = cb;
  4495     068F  3575               	lslf	I2C_SetCallback@idx,w
  4496     0690  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  4497     0691  0086               	movwf	6
  4498     0692  0187               	clrf	7
  4499     0693  0872               	movf	I2C_SetCallback@cb,w
  4500     0694  3FC0               	movwi [0]fsr1
  4501     0695  0873               	movf	I2C_SetCallback@cb+1,w
  4502     0696  3FC1               	movwi [1]fsr1
  4503                           
  4504                           ;mcc_generated_files/i2c_master.c: 309:         I2C_Status.callbackPayload[idx] = ptr;
  4505     0697  0875               	movf	I2C_SetCallback@idx,w
  4506     0698  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  4507     0699  0086               	movwf	6
  4508     069A  0187               	clrf	7
  4509     069B  0874               	movf	I2C_SetCallback@ptr,w
  4510     069C  0081               	movwf	1
  4511                           
  4512                           ;mcc_generated_files/i2c_master.c: 310:     }
  4513     069D  2EAB               	goto	l787
  4514     069E                     l3891:
  4515                           
  4516                           ;mcc_generated_files/i2c_master.c: 312:     {;mcc_generated_files/i2c_master.c: 313:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  4517     069E  3575               	lslf	I2C_SetCallback@idx,w
  4518     069F  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  4519     06A0  0086               	movwf	6
  4520     06A1  0187               	clrf	7
  4521     06A2  3000               	movlw	0
  4522     06A3  3FC0               	movwi [0]fsr1
  4523     06A4  3000               	movlw	0
  4524     06A5  3FC1               	movwi [1]fsr1
  4525                           
  4526                           ;mcc_generated_files/i2c_master.c: 314:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
  4527     06A6  0875               	movf	I2C_SetCallback@idx,w
  4528     06A7  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  4529     06A8  0086               	movwf	6
  4530     06A9  0187               	clrf	7
  4531     06AA  0181               	clrf	1
  4532     06AB                     l787:
  4533     06AB  0008               	return
  4534     06AC                     __end_of_I2C_SetCallback:
  4535                           
  4536                           	psect	text18
  4537     0F24                     __ptext18:	
  4538 ;; *************** function _I2C_MasterWrite *****************
  4539 ;; Defined at:
  4540 ;;		line 252 in file "mcc_generated_files/i2c_master.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;		None
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;		None
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  1    wreg      enum E358
  4547 ;; Registers used:
  4548 ;;		wreg, status,2, status,0, pclath, cstack
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4554 ;;      Params:         0       0       0       0       0       0       0       0
  4555 ;;      Locals:         0       0       0       0       0       0       0       0
  4556 ;;      Temps:          0       0       0       0       0       0       0       0
  4557 ;;      Totals:         0       0       0       0       0       0       0       0
  4558 ;;Total ram usage:        0 bytes
  4559 ;; Hardware stack levels used: 1
  4560 ;; Hardware stack levels required when called: 6
  4561 ;; This function calls:
  4562 ;;		_I2C_MasterOperation
  4563 ;; This function is called by:
  4564 ;;		_I2C_WriteNBytes
  4565 ;;		_I2C_Read1ByteRegister
  4566 ;;		_I2C_Read2ByteRegister
  4567 ;;		_I2C_Write1ByteRegister
  4568 ;;		_I2C_Write2ByteRegister
  4569 ;;		_I2C_ReadDataBlock
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573     0F24                     _I2C_MasterWrite:	
  4574                           ;psect for function _I2C_MasterWrite
  4575                           
  4576     0F24                     l3937:	
  4577                           ;incstack = 0
  4578                           ; Regs used in _I2C_MasterWrite: [wreg+status,2+status,0+pclath+cstack]
  4579                           
  4580                           
  4581                           ;mcc_generated_files/i2c_master.c: 254:     return I2C_MasterOperation(0);;	Return value
      +                           of _I2C_MasterWrite is never used
  4582     0F24  3000               	movlw	0
  4583     0F25  3187  2767  318F   	fcall	_I2C_MasterOperation
  4584     0F28                     l757:
  4585     0F28  0008               	return
  4586     0F29                     __end_of_I2C_MasterWrite:
  4587                           
  4588                           	psect	text19
  4589     0713                     __ptext19:	
  4590 ;; *************** function _I2C_ReadNBytes *****************
  4591 ;; Defined at:
  4592 ;;		line 120 in file "mcc_generated_files/examples/i2c_master_example.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  address         1    wreg     unsigned char 
  4595 ;;  data            1    6[COMMON] PTR unsigned char 
  4596 ;;		 -> ReadData@aData(6), 
  4597 ;;  len             2    7[COMMON] unsigned int 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  address         1    9[COMMON] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		wreg, status,2, status,0, pclath, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4609 ;;      Params:         3       0       0       0       0       0       0       0
  4610 ;;      Locals:         1       0       0       0       0       0       0       0
  4611 ;;      Temps:          0       0       0       0       0       0       0       0
  4612 ;;      Totals:         4       0       0       0       0       0       0       0
  4613 ;;Total ram usage:        4 bytes
  4614 ;; Hardware stack levels used: 1
  4615 ;; Hardware stack levels required when called: 7
  4616 ;; This function calls:
  4617 ;;		_I2C_Close
  4618 ;;		_I2C_MasterRead
  4619 ;;		_I2C_Open
  4620 ;;		_I2C_SetBuffer
  4621 ;; This function is called by:
  4622 ;;		_ReadData
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626     0713                     _I2C_ReadNBytes:	
  4627                           ;psect for function _I2C_ReadNBytes
  4628                           
  4629                           
  4630                           ;incstack = 0
  4631                           ; Regs used in _I2C_ReadNBytes: [wreg+status,2+status,0+pclath+cstack]
  4632                           ;I2C_ReadNBytes@address stored from wreg
  4633     0713  00F9               	movwf	I2C_ReadNBytes@address
  4634     0714                     l4069:
  4635     0714                     l4071:	
  4636                           ;mcc_generated_files/examples/i2c_master_example.c: 120: void I2C_ReadNBytes(i2c_address
      +                          _t address, uint8_t *data, size_t len);mcc_generated_files/examples/i2c_master_example.c
      +                          : 121: {;mcc_generated_files/examples/i2c_master_example.c: 122:     while(!I2C_Open(add
      +                          ress));
  4637                           
  4638     0714  0879               	movf	I2C_ReadNBytes@address,w
  4639     0715  3184  24C7  3187   	fcall	_I2C_Open
  4640     0718  3A00               	xorlw	0
  4641     0719  1903               	skipnz
  4642     071A  2F1C               	goto	u1871
  4643     071B  2F1D               	goto	u1870
  4644     071C                     u1871:
  4645     071C  2F14               	goto	l4071
  4646     071D                     u1870:
  4647     071D                     l4073:
  4648                           
  4649                           ;mcc_generated_files/examples/i2c_master_example.c: 123:     I2C_SetBuffer(data,len);
  4650     071D  0878               	movf	I2C_ReadNBytes@len+1,w
  4651     071E  00F3               	movwf	I2C_SetBuffer@bufferSize+1
  4652     071F  0877               	movf	I2C_ReadNBytes@len,w
  4653     0720  00F2               	movwf	I2C_SetBuffer@bufferSize
  4654     0721  0876               	movf	I2C_ReadNBytes@data,w
  4655     0722  318F  27E2  3187   	fcall	_I2C_SetBuffer
  4656                           
  4657                           ;mcc_generated_files/examples/i2c_master_example.c: 124:     I2C_MasterRead();
  4658     0725  318F  271F  3187   	fcall	_I2C_MasterRead
  4659     0728                     l4075:	
  4660                           ;mcc_generated_files/examples/i2c_master_example.c: 125:     while(I2C_BUSY == I2C_Close
      +                          ());
  4661                           
  4662     0728  3187  27B1  3187   	fcall	_I2C_Close
  4663     072B  3A01               	xorlw	1
  4664     072C  1903               	skipnz
  4665     072D  2F2F               	goto	u1881
  4666     072E  2F30               	goto	u1880
  4667     072F                     u1881:
  4668     072F  2F28               	goto	l4075
  4669     0730                     u1880:
  4670     0730                     l80:
  4671     0730  0008               	return
  4672     0731                     __end_of_I2C_ReadNBytes:
  4673                           
  4674                           	psect	text20
  4675     0FE2                     __ptext20:	
  4676 ;; *************** function _I2C_SetBuffer *****************
  4677 ;; Defined at:
  4678 ;;		line 264 in file "mcc_generated_files/i2c_master.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  buffer          1    wreg     PTR void 
  4681 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
  4682 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Disable(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), 
  4683 ;;		 -> bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1
      +), 
  4684 ;;		 -> I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), 
  4685 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  4686 ;;  bufferSize      2    2[COMMON] unsigned int 
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;  buffer          1    4[COMMON] PTR void 
  4689 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
  4690 ;;		 -> ReadData@aData(6), SHT30_CMD_MEASURE_H_Disable(2), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), 
  4691 ;;		 -> bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1
      +), 
  4692 ;;		 -> I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), 
  4693 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4703 ;;      Params:         2       0       0       0       0       0       0       0
  4704 ;;      Locals:         1       0       0       0       0       0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0
  4706 ;;      Totals:         3       0       0       0       0       0       0       0
  4707 ;;Total ram usage:        3 bytes
  4708 ;; Hardware stack levels used: 1
  4709 ;; Hardware stack levels required when called: 4
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_I2C_WriteNBytes
  4714 ;;		_I2C_ReadNBytes
  4715 ;;		_I2C_Read1ByteRegister
  4716 ;;		_I2C_Read2ByteRegister
  4717 ;;		_I2C_Write1ByteRegister
  4718 ;;		_I2C_Write2ByteRegister
  4719 ;;		_I2C_ReadDataBlock
  4720 ;;		_rd1RegCompleteHandler
  4721 ;;		_rd2RegCompleteHandler
  4722 ;;		_wr1RegCompleteHandler
  4723 ;;		_wr2RegCompleteHandler
  4724 ;;		_rdBlkRegCompleteHandler
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728     0FE2                     _I2C_SetBuffer:	
  4729                           ;psect for function _I2C_SetBuffer
  4730                           
  4731                           
  4732                           ;incstack = 0
  4733                           ; Regs used in _I2C_SetBuffer: [wreg]
  4734                           ;I2C_SetBuffer@buffer stored from wreg
  4735     0FE2  00F4               	movwf	I2C_SetBuffer@buffer
  4736     0FE3                     l3929:
  4737                           
  4738                           ;mcc_generated_files/i2c_master.c: 264: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 265: {;mcc_generated_files/i2c_master.c: 266:     
      +                          if(I2C_Status.bufferFree)
  4739     0FE3  0021               	movlb	1	; select bank1
  4740     0FE4  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
  4741     0FE5  2FE7               	goto	u1751
  4742     0FE6  2FE8               	goto	u1750
  4743     0FE7                     u1751:
  4744     0FE7  2FEF               	goto	l764
  4745     0FE8                     u1750:
  4746     0FE8                     l3931:
  4747                           
  4748                           ;mcc_generated_files/i2c_master.c: 267:     {;mcc_generated_files/i2c_master.c: 268:    
      +                               I2C_Status.data_ptr = buffer;
  4749     0FE8  0874               	movf	I2C_SetBuffer@buffer,w
  4750     0FE9  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
  4751                           
  4752                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.data_length = bufferSize;
  4753     0FEA  0873               	movf	I2C_SetBuffer@bufferSize+1,w
  4754     0FEB  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
  4755     0FEC  0872               	movf	I2C_SetBuffer@bufferSize,w
  4756     0FED  00B8               	movwf	(_I2C_Status^(0+128)+24)
  4757     0FEE                     l3933:
  4758                           
  4759                           ;mcc_generated_files/i2c_master.c: 270:         I2C_Status.bufferFree = 0;
  4760     0FEE  11BC               	bcf	(_I2C_Status^(0+128)+28),3
  4761     0FEF                     l764:
  4762     0FEF  0008               	return
  4763     0FF0                     __end_of_I2C_SetBuffer:
  4764                           
  4765                           	psect	text21
  4766     04C7                     __ptext21:	
  4767 ;; *************** function _I2C_Open *****************
  4768 ;; Defined at:
  4769 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;  address         1    wreg     unsigned char 
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;  address         1    4[COMMON] unsigned char 
  4774 ;;  returnValue     1    5[COMMON] enum E358
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      enum E358
  4777 ;; Registers used:
  4778 ;;		wreg, status,2, status,0, pclath, cstack
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4784 ;;      Params:         0       0       0       0       0       0       0       0
  4785 ;;      Locals:         2       0       0       0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0       0
  4787 ;;      Totals:         2       0       0       0       0       0       0       0
  4788 ;;Total ram usage:        2 bytes
  4789 ;; Hardware stack levels used: 1
  4790 ;; Hardware stack levels required when called: 5
  4791 ;; This function calls:
  4792 ;;		_I2C_MasterClearIrq
  4793 ;;		_I2C_MasterEnableIrq
  4794 ;;		_I2C_MasterOpen
  4795 ;;		_I2C_SetInterruptHandler
  4796 ;; This function is called by:
  4797 ;;		_I2C_WriteNBytes
  4798 ;;		_I2C_ReadNBytes
  4799 ;;		_I2C_Read1ByteRegister
  4800 ;;		_I2C_Read2ByteRegister
  4801 ;;		_I2C_Write1ByteRegister
  4802 ;;		_I2C_Write2ByteRegister
  4803 ;;		_I2C_ReadDataBlock
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807     04C7                     _I2C_Open:	
  4808                           ;psect for function _I2C_Open
  4809                           
  4810                           
  4811                           ;incstack = 0
  4812                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  4813                           ;I2C_Open@address stored from wreg
  4814     04C7  00F4               	movwf	I2C_Open@address
  4815     04C8                     l3893:
  4816                           
  4817                           ;mcc_generated_files/i2c_master.c: 176: i2c_error_t I2C_Open(i2c_address_t address);mcc_
      +                          generated_files/i2c_master.c: 177: {;mcc_generated_files/i2c_master.c: 178:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  4818     04C8  01F5               	clrf	I2C_Open@returnValue
  4819     04C9  0AF5               	incf	I2C_Open@returnValue,f
  4820                           
  4821                           ;mcc_generated_files/i2c_master.c: 180:     if(!I2C_Status.inUse)
  4822     04CA  0021               	movlb	1	; select bank1
  4823     04CB  193C               	btfsc	(_I2C_Status^(0+128)+28),2
  4824     04CC  2CCE               	goto	u1741
  4825     04CD  2CCF               	goto	u1740
  4826     04CE                     u1741:
  4827     04CE  2D05               	goto	l3925
  4828     04CF                     u1740:
  4829     04CF                     l3895:
  4830                           
  4831                           ;mcc_generated_files/i2c_master.c: 181:     {;mcc_generated_files/i2c_master.c: 182:    
      +                               I2C_Status.address = address;
  4832     04CF  0874               	movf	I2C_Open@address,w
  4833     04D0  00B6               	movwf	(_I2C_Status^(0+128)+22)
  4834     04D1                     l3897:
  4835                           
  4836                           ;mcc_generated_files/i2c_master.c: 183:         I2C_Status.busy = 0;
  4837     04D1  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  4838     04D2                     l3899:
  4839                           
  4840                           ;mcc_generated_files/i2c_master.c: 184:         I2C_Status.inUse = 1;
  4841     04D2  153C               	bsf	(_I2C_Status^(0+128)+28),2
  4842     04D3                     l3901:
  4843                           
  4844                           ;mcc_generated_files/i2c_master.c: 185:         I2C_Status.addressNackCheck = 0;
  4845     04D3  103C               	bcf	(_I2C_Status^(0+128)+28),0
  4846                           
  4847                           ;mcc_generated_files/i2c_master.c: 186:         I2C_Status.state = I2C_RESET;
  4848     04D4  300E               	movlw	14
  4849     04D5  00BA               	movwf	(_I2C_Status^(0+128)+26)
  4850                           
  4851                           ;mcc_generated_files/i2c_master.c: 187:         I2C_Status.time_out_value = 500;
  4852     04D6  30F4               	movlw	244
  4853     04D7  00B4               	movwf	(_I2C_Status^(0+128)+20)
  4854     04D8  3001               	movlw	1
  4855     04D9  00B5               	movwf	(_I2C_Status^(0+128)+21)
  4856     04DA                     l3903:
  4857                           
  4858                           ;mcc_generated_files/i2c_master.c: 188:         I2C_Status.bufferFree = 1;
  4859     04DA  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  4860                           
  4861                           ;mcc_generated_files/i2c_master.c: 191:         I2C_Status.callbackTable[I2C_DATA_COMPLE
      +                          TE]=I2C_CallbackReturnStop;
  4862     04DB  3000               	movlw	0
  4863     04DC  00A0               	movwf	_I2C_Status^(0+128)
  4864     04DD  3000               	movlw	0
  4865     04DE  00A1               	movwf	(_I2C_Status^(0+128)+1)
  4866     04DF                     l3905:
  4867                           
  4868                           ;mcc_generated_files/i2c_master.c: 192:         I2C_Status.callbackPayload[I2C_DATA_COMP
      +                          LETE] = ((void*)0);
  4869     04DF  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
  4870     04E0                     l3907:
  4871                           
  4872                           ;mcc_generated_files/i2c_master.c: 193:         I2C_Status.callbackTable[I2C_WRITE_COLLI
      +                          SION]=I2C_CallbackReturnStop;
  4873     04E0  3000               	movlw	0
  4874     04E1  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
  4875     04E2  3000               	movlw	0
  4876     04E3  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
  4877                           
  4878                           ;mcc_generated_files/i2c_master.c: 194:         I2C_Status.callbackPayload[I2C_WRITE_COL
      +                          LISION] = ((void*)0);
  4879     04E4  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
  4880     04E5                     l3909:
  4881                           
  4882                           ;mcc_generated_files/i2c_master.c: 195:         I2C_Status.callbackTable[I2C_ADDR_NACK]=
      +                          I2C_CallbackReturnStop;
  4883     04E5  3000               	movlw	0
  4884     04E6  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
  4885     04E7  3000               	movlw	0
  4886     04E8  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
  4887     04E9                     l3911:
  4888                           
  4889                           ;mcc_generated_files/i2c_master.c: 196:         I2C_Status.callbackPayload[I2C_ADDR_NACK
      +                          ] = ((void*)0);
  4890     04E9  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
  4891                           
  4892                           ;mcc_generated_files/i2c_master.c: 197:         I2C_Status.callbackTable[I2C_DATA_NACK]=
      +                          I2C_CallbackReturnStop;
  4893     04EA  3000               	movlw	0
  4894     04EB  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
  4895     04EC  3000               	movlw	0
  4896     04ED  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
  4897     04EE                     l3913:
  4898                           
  4899                           ;mcc_generated_files/i2c_master.c: 198:         I2C_Status.callbackPayload[I2C_DATA_NACK
      +                          ] = ((void*)0);
  4900     04EE  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
  4901     04EF                     l3915:
  4902                           
  4903                           ;mcc_generated_files/i2c_master.c: 199:         I2C_Status.callbackTable[I2C_TIMEOUT]=I2
      +                          C_CallbackReturnReset;
  4904     04EF  3000               	movlw	0
  4905     04F0  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
  4906     04F1  3000               	movlw	0
  4907     04F2  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
  4908                           
  4909                           ;mcc_generated_files/i2c_master.c: 200:         I2C_Status.callbackPayload[I2C_TIMEOUT] 
      +                          = ((void*)0);
  4910     04F3  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
  4911     04F4                     l3917:
  4912                           
  4913                           ;mcc_generated_files/i2c_master.c: 202:         I2C_SetInterruptHandler(I2C_MasterIsr);
  4914     04F4  3000               	movlw	0
  4915     04F5  00F2               	movwf	I2C_SetInterruptHandler@InterruptHandler
  4916     04F6  3000               	movlw	0
  4917     04F7  00F3               	movwf	I2C_SetInterruptHandler@InterruptHandler+1
  4918     04F8  318F  272F  3184   	fcall	_I2C_SetInterruptHandler
  4919     04FB                     l3919:
  4920                           
  4921                           ;mcc_generated_files/i2c_master.c: 203:         I2C_MasterClearIrq();
  4922     04FB  318F  2703  3184   	fcall	_I2C_MasterClearIrq
  4923     04FE                     l3921:
  4924                           
  4925                           ;mcc_generated_files/i2c_master.c: 204:         I2C_MasterOpen();
  4926     04FE  318F  27D5  3184   	fcall	_I2C_MasterOpen
  4927     0501                     l3923:
  4928                           
  4929                           ;mcc_generated_files/i2c_master.c: 205:         I2C_MasterEnableIrq();
  4930     0501  3187  27FD  3184   	fcall	_I2C_MasterEnableIrq
  4931                           
  4932                           ;mcc_generated_files/i2c_master.c: 206:         returnValue = I2C_NOERR;
  4933     0504  01F5               	clrf	I2C_Open@returnValue
  4934     0505                     l3925:
  4935                           
  4936                           ;mcc_generated_files/i2c_master.c: 208:     return returnValue;
  4937     0505  0875               	movf	I2C_Open@returnValue,w
  4938     0506                     l741:
  4939     0506  0008               	return
  4940     0507                     __end_of_I2C_Open:
  4941                           
  4942                           	psect	text22
  4943     0F2F                     __ptext22:	
  4944 ;; *************** function _I2C_SetInterruptHandler *****************
  4945 ;; Defined at:
  4946 ;;		line 299 in file "mcc_generated_files/i2c_master.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  4949 ;;		 -> I2C_MasterIsr(1), 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;		None
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4961 ;;      Params:         2       0       0       0       0       0       0       0
  4962 ;;      Locals:         0       0       0       0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0
  4964 ;;      Totals:         2       0       0       0       0       0       0       0
  4965 ;;Total ram usage:        2 bytes
  4966 ;; Hardware stack levels used: 1
  4967 ;; Hardware stack levels required when called: 4
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_I2C_Open
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975     0F2F                     _I2C_SetInterruptHandler:	
  4976                           ;psect for function _I2C_SetInterruptHandler
  4977                           
  4978     0F2F                     l3847:	
  4979                           ;incstack = 0
  4980                           ; Regs used in _I2C_SetInterruptHandler: [wreg]
  4981                           
  4982                           
  4983                           ;mcc_generated_files/i2c_master.c: 299: void I2C_SetInterruptHandler(void (* InterruptHa
      +                          ndler)(void));mcc_generated_files/i2c_master.c: 300: {;mcc_generated_files/i2c_master.c:
      +                           301:     MSSP_InterruptHandler = InterruptHandler;
  4984     0F2F  0873               	movf	I2C_SetInterruptHandler@InterruptHandler+1,w
  4985     0F30  0020               	movlb	0	; select bank0
  4986     0F31  00E5               	movwf	_MSSP_InterruptHandler+1
  4987     0F32  0872               	movf	I2C_SetInterruptHandler@InterruptHandler,w
  4988     0F33  00E4               	movwf	_MSSP_InterruptHandler
  4989     0F34                     l782:
  4990     0F34  0008               	return
  4991     0F35                     __end_of_I2C_SetInterruptHandler:
  4992                           
  4993                           	psect	text23
  4994     0FD5                     __ptext23:	
  4995 ;; *************** function _I2C_MasterOpen *****************
  4996 ;; Defined at:
  4997 ;;		line 544 in file "mcc_generated_files/i2c_master.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      _Bool 
  5004 ;; Registers used:
  5005 ;;		wreg, status,2
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5011 ;;      Params:         0       0       0       0       0       0       0       0
  5012 ;;      Locals:         0       0       0       0       0       0       0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0
  5014 ;;      Totals:         0       0       0       0       0       0       0       0
  5015 ;;Total ram usage:        0 bytes
  5016 ;; Hardware stack levels used: 1
  5017 ;; Hardware stack levels required when called: 4
  5018 ;; This function calls:
  5019 ;;		Nothing
  5020 ;; This function is called by:
  5021 ;;		_I2C_Open
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025     0FD5                     _I2C_MasterOpen:	
  5026                           ;psect for function _I2C_MasterOpen
  5027                           
  5028     0FD5                     l3851:	
  5029                           ;incstack = 0
  5030                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  5031                           
  5032                           
  5033                           ;mcc_generated_files/i2c_master.c: 546:     if(!SSPCON1bits.SSPEN)
  5034     0FD5  0024               	movlb	4	; select bank4
  5035     0FD6  1A95               	btfsc	21,5	;volatile
  5036     0FD7  2FD9               	goto	u1701
  5037     0FD8  2FDA               	goto	u1700
  5038     0FD9                     u1701:
  5039     0FD9  2FE1               	goto	l906
  5040     0FDA                     u1700:
  5041     0FDA                     l3853:
  5042                           
  5043                           ;mcc_generated_files/i2c_master.c: 547:     {;mcc_generated_files/i2c_master.c: 548:    
      +                               SSPSTAT = 0x00;
  5044     0FDA  0194               	clrf	20	;volatile
  5045     0FDB                     l3855:
  5046                           
  5047                           ;mcc_generated_files/i2c_master.c: 549:         SSPCON1 = 0x08;
  5048     0FDB  3008               	movlw	8
  5049     0FDC  0095               	movwf	21	;volatile
  5050     0FDD                     l3857:
  5051                           
  5052                           ;mcc_generated_files/i2c_master.c: 550:         SSPCON2 = 0x00;
  5053     0FDD  0196               	clrf	22	;volatile
  5054                           
  5055                           ;mcc_generated_files/i2c_master.c: 551:         SSPADD = 0x03;
  5056     0FDE  3003               	movlw	3
  5057     0FDF  0092               	movwf	18	;volatile
  5058     0FE0                     l3859:
  5059                           
  5060                           ;mcc_generated_files/i2c_master.c: 552:         SSPCON1bits.SSPEN = 1;
  5061     0FE0  1695               	bsf	21,5	;volatile
  5062     0FE1                     l906:
  5063     0FE1  0008               	return
  5064     0FE2                     __end_of_I2C_MasterOpen:
  5065                           
  5066                           	psect	text24
  5067     07FD                     __ptext24:	
  5068 ;; *************** function _I2C_MasterEnableIrq *****************
  5069 ;; Defined at:
  5070 ;;		line 627 in file "mcc_generated_files/i2c_master.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;		None
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;		None
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      void 
  5077 ;; Registers used:
  5078 ;;		None
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5084 ;;      Params:         0       0       0       0       0       0       0       0
  5085 ;;      Locals:         0       0       0       0       0       0       0       0
  5086 ;;      Temps:          0       0       0       0       0       0       0       0
  5087 ;;      Totals:         0       0       0       0       0       0       0       0
  5088 ;;Total ram usage:        0 bytes
  5089 ;; Hardware stack levels used: 1
  5090 ;; Hardware stack levels required when called: 4
  5091 ;; This function calls:
  5092 ;;		Nothing
  5093 ;; This function is called by:
  5094 ;;		_I2C_Open
  5095 ;;		_I2C_SetTimeOut
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099     07FD                     _I2C_MasterEnableIrq:	
  5100                           ;psect for function _I2C_MasterEnableIrq
  5101                           
  5102     07FD                     l3863:	
  5103                           ;incstack = 0
  5104                           ; Regs used in _I2C_MasterEnableIrq: []
  5105                           
  5106                           
  5107                           ;mcc_generated_files/i2c_master.c: 629:     PIE1bits.SSPIE = 1;
  5108     07FD  0021               	movlb	1	; select bank1
  5109     07FE  1591               	bsf	17,3	;volatile
  5110     07FF                     l948:
  5111     07FF  0008               	return
  5112     0800                     __end_of_I2C_MasterEnableIrq:
  5113                           
  5114                           	psect	text25
  5115     0F1F                     __ptext25:	
  5116 ;; *************** function _I2C_MasterRead *****************
  5117 ;; Defined at:
  5118 ;;		line 247 in file "mcc_generated_files/i2c_master.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;		None
  5121 ;; Auto vars:     Size  Location     Type
  5122 ;;		None
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  1    wreg      enum E358
  5125 ;; Registers used:
  5126 ;;		wreg, status,2, status,0, pclath, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5132 ;;      Params:         0       0       0       0       0       0       0       0
  5133 ;;      Locals:         0       0       0       0       0       0       0       0
  5134 ;;      Temps:          0       0       0       0       0       0       0       0
  5135 ;;      Totals:         0       0       0       0       0       0       0       0
  5136 ;;Total ram usage:        0 bytes
  5137 ;; Hardware stack levels used: 1
  5138 ;; Hardware stack levels required when called: 6
  5139 ;; This function calls:
  5140 ;;		_I2C_MasterOperation
  5141 ;; This function is called by:
  5142 ;;		_I2C_ReadNBytes
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146     0F1F                     _I2C_MasterRead:	
  5147                           ;psect for function _I2C_MasterRead
  5148                           
  5149     0F1F                     l3959:	
  5150                           ;incstack = 0
  5151                           ; Regs used in _I2C_MasterRead: [wreg+status,2+status,0+pclath+cstack]
  5152                           
  5153                           
  5154                           ;mcc_generated_files/i2c_master.c: 249:     return I2C_MasterOperation(1);;	Return value
      +                           of _I2C_MasterRead is never used
  5155     0F1F  3001               	movlw	1
  5156     0F20  3187  2767  318F   	fcall	_I2C_MasterOperation
  5157     0F23                     l754:
  5158     0F23  0008               	return
  5159     0F24                     __end_of_I2C_MasterRead:
  5160                           
  5161                           	psect	text26
  5162     0767                     __ptext26:	
  5163 ;; *************** function _I2C_MasterOperation *****************
  5164 ;; Defined at:
  5165 ;;		line 226 in file "mcc_generated_files/i2c_master.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  read            1    wreg     _Bool 
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;  read            1    2[COMMON] _Bool 
  5170 ;;  returnValue     1    3[COMMON] enum E358
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      enum E358
  5173 ;; Registers used:
  5174 ;;		wreg, status,2, status,0, pclath, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5180 ;;      Params:         0       0       0       0       0       0       0       0
  5181 ;;      Locals:         2       0       0       0       0       0       0       0
  5182 ;;      Temps:          0       0       0       0       0       0       0       0
  5183 ;;      Totals:         2       0       0       0       0       0       0       0
  5184 ;;Total ram usage:        2 bytes
  5185 ;; Hardware stack levels used: 1
  5186 ;; Hardware stack levels required when called: 5
  5187 ;; This function calls:
  5188 ;;		_I2C_MasterStart
  5189 ;; This function is called by:
  5190 ;;		_I2C_MasterRead
  5191 ;;		_I2C_MasterWrite
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195     0767                     _I2C_MasterOperation:	
  5196                           ;psect for function _I2C_MasterOperation
  5197                           
  5198                           
  5199                           ;incstack = 0
  5200                           ; Regs used in _I2C_MasterOperation: [wreg+status,2+status,0+pclath+cstack]
  5201                           ;I2C_MasterOperation@read stored from wreg
  5202     0767  00F2               	movwf	I2C_MasterOperation@read
  5203     0768                     l3869:
  5204                           
  5205                           ;mcc_generated_files/i2c_master.c: 226: i2c_error_t I2C_MasterOperation(_Bool read);mcc_
      +                          generated_files/i2c_master.c: 227: {;mcc_generated_files/i2c_master.c: 228:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  5206     0768  01F3               	clrf	I2C_MasterOperation@returnValue
  5207     0769  0AF3               	incf	I2C_MasterOperation@returnValue,f
  5208                           
  5209                           ;mcc_generated_files/i2c_master.c: 229:     if(!I2C_Status.busy)
  5210     076A  0021               	movlb	1	; select bank1
  5211     076B  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  5212     076C  2F6E               	goto	u1711
  5213     076D  2F6F               	goto	u1710
  5214     076E                     u1711:
  5215     076E  2F7E               	goto	l3883
  5216     076F                     u1710:
  5217     076F                     l3871:
  5218                           
  5219                           ;mcc_generated_files/i2c_master.c: 230:     {;mcc_generated_files/i2c_master.c: 231:    
      +                               I2C_Status.busy = 1;
  5220     076F  14BC               	bsf	(_I2C_Status^(0+128)+28),1
  5221     0770                     l3873:
  5222                           
  5223                           ;mcc_generated_files/i2c_master.c: 232:         returnValue = I2C_NOERR;
  5224     0770  01F3               	clrf	I2C_MasterOperation@returnValue
  5225     0771                     l3875:
  5226                           
  5227                           ;mcc_generated_files/i2c_master.c: 234:         if(read)
  5228     0771  0872               	movf	I2C_MasterOperation@read,w
  5229     0772  1903               	btfsc	3,2
  5230     0773  2F75               	goto	u1721
  5231     0774  2F76               	goto	u1720
  5232     0775                     u1721:
  5233     0775  2F79               	goto	l3879
  5234     0776                     u1720:
  5235     0776                     l3877:
  5236                           
  5237                           ;mcc_generated_files/i2c_master.c: 235:         {;mcc_generated_files/i2c_master.c: 236:
      +                                       I2C_Status.state = I2C_SEND_ADR_READ;
  5238     0776  01BA               	clrf	(_I2C_Status^(0+128)+26)
  5239     0777  0ABA               	incf	(_I2C_Status^(0+128)+26),f
  5240                           
  5241                           ;mcc_generated_files/i2c_master.c: 237:         }
  5242     0778  2F7B               	goto	l3881
  5243     0779                     l3879:
  5244                           
  5245                           ;mcc_generated_files/i2c_master.c: 239:         {;mcc_generated_files/i2c_master.c: 240:
      +                                       I2C_Status.state = I2C_SEND_ADR_WRITE;
  5246     0779  3002               	movlw	2
  5247     077A  00BA               	movwf	(_I2C_Status^(0+128)+26)
  5248     077B                     l3881:
  5249                           
  5250                           ;mcc_generated_files/i2c_master.c: 242:         I2C_MasterStart();
  5251     077B  318F  270C  3187   	fcall	_I2C_MasterStart
  5252     077E                     l3883:
  5253                           
  5254                           ;mcc_generated_files/i2c_master.c: 244:     return returnValue;
  5255     077E  0873               	movf	I2C_MasterOperation@returnValue,w
  5256     077F                     l751:
  5257     077F  0008               	return
  5258     0780                     __end_of_I2C_MasterOperation:
  5259                           
  5260                           	psect	text27
  5261     0F0C                     __ptext27:	
  5262 ;; *************** function _I2C_MasterStart *****************
  5263 ;; Defined at:
  5264 ;;		line 589 in file "mcc_generated_files/i2c_master.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;		None
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;		None
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		None
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5278 ;;      Params:         0       0       0       0       0       0       0       0
  5279 ;;      Locals:         0       0       0       0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0       0       0
  5281 ;;      Totals:         0       0       0       0       0       0       0       0
  5282 ;;Total ram usage:        0 bytes
  5283 ;; Hardware stack levels used: 1
  5284 ;; Hardware stack levels required when called: 4
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_I2C_MasterOperation
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292     0F0C                     _I2C_MasterStart:	
  5293                           ;psect for function _I2C_MasterStart
  5294                           
  5295     0F0C                     l3809:	
  5296                           ;incstack = 0
  5297                           ; Regs used in _I2C_MasterStart: []
  5298                           
  5299                           
  5300                           ;mcc_generated_files/i2c_master.c: 591:     SSPCON2bits.SEN = 1;
  5301     0F0C  0024               	movlb	4	; select bank4
  5302     0F0D  1416               	bsf	22,0	;volatile
  5303     0F0E                     l927:
  5304     0F0E  0008               	return
  5305     0F0F                     __end_of_I2C_MasterStart:
  5306                           
  5307                           	psect	text28
  5308     07B1                     __ptext28:	
  5309 ;; *************** function _I2C_Close *****************
  5310 ;; Defined at:
  5311 ;;		line 211 in file "mcc_generated_files/i2c_master.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;  returnValue     1    2[COMMON] enum E358
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  1    wreg      enum E358
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5325 ;;      Params:         0       0       0       0       0       0       0       0
  5326 ;;      Locals:         1       0       0       0       0       0       0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0
  5328 ;;      Totals:         1       0       0       0       0       0       0       0
  5329 ;;Total ram usage:        1 bytes
  5330 ;; Hardware stack levels used: 1
  5331 ;; Hardware stack levels required when called: 5
  5332 ;; This function calls:
  5333 ;;		_I2C_MasterClearIrq
  5334 ;;		_I2C_MasterClose
  5335 ;;		_I2C_MasterDisableIrq
  5336 ;; This function is called by:
  5337 ;;		_I2C_WriteNBytes
  5338 ;;		_I2C_ReadNBytes
  5339 ;;		_I2C_Read1ByteRegister
  5340 ;;		_I2C_Read2ByteRegister
  5341 ;;		_I2C_Write1ByteRegister
  5342 ;;		_I2C_Write2ByteRegister
  5343 ;;		_I2C_ReadDataBlock
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347     07B1                     _I2C_Close:	
  5348                           ;psect for function _I2C_Close
  5349                           
  5350     07B1                     l3941:	
  5351                           ;incstack = 0
  5352                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  5353                           
  5354                           
  5355                           ;mcc_generated_files/i2c_master.c: 213:     i2c_error_t returnValue = I2C_BUSY;
  5356     07B1  01F2               	clrf	I2C_Close@returnValue
  5357     07B2  0AF2               	incf	I2C_Close@returnValue,f
  5358                           
  5359                           ;mcc_generated_files/i2c_master.c: 214:     if(!I2C_Status.busy)
  5360     07B3  0021               	movlb	1	; select bank1
  5361     07B4  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  5362     07B5  2FB7               	goto	u1761
  5363     07B6  2FB8               	goto	u1760
  5364     07B7                     u1761:
  5365     07B7  2FC7               	goto	l3955
  5366     07B8                     u1760:
  5367     07B8                     l3943:
  5368                           
  5369                           ;mcc_generated_files/i2c_master.c: 215:     {;mcc_generated_files/i2c_master.c: 216:    
      +                               I2C_Status.inUse = 0;
  5370     07B8  113C               	bcf	(_I2C_Status^(0+128)+28),2
  5371     07B9                     l3945:
  5372                           
  5373                           ;mcc_generated_files/i2c_master.c: 217:         I2C_Status.address = 0xff;
  5374     07B9  30FF               	movlw	255
  5375     07BA  00B6               	movwf	(_I2C_Status^(0+128)+22)
  5376     07BB                     l3947:
  5377                           
  5378                           ;mcc_generated_files/i2c_master.c: 218:         I2C_MasterClearIrq();
  5379     07BB  318F  2703  3187   	fcall	_I2C_MasterClearIrq
  5380     07BE                     l3949:
  5381                           
  5382                           ;mcc_generated_files/i2c_master.c: 219:         I2C_MasterDisableIrq();
  5383     07BE  318F  2709  3187   	fcall	_I2C_MasterDisableIrq
  5384     07C1                     l3951:
  5385                           
  5386                           ;mcc_generated_files/i2c_master.c: 220:         I2C_MasterClose();
  5387     07C1  318F  2706  3187   	fcall	_I2C_MasterClose
  5388     07C4                     l3953:
  5389                           
  5390                           ;mcc_generated_files/i2c_master.c: 221:         returnValue = I2C_Status.error;
  5391     07C4  0021               	movlb	1	; select bank1
  5392     07C5  083B               	movf	(_I2C_Status^(0+128)+27),w
  5393     07C6  00F2               	movwf	I2C_Close@returnValue
  5394     07C7                     l3955:
  5395                           
  5396                           ;mcc_generated_files/i2c_master.c: 223:     return returnValue;
  5397     07C7  0872               	movf	I2C_Close@returnValue,w
  5398     07C8                     l745:
  5399     07C8  0008               	return
  5400     07C9                     __end_of_I2C_Close:
  5401                           
  5402                           	psect	text29
  5403     0F09                     __ptext29:	
  5404 ;; *************** function _I2C_MasterDisableIrq *****************
  5405 ;; Defined at:
  5406 ;;		line 637 in file "mcc_generated_files/i2c_master.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;		None
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;		None
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      void 
  5413 ;; Registers used:
  5414 ;;		None
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5420 ;;      Params:         0       0       0       0       0       0       0       0
  5421 ;;      Locals:         0       0       0       0       0       0       0       0
  5422 ;;      Temps:          0       0       0       0       0       0       0       0
  5423 ;;      Totals:         0       0       0       0       0       0       0       0
  5424 ;;Total ram usage:        0 bytes
  5425 ;; Hardware stack levels used: 1
  5426 ;; Hardware stack levels required when called: 4
  5427 ;; This function calls:
  5428 ;;		Nothing
  5429 ;; This function is called by:
  5430 ;;		_I2C_Close
  5431 ;;		_I2C_SetTimeOut
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435     0F09                     _I2C_MasterDisableIrq:	
  5436                           ;psect for function _I2C_MasterDisableIrq
  5437                           
  5438     0F09                     l3865:	
  5439                           ;incstack = 0
  5440                           ; Regs used in _I2C_MasterDisableIrq: []
  5441                           
  5442                           
  5443                           ;mcc_generated_files/i2c_master.c: 639:     PIE1bits.SSPIE = 0;
  5444     0F09  0021               	movlb	1	; select bank1
  5445     0F0A  1191               	bcf	17,3	;volatile
  5446     0F0B                     l951:
  5447     0F0B  0008               	return
  5448     0F0C                     __end_of_I2C_MasterDisableIrq:
  5449                           
  5450                           	psect	text30
  5451     0F06                     __ptext30:	
  5452 ;; *************** function _I2C_MasterClose *****************
  5453 ;; Defined at:
  5454 ;;		line 558 in file "mcc_generated_files/i2c_master.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;		None
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;		None
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  1    wreg      void 
  5461 ;; Registers used:
  5462 ;;		None
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5468 ;;      Params:         0       0       0       0       0       0       0       0
  5469 ;;      Locals:         0       0       0       0       0       0       0       0
  5470 ;;      Temps:          0       0       0       0       0       0       0       0
  5471 ;;      Totals:         0       0       0       0       0       0       0       0
  5472 ;;Total ram usage:        0 bytes
  5473 ;; Hardware stack levels used: 1
  5474 ;; Hardware stack levels required when called: 4
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_I2C_Close
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482     0F06                     _I2C_MasterClose:	
  5483                           ;psect for function _I2C_MasterClose
  5484                           
  5485     0F06                     l3867:	
  5486                           ;incstack = 0
  5487                           ; Regs used in _I2C_MasterClose: []
  5488                           
  5489                           
  5490                           ;mcc_generated_files/i2c_master.c: 561:     SSPCON1bits.SSPEN = 0;
  5491     0F06  0024               	movlb	4	; select bank4
  5492     0F07  1295               	bcf	21,5	;volatile
  5493     0F08                     l909:
  5494     0F08  0008               	return
  5495     0F09                     __end_of_I2C_MasterClose:
  5496                           
  5497                           	psect	text31
  5498     0F03                     __ptext31:	
  5499 ;; *************** function _I2C_MasterClearIrq *****************
  5500 ;; Defined at:
  5501 ;;		line 642 in file "mcc_generated_files/i2c_master.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;		None
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  1    wreg      void 
  5508 ;; Registers used:
  5509 ;;		None
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5515 ;;      Params:         0       0       0       0       0       0       0       0
  5516 ;;      Locals:         0       0       0       0       0       0       0       0
  5517 ;;      Temps:          0       0       0       0       0       0       0       0
  5518 ;;      Totals:         0       0       0       0       0       0       0       0
  5519 ;;Total ram usage:        0 bytes
  5520 ;; Hardware stack levels used: 1
  5521 ;; Hardware stack levels required when called: 4
  5522 ;; This function calls:
  5523 ;;		Nothing
  5524 ;; This function is called by:
  5525 ;;		_I2C_Open
  5526 ;;		_I2C_Close
  5527 ;;		_I2C_MasterFsm
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531     0F03                     _I2C_MasterClearIrq:	
  5532                           ;psect for function _I2C_MasterClearIrq
  5533                           
  5534     0F03                     l3849:	
  5535                           ;incstack = 0
  5536                           ; Regs used in _I2C_MasterClearIrq: []
  5537                           
  5538                           
  5539                           ;mcc_generated_files/i2c_master.c: 644:     PIR1bits.SSPIF = 0;
  5540     0F03  0020               	movlb	0	; select bank0
  5541     0F04  1191               	bcf	17,3	;volatile
  5542     0F05                     l954:
  5543     0F05  0008               	return
  5544     0F06                     __end_of_I2C_MasterClearIrq:
  5545                           
  5546                           	psect	text32
  5547     07C9                     __ptext32:	
  5548 ;; *************** function _Task_MB *****************
  5549 ;; Defined at:
  5550 ;;		line 255 in file "Mobbus_Slave.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;		None
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5564 ;;      Params:         0       0       0       0       0       0       0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0
  5567 ;;      Totals:         0       0       0       0       0       0       0       0
  5568 ;;Total ram usage:        0 bytes
  5569 ;; Hardware stack levels used: 1
  5570 ;; Hardware stack levels required when called: 9
  5571 ;; This function calls:
  5572 ;;		_ModbusSlave_Init
  5573 ;;		_ModbusSlave_Process
  5574 ;; This function is called by:
  5575 ;;		_App_Process
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579     07C9                     _Task_MB:	
  5580                           ;psect for function _Task_MB
  5581                           
  5582     07C9                     l4187:	
  5583                           ;incstack = 0
  5584                           ; Regs used in _Task_MB: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5585                           
  5586                           
  5587                           ;Mobbus_Slave.c: 256:     static _Bool f_Modbus_Init = 0;;Mobbus_Slave.c: 257:     if (!
      +                          f_Modbus_Init) {
  5588     07C9  0020               	movlb	0	; select bank0
  5589     07CA  0866               	movf	Task_MB@f_Modbus_Init,w
  5590     07CB  1D03               	btfss	3,2
  5591     07CC  2FCE               	goto	u2001
  5592     07CD  2FCF               	goto	u2000
  5593     07CE                     u2001:
  5594     07CE  2FD7               	goto	l4193
  5595     07CF                     u2000:
  5596     07CF                     l4189:
  5597                           
  5598                           ;Mobbus_Slave.c: 258:         ModbusSlave_Init(SW_Ad);
  5599     07CF  086F               	movf	_SW_Ad,w
  5600     07D0  3185  2507  3187   	fcall	_ModbusSlave_Init
  5601     07D3                     l4191:
  5602                           
  5603                           ;Mobbus_Slave.c: 259:         f_Modbus_Init = 1;
  5604     07D3  0020               	movlb	0	; select bank0
  5605     07D4  01E6               	clrf	Task_MB@f_Modbus_Init
  5606     07D5  0AE6               	incf	Task_MB@f_Modbus_Init,f
  5607                           
  5608                           ;Mobbus_Slave.c: 260:     } else {
  5609     07D6  2FDA               	goto	l613
  5610     07D7                     l4193:
  5611                           
  5612                           ;Mobbus_Slave.c: 261:         ModbusSlave_Process();
  5613     07D7  3187  274D  3187   	fcall	_ModbusSlave_Process
  5614     07DA                     l613:
  5615     07DA  0008               	return
  5616     07DB                     __end_of_Task_MB:
  5617                           
  5618                           	psect	text33
  5619     074D                     __ptext33:	
  5620 ;; *************** function _ModbusSlave_Process *****************
  5621 ;; Defined at:
  5622 ;;		line 246 in file "Mobbus_Slave.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;		None
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;  state           1    0        unsigned char 
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      void 
  5629 ;; Registers used:
  5630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5636 ;;      Params:         0       0       0       0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0       0       0       0
  5639 ;;      Totals:         0       0       0       0       0       0       0       0
  5640 ;;Total ram usage:        0 bytes
  5641 ;; Hardware stack levels used: 1
  5642 ;; Hardware stack levels required when called: 8
  5643 ;; This function calls:
  5644 ;;		_ModbusRTU_Slave_Poll
  5645 ;; This function is called by:
  5646 ;;		_Task_MB
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650     074D                     _ModbusSlave_Process:	
  5651                           ;psect for function _ModbusSlave_Process
  5652                           
  5653     074D                     l4161:	
  5654                           ;incstack = 0
  5655                           ; Regs used in _ModbusSlave_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5656                           
  5657     074D                     l4163:
  5658                           
  5659                           ;Mobbus_Slave.c: 249:     MB_Register[0] = SensorAmbient.T.Val16;
  5660     074D  0020               	movlb	0	; select bank0
  5661     074E  085F               	movf	_SensorAmbient+1,w
  5662     074F  0021               	movlb	1	; select bank1
  5663     0750  00D2               	movwf	(_MB_Register+1)^(0+128)
  5664     0751  0020               	movlb	0	; select bank0
  5665     0752  085E               	movf	_SensorAmbient,w
  5666     0753  0021               	movlb	1	; select bank1
  5667     0754  00D1               	movwf	_MB_Register^(0+128)
  5668     0755                     l4165:
  5669                           
  5670                           ;Mobbus_Slave.c: 250:     MB_Register[1] = SensorAmbient.H.Val16;
  5671     0755  0020               	movlb	0	; select bank0
  5672     0756  0861               	movf	_SensorAmbient+3,w
  5673     0757  0021               	movlb	1	; select bank1
  5674     0758  00D4               	movwf	((_MB_Register+1)^(0+128)+2)
  5675     0759  0020               	movlb	0	; select bank0
  5676     075A  0860               	movf	_SensorAmbient+2,w
  5677     075B  0021               	movlb	1	; select bank1
  5678     075C  00D3               	movwf	(_MB_Register^(0+128)+2)
  5679     075D                     l4167:
  5680     075D  3002               	movlw	2
  5681     075E  0020               	movlb	0	; select bank0
  5682     075F  00CC               	movwf	ModbusRTU_Slave_Poll@size
  5683     0760  3000               	movlw	0
  5684     0761  00CD               	movwf	ModbusRTU_Slave_Poll@size+1
  5685     0762  30D1               	movlw	(low (_MB_Register| 0))& (0+255)
  5686     0763  3181  217E  3187   	fcall	_ModbusRTU_Slave_Poll
  5687     0766                     l606:
  5688     0766  0008               	return
  5689     0767                     __end_of_ModbusSlave_Process:
  5690                           
  5691                           	psect	text34
  5692     017E                     __ptext34:	
  5693 ;; *************** function _ModbusRTU_Slave_Poll *****************
  5694 ;; Defined at:
  5695 ;;		line 125 in file "Mobbus_Slave.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;  reg             1    wreg     PTR short 
  5698 ;;		 -> MB_Register(4), 
  5699 ;;  size            2   44[BANK0 ] unsigned short 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  reg             1   54[BANK0 ] PTR short 
  5702 ;;		 -> MB_Register(4), 
  5703 ;;  u8exception     1   57[BANK0 ] unsigned char 
  5704 ;;  i8state         1   56[BANK0 ] unsigned char 
  5705 ;;  u8Current       1   55[BANK0 ] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      unsigned char 
  5708 ;; Registers used:
  5709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5715 ;;      Params:         0       2       0       0       0       0       0       0
  5716 ;;      Locals:         0       4       0       0       0       0       0       0
  5717 ;;      Temps:          0       8       0       0       0       0       0       0
  5718 ;;      Totals:         0      14       0       0       0       0       0       0
  5719 ;;Total ram usage:       14 bytes
  5720 ;; Hardware stack levels used: 1
  5721 ;; Hardware stack levels required when called: 7
  5722 ;; This function calls:
  5723 ;;		_Get_millis
  5724 ;;		_ModbusSlaveF04
  5725 ;;		_Modbus_getRxBuff
  5726 ;;		_Modbus_sendTxBuff
  5727 ;;		_buildException
  5728 ;;		_validateRequest
  5729 ;; This function is called by:
  5730 ;;		_ModbusSlave_Process
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734     017E                     _ModbusRTU_Slave_Poll:	
  5735                           ;psect for function _ModbusRTU_Slave_Poll
  5736                           
  5737                           
  5738                           ;incstack = 0
  5739                           ; Regs used in _ModbusRTU_Slave_Poll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5740                           ;ModbusRTU_Slave_Poll@reg stored from wreg
  5741     017E  0020               	movlb	0	; select bank0
  5742     017F  00D6               	movwf	ModbusRTU_Slave_Poll@reg
  5743     0180                     l4077:
  5744                           
  5745                           ;Mobbus_Slave.c: 127:     SES_Modbus.u8regsize = size;
  5746     0180  30EA               	movlw	234
  5747     0181  0086               	movwf	6
  5748     0182  3021               	movlw	33
  5749     0183  0087               	movwf	7
  5750     0184  084C               	movf	ModbusRTU_Slave_Poll@size,w
  5751     0185  3FC0               	movwi [0]fsr1
  5752     0186  084D               	movf	ModbusRTU_Slave_Poll@size+1,w
  5753     0187  3FC1               	movwi [1]fsr1
  5754     0188                     l4079:
  5755                           
  5756                           ;Mobbus_Slave.c: 128:     uint8_t u8Current;;Mobbus_Slave.c: 130:     u8Current = eusart
      +                          RxCount;
  5757     0188  0869               	movf	_eusartRxCount,w	;volatile
  5758     0189  00D7               	movwf	ModbusRTU_Slave_Poll@u8Current
  5759     018A                     l4081:
  5760                           
  5761                           ;Mobbus_Slave.c: 132:     if (u8Current == 0) return 0;
  5762     018A  0857               	movf	ModbusRTU_Slave_Poll@u8Current,w
  5763     018B  1D03               	btfss	3,2
  5764     018C  298E               	goto	u1891
  5765     018D  298F               	goto	u1890
  5766     018E                     u1891:
  5767     018E  2991               	goto	l4087
  5768     018F                     u1890:
  5769     018F                     l4083:
  5770     018F  3000               	movlw	0
  5771     0190  2A48               	goto	l567
  5772     0191                     l4087:
  5773                           
  5774                           ;Mobbus_Slave.c: 135:     if (u8Current != SES_Modbus.u8lastRec) {
  5775     0191  30D3               	movlw	211
  5776     0192  0086               	movwf	6
  5777     0193  3021               	movlw	33
  5778     0194  0087               	movwf	7
  5779     0195  0801               	movf	1,w
  5780     0196  0657               	xorwf	ModbusRTU_Slave_Poll@u8Current,w
  5781     0197  1903               	skipnz
  5782     0198  299A               	goto	u1901
  5783     0199  299B               	goto	u1900
  5784     019A                     u1901:
  5785     019A  29B1               	goto	l4097
  5786     019B                     u1900:
  5787     019B                     l4089:
  5788                           
  5789                           ;Mobbus_Slave.c: 136:         SES_Modbus.u8lastRec = u8Current;
  5790     019B  30D3               	movlw	211
  5791     019C  0086               	movwf	6
  5792     019D  3021               	movlw	33
  5793     019E  0087               	movwf	7
  5794     019F  0857               	movf	ModbusRTU_Slave_Poll@u8Current,w
  5795     01A0  0081               	movwf	1
  5796     01A1                     l4091:
  5797                           
  5798                           ;Mobbus_Slave.c: 137:         SES_Modbus.u32time = Get_millis();
  5799     01A1  318F  276E  3181   	fcall	_Get_millis
  5800     01A4  30DE               	movlw	222
  5801     01A5  0086               	movwf	6
  5802     01A6  3021               	movlw	33
  5803     01A7  0087               	movwf	7
  5804     01A8  0872               	movf	?_Get_millis,w
  5805     01A9  3FC0               	movwi [0]fsr1
  5806     01AA  0873               	movf	?_Get_millis+1,w
  5807     01AB  3FC1               	movwi [1]fsr1
  5808     01AC  0874               	movf	?_Get_millis+2,w
  5809     01AD  3FC2               	movwi [2]fsr1
  5810     01AE  0875               	movf	?_Get_millis+3,w
  5811     01AF  3FC3               	movwi [3]fsr1
  5812     01B0  298F               	goto	l4083
  5813     01B1                     l4097:
  5814                           
  5815                           ;Mobbus_Slave.c: 140:     if ((unsigned long) (Get_millis() - SES_Modbus.u32time) < (uns
      +                          igned long) 3) return 0;
  5816     01B1  30DE               	movlw	222
  5817     01B2  0086               	movwf	6
  5818     01B3  3021               	movlw	33
  5819     01B4  0087               	movwf	7
  5820     01B5  3F40               	moviw [0]fsr1
  5821     01B6  00CE               	movwf	??_ModbusRTU_Slave_Poll
  5822     01B7  3F41               	moviw [1]fsr1
  5823     01B8  00CF               	movwf	??_ModbusRTU_Slave_Poll+1
  5824     01B9  3F42               	moviw [2]fsr1
  5825     01BA  00D0               	movwf	??_ModbusRTU_Slave_Poll+2
  5826     01BB  3F43               	moviw [3]fsr1
  5827     01BC  00D1               	movwf	??_ModbusRTU_Slave_Poll+3
  5828     01BD  318F  276E  3181   	fcall	_Get_millis
  5829     01C0  0872               	movf	?_Get_millis,w
  5830     01C1  0020               	movlb	0	; select bank0
  5831     01C2  00D2               	movwf	??_ModbusRTU_Slave_Poll+4
  5832     01C3  0873               	movf	?_Get_millis+1,w
  5833     01C4  00D3               	movwf	??_ModbusRTU_Slave_Poll+5
  5834     01C5  0874               	movf	?_Get_millis+2,w
  5835     01C6  00D4               	movwf	??_ModbusRTU_Slave_Poll+6
  5836     01C7  0875               	movf	?_Get_millis+3,w
  5837     01C8  00D5               	movwf	??_ModbusRTU_Slave_Poll+7
  5838     01C9  084E               	movf	??_ModbusRTU_Slave_Poll,w
  5839     01CA  02D2               	subwf	??_ModbusRTU_Slave_Poll+4,f
  5840     01CB  084F               	movf	??_ModbusRTU_Slave_Poll+1,w
  5841     01CC  3BD3               	subwfb	??_ModbusRTU_Slave_Poll+5,f
  5842     01CD  0850               	movf	??_ModbusRTU_Slave_Poll+2,w
  5843     01CE  3BD4               	subwfb	??_ModbusRTU_Slave_Poll+6,f
  5844     01CF  0851               	movf	??_ModbusRTU_Slave_Poll+3,w
  5845     01D0  3BD5               	subwfb	??_ModbusRTU_Slave_Poll+7,f
  5846     01D1  0855               	movf	??_ModbusRTU_Slave_Poll+7,w
  5847     01D2  1D03               	btfss	3,2
  5848     01D3  29DF               	goto	u1911
  5849     01D4  0854               	movf	??_ModbusRTU_Slave_Poll+6,w
  5850     01D5  1D03               	btfss	3,2
  5851     01D6  29DF               	goto	u1911
  5852     01D7  0853               	movf	??_ModbusRTU_Slave_Poll+5,w
  5853     01D8  1D03               	btfss	3,2
  5854     01D9  29DF               	goto	u1911
  5855     01DA  3003               	movlw	3
  5856     01DB  0252               	subwf	??_ModbusRTU_Slave_Poll+4,w
  5857     01DC  1803               	btfsc	3,0
  5858     01DD  29DF               	goto	u1911
  5859     01DE  29E0               	goto	u1910
  5860     01DF                     u1911:
  5861     01DF  29E1               	goto	l4103
  5862     01E0                     u1910:
  5863     01E0  298F               	goto	l4083
  5864     01E1                     l4103:
  5865                           
  5866                           ;Mobbus_Slave.c: 142:     SES_Modbus.u8lastRec = 0;
  5867     01E1  30D3               	movlw	211
  5868     01E2  0086               	movwf	6
  5869     01E3  3021               	movlw	33
  5870     01E4  0087               	movwf	7
  5871     01E5  0181               	clrf	1
  5872     01E6                     l4105:
  5873                           
  5874                           ;Mobbus_Slave.c: 143:     uint8_t i8state = Modbus_getRxBuff();
  5875     01E6  3183  23CF  3181   	fcall	_Modbus_getRxBuff
  5876     01E9  0020               	movlb	0	; select bank0
  5877     01EA  00D8               	movwf	ModbusRTU_Slave_Poll@i8state
  5878     01EB                     l4107:
  5879                           
  5880                           ;Mobbus_Slave.c: 144:     SES_Modbus.u8lastError = i8state;
  5881     01EB  30D7               	movlw	215
  5882     01EC  0086               	movwf	6
  5883     01ED  3020               	movlw	32
  5884     01EE  0087               	movwf	7
  5885     01EF  0858               	movf	ModbusRTU_Slave_Poll@i8state,w
  5886     01F0  0081               	movwf	1
  5887     01F1                     l4109:
  5888                           
  5889                           ;Mobbus_Slave.c: 145:     if (i8state < 7) return i8state;
  5890     01F1  3007               	movlw	7
  5891     01F2  0258               	subwf	ModbusRTU_Slave_Poll@i8state,w
  5892     01F3  1803               	skipnc
  5893     01F4  29F6               	goto	u1921
  5894     01F5  29F7               	goto	u1920
  5895     01F6                     u1921:
  5896     01F6  29FA               	goto	l4115
  5897     01F7                     u1920:
  5898     01F7                     l4111:
  5899     01F7  0020               	movlb	0	; select bank0
  5900     01F8  0858               	movf	ModbusRTU_Slave_Poll@i8state,w
  5901     01F9  2A48               	goto	l567
  5902     01FA                     l4115:
  5903                           
  5904                           ;Mobbus_Slave.c: 148:     if (SES_Modbus.au8Buffer[ ID ] != SES_Modbus.u8id) return 0;
  5905     01FA  30D4               	movlw	212
  5906     01FB  0086               	movwf	6
  5907     01FC  3020               	movlw	32
  5908     01FD  0087               	movwf	7
  5909     01FE  30D4               	movlw	212
  5910     01FF  0084               	movwf	4
  5911     0200  3020               	movlw	32
  5912     0201  0085               	movwf	5
  5913     0202  3104               	addfsr 0,4
  5914     0203  0800               	movf	0,w
  5915     0204  0601               	xorwf	1,w
  5916     0205  1903               	skipnz
  5917     0206  2A08               	goto	u1931
  5918     0207  2A09               	goto	u1930
  5919     0208                     u1931:
  5920     0208  2A0A               	goto	l4121
  5921     0209                     u1930:
  5922     0209  298F               	goto	l4083
  5923     020A                     l4121:
  5924                           
  5925                           ;Mobbus_Slave.c: 151:     uint8_t u8exception = validateRequest();
  5926     020A  3182  22EB  3181   	fcall	_validateRequest
  5927     020D  0020               	movlb	0	; select bank0
  5928     020E  00D9               	movwf	ModbusRTU_Slave_Poll@u8exception
  5929     020F                     l4123:
  5930                           
  5931                           ;Mobbus_Slave.c: 152:     if (u8exception > 0) {
  5932     020F  0859               	movf	ModbusRTU_Slave_Poll@u8exception,w
  5933     0210  1903               	btfsc	3,2
  5934     0211  2A13               	goto	u1941
  5935     0212  2A14               	goto	u1940
  5936     0213                     u1941:
  5937     0213  2A29               	goto	l4135
  5938     0214                     u1940:
  5939     0214                     l4125:
  5940                           
  5941                           ;Mobbus_Slave.c: 153:         if (u8exception != NO_REPLY) {
  5942     0214  0A59               	incf	ModbusRTU_Slave_Poll@u8exception,w
  5943     0215  1903               	btfsc	3,2
  5944     0216  2A18               	goto	u1951
  5945     0217  2A19               	goto	u1950
  5946     0218                     u1951:
  5947     0218  2A20               	goto	l4129
  5948     0219                     u1950:
  5949     0219                     l4127:
  5950                           
  5951                           ;Mobbus_Slave.c: 154:             buildException(u8exception);
  5952     0219  0859               	movf	ModbusRTU_Slave_Poll@u8exception,w
  5953     021A  3185  25E5  3181   	fcall	_buildException
  5954                           
  5955                           ;Mobbus_Slave.c: 155:             Modbus_sendTxBuff();
  5956     021D  3180  209C  3181   	fcall	_Modbus_sendTxBuff
  5957     0220                     l4129:
  5958                           
  5959                           ;Mobbus_Slave.c: 157:         SES_Modbus.u8lastError = u8exception;
  5960     0220  30D7               	movlw	215
  5961     0221  0086               	movwf	6
  5962     0222  3020               	movlw	32
  5963     0223  0087               	movwf	7
  5964     0224  0020               	movlb	0	; select bank0
  5965     0225  0859               	movf	ModbusRTU_Slave_Poll@u8exception,w
  5966     0226  0081               	movwf	1
  5967     0227                     l4131:
  5968                           
  5969                           ;Mobbus_Slave.c: 158:         return u8exception;
  5970     0227  0859               	movf	ModbusRTU_Slave_Poll@u8exception,w
  5971     0228  2A48               	goto	l567
  5972     0229                     l4135:
  5973                           
  5974                           ;Mobbus_Slave.c: 161:     SES_Modbus.u32timeOut = Get_millis();
  5975     0229  318F  276E  3181   	fcall	_Get_millis
  5976     022C  30E2               	movlw	226
  5977     022D  0086               	movwf	6
  5978     022E  3021               	movlw	33
  5979     022F  0087               	movwf	7
  5980     0230  0872               	movf	?_Get_millis,w
  5981     0231  3FC0               	movwi [0]fsr1
  5982     0232  0873               	movf	?_Get_millis+1,w
  5983     0233  3FC1               	movwi [1]fsr1
  5984     0234  0874               	movf	?_Get_millis+2,w
  5985     0235  3FC2               	movwi [2]fsr1
  5986     0236  0875               	movf	?_Get_millis+3,w
  5987     0237  3FC3               	movwi [3]fsr1
  5988     0238                     l4137:
  5989                           
  5990                           ;Mobbus_Slave.c: 162:     SES_Modbus.u8lastError = 0;
  5991     0238  30D4               	movlw	212
  5992     0239  0086               	movwf	6
  5993     023A  3020               	movlw	32
  5994     023B  0087               	movwf	7
  5995     023C  3143               	addfsr 1,3
  5996     023D  0181               	clrf	1
  5997     023E                     l4139:
  5998                           
  5999                           ;Mobbus_Slave.c: 164:     ModbusSlaveF04(reg, size);
  6000     023E  0020               	movlb	0	; select bank0
  6001     023F  084D               	movf	ModbusRTU_Slave_Poll@size+1,w
  6002     0240  00F9               	movwf	ModbusSlaveF04@size+1
  6003     0241  084C               	movf	ModbusRTU_Slave_Poll@size,w
  6004     0242  00F8               	movwf	ModbusSlaveF04@size
  6005     0243  0856               	movf	ModbusRTU_Slave_Poll@reg,w
  6006     0244  3182  2249  3181   	fcall	_ModbusSlaveF04
  6007     0247  29F7               	goto	l4111
  6008     0248                     l567:
  6009     0248  0008               	return
  6010     0249                     __end_of_ModbusRTU_Slave_Poll:
  6011                           
  6012                           	psect	text35
  6013     02EB                     __ptext35:	
  6014 ;; *************** function _validateRequest *****************
  6015 ;; Defined at:
  6016 ;;		line 98 in file "Mobbus_Slave.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;		None
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  u16MsgCRC       2   22[BANK0 ] unsigned short 
  6021 ;;  i               1   25[BANK0 ] unsigned char 
  6022 ;;  isSupported     1   24[BANK0 ] _Bool 
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  1    wreg      unsigned char 
  6025 ;; Registers used:
  6026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6032 ;;      Params:         0       0       0       0       0       0       0       0
  6033 ;;      Locals:         0       4       0       0       0       0       0       0
  6034 ;;      Temps:          0      13       0       0       0       0       0       0
  6035 ;;      Totals:         0      17       0       0       0       0       0       0
  6036 ;;Total ram usage:       17 bytes
  6037 ;; Hardware stack levels used: 1
  6038 ;; Hardware stack levels required when called: 5
  6039 ;; This function calls:
  6040 ;;		_Modbus_calcCRC
  6041 ;; This function is called by:
  6042 ;;		_ModbusRTU_Slave_Poll
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046     02EB                     _validateRequest:	
  6047                           ;psect for function _validateRequest
  6048                           
  6049     02EB                     l4021:	
  6050                           ;incstack = 0
  6051                           ; Regs used in _validateRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6052                           
  6053                           
  6054                           ;Mobbus_Slave.c: 100:     uint16_t u16MsgCRC =
  6055     02EB  30D2               	movlw	210
  6056     02EC  0086               	movwf	6
  6057     02ED  3021               	movlw	33
  6058     02EE  0087               	movwf	7
  6059     02EF  0801               	movf	1,w
  6060     02F0  0020               	movlb	0	; select bank0
  6061     02F1  00A9               	movwf	??_validateRequest
  6062     02F2  01AA               	clrf	??_validateRequest+1
  6063     02F3  30D7               	movlw	215
  6064     02F4  00AB               	movwf	??_validateRequest+2
  6065     02F5  3020               	movlw	32
  6066     02F6  00AC               	movwf	??_validateRequest+3
  6067     02F7  0829               	movf	??_validateRequest,w
  6068     02F8  072B               	addwf	??_validateRequest+2,w
  6069     02F9  0086               	movwf	6
  6070     02FA  082A               	movf	??_validateRequest+1,w
  6071     02FB  3D2C               	addwfc	??_validateRequest+3,w
  6072     02FC  0087               	movwf	7
  6073     02FD  0801               	movf	1,w
  6074     02FE  00AD               	movwf	??_validateRequest+4
  6075     02FF  01AE               	clrf	??_validateRequest+5
  6076     0300  30D2               	movlw	210
  6077     0301  0086               	movwf	6
  6078     0302  3021               	movlw	33
  6079     0303  0087               	movwf	7
  6080     0304  0801               	movf	1,w
  6081     0305  00AF               	movwf	??_validateRequest+6
  6082     0306  01B0               	clrf	??_validateRequest+7
  6083     0307  30D6               	movlw	214
  6084     0308  00B1               	movwf	??_validateRequest+8
  6085     0309  3020               	movlw	32
  6086     030A  00B2               	movwf	??_validateRequest+9
  6087     030B  082F               	movf	??_validateRequest+6,w
  6088     030C  0731               	addwf	??_validateRequest+8,w
  6089     030D  0086               	movwf	6
  6090     030E  0830               	movf	??_validateRequest+7,w
  6091     030F  3D32               	addwfc	??_validateRequest+9,w
  6092     0310  0087               	movwf	7
  6093     0311  0801               	movf	1,w
  6094     0312  00B3               	movwf	??_validateRequest+10
  6095     0313  01B4               	clrf	??_validateRequest+11
  6096     0314  0833               	movf	??_validateRequest+10,w
  6097     0315  00B4               	movwf	??_validateRequest+11
  6098     0316  01B3               	clrf	??_validateRequest+10
  6099     0317  082D               	movf	??_validateRequest+4,w
  6100     0318  0433               	iorwf	??_validateRequest+10,w
  6101     0319  00B6               	movwf	validateRequest@u16MsgCRC
  6102     031A  082E               	movf	??_validateRequest+5,w
  6103     031B  0434               	iorwf	??_validateRequest+11,w
  6104     031C  00B7               	movwf	validateRequest@u16MsgCRC+1
  6105     031D                     l4023:
  6106                           
  6107                           ;Mobbus_Slave.c: 103:     if (Modbus_calcCRC(SES_Modbus.u8BufferSize - 2) != u16MsgCRC) 
      +                          {
  6108     031D  30D2               	movlw	210
  6109     031E  0086               	movwf	6
  6110     031F  3021               	movlw	33
  6111     0320  0087               	movwf	7
  6112     0321  0801               	movf	1,w
  6113     0322  3EFE               	addlw	254
  6114     0323  3183  2370  3182   	fcall	_Modbus_calcCRC
  6115     0326  0020               	movlb	0	; select bank0
  6116     0327  0837               	movf	validateRequest@u16MsgCRC+1,w
  6117     0328  0673               	xorwf	?_Modbus_calcCRC+1,w
  6118     0329  1D03               	skipz
  6119     032A  2B2D               	goto	u1815
  6120     032B  0836               	movf	validateRequest@u16MsgCRC,w
  6121     032C  0672               	xorwf	?_Modbus_calcCRC,w
  6122     032D                     u1815:
  6123     032D  1903               	skipnz
  6124     032E  2B30               	goto	u1811
  6125     032F  2B31               	goto	u1810
  6126     0330                     u1811:
  6127     0330  2B3C               	goto	l4031
  6128     0331                     u1810:
  6129     0331                     l4025:
  6130                           
  6131                           ;Mobbus_Slave.c: 104:         SES_Modbus.u16errCnt++;
  6132     0331  30DA               	movlw	218
  6133     0332  0086               	movwf	6
  6134     0333  3021               	movlw	33
  6135     0334  0087               	movwf	7
  6136     0335  3001               	movlw	1
  6137     0336  0781               	addwf	1,f
  6138     0337  3141               	addfsr 1,1
  6139     0338  1803               	skipnc
  6140     0339  0A81               	incf	1,f
  6141     033A                     l4027:
  6142                           
  6143                           ;Mobbus_Slave.c: 105:         return NO_REPLY;
  6144     033A  30FF               	movlw	255
  6145     033B  2B6F               	goto	l559
  6146     033C                     l4031:
  6147                           
  6148                           ;Mobbus_Slave.c: 109:     _Bool isSupported = 0;
  6149     033C  01B8               	clrf	validateRequest@isSupported
  6150                           
  6151                           ;Mobbus_Slave.c: 110:     uint8_t i = 0;
  6152     033D  01B9               	clrf	validateRequest@i
  6153                           
  6154                           ;Mobbus_Slave.c: 111:     for (i = 0; i< sizeof ( fctsupported); i++) {
  6155     033E  01B9               	clrf	validateRequest@i
  6156     033F                     l4037:
  6157                           
  6158                           ;Mobbus_Slave.c: 112:         if (fctsupported[i] == SES_Modbus.au8Buffer[FUNC]) {
  6159     033F  30D4               	movlw	212
  6160     0340  0086               	movwf	6
  6161     0341  3020               	movlw	32
  6162     0342  0087               	movwf	7
  6163     0343  3145               	addfsr 1,5
  6164     0344  0839               	movf	validateRequest@i,w
  6165     0345  3E00               	addlw	low (_fctsupported| (0+32768))
  6166     0346  0084               	movwf	4
  6167     0347  3090               	movlw	high (_fctsupported| (0+32768))
  6168     0348  1803               	skipnc
  6169     0349  3E01               	addlw	1
  6170     034A  0085               	movwf	5
  6171     034B  0800               	movf	0,w	;code access
  6172     034C  0601               	xorwf	1,w
  6173     034D  1D03               	skipz
  6174     034E  2B50               	goto	u1821
  6175     034F  2B51               	goto	u1820
  6176     0350                     u1821:
  6177     0350  2B54               	goto	l4041
  6178     0351                     u1820:
  6179     0351                     l4039:
  6180                           
  6181                           ;Mobbus_Slave.c: 113:             isSupported = 1;
  6182     0351  01B8               	clrf	validateRequest@isSupported
  6183     0352  0AB8               	incf	validateRequest@isSupported,f
  6184                           
  6185                           ;Mobbus_Slave.c: 114:             break;
  6186     0353  2B5E               	goto	l4045
  6187     0354                     l4041:
  6188                           
  6189                           ;Mobbus_Slave.c: 116:     }
  6190     0354  3001               	movlw	1
  6191     0355  00A9               	movwf	??_validateRequest
  6192     0356  0829               	movf	??_validateRequest,w
  6193     0357  07B9               	addwf	validateRequest@i,f
  6194     0358                     l4043:
  6195     0358  3008               	movlw	8
  6196     0359  0239               	subwf	validateRequest@i,w
  6197     035A  1C03               	skipc
  6198     035B  2B5D               	goto	u1831
  6199     035C  2B5E               	goto	u1830
  6200     035D                     u1831:
  6201     035D  2B3F               	goto	l4037
  6202     035E                     u1830:
  6203     035E                     l4045:
  6204                           
  6205                           ;Mobbus_Slave.c: 117:     if (!isSupported) {
  6206     035E  0838               	movf	validateRequest@isSupported,w
  6207     035F  1D03               	btfss	3,2
  6208     0360  2B62               	goto	u1841
  6209     0361  2B63               	goto	u1840
  6210     0362                     u1841:
  6211     0362  2B6E               	goto	l4053
  6212     0363                     u1840:
  6213     0363                     l4047:
  6214                           
  6215                           ;Mobbus_Slave.c: 118:         SES_Modbus.u16errCnt++;
  6216     0363  30DA               	movlw	218
  6217     0364  0086               	movwf	6
  6218     0365  3021               	movlw	33
  6219     0366  0087               	movwf	7
  6220     0367  3001               	movlw	1
  6221     0368  0781               	addwf	1,f
  6222     0369  3141               	addfsr 1,1
  6223     036A  1803               	skipnc
  6224     036B  0A81               	incf	1,f
  6225     036C                     l4049:
  6226                           
  6227                           ;Mobbus_Slave.c: 119:         return EXC_FUNC_CODE;
  6228     036C  3001               	movlw	1
  6229     036D  2B6F               	goto	l559
  6230     036E                     l4053:
  6231                           
  6232                           ;Mobbus_Slave.c: 122:     return 0;
  6233     036E  3000               	movlw	0
  6234     036F                     l559:
  6235     036F  0008               	return
  6236     0370                     __end_of_validateRequest:
  6237                           
  6238                           	psect	text36
  6239     05E5                     __ptext36:	
  6240 ;; *************** function _buildException *****************
  6241 ;; Defined at:
  6242 ;;		line 64 in file "Mobbus_Slave.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  exception       1    wreg     unsigned char 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  exception       1    3[COMMON] unsigned char 
  6247 ;;  u8func          1    4[COMMON] unsigned char 
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  1    wreg      void 
  6250 ;; Registers used:
  6251 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6257 ;;      Params:         0       0       0       0       0       0       0       0
  6258 ;;      Locals:         2       0       0       0       0       0       0       0
  6259 ;;      Temps:          1       0       0       0       0       0       0       0
  6260 ;;      Totals:         3       0       0       0       0       0       0       0
  6261 ;;Total ram usage:        3 bytes
  6262 ;; Hardware stack levels used: 1
  6263 ;; Hardware stack levels required when called: 4
  6264 ;; This function calls:
  6265 ;;		Nothing
  6266 ;; This function is called by:
  6267 ;;		_ModbusRTU_Slave_Poll
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271     05E5                     _buildException:	
  6272                           ;psect for function _buildException
  6273                           
  6274                           
  6275                           ;incstack = 0
  6276                           ; Regs used in _buildException: [wreg+fsr1l+fsr1h+status,2+status,0]
  6277                           ;buildException@exception stored from wreg
  6278     05E5  00F3               	movwf	buildException@exception
  6279     05E6                     l2957:
  6280                           
  6281                           ;Mobbus_Slave.c: 66:     uint8_t u8func = SES_Modbus.au8Buffer[ FUNC ];
  6282     05E6  30D4               	movlw	212
  6283     05E7  0086               	movwf	6
  6284     05E8  3020               	movlw	32
  6285     05E9  0087               	movwf	7
  6286     05EA  3145               	addfsr 1,5
  6287     05EB  0801               	movf	1,w
  6288     05EC  00F4               	movwf	buildException@u8func
  6289                           
  6290                           ;Mobbus_Slave.c: 68:     SES_Modbus.au8Buffer[ ID ] = SES_Modbus.u8id;
  6291     05ED  30D4               	movlw	212
  6292     05EE  0086               	movwf	6
  6293     05EF  3020               	movlw	32
  6294     05F0  0087               	movwf	7
  6295     05F1  0801               	movf	1,w
  6296     05F2  00F2               	movwf	??_buildException
  6297     05F3  30D8               	movlw	216
  6298     05F4  0086               	movwf	6
  6299     05F5  3020               	movlw	32
  6300     05F6  0087               	movwf	7
  6301     05F7  0872               	movf	??_buildException,w
  6302     05F8  0081               	movwf	1
  6303     05F9                     l2959:
  6304                           
  6305                           ;Mobbus_Slave.c: 69:     SES_Modbus.au8Buffer[ FUNC ] = u8func + 0x80;
  6306     05F9  0874               	movf	buildException@u8func,w
  6307     05FA  3E80               	addlw	128
  6308     05FB  00F2               	movwf	??_buildException
  6309     05FC  30D9               	movlw	217
  6310     05FD  0086               	movwf	6
  6311     05FE  3020               	movlw	32
  6312     05FF  0087               	movwf	7
  6313     0600  0872               	movf	??_buildException,w
  6314     0601  0081               	movwf	1
  6315     0602                     l2961:
  6316                           
  6317                           ;Mobbus_Slave.c: 70:     SES_Modbus.au8Buffer[ 2 ] = exception;
  6318     0602  30DA               	movlw	218
  6319     0603  0086               	movwf	6
  6320     0604  3020               	movlw	32
  6321     0605  0087               	movwf	7
  6322     0606  0873               	movf	buildException@exception,w
  6323     0607  0081               	movwf	1
  6324     0608                     l2963:
  6325                           
  6326                           ;Mobbus_Slave.c: 71:     SES_Modbus.u8BufferSize = EXCEPTION_SIZE;
  6327     0608  30D2               	movlw	210
  6328     0609  0086               	movwf	6
  6329     060A  3021               	movlw	33
  6330     060B  0087               	movwf	7
  6331     060C  3003               	movlw	3
  6332     060D  0081               	movwf	1
  6333     060E                     l546:
  6334     060E  0008               	return
  6335     060F                     __end_of_buildException:
  6336                           
  6337                           	psect	text37
  6338     03CF                     __ptext37:	
  6339 ;; *************** function _Modbus_getRxBuff *****************
  6340 ;; Defined at:
  6341 ;;		line 74 in file "Mobbus_Slave.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;		None
  6344 ;; Auto vars:     Size  Location     Type
  6345 ;;  bBuffOverflo    1    4[COMMON] _Bool 
  6346 ;; Return value:  Size  Location     Type
  6347 ;;                  1    wreg      unsigned char 
  6348 ;; Registers used:
  6349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6355 ;;      Params:         0       0       0       0       0       0       0       0
  6356 ;;      Locals:         1       0       0       0       0       0       0       0
  6357 ;;      Temps:          0       7       0       0       0       0       0       0
  6358 ;;      Totals:         1       7       0       0       0       0       0       0
  6359 ;;Total ram usage:        8 bytes
  6360 ;; Hardware stack levels used: 1
  6361 ;; Hardware stack levels required when called: 5
  6362 ;; This function calls:
  6363 ;;		_EUSART_Read
  6364 ;; This function is called by:
  6365 ;;		_ModbusRTU_Slave_Poll
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369     03CF                     _Modbus_getRxBuff:	
  6370                           ;psect for function _Modbus_getRxBuff
  6371                           
  6372     03CF                     l3991:	
  6373                           ;incstack = 0
  6374                           ; Regs used in _Modbus_getRxBuff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6375                           
  6376                           
  6377                           ;Mobbus_Slave.c: 75:     _Bool bBuffOverflow = 0;
  6378     03CF  01F4               	clrf	Modbus_getRxBuff@bBuffOverflow
  6379     03D0                     l3995:
  6380                           
  6381                           ;Mobbus_Slave.c: 81:     SES_Modbus.u8BufferSize = 0;
  6382     03D0  30D2               	movlw	210
  6383     03D1  0086               	movwf	6
  6384     03D2  3021               	movlw	33
  6385     03D3  0087               	movwf	7
  6386     03D4  0181               	clrf	1
  6387                           
  6388                           ;Mobbus_Slave.c: 82:     while (eusartRxCount) {
  6389     03D5  2C06               	goto	l4005
  6390     03D6                     l3997:
  6391                           
  6392                           ;Mobbus_Slave.c: 83:         SES_Modbus.au8Buffer [SES_Modbus.u8BufferSize] = EUSART_Rea
      +                          d();
  6393     03D6  3186  2661  3183   	fcall	_EUSART_Read
  6394     03D9  0020               	movlb	0	; select bank0
  6395     03DA  00A0               	movwf	??_Modbus_getRxBuff
  6396     03DB  30D2               	movlw	210
  6397     03DC  0086               	movwf	6
  6398     03DD  3021               	movlw	33
  6399     03DE  0087               	movwf	7
  6400     03DF  0801               	movf	1,w
  6401     03E0  00A1               	movwf	??_Modbus_getRxBuff+1
  6402     03E1  01A2               	clrf	??_Modbus_getRxBuff+2
  6403     03E2  30D8               	movlw	216
  6404     03E3  00A3               	movwf	??_Modbus_getRxBuff+3
  6405     03E4  3020               	movlw	32
  6406     03E5  00A4               	movwf	??_Modbus_getRxBuff+4
  6407     03E6  0821               	movf	??_Modbus_getRxBuff+1,w
  6408     03E7  0723               	addwf	??_Modbus_getRxBuff+3,w
  6409     03E8  00A5               	movwf	??_Modbus_getRxBuff+5
  6410     03E9  0822               	movf	??_Modbus_getRxBuff+2,w
  6411     03EA  3D24               	addwfc	??_Modbus_getRxBuff+4,w
  6412     03EB  00A6               	movwf	??_Modbus_getRxBuff+6
  6413     03EC  0825               	movf	??_Modbus_getRxBuff+5,w
  6414     03ED  0086               	movwf	6
  6415     03EE  0826               	movf	??_Modbus_getRxBuff+6,w
  6416     03EF  0087               	movwf	7
  6417     03F0  0820               	movf	??_Modbus_getRxBuff,w
  6418     03F1  0081               	movwf	1
  6419     03F2                     l3999:
  6420                           
  6421                           ;Mobbus_Slave.c: 84:         SES_Modbus.u8BufferSize++;
  6422     03F2  3001               	movlw	1
  6423     03F3  00A0               	movwf	??_Modbus_getRxBuff
  6424     03F4  30D2               	movlw	210
  6425     03F5  0086               	movwf	6
  6426     03F6  3021               	movlw	33
  6427     03F7  0087               	movwf	7
  6428     03F8  0820               	movf	??_Modbus_getRxBuff,w
  6429     03F9  0781               	addwf	1,f
  6430     03FA                     l4001:
  6431                           
  6432                           ;Mobbus_Slave.c: 86:         if (SES_Modbus.u8BufferSize >= 250) bBuffOverflow = 1;
  6433     03FA  30D2               	movlw	210
  6434     03FB  0086               	movwf	6
  6435     03FC  3021               	movlw	33
  6436     03FD  0087               	movwf	7
  6437     03FE  30FA               	movlw	250
  6438     03FF  0201               	subwf	1,w
  6439     0400  1C03               	skipc
  6440     0401  2C03               	goto	u1781
  6441     0402  2C04               	goto	u1780
  6442     0403                     u1781:
  6443     0403  2C06               	goto	l4005
  6444     0404                     u1780:
  6445     0404                     l4003:
  6446     0404  01F4               	clrf	Modbus_getRxBuff@bBuffOverflow
  6447     0405  0AF4               	incf	Modbus_getRxBuff@bBuffOverflow,f
  6448     0406                     l4005:
  6449                           
  6450                           ;Mobbus_Slave.c: 82:     while (eusartRxCount) {
  6451     0406  0020               	movlb	0	; select bank0
  6452     0407  0869               	movf	_eusartRxCount,w	;volatile
  6453     0408  1D03               	btfss	3,2
  6454     0409  2C0B               	goto	u1791
  6455     040A  2C0C               	goto	u1790
  6456     040B                     u1791:
  6457     040B  2BD6               	goto	l3997
  6458     040C                     u1790:
  6459     040C                     l4007:
  6460                           
  6461                           ;Mobbus_Slave.c: 88:     SES_Modbus.u16InCnt++;
  6462     040C  30D6               	movlw	214
  6463     040D  0086               	movwf	6
  6464     040E  3021               	movlw	33
  6465     040F  0087               	movwf	7
  6466     0410  3001               	movlw	1
  6467     0411  0781               	addwf	1,f
  6468     0412  3141               	addfsr 1,1
  6469     0413  1803               	skipnc
  6470     0414  0A81               	incf	1,f
  6471     0415                     l4009:
  6472                           
  6473                           ;Mobbus_Slave.c: 90:     if (bBuffOverflow) {
  6474     0415  0874               	movf	Modbus_getRxBuff@bBuffOverflow,w
  6475     0416  1903               	btfsc	3,2
  6476     0417  2C19               	goto	u1801
  6477     0418  2C1A               	goto	u1800
  6478     0419                     u1801:
  6479     0419  2C25               	goto	l4017
  6480     041A                     u1800:
  6481     041A                     l4011:
  6482                           
  6483                           ;Mobbus_Slave.c: 91:         SES_Modbus.u16errCnt++;
  6484     041A  30DA               	movlw	218
  6485     041B  0086               	movwf	6
  6486     041C  3021               	movlw	33
  6487     041D  0087               	movwf	7
  6488     041E  3001               	movlw	1
  6489     041F  0781               	addwf	1,f
  6490     0420  3141               	addfsr 1,1
  6491     0421  1803               	skipnc
  6492     0422  0A81               	incf	1,f
  6493     0423                     l4013:
  6494                           
  6495                           ;Mobbus_Slave.c: 92:         return (uint8_t)ERR_BUFF_OVERFLOW;
  6496     0423  30FD               	movlw	253
  6497     0424  2C2A               	goto	l555
  6498     0425                     l4017:
  6499                           
  6500                           ;Mobbus_Slave.c: 95:     return SES_Modbus.u8BufferSize;
  6501     0425  30D2               	movlw	210
  6502     0426  0086               	movwf	6
  6503     0427  3021               	movlw	33
  6504     0428  0087               	movwf	7
  6505     0429  0801               	movf	1,w
  6506     042A                     l555:
  6507     042A  0008               	return
  6508     042B                     __end_of_Modbus_getRxBuff:
  6509                           
  6510                           	psect	text38
  6511     0661                     __ptext38:	
  6512 ;; *************** function _EUSART_Read *****************
  6513 ;; Defined at:
  6514 ;;		line 151 in file "mcc_generated_files/eusart.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  readValue       1    3[COMMON] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      unsigned char 
  6521 ;; Registers used:
  6522 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6528 ;;      Params:         0       0       0       0       0       0       0       0
  6529 ;;      Locals:         1       0       0       0       0       0       0       0
  6530 ;;      Temps:          1       0       0       0       0       0       0       0
  6531 ;;      Totals:         2       0       0       0       0       0       0       0
  6532 ;;Total ram usage:        2 bytes
  6533 ;; Hardware stack levels used: 1
  6534 ;; Hardware stack levels required when called: 4
  6535 ;; This function calls:
  6536 ;;		Nothing
  6537 ;; This function is called by:
  6538 ;;		_Modbus_getRxBuff
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542     0661                     _EUSART_Read:	
  6543                           ;psect for function _EUSART_Read
  6544                           
  6545     0661                     l2755:	
  6546                           ;incstack = 0
  6547                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6548                           
  6549     0661                     l2757:	
  6550                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  6551                           
  6552                           
  6553                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  6554     0661  0020               	movlb	0	; select bank0
  6555     0662  0869               	movf	_eusartRxCount,w	;volatile
  6556     0663  1903               	btfsc	3,2
  6557     0664  2E66               	goto	u881
  6558     0665  2E67               	goto	u880
  6559     0666                     u881:
  6560     0666  2E61               	goto	l2757
  6561     0667                     u880:
  6562     0667                     l2759:
  6563                           
  6564                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  6565     0667  087A               	movf	_eusartRxTail,w	;volatile
  6566     0668  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  6567     0669  0086               	movwf	6
  6568     066A  0187               	clrf	7
  6569     066B  0801               	movf	1,w
  6570     066C  00E8               	movwf	_eusartRxLastError	;volatile
  6571                           
  6572                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  6573     066D  087A               	movf	_eusartRxTail,w
  6574     066E  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  6575     066F  0086               	movwf	6
  6576     0670  3001               	movlw	1	; select bank2/3
  6577     0671  0087               	movwf	7
  6578     0672  0801               	movf	1,w
  6579     0673  00F3               	movwf	EUSART_Read@readValue
  6580     0674                     l2761:
  6581     0674  3001               	movlw	1
  6582     0675  00F2               	movwf	??_EUSART_Read
  6583     0676  0872               	movf	??_EUSART_Read,w
  6584     0677  07FA               	addwf	_eusartRxTail,f	;volatile
  6585     0678                     l2763:
  6586                           
  6587                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6588     0678  3010               	movlw	16
  6589     0679  027A               	subwf	_eusartRxTail,w	;volatile
  6590     067A  1C03               	skipc
  6591     067B  2E7D               	goto	u891
  6592     067C  2E7E               	goto	u890
  6593     067D                     u891:
  6594     067D  2E7F               	goto	l2767
  6595     067E                     u890:
  6596     067E                     l2765:
  6597                           
  6598                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  6599     067E  01FA               	clrf	_eusartRxTail	;volatile
  6600     067F                     l2767:
  6601                           
  6602                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  6603     067F  0021               	movlb	1	; select bank1
  6604     0680  1291               	bcf	17,5	;volatile
  6605     0681                     l2769:
  6606                           
  6607                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  6608     0681  3001               	movlw	1
  6609     0682  0020               	movlb	0	; select bank0
  6610     0683  02E9               	subwf	_eusartRxCount,f	;volatile
  6611     0684                     l2771:
  6612                           
  6613                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  6614     0684  0021               	movlb	1	; select bank1
  6615     0685  1691               	bsf	17,5	;volatile
  6616     0686                     l2773:
  6617                           
  6618                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  6619     0686  0873               	movf	EUSART_Read@readValue,w
  6620     0687                     l283:
  6621     0687  0008               	return
  6622     0688                     __end_of_EUSART_Read:
  6623                           
  6624                           	psect	text39
  6625     0249                     __ptext39:	
  6626 ;; *************** function _ModbusSlaveF04 *****************
  6627 ;; Defined at:
  6628 ;;		line 36 in file "Mobbus_Slave.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  reg             1    wreg     PTR short 
  6631 ;;		 -> MB_Register(4), 
  6632 ;;  size            2    8[COMMON] unsigned short 
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;  reg             1   36[BANK0 ] PTR short 
  6635 ;;		 -> MB_Register(4), 
  6636 ;;  i               2   42[BANK0 ] unsigned short 
  6637 ;;  valueRegsno     2   40[BANK0 ] struct .
  6638 ;;  valueAdd        2   38[BANK0 ] struct .
  6639 ;;  u8StartAdd      2   34[BANK0 ] unsigned short 
  6640 ;;  u8regsno        1   37[BANK0 ] unsigned char 
  6641 ;;  u8CopyBuffer    1    0        unsigned char 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      unsigned char 
  6644 ;; Registers used:
  6645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6651 ;;      Params:         2       0       0       0       0       0       0       0
  6652 ;;      Locals:         0      10       0       0       0       0       0       0
  6653 ;;      Temps:          0      10       0       0       0       0       0       0
  6654 ;;      Totals:         2      20       0       0       0       0       0       0
  6655 ;;Total ram usage:       22 bytes
  6656 ;; Hardware stack levels used: 1
  6657 ;; Hardware stack levels required when called: 6
  6658 ;; This function calls:
  6659 ;;		_Modbus_sendTxBuff
  6660 ;; This function is called by:
  6661 ;;		_ModbusRTU_Slave_Poll
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665     0249                     _ModbusSlaveF04:	
  6666                           ;psect for function _ModbusSlaveF04
  6667                           
  6668                           
  6669                           ;incstack = 0
  6670                           ; Regs used in _ModbusSlaveF04: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6671                           ;ModbusSlaveF04@reg stored from wreg
  6672     0249  0020               	movlb	0	; select bank0
  6673     024A  00C4               	movwf	ModbusSlaveF04@reg
  6674     024B                     l3963:
  6675                           
  6676                           ;Mobbus_Slave.c: 37:     VALUE16 valueAdd, valueRegsno;;Mobbus_Slave.c: 38:     valueAdd
      +                          ._Byte[1] = SES_Modbus.au8Buffer[ADD_HI];
  6677     024B  30D4               	movlw	212
  6678     024C  0086               	movwf	6
  6679     024D  3020               	movlw	32
  6680     024E  0087               	movwf	7
  6681     024F  3146               	addfsr 1,6
  6682     0250  0801               	movf	1,w
  6683     0251  00C7               	movwf	ModbusSlaveF04@valueAdd+1
  6684                           
  6685                           ;Mobbus_Slave.c: 39:     valueAdd._Byte[0] = SES_Modbus.au8Buffer[ADD_LO];
  6686     0252  30D4               	movlw	212
  6687     0253  0086               	movwf	6
  6688     0254  3020               	movlw	32
  6689     0255  0087               	movwf	7
  6690     0256  3147               	addfsr 1,7
  6691     0257  0801               	movf	1,w
  6692     0258  00C6               	movwf	ModbusSlaveF04@valueAdd
  6693     0259                     l3965:
  6694                           
  6695                           ;Mobbus_Slave.c: 40:     uint16_t u8StartAdd = (uint16_t)valueAdd.Val16;
  6696     0259  0847               	movf	ModbusSlaveF04@valueAdd+1,w
  6697     025A  00C3               	movwf	ModbusSlaveF04@u8StartAdd+1
  6698     025B  0846               	movf	ModbusSlaveF04@valueAdd,w
  6699     025C  00C2               	movwf	ModbusSlaveF04@u8StartAdd
  6700     025D                     l3967:
  6701                           
  6702                           ;Mobbus_Slave.c: 42:     valueRegsno._Byte[1] = SES_Modbus.au8Buffer[ NB_HI];
  6703     025D  30D4               	movlw	212
  6704     025E  0086               	movwf	6
  6705     025F  3020               	movlw	32
  6706     0260  0087               	movwf	7
  6707     0261  3148               	addfsr 1,8
  6708     0262  0801               	movf	1,w
  6709     0263  00C9               	movwf	ModbusSlaveF04@valueRegsno+1
  6710     0264                     l3969:
  6711                           
  6712                           ;Mobbus_Slave.c: 43:     valueRegsno._Byte[0] = SES_Modbus.au8Buffer[ NB_LO];
  6713     0264  30D4               	movlw	212
  6714     0265  0086               	movwf	6
  6715     0266  3020               	movlw	32
  6716     0267  0087               	movwf	7
  6717     0268  3149               	addfsr 1,9
  6718     0269  0801               	movf	1,w
  6719     026A  00C8               	movwf	ModbusSlaveF04@valueRegsno
  6720     026B                     l3971:
  6721                           
  6722                           ;Mobbus_Slave.c: 44:     uint8_t u8regsno = (uint8_t)valueRegsno.Val16;
  6723     026B  0848               	movf	ModbusSlaveF04@valueRegsno,w
  6724     026C  00C5               	movwf	ModbusSlaveF04@u8regsno
  6725     026D                     l3973:
  6726                           
  6727                           ;Mobbus_Slave.c: 46:     uint8_t u8CopyBufferSize;;Mobbus_Slave.c: 47:     uint16_t i;;M
      +                          obbus_Slave.c: 49:     SES_Modbus.au8Buffer[ 2 ] = u8regsno * 2;
  6728     026D  3545               	lslf	ModbusSlaveF04@u8regsno,w
  6729     026E  00B8               	movwf	??_ModbusSlaveF04
  6730     026F  30DA               	movlw	218
  6731     0270  0086               	movwf	6
  6732     0271  3020               	movlw	32
  6733     0272  0087               	movwf	7
  6734     0273  0838               	movf	??_ModbusSlaveF04,w
  6735     0274  0081               	movwf	1
  6736     0275                     l3975:
  6737                           
  6738                           ;Mobbus_Slave.c: 50:     SES_Modbus.u8BufferSize = 3;
  6739     0275  30D2               	movlw	210
  6740     0276  0086               	movwf	6
  6741     0277  3021               	movlw	33
  6742     0278  0087               	movwf	7
  6743     0279  3003               	movlw	3
  6744     027A  0081               	movwf	1
  6745     027B                     l3977:
  6746                           
  6747                           ;Mobbus_Slave.c: 52:     for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++) {
  6748     027B  0843               	movf	ModbusSlaveF04@u8StartAdd+1,w
  6749     027C  00CB               	movwf	ModbusSlaveF04@i+1
  6750     027D  0842               	movf	ModbusSlaveF04@u8StartAdd,w
  6751     027E  00CA               	movwf	ModbusSlaveF04@i
  6752     027F  2AD6               	goto	l3983
  6753     0280                     l3979:
  6754                           
  6755                           ;Mobbus_Slave.c: 53:         SES_Modbus.au8Buffer[SES_Modbus.u8BufferSize ] = ((uint8_t)
      +                           ((reg[i]) >> 8));
  6756     0280  354A               	lslf	ModbusSlaveF04@i,w
  6757     0281  0744               	addwf	ModbusSlaveF04@reg,w
  6758     0282  00B8               	movwf	??_ModbusSlaveF04
  6759     0283  0838               	movf	??_ModbusSlaveF04,w
  6760     0284  0086               	movwf	6
  6761     0285  0187               	clrf	7
  6762     0286  3F40               	moviw [0]fsr1
  6763     0287  00B9               	movwf	??_ModbusSlaveF04+1
  6764     0288  3F41               	moviw [1]fsr1
  6765     0289  00BA               	movwf	??_ModbusSlaveF04+2
  6766     028A  083A               	movf	??_ModbusSlaveF04+2,w
  6767     028B  00BB               	movwf	??_ModbusSlaveF04+3
  6768     028C  30D2               	movlw	210
  6769     028D  0086               	movwf	6
  6770     028E  3021               	movlw	33
  6771     028F  0087               	movwf	7
  6772     0290  0801               	movf	1,w
  6773     0291  00BC               	movwf	??_ModbusSlaveF04+4
  6774     0292  01BD               	clrf	??_ModbusSlaveF04+5
  6775     0293  30D8               	movlw	216
  6776     0294  00BE               	movwf	??_ModbusSlaveF04+6
  6777     0295  3020               	movlw	32
  6778     0296  00BF               	movwf	??_ModbusSlaveF04+7
  6779     0297  083C               	movf	??_ModbusSlaveF04+4,w
  6780     0298  073E               	addwf	??_ModbusSlaveF04+6,w
  6781     0299  00C0               	movwf	??_ModbusSlaveF04+8
  6782     029A  083D               	movf	??_ModbusSlaveF04+5,w
  6783     029B  3D3F               	addwfc	??_ModbusSlaveF04+7,w
  6784     029C  00C1               	movwf	??_ModbusSlaveF04+9
  6785     029D  0840               	movf	??_ModbusSlaveF04+8,w
  6786     029E  0086               	movwf	6
  6787     029F  0841               	movf	??_ModbusSlaveF04+9,w
  6788     02A0  0087               	movwf	7
  6789     02A1  083B               	movf	??_ModbusSlaveF04+3,w
  6790     02A2  0081               	movwf	1
  6791                           
  6792                           ;Mobbus_Slave.c: 54:         SES_Modbus.u8BufferSize++;
  6793     02A3  3001               	movlw	1
  6794     02A4  00B8               	movwf	??_ModbusSlaveF04
  6795     02A5  30D2               	movlw	210
  6796     02A6  0086               	movwf	6
  6797     02A7  3021               	movlw	33
  6798     02A8  0087               	movwf	7
  6799     02A9  0838               	movf	??_ModbusSlaveF04,w
  6800     02AA  0781               	addwf	1,f
  6801                           
  6802                           ;Mobbus_Slave.c: 55:         SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = ((uint8_t
      +                          ) ((reg[i]) & 0xff));
  6803     02AB  354A               	lslf	ModbusSlaveF04@i,w
  6804     02AC  0744               	addwf	ModbusSlaveF04@reg,w
  6805     02AD  00B8               	movwf	??_ModbusSlaveF04
  6806     02AE  0838               	movf	??_ModbusSlaveF04,w
  6807     02AF  0086               	movwf	6
  6808     02B0  0187               	clrf	7
  6809     02B1  0801               	movf	1,w
  6810     02B2  00B9               	movwf	??_ModbusSlaveF04+1
  6811     02B3  30D2               	movlw	210
  6812     02B4  0086               	movwf	6
  6813     02B5  3021               	movlw	33
  6814     02B6  0087               	movwf	7
  6815     02B7  0801               	movf	1,w
  6816     02B8  00BA               	movwf	??_ModbusSlaveF04+2
  6817     02B9  01BB               	clrf	??_ModbusSlaveF04+3
  6818     02BA  30D8               	movlw	216
  6819     02BB  00BC               	movwf	??_ModbusSlaveF04+4
  6820     02BC  3020               	movlw	32
  6821     02BD  00BD               	movwf	??_ModbusSlaveF04+5
  6822     02BE  083A               	movf	??_ModbusSlaveF04+2,w
  6823     02BF  073C               	addwf	??_ModbusSlaveF04+4,w
  6824     02C0  00BE               	movwf	??_ModbusSlaveF04+6
  6825     02C1  083B               	movf	??_ModbusSlaveF04+3,w
  6826     02C2  3D3D               	addwfc	??_ModbusSlaveF04+5,w
  6827     02C3  00BF               	movwf	??_ModbusSlaveF04+7
  6828     02C4  083E               	movf	??_ModbusSlaveF04+6,w
  6829     02C5  0086               	movwf	6
  6830     02C6  083F               	movf	??_ModbusSlaveF04+7,w
  6831     02C7  0087               	movwf	7
  6832     02C8  0839               	movf	??_ModbusSlaveF04+1,w
  6833     02C9  0081               	movwf	1
  6834                           
  6835                           ;Mobbus_Slave.c: 56:         SES_Modbus.u8BufferSize++;
  6836     02CA  3001               	movlw	1
  6837     02CB  00B8               	movwf	??_ModbusSlaveF04
  6838     02CC  30D2               	movlw	210
  6839     02CD  0086               	movwf	6
  6840     02CE  3021               	movlw	33
  6841     02CF  0087               	movwf	7
  6842     02D0  0838               	movf	??_ModbusSlaveF04,w
  6843     02D1  0781               	addwf	1,f
  6844     02D2                     l3981:
  6845                           
  6846                           ;Mobbus_Slave.c: 57:     }
  6847     02D2  3001               	movlw	1
  6848     02D3  07CA               	addwf	ModbusSlaveF04@i,f
  6849     02D4  3000               	movlw	0
  6850     02D5  3DCB               	addwfc	ModbusSlaveF04@i+1,f
  6851     02D6                     l3983:
  6852     02D6  0845               	movf	ModbusSlaveF04@u8regsno,w
  6853     02D7  0742               	addwf	ModbusSlaveF04@u8StartAdd,w
  6854     02D8  00B8               	movwf	??_ModbusSlaveF04
  6855     02D9  0843               	movf	ModbusSlaveF04@u8StartAdd+1,w
  6856     02DA  1803               	skipnc
  6857     02DB  0A43               	incf	ModbusSlaveF04@u8StartAdd+1,w
  6858     02DC  00B9               	movwf	??_ModbusSlaveF04+1
  6859     02DD  0839               	movf	??_ModbusSlaveF04+1,w
  6860     02DE  024B               	subwf	ModbusSlaveF04@i+1,w
  6861     02DF  1D03               	skipz
  6862     02E0  2AE3               	goto	u1775
  6863     02E1  0838               	movf	??_ModbusSlaveF04,w
  6864     02E2  024A               	subwf	ModbusSlaveF04@i,w
  6865     02E3                     u1775:
  6866     02E3  1C03               	skipc
  6867     02E4  2AE6               	goto	u1771
  6868     02E5  2AE7               	goto	u1770
  6869     02E6                     u1771:
  6870     02E6  2A80               	goto	l3979
  6871     02E7                     u1770:
  6872     02E7                     l3985:
  6873     02E7                     l3987:
  6874                           
  6875                           ;Mobbus_Slave.c: 59:     Modbus_sendTxBuff();
  6876     02E7  3180  209C  3182   	fcall	_Modbus_sendTxBuff
  6877     02EA                     l543:
  6878     02EA  0008               	return
  6879     02EB                     __end_of_ModbusSlaveF04:
  6880                           
  6881                           	psect	text40
  6882     009C                     __ptext40:	
  6883 ;; *************** function _Modbus_sendTxBuff *****************
  6884 ;; Defined at:
  6885 ;;		line 169 in file "Mobbus_Slave.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;		None
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;  u32overTimec    4   20[BANK0 ] volatile unsigned long 
  6890 ;;  index           2   18[BANK0 ] int 
  6891 ;;  u16crc          2   16[BANK0 ] unsigned short 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  1    wreg      void 
  6894 ;; Registers used:
  6895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6901 ;;      Params:         0       0       0       0       0       0       0       0
  6902 ;;      Locals:         0       8       0       0       0       0       0       0
  6903 ;;      Temps:          0       7       0       0       0       0       0       0
  6904 ;;      Totals:         0      15       0       0       0       0       0       0
  6905 ;;Total ram usage:       15 bytes
  6906 ;; Hardware stack levels used: 1
  6907 ;; Hardware stack levels required when called: 5
  6908 ;; This function calls:
  6909 ;;		_EUSART_Write
  6910 ;;		_EUSART_is_tx_done
  6911 ;;		_Get_millis
  6912 ;;		_Modbus_calcCRC
  6913 ;; This function is called by:
  6914 ;;		_ModbusSlaveF04
  6915 ;;		_ModbusRTU_Slave_Poll
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919     009C                     _Modbus_sendTxBuff:	
  6920                           ;psect for function _Modbus_sendTxBuff
  6921                           
  6922     009C                     l3811:	
  6923                           ;incstack = 0
  6924                           ; Regs used in _Modbus_sendTxBuff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6925                           
  6926                           
  6927                           ;Mobbus_Slave.c: 170:     uint16_t u16crc = Modbus_calcCRC(SES_Modbus.u8BufferSize);
  6928     009C  30D2               	movlw	210
  6929     009D  0086               	movwf	6
  6930     009E  3021               	movlw	33
  6931     009F  0087               	movwf	7
  6932     00A0  0801               	movf	1,w
  6933     00A1  3183  2370  3180   	fcall	_Modbus_calcCRC
  6934     00A4  0873               	movf	?_Modbus_calcCRC+1,w
  6935     00A5  0020               	movlb	0	; select bank0
  6936     00A6  00B1               	movwf	Modbus_sendTxBuff@u16crc+1
  6937     00A7  0872               	movf	?_Modbus_calcCRC,w
  6938     00A8  00B0               	movwf	Modbus_sendTxBuff@u16crc
  6939     00A9                     l3813:
  6940                           
  6941                           ;Mobbus_Slave.c: 171:     SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = u16crc >> 8;
  6942     00A9  0831               	movf	Modbus_sendTxBuff@u16crc+1,w
  6943     00AA  00A9               	movwf	??_Modbus_sendTxBuff
  6944     00AB  30D2               	movlw	210
  6945     00AC  0086               	movwf	6
  6946     00AD  3021               	movlw	33
  6947     00AE  0087               	movwf	7
  6948     00AF  0801               	movf	1,w
  6949     00B0  00AA               	movwf	??_Modbus_sendTxBuff+1
  6950     00B1  01AB               	clrf	??_Modbus_sendTxBuff+2
  6951     00B2  30D8               	movlw	216
  6952     00B3  00AC               	movwf	??_Modbus_sendTxBuff+3
  6953     00B4  3020               	movlw	32
  6954     00B5  00AD               	movwf	??_Modbus_sendTxBuff+4
  6955     00B6  082A               	movf	??_Modbus_sendTxBuff+1,w
  6956     00B7  072C               	addwf	??_Modbus_sendTxBuff+3,w
  6957     00B8  00AE               	movwf	??_Modbus_sendTxBuff+5
  6958     00B9  082B               	movf	??_Modbus_sendTxBuff+2,w
  6959     00BA  3D2D               	addwfc	??_Modbus_sendTxBuff+4,w
  6960     00BB  00AF               	movwf	??_Modbus_sendTxBuff+6
  6961     00BC  082E               	movf	??_Modbus_sendTxBuff+5,w
  6962     00BD  0086               	movwf	6
  6963     00BE  082F               	movf	??_Modbus_sendTxBuff+6,w
  6964     00BF  0087               	movwf	7
  6965     00C0  0829               	movf	??_Modbus_sendTxBuff,w
  6966     00C1  0081               	movwf	1
  6967     00C2                     l3815:
  6968                           
  6969                           ;Mobbus_Slave.c: 172:     SES_Modbus.u8BufferSize++;
  6970     00C2  3001               	movlw	1
  6971     00C3  00A9               	movwf	??_Modbus_sendTxBuff
  6972     00C4  30D2               	movlw	210
  6973     00C5  0086               	movwf	6
  6974     00C6  3021               	movlw	33
  6975     00C7  0087               	movwf	7
  6976     00C8  0829               	movf	??_Modbus_sendTxBuff,w
  6977     00C9  0781               	addwf	1,f
  6978     00CA                     l3817:
  6979                           
  6980                           ;Mobbus_Slave.c: 173:     SES_Modbus.au8Buffer[ SES_Modbus.u8BufferSize ] = u16crc & 0x0
      +                          0ff;
  6981     00CA  30D2               	movlw	210
  6982     00CB  0086               	movwf	6
  6983     00CC  3021               	movlw	33
  6984     00CD  0087               	movwf	7
  6985     00CE  0801               	movf	1,w
  6986     00CF  00A9               	movwf	??_Modbus_sendTxBuff
  6987     00D0  01AA               	clrf	??_Modbus_sendTxBuff+1
  6988     00D1  30D8               	movlw	216
  6989     00D2  00AB               	movwf	??_Modbus_sendTxBuff+2
  6990     00D3  3020               	movlw	32
  6991     00D4  00AC               	movwf	??_Modbus_sendTxBuff+3
  6992     00D5  0829               	movf	??_Modbus_sendTxBuff,w
  6993     00D6  072B               	addwf	??_Modbus_sendTxBuff+2,w
  6994     00D7  00AD               	movwf	??_Modbus_sendTxBuff+4
  6995     00D8  082A               	movf	??_Modbus_sendTxBuff+1,w
  6996     00D9  3D2C               	addwfc	??_Modbus_sendTxBuff+3,w
  6997     00DA  00AE               	movwf	??_Modbus_sendTxBuff+5
  6998     00DB  082D               	movf	??_Modbus_sendTxBuff+4,w
  6999     00DC  0086               	movwf	6
  7000     00DD  082E               	movf	??_Modbus_sendTxBuff+5,w
  7001     00DE  0087               	movwf	7
  7002     00DF  0830               	movf	Modbus_sendTxBuff@u16crc,w
  7003     00E0  0081               	movwf	1
  7004     00E1                     l3819:
  7005                           
  7006                           ;Mobbus_Slave.c: 174:     SES_Modbus.u8BufferSize++;
  7007     00E1  3001               	movlw	1
  7008     00E2  00A9               	movwf	??_Modbus_sendTxBuff
  7009     00E3  30D2               	movlw	210
  7010     00E4  0086               	movwf	6
  7011     00E5  3021               	movlw	33
  7012     00E6  0087               	movwf	7
  7013     00E7  0829               	movf	??_Modbus_sendTxBuff,w
  7014     00E8  0781               	addwf	1,f
  7015     00E9                     l3821:
  7016                           
  7017                           ;Mobbus_Slave.c: 177:     if (SES_Modbus.u8txenpin > 1) {
  7018     00E9  30D4               	movlw	212
  7019     00EA  0086               	movwf	6
  7020     00EB  3020               	movlw	32
  7021     00EC  0087               	movwf	7
  7022     00ED  3141               	addfsr 1,1
  7023     00EE  3002               	movlw	2
  7024     00EF  0201               	subwf	1,w
  7025     00F0  1C03               	skipc
  7026     00F1  28F3               	goto	u1651
  7027     00F2  28F4               	goto	u1650
  7028     00F3                     u1651:
  7029     00F3  28F6               	goto	l3823
  7030     00F4                     u1650:
  7031     00F4                     l577:	
  7032                           ;Mobbus_Slave.c: 178:         do { LATCbits.LATC5 = 1; } while(0);
  7033                           
  7034     00F4  0022               	movlb	2	; select bank2
  7035     00F5  168E               	bsf	14,5	;volatile
  7036     00F6                     l3823:
  7037                           
  7038                           ;Mobbus_Slave.c: 184:     for (int index = 0; index < SES_Modbus.u8BufferSize; index++) 
      +                          {
  7039     00F6  0020               	movlb	0	; select bank0
  7040     00F7  01B2               	clrf	Modbus_sendTxBuff@index
  7041     00F8  01B3               	clrf	Modbus_sendTxBuff@index+1
  7042     00F9  290E               	goto	l3829
  7043     00FA                     l3825:
  7044                           
  7045                           ;Mobbus_Slave.c: 185:         EUSART_Write(SES_Modbus.au8Buffer[index]);
  7046     00FA  30D8               	movlw	216
  7047     00FB  0020               	movlb	0	; select bank0
  7048     00FC  00A9               	movwf	??_Modbus_sendTxBuff
  7049     00FD  3020               	movlw	32
  7050     00FE  00AA               	movwf	??_Modbus_sendTxBuff+1
  7051     00FF  0832               	movf	Modbus_sendTxBuff@index,w
  7052     0100  0729               	addwf	??_Modbus_sendTxBuff,w
  7053     0101  0086               	movwf	6
  7054     0102  0833               	movf	Modbus_sendTxBuff@index+1,w
  7055     0103  3D2A               	addwfc	??_Modbus_sendTxBuff+1,w
  7056     0104  0087               	movwf	7
  7057     0105  0801               	movf	1,w
  7058     0106  3186  260F  3180   	fcall	_EUSART_Write
  7059     0109                     l3827:
  7060                           
  7061                           ;Mobbus_Slave.c: 186:     }
  7062     0109  3001               	movlw	1
  7063     010A  0020               	movlb	0	; select bank0
  7064     010B  07B2               	addwf	Modbus_sendTxBuff@index,f
  7065     010C  3000               	movlw	0
  7066     010D  3DB3               	addwfc	Modbus_sendTxBuff@index+1,f
  7067     010E                     l3829:
  7068     010E  30D2               	movlw	210
  7069     010F  0086               	movwf	6
  7070     0110  3021               	movlw	33
  7071     0111  0087               	movwf	7
  7072     0112  0833               	movf	Modbus_sendTxBuff@index+1,w
  7073     0113  3A80               	xorlw	128
  7074     0114  00A9               	movwf	??_Modbus_sendTxBuff
  7075     0115  3080               	movlw	128
  7076     0116  0229               	subwf	??_Modbus_sendTxBuff,w
  7077     0117  1D03               	skipz
  7078     0118  291B               	goto	u1665
  7079     0119  0801               	movf	1,w
  7080     011A  0232               	subwf	Modbus_sendTxBuff@index,w
  7081     011B                     u1665:
  7082     011B  1C03               	skipc
  7083     011C  291E               	goto	u1661
  7084     011D  291F               	goto	u1660
  7085     011E                     u1661:
  7086     011E  28FA               	goto	l3825
  7087     011F                     u1660:
  7088     011F                     l3831:
  7089                           
  7090                           ;Mobbus_Slave.c: 188:     if (SES_Modbus.u8txenpin > 1) {
  7091     011F  30D4               	movlw	212
  7092     0120  0086               	movwf	6
  7093     0121  3020               	movlw	32
  7094     0122  0087               	movwf	7
  7095     0123  3141               	addfsr 1,1
  7096     0124  3002               	movlw	2
  7097     0125  0201               	subwf	1,w
  7098     0126  1C03               	skipc
  7099     0127  2929               	goto	u1671
  7100     0128  292A               	goto	u1670
  7101     0129                     u1671:
  7102     0129  2960               	goto	l3841
  7103     012A                     u1670:
  7104     012A                     l3835:
  7105     012A  318F  2717  3180   	fcall	_EUSART_is_tx_done
  7106     012D  3A00               	xorlw	0
  7107     012E  1903               	skipnz
  7108     012F  2931               	goto	u1681
  7109     0130  2932               	goto	u1680
  7110     0131                     u1681:
  7111     0131  292A               	goto	l3835
  7112     0132                     u1680:
  7113     0132                     l3837:
  7114                           
  7115                           ;Mobbus_Slave.c: 196:         volatile uint32_t u32overTimecountDown = SES_Modbus.u32ove
      +                          rTime;
  7116     0132  30E6               	movlw	230
  7117     0133  0086               	movwf	6
  7118     0134  3021               	movlw	33
  7119     0135  0087               	movwf	7
  7120     0136  3F40               	moviw [0]fsr1
  7121     0137  0020               	movlb	0	; select bank0
  7122     0138  00B4               	movwf	Modbus_sendTxBuff@u32overTimecountDown	;volatile
  7123     0139  3F41               	moviw [1]fsr1
  7124     013A  00B5               	movwf	Modbus_sendTxBuff@u32overTimecountDown+1	;volatile
  7125     013B  3F42               	moviw [2]fsr1
  7126     013C  00B6               	movwf	Modbus_sendTxBuff@u32overTimecountDown+2	;volatile
  7127     013D  3F43               	moviw [3]fsr1
  7128     013E  00B7               	movwf	Modbus_sendTxBuff@u32overTimecountDown+3	;volatile
  7129     013F                     l3839:	
  7130                           ;Mobbus_Slave.c: 198:         while (u32overTimecountDown-- > 0);
  7131                           
  7132     013F  3001               	movlw	1
  7133     0140  0020               	movlb	0	; select bank0
  7134     0141  00A9               	movwf	??_Modbus_sendTxBuff
  7135     0142  3000               	movlw	0
  7136     0143  00AA               	movwf	??_Modbus_sendTxBuff+1
  7137     0144  3000               	movlw	0
  7138     0145  00AB               	movwf	??_Modbus_sendTxBuff+2
  7139     0146  3000               	movlw	0
  7140     0147  00AC               	movwf	??_Modbus_sendTxBuff+3
  7141     0148  0829               	movf	??_Modbus_sendTxBuff,w
  7142     0149  02B4               	subwf	Modbus_sendTxBuff@u32overTimecountDown,f	;volatile
  7143     014A  082A               	movf	??_Modbus_sendTxBuff+1,w
  7144     014B  3BB5               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+1,f	;volatile
  7145     014C  082B               	movf	??_Modbus_sendTxBuff+2,w
  7146     014D  3BB6               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+2,f	;volatile
  7147     014E  082C               	movf	??_Modbus_sendTxBuff+3,w
  7148     014F  3BB7               	subwfb	Modbus_sendTxBuff@u32overTimecountDown+3,f	;volatile
  7149     0150  0A34               	incf	Modbus_sendTxBuff@u32overTimecountDown,w	;volatile
  7150     0151  1D03               	skipz
  7151     0152  295D               	goto	u1691
  7152     0153  0A35               	incf	Modbus_sendTxBuff@u32overTimecountDown+1,w	;volatile
  7153     0154  1D03               	skipz
  7154     0155  295D               	goto	u1691
  7155     0156  0A36               	incf	Modbus_sendTxBuff@u32overTimecountDown+2,w	;volatile
  7156     0157  1D03               	skipz
  7157     0158  295D               	goto	u1691
  7158     0159  0A37               	incf	Modbus_sendTxBuff@u32overTimecountDown+3,w	;volatile
  7159     015A  1D03               	btfss	3,2
  7160     015B  295D               	goto	u1691
  7161     015C  295E               	goto	u1690
  7162     015D                     u1691:
  7163     015D  293F               	goto	l3839
  7164     015E                     u1690:
  7165     015E                     l589:	
  7166                           ;Mobbus_Slave.c: 199:         do { LATCbits.LATC5 = 0; } while(0);
  7167                           
  7168     015E  0022               	movlb	2	; select bank2
  7169     015F  128E               	bcf	14,5	;volatile
  7170     0160                     l3841:
  7171                           
  7172                           ;Mobbus_Slave.c: 202:     SES_Modbus.u8BufferSize = 0;
  7173     0160  30D2               	movlw	210
  7174     0161  0086               	movwf	6
  7175     0162  3021               	movlw	33
  7176     0163  0087               	movwf	7
  7177     0164  0181               	clrf	1
  7178     0165                     l3843:
  7179                           
  7180                           ;Mobbus_Slave.c: 205:     SES_Modbus.u32timeOut = Get_millis();
  7181     0165  318F  276E  3180   	fcall	_Get_millis
  7182     0168  30E2               	movlw	226
  7183     0169  0086               	movwf	6
  7184     016A  3021               	movlw	33
  7185     016B  0087               	movwf	7
  7186     016C  0872               	movf	?_Get_millis,w
  7187     016D  3FC0               	movwi [0]fsr1
  7188     016E  0873               	movf	?_Get_millis+1,w
  7189     016F  3FC1               	movwi [1]fsr1
  7190     0170  0874               	movf	?_Get_millis+2,w
  7191     0171  3FC2               	movwi [2]fsr1
  7192     0172  0875               	movf	?_Get_millis+3,w
  7193     0173  3FC3               	movwi [3]fsr1
  7194     0174                     l3845:
  7195                           
  7196                           ;Mobbus_Slave.c: 208:     SES_Modbus.u16OutCnt++;
  7197     0174  30D8               	movlw	216
  7198     0175  0086               	movwf	6
  7199     0176  3021               	movlw	33
  7200     0177  0087               	movwf	7
  7201     0178  3001               	movlw	1
  7202     0179  0781               	addwf	1,f
  7203     017A  3141               	addfsr 1,1
  7204     017B  1803               	skipnc
  7205     017C  0A81               	incf	1,f
  7206     017D                     l591:
  7207     017D  0008               	return
  7208     017E                     __end_of_Modbus_sendTxBuff:
  7209                           
  7210                           	psect	text41
  7211     0370                     __ptext41:	
  7212 ;; *************** function _Modbus_calcCRC *****************
  7213 ;; Defined at:
  7214 ;;		line 211 in file "Mobbus_Slave.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;  len             1    wreg     unsigned char 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  len             1    0[BANK0 ] unsigned char 
  7219 ;;  j               1    6[BANK0 ] unsigned char 
  7220 ;;  temp            2    7[BANK0 ] unsigned int 
  7221 ;;  flag            2    3[BANK0 ] unsigned int 
  7222 ;;  temp2           2    1[BANK0 ] unsigned int 
  7223 ;;  i               1    5[BANK0 ] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  2    2[COMMON] unsigned short 
  7226 ;; Registers used:
  7227 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7233 ;;      Params:         2       0       0       0       0       0       0       0
  7234 ;;      Locals:         0       9       0       0       0       0       0       0
  7235 ;;      Temps:          4       0       0       0       0       0       0       0
  7236 ;;      Totals:         6       9       0       0       0       0       0       0
  7237 ;;Total ram usage:       15 bytes
  7238 ;; Hardware stack levels used: 1
  7239 ;; Hardware stack levels required when called: 4
  7240 ;; This function calls:
  7241 ;;		Nothing
  7242 ;; This function is called by:
  7243 ;;		_validateRequest
  7244 ;;		_Modbus_sendTxBuff
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248     0370                     _Modbus_calcCRC:	
  7249                           ;psect for function _Modbus_calcCRC
  7250                           
  7251                           
  7252                           ;incstack = 0
  7253                           ; Regs used in _Modbus_calcCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
  7254                           ;Modbus_calcCRC@len stored from wreg
  7255     0370  0020               	movlb	0	; select bank0
  7256     0371  00A0               	movwf	Modbus_calcCRC@len
  7257     0372                     l3771:
  7258                           
  7259                           ;Mobbus_Slave.c: 212:     unsigned int temp, temp2, flag;;Mobbus_Slave.c: 213:     temp 
      +                          = 0xFFFF;
  7260     0372  30FF               	movlw	255
  7261     0373  00A7               	movwf	Modbus_calcCRC@temp
  7262     0374  30FF               	movlw	255
  7263     0375  00A8               	movwf	Modbus_calcCRC@temp+1
  7264     0376                     l3773:
  7265                           
  7266                           ;Mobbus_Slave.c: 214:     unsigned char i = 0;
  7267     0376  01A5               	clrf	Modbus_calcCRC@i
  7268                           
  7269                           ;Mobbus_Slave.c: 215:     for (i = 0; i < len; i++) {
  7270     0377  01A5               	clrf	Modbus_calcCRC@i
  7271     0378  2BB0               	goto	l3799
  7272     0379                     l3775:
  7273                           
  7274                           ;Mobbus_Slave.c: 216:         temp = temp ^ SES_Modbus.au8Buffer[i];
  7275     0379  0825               	movf	Modbus_calcCRC@i,w
  7276     037A  00F4               	movwf	??_Modbus_calcCRC
  7277     037B  01F5               	clrf	??_Modbus_calcCRC+1
  7278     037C  30D8               	movlw	216
  7279     037D  00F6               	movwf	??_Modbus_calcCRC+2
  7280     037E  3020               	movlw	32
  7281     037F  00F7               	movwf	??_Modbus_calcCRC+3
  7282     0380  0874               	movf	??_Modbus_calcCRC,w
  7283     0381  0776               	addwf	??_Modbus_calcCRC+2,w
  7284     0382  0086               	movwf	6
  7285     0383  0875               	movf	??_Modbus_calcCRC+1,w
  7286     0384  3D77               	addwfc	??_Modbus_calcCRC+3,w
  7287     0385  0087               	movwf	7
  7288     0386  0827               	movf	Modbus_calcCRC@temp,w
  7289     0387  0601               	xorwf	1,w
  7290     0388  00A7               	movwf	Modbus_calcCRC@temp
  7291     0389  0828               	movf	Modbus_calcCRC@temp+1,w
  7292     038A  00A8               	movwf	Modbus_calcCRC@temp+1
  7293     038B                     l3777:
  7294     038B                     l3779:
  7295                           
  7296                           ;Mobbus_Slave.c: 218:         for (j = 1; j <= 8; j++) {
  7297     038B  01A6               	clrf	Modbus_calcCRC@j
  7298     038C  0AA6               	incf	Modbus_calcCRC@j,f
  7299     038D                     l3785:
  7300                           
  7301                           ;Mobbus_Slave.c: 219:             flag = temp & 0x0001;
  7302     038D  3001               	movlw	1
  7303     038E  0527               	andwf	Modbus_calcCRC@temp,w
  7304     038F  00A3               	movwf	Modbus_calcCRC@flag
  7305     0390  3000               	movlw	0
  7306     0391  0528               	andwf	Modbus_calcCRC@temp+1,w
  7307     0392  00A4               	movwf	Modbus_calcCRC@flag+1
  7308     0393                     l3787:
  7309                           
  7310                           ;Mobbus_Slave.c: 220:             temp >>= 1;
  7311     0393  3001               	movlw	1
  7312     0394                     u1615:
  7313     0394  36A8               	lsrf	Modbus_calcCRC@temp+1,f
  7314     0395  0CA7               	rrf	Modbus_calcCRC@temp,f
  7315     0396  0B89               	decfsz	9,f
  7316     0397  2B94               	goto	u1615
  7317     0398                     l3789:
  7318                           
  7319                           ;Mobbus_Slave.c: 221:             if (flag)
  7320     0398  0823               	movf	Modbus_calcCRC@flag,w
  7321     0399  0424               	iorwf	Modbus_calcCRC@flag+1,w
  7322     039A  1903               	btfsc	3,2
  7323     039B  2B9D               	goto	u1621
  7324     039C  2B9E               	goto	u1620
  7325     039D                     u1621:
  7326     039D  2BA2               	goto	l3793
  7327     039E                     u1620:
  7328     039E                     l3791:
  7329                           
  7330                           ;Mobbus_Slave.c: 222:                 temp ^= 0xA001;
  7331     039E  3001               	movlw	1
  7332     039F  06A7               	xorwf	Modbus_calcCRC@temp,f
  7333     03A0  30A0               	movlw	160
  7334     03A1  06A8               	xorwf	Modbus_calcCRC@temp+1,f
  7335     03A2                     l3793:
  7336                           
  7337                           ;Mobbus_Slave.c: 223:         }
  7338     03A2  3001               	movlw	1
  7339     03A3  00F4               	movwf	??_Modbus_calcCRC
  7340     03A4  0874               	movf	??_Modbus_calcCRC,w
  7341     03A5  07A6               	addwf	Modbus_calcCRC@j,f
  7342     03A6                     l3795:
  7343     03A6  3009               	movlw	9
  7344     03A7  0226               	subwf	Modbus_calcCRC@j,w
  7345     03A8  1C03               	skipc
  7346     03A9  2BAB               	goto	u1631
  7347     03AA  2BAC               	goto	u1630
  7348     03AB                     u1631:
  7349     03AB  2B8D               	goto	l3785
  7350     03AC                     u1630:
  7351     03AC                     l3797:
  7352                           
  7353                           ;Mobbus_Slave.c: 224:     }
  7354     03AC  3001               	movlw	1
  7355     03AD  00F4               	movwf	??_Modbus_calcCRC
  7356     03AE  0874               	movf	??_Modbus_calcCRC,w
  7357     03AF  07A5               	addwf	Modbus_calcCRC@i,f
  7358     03B0                     l3799:
  7359     03B0  0820               	movf	Modbus_calcCRC@len,w
  7360     03B1  0225               	subwf	Modbus_calcCRC@i,w
  7361     03B2  1C03               	skipc
  7362     03B3  2BB5               	goto	u1641
  7363     03B4  2BB6               	goto	u1640
  7364     03B5                     u1641:
  7365     03B5  2B79               	goto	l3775
  7366     03B6                     u1640:
  7367     03B6                     l3801:
  7368                           
  7369                           ;Mobbus_Slave.c: 226:     temp2 = temp >> 8;
  7370     03B6  0828               	movf	Modbus_calcCRC@temp+1,w
  7371     03B7  00F5               	movwf	??_Modbus_calcCRC+1
  7372     03B8  0827               	movf	Modbus_calcCRC@temp,w
  7373     03B9  00F4               	movwf	??_Modbus_calcCRC
  7374     03BA  0875               	movf	??_Modbus_calcCRC+1,w
  7375     03BB  00F4               	movwf	??_Modbus_calcCRC
  7376     03BC  01F5               	clrf	??_Modbus_calcCRC+1
  7377     03BD  0874               	movf	??_Modbus_calcCRC,w
  7378     03BE  00A1               	movwf	Modbus_calcCRC@temp2
  7379     03BF  0875               	movf	??_Modbus_calcCRC+1,w
  7380     03C0  00A2               	movwf	Modbus_calcCRC@temp2+1
  7381     03C1                     l3803:
  7382                           
  7383                           ;Mobbus_Slave.c: 227:     temp = (temp << 8) | temp2;
  7384     03C1  0827               	movf	Modbus_calcCRC@temp,w
  7385     03C2  00F5               	movwf	??_Modbus_calcCRC+1
  7386     03C3  01F4               	clrf	??_Modbus_calcCRC
  7387     03C4  0821               	movf	Modbus_calcCRC@temp2,w
  7388     03C5  0474               	iorwf	??_Modbus_calcCRC,w
  7389     03C6  00A7               	movwf	Modbus_calcCRC@temp
  7390     03C7  0822               	movf	Modbus_calcCRC@temp2+1,w
  7391     03C8  0475               	iorwf	??_Modbus_calcCRC+1,w
  7392     03C9  00A8               	movwf	Modbus_calcCRC@temp+1
  7393     03CA                     l3805:
  7394                           
  7395                           ;Mobbus_Slave.c: 231:     return temp;
  7396     03CA  0828               	movf	Modbus_calcCRC@temp+1,w
  7397     03CB  00F3               	movwf	?_Modbus_calcCRC+1
  7398     03CC  0827               	movf	Modbus_calcCRC@temp,w
  7399     03CD  00F2               	movwf	?_Modbus_calcCRC
  7400     03CE                     l600:
  7401     03CE  0008               	return
  7402     03CF                     __end_of_Modbus_calcCRC:
  7403                           
  7404                           	psect	text42
  7405     0F6E                     __ptext42:	
  7406 ;; *************** function _Get_millis *****************
  7407 ;; Defined at:
  7408 ;;		line 15 in file "tick.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;		None
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;		None
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  4    2[COMMON] unsigned long 
  7415 ;; Registers used:
  7416 ;;		wreg
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7422 ;;      Params:         4       0       0       0       0       0       0       0
  7423 ;;      Locals:         0       0       0       0       0       0       0       0
  7424 ;;      Temps:          0       0       0       0       0       0       0       0
  7425 ;;      Totals:         4       0       0       0       0       0       0       0
  7426 ;;Total ram usage:        4 bytes
  7427 ;; Hardware stack levels used: 1
  7428 ;; Hardware stack levels required when called: 4
  7429 ;; This function calls:
  7430 ;;		Nothing
  7431 ;; This function is called by:
  7432 ;;		_ReadData
  7433 ;;		_Task_Sensor
  7434 ;;		_ModbusRTU_Slave_Poll
  7435 ;;		_Modbus_sendTxBuff
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439     0F6E                     _Get_millis:	
  7440                           ;psect for function _Get_millis
  7441                           
  7442     0F6E                     l2711:	
  7443                           ;incstack = 0
  7444                           ; Regs used in _Get_millis: [wreg]
  7445                           
  7446                           
  7447                           ;tick.c: 16:     return device_time;
  7448     0F6E  0020               	movlb	0	; select bank0
  7449     0F6F  085D               	movf	_device_time+3,w	;volatile
  7450     0F70  00F5               	movwf	?_Get_millis+3
  7451     0F71  085C               	movf	_device_time+2,w	;volatile
  7452     0F72  00F4               	movwf	?_Get_millis+2
  7453     0F73  085B               	movf	_device_time+1,w	;volatile
  7454     0F74  00F3               	movwf	?_Get_millis+1
  7455     0F75  085A               	movf	_device_time,w	;volatile
  7456     0F76  00F2               	movwf	?_Get_millis
  7457     0F77                     l628:
  7458     0F77  0008               	return
  7459     0F78                     __end_of_Get_millis:
  7460                           
  7461                           	psect	text43
  7462     0F17                     __ptext43:	
  7463 ;; *************** function _EUSART_is_tx_done *****************
  7464 ;; Defined at:
  7465 ;;		line 142 in file "mcc_generated_files/eusart.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;		None
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      _Bool 
  7472 ;; Registers used:
  7473 ;;		wreg, status,2, status,0
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7479 ;;      Params:         0       0       0       0       0       0       0       0
  7480 ;;      Locals:         0       0       0       0       0       0       0       0
  7481 ;;      Temps:          0       0       0       0       0       0       0       0
  7482 ;;      Totals:         0       0       0       0       0       0       0       0
  7483 ;;Total ram usage:        0 bytes
  7484 ;; Hardware stack levels used: 1
  7485 ;; Hardware stack levels required when called: 4
  7486 ;; This function calls:
  7487 ;;		Nothing
  7488 ;; This function is called by:
  7489 ;;		_Modbus_sendTxBuff
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493     0F17                     _EUSART_is_tx_done:	
  7494                           ;psect for function _EUSART_is_tx_done
  7495                           
  7496     0F17                     l2689:	
  7497                           ;incstack = 0
  7498                           ; Regs used in _EUSART_is_tx_done: [wreg+status,2+status,0]
  7499                           
  7500                           
  7501                           ;mcc_generated_files/eusart.c: 144:     return TXSTAbits.TRMT;
  7502     0F17  0023               	movlb	3	; select bank3
  7503     0F18  0C1E               	rrf	30,w	;volatile
  7504     0F19  3901               	andlw	1
  7505     0F1A                     l276:
  7506     0F1A  0008               	return
  7507     0F1B                     __end_of_EUSART_is_tx_done:
  7508                           
  7509                           	psect	text44
  7510     060F                     __ptext44:	
  7511 ;; *************** function _EUSART_Write *****************
  7512 ;; Defined at:
  7513 ;;		line 173 in file "mcc_generated_files/eusart.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  txData          1    wreg     unsigned char 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  txData          1    3[COMMON] unsigned char 
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      void 
  7520 ;; Registers used:
  7521 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7522 ;; Tracked objects:
  7523 ;;		On entry : 0/0
  7524 ;;		On exit  : 0/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7527 ;;      Params:         0       0       0       0       0       0       0       0
  7528 ;;      Locals:         1       0       0       0       0       0       0       0
  7529 ;;      Temps:          1       0       0       0       0       0       0       0
  7530 ;;      Totals:         2       0       0       0       0       0       0       0
  7531 ;;Total ram usage:        2 bytes
  7532 ;; Hardware stack levels used: 1
  7533 ;; Hardware stack levels required when called: 4
  7534 ;; This function calls:
  7535 ;;		Nothing
  7536 ;; This function is called by:
  7537 ;;		_Modbus_sendTxBuff
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541     060F                     _EUSART_Write:	
  7542                           ;psect for function _EUSART_Write
  7543                           
  7544                           
  7545                           ;incstack = 0
  7546                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  7547                           ;EUSART_Write@txData stored from wreg
  7548     060F  00F3               	movwf	EUSART_Write@txData
  7549     0610                     l2693:
  7550     0610                     l2695:	
  7551                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  7552                           
  7553                           
  7554                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  7555     0610  0020               	movlb	0	; select bank0
  7556     0611  086A               	movf	_eusartTxBufferRemaining,w	;volatile
  7557     0612  1903               	btfsc	3,2
  7558     0613  2E15               	goto	u811
  7559     0614  2E16               	goto	u810
  7560     0615                     u811:
  7561     0615  2E10               	goto	l2695
  7562     0616                     u810:
  7563     0616                     l288:
  7564                           
  7565                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  7566     0616  0021               	movlb	1	; select bank1
  7567     0617  1A11               	btfsc	17,4	;volatile
  7568     0618  2E1A               	goto	u821
  7569     0619  2E1B               	goto	u820
  7570     061A                     u821:
  7571     061A  2E1F               	goto	l289
  7572     061B                     u820:
  7573     061B                     l2697:
  7574                           
  7575                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  7576     061B  0873               	movf	EUSART_Write@txData,w
  7577     061C  0023               	movlb	3	; select bank3
  7578     061D  009A               	movwf	26	;volatile
  7579                           
  7580                           ;mcc_generated_files/eusart.c: 182:     }
  7581     061E  2E35               	goto	l2709
  7582     061F                     l289:	
  7583                           ;mcc_generated_files/eusart.c: 183:     else
  7584                           
  7585                           
  7586                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  7587     061F  1211               	bcf	17,4	;volatile
  7588     0620                     l2699:
  7589                           
  7590                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  7591     0620  0020               	movlb	0	; select bank0
  7592     0621  086C               	movf	_eusartTxHead,w
  7593     0622  3E30               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  7594     0623  0086               	movwf	6
  7595     0624  3001               	movlw	1	; select bank2/3
  7596     0625  0087               	movwf	7
  7597     0626  0873               	movf	EUSART_Write@txData,w
  7598     0627  0081               	movwf	1
  7599     0628                     l2701:
  7600     0628  3001               	movlw	1
  7601     0629  00F2               	movwf	??_EUSART_Write
  7602     062A  0872               	movf	??_EUSART_Write,w
  7603     062B  07EC               	addwf	_eusartTxHead,f	;volatile
  7604     062C                     l2703:
  7605                           
  7606                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  7607     062C  3010               	movlw	16
  7608     062D  026C               	subwf	_eusartTxHead,w	;volatile
  7609     062E  1C03               	skipc
  7610     062F  2E31               	goto	u831
  7611     0630  2E32               	goto	u830
  7612     0631                     u831:
  7613     0631  2E33               	goto	l2707
  7614     0632                     u830:
  7615     0632                     l2705:
  7616                           
  7617                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  7618     0632  01EC               	clrf	_eusartTxHead	;volatile
  7619     0633                     l2707:
  7620                           
  7621                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  7622     0633  3001               	movlw	1
  7623     0634  02EA               	subwf	_eusartTxBufferRemaining,f	;volatile
  7624     0635                     l2709:
  7625                           
  7626                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  7627     0635  0021               	movlb	1	; select bank1
  7628     0636  1611               	bsf	17,4	;volatile
  7629     0637                     l292:
  7630     0637  0008               	return
  7631     0638                     __end_of_EUSART_Write:
  7632                           
  7633                           	psect	text45
  7634     0507                     __ptext45:	
  7635 ;; *************** function _ModbusSlave_Init *****************
  7636 ;; Defined at:
  7637 ;;		line 234 in file "Mobbus_Slave.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;  _SW_Ad          1    wreg     char 
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;  _SW_Ad          1    2[COMMON] char 
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      void 
  7644 ;; Registers used:
  7645 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7651 ;;      Params:         0       0       0       0       0       0       0       0
  7652 ;;      Locals:         1       0       0       0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0       0
  7654 ;;      Totals:         1       0       0       0       0       0       0       0
  7655 ;;Total ram usage:        1 bytes
  7656 ;; Hardware stack levels used: 1
  7657 ;; Hardware stack levels required when called: 4
  7658 ;; This function calls:
  7659 ;;		Nothing
  7660 ;; This function is called by:
  7661 ;;		_Task_MB
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665     0507                     _ModbusSlave_Init:	
  7666                           ;psect for function _ModbusSlave_Init
  7667                           
  7668                           
  7669                           ;incstack = 0
  7670                           ; Regs used in _ModbusSlave_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  7671                           ;ModbusSlave_Init@_SW_Ad stored from wreg
  7672     0507  00F2               	movwf	ModbusSlave_Init@_SW_Ad
  7673     0508                     l3157:
  7674                           
  7675                           ;Mobbus_Slave.c: 235:     SES_Modbus.u8id = (uint8_t) _SW_Ad;
  7676     0508  30D4               	movlw	212
  7677     0509  0086               	movwf	6
  7678     050A  3020               	movlw	32
  7679     050B  0087               	movwf	7
  7680     050C  0872               	movf	ModbusSlave_Init@_SW_Ad,w
  7681     050D  3FC0               	movwi [0]fsr1
  7682                           
  7683                           ;Mobbus_Slave.c: 236:     SES_Modbus.u8txenpin = RS485;
  7684     050E  30D5               	movlw	213
  7685     050F  0086               	movwf	6
  7686     0510  3020               	movlw	32
  7687     0511  0087               	movwf	7
  7688     0512  3002               	movlw	2
  7689     0513  0081               	movwf	1
  7690     0514                     l3159:
  7691                           
  7692                           ;Mobbus_Slave.c: 237:     SES_Modbus.u16timeOut = 1000;
  7693     0514  30DC               	movlw	220
  7694     0515  0086               	movwf	6
  7695     0516  3021               	movlw	33
  7696     0517  0087               	movwf	7
  7697     0518  30E8               	movlw	232
  7698     0519  3FC0               	movwi [0]fsr1
  7699     051A  3003               	movlw	3
  7700     051B  3FC1               	movwi [1]fsr1
  7701     051C                     l3161:
  7702                           
  7703                           ;Mobbus_Slave.c: 238:     SES_Modbus.u32overTime = 0;
  7704     051C  30E6               	movlw	230
  7705     051D  0086               	movwf	6
  7706     051E  3021               	movlw	33
  7707     051F  0087               	movwf	7
  7708     0520  3000               	movlw	0
  7709     0521  3FC0               	movwi [0]fsr1
  7710     0522  3FC1               	movwi [1]fsr1
  7711     0523  3FC2               	movwi [2]fsr1
  7712     0524  3FC3               	movwi [3]fsr1
  7713     0525                     l3163:
  7714                           
  7715                           ;Mobbus_Slave.c: 242:     SES_Modbus.u8lastRec = SES_Modbus.u8BufferSize = 0;
  7716     0525  30D2               	movlw	210
  7717     0526  0086               	movwf	6
  7718     0527  3021               	movlw	33
  7719     0528  0087               	movwf	7
  7720     0529  0181               	clrf	1
  7721     052A  30D3               	movlw	211
  7722     052B  0086               	movwf	6
  7723     052C  3021               	movlw	33
  7724     052D  0087               	movwf	7
  7725     052E  0181               	clrf	1
  7726     052F                     l3165:
  7727                           
  7728                           ;Mobbus_Slave.c: 243:     SES_Modbus.u16InCnt = SES_Modbus.u16OutCnt = SES_Modbus.u16err
      +                          Cnt = 0;
  7729     052F  30DA               	movlw	218
  7730     0530  0086               	movwf	6
  7731     0531  3021               	movlw	33
  7732     0532  0087               	movwf	7
  7733     0533  3000               	movlw	0
  7734     0534  3FC0               	movwi [0]fsr1
  7735     0535  3FC1               	movwi [1]fsr1
  7736     0536  30D8               	movlw	216
  7737     0537  0086               	movwf	6
  7738     0538  3021               	movlw	33
  7739     0539  0087               	movwf	7
  7740     053A  3000               	movlw	0
  7741     053B  3FC0               	movwi [0]fsr1
  7742     053C  3FC1               	movwi [1]fsr1
  7743     053D  30D6               	movlw	214
  7744     053E  0086               	movwf	6
  7745     053F  3021               	movlw	33
  7746     0540  0087               	movwf	7
  7747     0541  3000               	movlw	0
  7748     0542  3FC0               	movwi [0]fsr1
  7749     0543  3FC1               	movwi [1]fsr1
  7750     0544                     l603:
  7751     0544  0008               	return
  7752     0545                     __end_of_ModbusSlave_Init:
  7753                           
  7754                           	psect	text46
  7755     06AC                     __ptext46:	
  7756 ;; *************** function _Task_Indicator *****************
  7757 ;; Defined at:
  7758 ;;		line 7 in file "MCU.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;		None
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;		None
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7772 ;;      Params:         0       0       0       0       0       0       0       0
  7773 ;;      Locals:         0       0       0       0       0       0       0       0
  7774 ;;      Temps:          2       0       0       0       0       0       0       0
  7775 ;;      Totals:         2       0       0       0       0       0       0       0
  7776 ;;Total ram usage:        2 bytes
  7777 ;; Hardware stack levels used: 1
  7778 ;; Hardware stack levels required when called: 4
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		_App_Process
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786     06AC                     _Task_Indicator:	
  7787                           ;psect for function _Task_Indicator
  7788                           
  7789     06AC                     l3265:	
  7790                           ;incstack = 0
  7791                           ; Regs used in _Task_Indicator: [wreg-fsr0h+status,2+status,0]
  7792                           
  7793                           
  7794                           ;MCU.c: 8:     switch (f_Indicator) {
  7795     06AC  2EB9               	goto	l3269
  7796     06AD                     l475:	
  7797                           ;MCU.c: 10:         {;MCU.c: 11:             do { LATCbits.LATC1 = 1; } while(0);
  7798                           
  7799     06AD  0022               	movlb	2	; select bank2
  7800     06AE  148E               	bsf	14,1	;volatile
  7801     06AF                     l477:	
  7802                           ;MCU.c: 12:             do { LATCbits.LATC0 = 1; } while(0);
  7803                           
  7804     06AF  140E               	bsf	14,0	;volatile
  7805     06B0  2ECF               	goto	l490
  7806     06B1                     l481:	
  7807                           ;MCU.c: 16:         {;MCU.c: 17:             do { LATCbits.LATC1 = 0; } while(0);
  7808                           
  7809     06B1  0022               	movlb	2	; select bank2
  7810     06B2  108E               	bcf	14,1	;volatile
  7811     06B3                     l483:	
  7812                           ;MCU.c: 18:             do { LATCbits.LATC0 = 1; } while(0);
  7813                           
  7814     06B3  140E               	bsf	14,0	;volatile
  7815     06B4  2ECF               	goto	l490
  7816     06B5                     l486:	
  7817                           ;MCU.c: 22:         {;MCU.c: 23:             do { LATCbits.LATC1 = 1; } while(0);
  7818                           
  7819     06B5  0022               	movlb	2	; select bank2
  7820     06B6  148E               	bsf	14,1	;volatile
  7821     06B7                     l488:	
  7822                           ;MCU.c: 24:             do { LATCbits.LATC0 = 0; } while(0);
  7823                           
  7824     06B7  100E               	bcf	14,0	;volatile
  7825     06B8  2ECF               	goto	l490
  7826     06B9                     l3269:
  7827     06B9  0020               	movlb	0	; select bank0
  7828     06BA  0867               	movf	_f_Indicator,w
  7829     06BB  00F2               	movwf	??_Task_Indicator
  7830     06BC  01F3               	clrf	??_Task_Indicator+1
  7831     06BD  1BF2               	btfsc	??_Task_Indicator,7
  7832     06BE  03F3               	decf	??_Task_Indicator+1,f
  7833                           
  7834                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7835                           ; Switch size 1, requested type "simple"
  7836                           ; Number of cases is 1, Range of values is 0 to 0
  7837                           ; switch strategies available:
  7838                           ; Name         Instructions Cycles
  7839                           ; simple_byte            4     3 (average)
  7840                           ; direct_byte            8     6 (fixed)
  7841                           ; jumptable            260     6 (fixed)
  7842                           ;	Chosen strategy is simple_byte
  7843     06BF  0873               	movf	??_Task_Indicator+1,w
  7844     06C0  3A00               	xorlw	0	; case 0
  7845     06C1  1903               	skipnz
  7846     06C2  2EC4               	goto	l4487
  7847     06C3  2ECF               	goto	l490
  7848     06C4                     l4487:
  7849                           
  7850                           ; Switch size 1, requested type "simple"
  7851                           ; Number of cases is 3, Range of values is 0 to 2
  7852                           ; switch strategies available:
  7853                           ; Name         Instructions Cycles
  7854                           ; simple_byte           10     6 (average)
  7855                           ; direct_byte           12     6 (fixed)
  7856                           ; jumptable            260     6 (fixed)
  7857                           ;	Chosen strategy is simple_byte
  7858     06C4  0872               	movf	??_Task_Indicator,w
  7859     06C5  3A00               	xorlw	0	; case 0
  7860     06C6  1903               	skipnz
  7861     06C7  2EAD               	goto	l475
  7862     06C8  3A01               	xorlw	1	; case 1
  7863     06C9  1903               	skipnz
  7864     06CA  2EB1               	goto	l481
  7865     06CB  3A03               	xorlw	3	; case 2
  7866     06CC  1903               	skipnz
  7867     06CD  2EB5               	goto	l486
  7868     06CE  2ECF               	goto	l490
  7869     06CF                     l490:
  7870     06CF  0008               	return
  7871     06D0                     __end_of_Task_Indicator:
  7872                           
  7873                           	psect	text47
  7874     0F64                     __ptext47:	
  7875 ;; *************** function _App_Init *****************
  7876 ;; Defined at:
  7877 ;;		line 42 in file "MCU.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;		None
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;		None
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      void 
  7884 ;; Registers used:
  7885 ;;		wreg, status,2, status,0, pclath, cstack
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7891 ;;      Params:         0       0       0       0       0       0       0       0
  7892 ;;      Locals:         0       0       0       0       0       0       0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0       0
  7894 ;;      Totals:         0       0       0       0       0       0       0       0
  7895 ;;Total ram usage:        0 bytes
  7896 ;; Hardware stack levels used: 1
  7897 ;; Hardware stack levels required when called: 6
  7898 ;; This function calls:
  7899 ;;		_Device_Init
  7900 ;;		_TMR1_StartTimer
  7901 ;;		_Tick_Init_SES
  7902 ;; This function is called by:
  7903 ;;		_main
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907     0F64                     _App_Init:	
  7908                           ;psect for function _App_Init
  7909                           
  7910     0F64                     l3367:	
  7911                           ;incstack = 0
  7912                           ; Regs used in _App_Init: [wreg+status,2+status,0+pclath+cstack]
  7913                           
  7914                           
  7915                           ;MCU.c: 43:     Device_Init();
  7916     0F64  3186  2638  318F   	fcall	_Device_Init
  7917     0F67                     l3369:
  7918                           
  7919                           ;MCU.c: 44:     TMR1_StartTimer();
  7920     0F67  318F  2700  318F   	fcall	_TMR1_StartTimer
  7921     0F6A                     l3371:
  7922                           
  7923                           ;MCU.c: 45:     Tick_Init_SES();
  7924     0F6A  3187  27DB  318F   	fcall	_Tick_Init_SES
  7925     0F6D                     l504:
  7926     0F6D  0008               	return
  7927     0F6E                     __end_of_App_Init:
  7928                           
  7929                           	psect	text48
  7930     07DB                     __ptext48:	
  7931 ;; *************** function _Tick_Init_SES *****************
  7932 ;; Defined at:
  7933 ;;		line 6 in file "tick.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;		None
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;		None
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  1    wreg      void 
  7940 ;; Registers used:
  7941 ;;		wreg, status,2, status,0, pclath, cstack
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7947 ;;      Params:         0       0       0       0       0       0       0       0
  7948 ;;      Locals:         0       0       0       0       0       0       0       0
  7949 ;;      Temps:          0       0       0       0       0       0       0       0
  7950 ;;      Totals:         0       0       0       0       0       0       0       0
  7951 ;;Total ram usage:        0 bytes
  7952 ;; Hardware stack levels used: 1
  7953 ;; Hardware stack levels required when called: 5
  7954 ;; This function calls:
  7955 ;;		_TMR1_SetInterruptHandler
  7956 ;; This function is called by:
  7957 ;;		_App_Init
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961     07DB                     _Tick_Init_SES:	
  7962                           ;psect for function _Tick_Init_SES
  7963                           
  7964     07DB                     l3279:	
  7965                           ;incstack = 0
  7966                           ; Regs used in _Tick_Init_SES: [wreg+status,2+status,0+pclath+cstack]
  7967                           
  7968                           
  7969                           ;tick.c: 7:     device_time = 0;
  7970     07DB  3000               	movlw	0
  7971     07DC  0020               	movlb	0	; select bank0
  7972     07DD  00DD               	movwf	_device_time+3	;volatile
  7973     07DE  3000               	movlw	0
  7974     07DF  00DC               	movwf	_device_time+2	;volatile
  7975     07E0  3000               	movlw	0
  7976     07E1  00DB               	movwf	_device_time+1	;volatile
  7977     07E2  3000               	movlw	0
  7978     07E3  00DA               	movwf	_device_time	;volatile
  7979     07E4                     l3281:
  7980                           
  7981                           ;tick.c: 8:     TMR1_SetInterruptHandler(&rtcc_handle);
  7982     07E4  305A               	movlw	low _rtcc_handle
  7983     07E5  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  7984     07E6  300F               	movlw	high _rtcc_handle
  7985     07E7  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  7986     07E8  318F  2729  3187   	fcall	_TMR1_SetInterruptHandler
  7987     07EB                     l622:
  7988     07EB  0008               	return
  7989     07EC                     __end_of_Tick_Init_SES:
  7990                           
  7991                           	psect	text49
  7992     0F29                     __ptext49:	
  7993 ;; *************** function _TMR1_SetInterruptHandler *****************
  7994 ;; Defined at:
  7995 ;;		line 164 in file "mcc_generated_files/tmr1.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  7998 ;;		 -> rtcc_handle(1), TMR1_DefaultInterruptHandler(1), 
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;		None
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  1    wreg      void 
  8003 ;; Registers used:
  8004 ;;		wreg
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8010 ;;      Params:         2       0       0       0       0       0       0       0
  8011 ;;      Locals:         0       0       0       0       0       0       0       0
  8012 ;;      Temps:          0       0       0       0       0       0       0       0
  8013 ;;      Totals:         2       0       0       0       0       0       0       0
  8014 ;;Total ram usage:        2 bytes
  8015 ;; Hardware stack levels used: 1
  8016 ;; Hardware stack levels required when called: 4
  8017 ;; This function calls:
  8018 ;;		Nothing
  8019 ;; This function is called by:
  8020 ;;		_TMR1_Initialize
  8021 ;;		_Tick_Init_SES
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025     0F29                     _TMR1_SetInterruptHandler:	
  8026                           ;psect for function _TMR1_SetInterruptHandler
  8027                           
  8028     0F29                     l3139:	
  8029                           ;incstack = 0
  8030                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  8031                           
  8032                           
  8033                           ;mcc_generated_files/tmr1.c: 165:     TMR1_InterruptHandler = InterruptHandler;
  8034     0F29  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  8035     0F2A  0021               	movlb	1	; select bank1
  8036     0F2B  00D6               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  8037     0F2C  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  8038     0F2D  00D5               	movwf	_TMR1_InterruptHandler^(0+128)
  8039     0F2E                     l378:
  8040     0F2E  0008               	return
  8041     0F2F                     __end_of_TMR1_SetInterruptHandler:
  8042                           
  8043                           	psect	text50
  8044     0F00                     __ptext50:	
  8045 ;; *************** function _TMR1_StartTimer *****************
  8046 ;; Defined at:
  8047 ;;		line 92 in file "mcc_generated_files/tmr1.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;		None
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;		None
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		None
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8061 ;;      Params:         0       0       0       0       0       0       0       0
  8062 ;;      Locals:         0       0       0       0       0       0       0       0
  8063 ;;      Temps:          0       0       0       0       0       0       0       0
  8064 ;;      Totals:         0       0       0       0       0       0       0       0
  8065 ;;Total ram usage:        0 bytes
  8066 ;; Hardware stack levels used: 1
  8067 ;; Hardware stack levels required when called: 4
  8068 ;; This function calls:
  8069 ;;		Nothing
  8070 ;; This function is called by:
  8071 ;;		_App_Init
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075     0F00                     _TMR1_StartTimer:	
  8076                           ;psect for function _TMR1_StartTimer
  8077                           
  8078     0F00                     l2139:	
  8079                           ;incstack = 0
  8080                           ; Regs used in _TMR1_StartTimer: []
  8081                           
  8082                           
  8083                           ;mcc_generated_files/tmr1.c: 94:     T1CONbits.TMR1ON = 1;
  8084     0F00  0020               	movlb	0	; select bank0
  8085     0F01  1418               	bsf	24,0	;volatile
  8086     0F02                     l363:
  8087     0F02  0008               	return
  8088     0F03                     __end_of_TMR1_StartTimer:
  8089                           
  8090                           	psect	text51
  8091     0638                     __ptext51:	
  8092 ;; *************** function _Device_Init *****************
  8093 ;; Defined at:
  8094 ;;		line 30 in file "MCU.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;		None
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;		None
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      void 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8108 ;;      Params:         0       0       0       0       0       0       0       0
  8109 ;;      Locals:         0       0       0       0       0       0       0       0
  8110 ;;      Temps:          3       0       0       0       0       0       0       0
  8111 ;;      Totals:         3       0       0       0       0       0       0       0
  8112 ;;Total ram usage:        3 bytes
  8113 ;; Hardware stack levels used: 1
  8114 ;; Hardware stack levels required when called: 4
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_App_Init
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122     0638                     _Device_Init:	
  8123                           ;psect for function _Device_Init
  8124                           
  8125     0638                     l3275:	
  8126                           ;incstack = 0
  8127                           ; Regs used in _Device_Init: [wreg+status,2+status,0]
  8128                           
  8129                           
  8130                           ;MCU.c: 31:     static int8_t value_SW1, value_SW2, value_SW3, value_SW4;;MCU.c: 33:    
      +                           value_SW1 = PORTAbits.RA0;
  8131     0638  3000               	movlw	0
  8132     0639  0020               	movlb	0	; select bank0
  8133     063A  180C               	btfsc	12,0	;volatile
  8134     063B  3001               	movlw	1
  8135     063C  0021               	movlb	1	; select bank1
  8136     063D  00E4               	movwf	Device_Init@value_SW1^(0+128)
  8137                           
  8138                           ;MCU.c: 34:     value_SW2 = PORTAbits.RA1;
  8139     063E  3000               	movlw	0
  8140     063F  0020               	movlb	0	; select bank0
  8141     0640  188C               	btfsc	12,1	;volatile
  8142     0641  3001               	movlw	1
  8143     0642  0021               	movlb	1	; select bank1
  8144     0643  00E3               	movwf	Device_Init@value_SW2^(0+128)
  8145                           
  8146                           ;MCU.c: 35:     value_SW3 = PORTAbits.RA2;
  8147     0644  3000               	movlw	0
  8148     0645  0020               	movlb	0	; select bank0
  8149     0646  190C               	btfsc	12,2	;volatile
  8150     0647  3001               	movlw	1
  8151     0648  0021               	movlb	1	; select bank1
  8152     0649  00E2               	movwf	Device_Init@value_SW3^(0+128)
  8153                           
  8154                           ;MCU.c: 36:     value_SW4 = PORTAbits.RA3;
  8155     064A  3000               	movlw	0
  8156     064B  0020               	movlb	0	; select bank0
  8157     064C  198C               	btfsc	12,3	;volatile
  8158     064D  3001               	movlw	1
  8159     064E  0021               	movlb	1	; select bank1
  8160     064F  00E1               	movwf	Device_Init@value_SW4^(0+128)
  8161     0650                     l3277:
  8162                           
  8163                           ;MCU.c: 39:     SW_Ad = (((value_SW1 & 0x01) | (value_SW2 & 0x02) | (value_SW3 & 0x04) |
      +                           (value_SW4 & 0x08)) & (0xFF));
  8164     0650  3008               	movlw	8
  8165     0651  0561               	andwf	Device_Init@value_SW4^(0+128),w
  8166     0652  00F2               	movwf	??_Device_Init
  8167     0653  3004               	movlw	4
  8168     0654  0562               	andwf	Device_Init@value_SW3^(0+128),w
  8169     0655  00F3               	movwf	??_Device_Init+1
  8170     0656  3002               	movlw	2
  8171     0657  0563               	andwf	Device_Init@value_SW2^(0+128),w
  8172     0658  00F4               	movwf	??_Device_Init+2
  8173     0659  0864               	movf	Device_Init@value_SW1^(0+128),w
  8174     065A  3901               	andlw	1
  8175     065B  0474               	iorwf	??_Device_Init+2,w
  8176     065C  0473               	iorwf	??_Device_Init+1,w
  8177     065D  0472               	iorwf	??_Device_Init,w
  8178     065E  0020               	movlb	0	; select bank0
  8179     065F  00EF               	movwf	_SW_Ad
  8180     0660                     l501:
  8181     0660  0008               	return
  8182     0661                     __end_of_Device_Init:
  8183                           
  8184                           	psect	intentry
  8185     0004                     __pintentry:	
  8186 ;; *************** function _INTERRUPT_InterruptManager *****************
  8187 ;; Defined at:
  8188 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;		None
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;		None
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  1    wreg      void 
  8195 ;; Registers used:
  8196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8202 ;;      Params:         0       0       0       0       0       0       0       0
  8203 ;;      Locals:         0       0       0       0       0       0       0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0
  8205 ;;      Totals:         0       0       0       0       0       0       0       0
  8206 ;;Total ram usage:        0 bytes
  8207 ;; Hardware stack levels used: 1
  8208 ;; Hardware stack levels required when called: 3
  8209 ;; This function calls:
  8210 ;;		NULL
  8211 ;;		_EUSART_Receive_ISR
  8212 ;;		_EUSART_Transmit_ISR
  8213 ;;		_TMR1_ISR
  8214 ;; This function is called by:
  8215 ;;		Interrupt level 1
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219     0004                     _INTERRUPT_InterruptManager:
  8220                           
  8221                           ;incstack = 0
  8222     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  8223                           
  8224                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8225     0005  3180               	pagesel	$
  8226     0006                     i1l3451:
  8227                           
  8228                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  8229     0006  1F0B               	btfss	11,6	;volatile
  8230     0007  2809               	goto	u144_21
  8231     0008  280A               	goto	u144_20
  8232     0009                     u144_21:
  8233     0009  2850               	goto	i1l198
  8234     000A                     u144_20:
  8235     000A                     i1l3453:
  8236                           
  8237                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  8238     000A  0021               	movlb	1	; select bank1
  8239     000B  1E11               	btfss	17,4	;volatile
  8240     000C  280E               	goto	u145_21
  8241     000D  280F               	goto	u145_20
  8242     000E                     u145_21:
  8243     000E  281B               	goto	i1l187
  8244     000F                     u145_20:
  8245     000F                     i1l3455:
  8246     000F  0020               	movlb	0	; select bank0
  8247     0010  1E11               	btfss	17,4	;volatile
  8248     0011  2813               	goto	u146_21
  8249     0012  2814               	goto	u146_20
  8250     0013                     u146_21:
  8251     0013  281B               	goto	i1l187
  8252     0014                     u146_20:
  8253     0014                     i1l3457:
  8254                           
  8255                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  8256     0014  0021               	movlb	1	; select bank1
  8257     0015  0860               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
  8258     0016  008A               	movwf	10
  8259     0017  085F               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
  8260     0018  000A               	callw
  8261     0019  3180               	pagesel	$
  8262                           
  8263                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  8264     001A  2850               	goto	i1l198
  8265     001B                     i1l187:	
  8266                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  8267                           
  8268     001B  0021               	movlb	1	; select bank1
  8269     001C  1E91               	btfss	17,5	;volatile
  8270     001D  281F               	goto	u147_21
  8271     001E  2820               	goto	u147_20
  8272     001F                     u147_21:
  8273     001F  282C               	goto	i1l189
  8274     0020                     u147_20:
  8275     0020                     i1l3459:
  8276     0020  0020               	movlb	0	; select bank0
  8277     0021  1E91               	btfss	17,5	;volatile
  8278     0022  2824               	goto	u148_21
  8279     0023  2825               	goto	u148_20
  8280     0024                     u148_21:
  8281     0024  282C               	goto	i1l189
  8282     0025                     u148_20:
  8283     0025                     i1l3461:
  8284                           
  8285                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  8286     0025  0021               	movlb	1	; select bank1
  8287     0026  085E               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  8288     0027  008A               	movwf	10
  8289     0028  085D               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  8290     0029  000A               	callw
  8291     002A  3180               	pagesel	$
  8292                           
  8293                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  8294     002B  2850               	goto	i1l198
  8295     002C                     i1l189:	
  8296                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE2bits.BCLIE == 1 && PIR
      +                          2bits.BCLIF == 1)
  8297                           
  8298     002C  0021               	movlb	1	; select bank1
  8299     002D  1D92               	btfss	18,3	;volatile
  8300     002E  2830               	goto	u149_21
  8301     002F  2831               	goto	u149_20
  8302     0030                     u149_21:
  8303     0030  2837               	goto	i1l191
  8304     0031                     u149_20:
  8305     0031                     i1l3463:
  8306     0031  0020               	movlb	0	; select bank0
  8307     0032  1D92               	btfss	18,3	;volatile
  8308     0033  2835               	goto	u150_21
  8309     0034  2836               	goto	u150_20
  8310     0035                     u150_21:
  8311     0035  2837               	goto	i1l191
  8312     0036                     u150_20:
  8313     0036  2850               	goto	i1l198
  8314     0037                     i1l191:	
  8315                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.SSPIE == 1 && PIR
      +                          1bits.SSPIF == 1)
  8316                           
  8317     0037  0021               	movlb	1	; select bank1
  8318     0038  1D91               	btfss	17,3	;volatile
  8319     0039  283B               	goto	u151_21
  8320     003A  283C               	goto	u151_20
  8321     003B                     u151_21:
  8322     003B  2842               	goto	i1l193
  8323     003C                     u151_20:
  8324     003C                     i1l3467:
  8325     003C  0020               	movlb	0	; select bank0
  8326     003D  1D91               	btfss	17,3	;volatile
  8327     003E  2840               	goto	u152_21
  8328     003F  2841               	goto	u152_20
  8329     0040                     u152_21:
  8330     0040  2842               	goto	i1l193
  8331     0041                     u152_20:
  8332     0041  2850               	goto	i1l198
  8333     0042                     i1l193:	
  8334                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
  8335                           
  8336     0042  0021               	movlb	1	; select bank1
  8337     0043  1C11               	btfss	17,0	;volatile
  8338     0044  2846               	goto	u153_21
  8339     0045  2847               	goto	u153_20
  8340     0046                     u153_21:
  8341     0046  2850               	goto	i1l188
  8342     0047                     u153_20:
  8343     0047                     i1l3471:
  8344     0047  0020               	movlb	0	; select bank0
  8345     0048  1C11               	btfss	17,0	;volatile
  8346     0049  284B               	goto	u154_21
  8347     004A  284C               	goto	u154_20
  8348     004B                     u154_21:
  8349     004B  2850               	goto	i1l188
  8350     004C                     u154_20:
  8351     004C                     i1l3473:
  8352                           
  8353                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR1_ISR();
  8354     004C  318F  27C8  3180   	fcall	_TMR1_ISR
  8355                           
  8356                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  8357     004F  2850               	goto	i1l198
  8358     0050                     i1l188:
  8359     0050                     i1l198:	
  8360                           ;mcc_generated_files/interrupt_manager.c: 81:     }
  8361                           
  8362     0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8363     0051  0009               	retfie
  8364     0052                     __end_of_INTERRUPT_InterruptManager:
  8365                           
  8366                           	psect	text53
  8367     0FC8                     __ptext53:	
  8368 ;; *************** function _TMR1_ISR *****************
  8369 ;; Defined at:
  8370 ;;		line 146 in file "mcc_generated_files/tmr1.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;		None
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;		None
  8375 ;; Return value:  Size  Location     Type
  8376 ;;                  1    wreg      void 
  8377 ;; Registers used:
  8378 ;;		wreg, status,2, status,0, pclath, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8384 ;;      Params:         0       0       0       0       0       0       0       0
  8385 ;;      Locals:         0       0       0       0       0       0       0       0
  8386 ;;      Temps:          0       0       0       0       0       0       0       0
  8387 ;;      Totals:         0       0       0       0       0       0       0       0
  8388 ;;Total ram usage:        0 bytes
  8389 ;; Hardware stack levels used: 1
  8390 ;; Hardware stack levels required when called: 2
  8391 ;; This function calls:
  8392 ;;		_TMR1_CallBack
  8393 ;;		_TMR1_WriteTimer
  8394 ;; This function is called by:
  8395 ;;		_INTERRUPT_InterruptManager
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399     0FC8                     _TMR1_ISR:	
  8400                           ;psect for function _TMR1_ISR
  8401                           
  8402     0FC8                     i1l3331:	
  8403                           ;incstack = 0
  8404                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  8405                           
  8406                           
  8407                           ;mcc_generated_files/tmr1.c: 149:     PIR1bits.TMR1IF = 0;
  8408     0FC8  0020               	movlb	0	; select bank0
  8409     0FC9  1011               	bcf	17,0	;volatile
  8410     0FCA                     i1l3333:
  8411                           
  8412                           ;mcc_generated_files/tmr1.c: 150:     TMR1_WriteTimer(timer1ReloadVal);
  8413     0FCA  0863               	movf	_timer1ReloadVal+1,w	;volatile
  8414     0FCB  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  8415     0FCC  0862               	movf	_timer1ReloadVal,w	;volatile
  8416     0FCD  00F0               	movwf	TMR1_WriteTimer@timerVal
  8417     0FCE  3187  27EC  318F   	fcall	_TMR1_WriteTimer
  8418                           
  8419                           ;mcc_generated_files/tmr1.c: 154:     TMR1_CallBack();
  8420     0FD1  318F  27BB  318F   	fcall	_TMR1_CallBack
  8421     0FD4                     i1l371:
  8422     0FD4  0008               	return
  8423     0FD5                     __end_of_TMR1_ISR:
  8424                           
  8425                           	psect	text54
  8426     07EC                     __ptext54:	
  8427 ;; *************** function _TMR1_WriteTimer *****************
  8428 ;; Defined at:
  8429 ;;		line 116 in file "mcc_generated_files/tmr1.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;  timerVal        2    0[COMMON] unsigned short 
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;		None
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  1    wreg      void 
  8436 ;; Registers used:
  8437 ;;		wreg, status,2
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8443 ;;      Params:         2       0       0       0       0       0       0       0
  8444 ;;      Locals:         0       0       0       0       0       0       0       0
  8445 ;;      Temps:          0       0       0       0       0       0       0       0
  8446 ;;      Totals:         2       0       0       0       0       0       0       0
  8447 ;;Total ram usage:        2 bytes
  8448 ;; Hardware stack levels used: 1
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_TMR1_ISR
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456     07EC                     _TMR1_WriteTimer:	
  8457                           ;psect for function _TMR1_WriteTimer
  8458                           
  8459     07EC                     i1l3231:	
  8460                           ;incstack = 0
  8461                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  8462                           
  8463                           
  8464                           ;mcc_generated_files/tmr1.c: 117:     if (T1CONbits.nT1SYNC == 1) {
  8465     07EC  0020               	movlb	0	; select bank0
  8466     07ED  1D18               	btfss	24,2	;volatile
  8467     07EE  2FF0               	goto	u123_21
  8468     07EF  2FF1               	goto	u123_20
  8469     07F0                     u123_21:
  8470     07F0  2FF8               	goto	i1l3241
  8471     07F1                     u123_20:
  8472     07F1                     i1l3233:
  8473                           
  8474                           ;mcc_generated_files/tmr1.c: 119:         T1CONbits.TMR1ON = 0;
  8475     07F1  1018               	bcf	24,0	;volatile
  8476     07F2                     i1l3235:
  8477                           
  8478                           ;mcc_generated_files/tmr1.c: 122:         TMR1H = (uint8_t) (timerVal >> 8);
  8479     07F2  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  8480     07F3  0097               	movwf	23	;volatile
  8481     07F4                     i1l3237:
  8482                           
  8483                           ;mcc_generated_files/tmr1.c: 123:         TMR1L = (uint8_t) timerVal;
  8484     07F4  0870               	movf	TMR1_WriteTimer@timerVal,w
  8485     07F5  0096               	movwf	22	;volatile
  8486     07F6                     i1l3239:
  8487                           
  8488                           ;mcc_generated_files/tmr1.c: 126:         T1CONbits.TMR1ON = 1;
  8489     07F6  1418               	bsf	24,0	;volatile
  8490                           
  8491                           ;mcc_generated_files/tmr1.c: 127:     } else {
  8492     07F7  2FFC               	goto	i1l368
  8493     07F8                     i1l3241:
  8494                           
  8495                           ;mcc_generated_files/tmr1.c: 129:         TMR1H = (uint8_t) (timerVal >> 8);
  8496     07F8  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  8497     07F9  0097               	movwf	23	;volatile
  8498     07FA                     i1l3243:
  8499                           
  8500                           ;mcc_generated_files/tmr1.c: 130:         TMR1L = (uint8_t) timerVal;
  8501     07FA  0870               	movf	TMR1_WriteTimer@timerVal,w
  8502     07FB  0096               	movwf	22	;volatile
  8503     07FC                     i1l368:
  8504     07FC  0008               	return
  8505     07FD                     __end_of_TMR1_WriteTimer:
  8506                           
  8507                           	psect	text55
  8508     0FBB                     __ptext55:	
  8509 ;; *************** function _TMR1_CallBack *****************
  8510 ;; Defined at:
  8511 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;		None
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;		None
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  1    wreg      void 
  8518 ;; Registers used:
  8519 ;;		wreg, status,2, status,0, pclath, cstack
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8525 ;;      Params:         0       0       0       0       0       0       0       0
  8526 ;;      Locals:         0       0       0       0       0       0       0       0
  8527 ;;      Temps:          0       0       0       0       0       0       0       0
  8528 ;;      Totals:         0       0       0       0       0       0       0       0
  8529 ;;Total ram usage:        0 bytes
  8530 ;; Hardware stack levels used: 1
  8531 ;; Hardware stack levels required when called: 1
  8532 ;; This function calls:
  8533 ;;		NULL
  8534 ;;		_TMR1_DefaultInterruptHandler
  8535 ;;		_rtcc_handle
  8536 ;; This function is called by:
  8537 ;;		_TMR1_ISR
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541     0FBB                     _TMR1_CallBack:	
  8542                           ;psect for function _TMR1_CallBack
  8543                           
  8544     0FBB                     i1l3245:	
  8545                           ;incstack = 0
  8546                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  8547                           
  8548                           
  8549                           ;mcc_generated_files/tmr1.c: 159:     if (TMR1_InterruptHandler) {
  8550     0FBB  0021               	movlb	1	; select bank1
  8551     0FBC  0855               	movf	_TMR1_InterruptHandler^(0+128),w
  8552     0FBD  0456               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  8553     0FBE  1903               	btfsc	3,2
  8554     0FBF  2FC1               	goto	u124_21
  8555     0FC0  2FC2               	goto	u124_20
  8556     0FC1                     u124_21:
  8557     0FC1  2FC7               	goto	i1l375
  8558     0FC2                     u124_20:
  8559     0FC2                     i1l3247:
  8560                           
  8561                           ;mcc_generated_files/tmr1.c: 160:         TMR1_InterruptHandler();
  8562     0FC2  0856               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  8563     0FC3  008A               	movwf	10
  8564     0FC4  0855               	movf	_TMR1_InterruptHandler^(0+128),w
  8565     0FC5  000A               	callw
  8566     0FC6  318F               	pagesel	$
  8567     0FC7                     i1l375:
  8568     0FC7  0008               	return
  8569     0FC8                     __end_of_TMR1_CallBack:
  8570                           
  8571                           	psect	text56
  8572     0EFF                     __ptext56:	
  8573 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  8574 ;; Defined at:
  8575 ;;		line 168 in file "mcc_generated_files/tmr1.c"
  8576 ;; Parameters:    Size  Location     Type
  8577 ;;		None
  8578 ;; Auto vars:     Size  Location     Type
  8579 ;;		None
  8580 ;; Return value:  Size  Location     Type
  8581 ;;                  1    wreg      void 
  8582 ;; Registers used:
  8583 ;;		None
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8589 ;;      Params:         0       0       0       0       0       0       0       0
  8590 ;;      Locals:         0       0       0       0       0       0       0       0
  8591 ;;      Temps:          0       0       0       0       0       0       0       0
  8592 ;;      Totals:         0       0       0       0       0       0       0       0
  8593 ;;Total ram usage:        0 bytes
  8594 ;; Hardware stack levels used: 1
  8595 ;; This function calls:
  8596 ;;		Nothing
  8597 ;; This function is called by:
  8598 ;;		_TMR1_Initialize
  8599 ;;		_TMR1_CallBack
  8600 ;; This function uses a non-reentrant model
  8601 ;;
  8602                           
  8603     0EFF                     _TMR1_DefaultInterruptHandler:	
  8604                           ;psect for function _TMR1_DefaultInterruptHandler
  8605                           
  8606     0EFF                     i1l381:	
  8607                           ;incstack = 0
  8608                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  8609                           
  8610     0EFF  0008               	return
  8611     0F00                     __end_of_TMR1_DefaultInterruptHandler:
  8612                           
  8613                           	psect	text57
  8614     0F5A                     __ptext57:	
  8615 ;; *************** function _rtcc_handle *****************
  8616 ;; Defined at:
  8617 ;;		line 11 in file "tick.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;		None
  8620 ;; Auto vars:     Size  Location     Type
  8621 ;;		None
  8622 ;; Return value:  Size  Location     Type
  8623 ;;                  1    wreg      void 
  8624 ;; Registers used:
  8625 ;;		wreg
  8626 ;; Tracked objects:
  8627 ;;		On entry : 0/0
  8628 ;;		On exit  : 0/0
  8629 ;;		Unchanged: 0/0
  8630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8631 ;;      Params:         0       0       0       0       0       0       0       0
  8632 ;;      Locals:         0       0       0       0       0       0       0       0
  8633 ;;      Temps:          0       0       0       0       0       0       0       0
  8634 ;;      Totals:         0       0       0       0       0       0       0       0
  8635 ;;Total ram usage:        0 bytes
  8636 ;; Hardware stack levels used: 1
  8637 ;; This function calls:
  8638 ;;		Nothing
  8639 ;; This function is called by:
  8640 ;;		_Tick_Init_SES
  8641 ;;		_TMR1_CallBack
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645     0F5A                     _rtcc_handle:	
  8646                           ;psect for function _rtcc_handle
  8647                           
  8648     0F5A                     i1l3175:	
  8649                           ;incstack = 0
  8650                           ; Regs used in _rtcc_handle: [wreg]
  8651                           
  8652                           
  8653                           ;tick.c: 12:     device_time++;
  8654     0F5A  3001               	movlw	1
  8655     0F5B  0020               	movlb	0	; select bank0
  8656     0F5C  07DA               	addwf	_device_time,f	;volatile
  8657     0F5D  3000               	movlw	0
  8658     0F5E  3DDB               	addwfc	_device_time+1,f	;volatile
  8659     0F5F  3000               	movlw	0
  8660     0F60  3DDC               	addwfc	_device_time+2,f	;volatile
  8661     0F61  3000               	movlw	0
  8662     0F62  3DDD               	addwfc	_device_time+3,f	;volatile
  8663     0F63                     i1l625:
  8664     0F63  0008               	return
  8665     0F64                     __end_of_rtcc_handle:
  8666                           
  8667                           	psect	text58
  8668     06D0                     __ptext58:	
  8669 ;; *************** function _EUSART_Transmit_ISR *****************
  8670 ;; Defined at:
  8671 ;;		line 197 in file "mcc_generated_files/eusart.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;		None
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;		None
  8676 ;; Return value:  Size  Location     Type
  8677 ;;                  1    wreg      void 
  8678 ;; Registers used:
  8679 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8680 ;; Tracked objects:
  8681 ;;		On entry : 0/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8685 ;;      Params:         0       0       0       0       0       0       0       0
  8686 ;;      Locals:         0       0       0       0       0       0       0       0
  8687 ;;      Temps:          1       0       0       0       0       0       0       0
  8688 ;;      Totals:         1       0       0       0       0       0       0       0
  8689 ;;Total ram usage:        1 bytes
  8690 ;; Hardware stack levels used: 1
  8691 ;; This function calls:
  8692 ;;		Nothing
  8693 ;; This function is called by:
  8694 ;;		_EUSART_Initialize
  8695 ;;		_INTERRUPT_InterruptManager
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699     06D0                     _EUSART_Transmit_ISR:	
  8700                           ;psect for function _EUSART_Transmit_ISR
  8701                           
  8702     06D0                     i1l3335:	
  8703                           ;incstack = 0
  8704                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8705                           
  8706                           
  8707                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  8708     06D0  3010               	movlw	16
  8709     06D1  0020               	movlb	0	; select bank0
  8710     06D2  026A               	subwf	_eusartTxBufferRemaining,w	;volatile
  8711     06D3  1803               	skipnc
  8712     06D4  2ED6               	goto	u129_21
  8713     06D5  2ED7               	goto	u129_20
  8714     06D6                     u129_21:
  8715     06D6  2EF0               	goto	i1l295
  8716     06D7                     u129_20:
  8717     06D7                     i1l3337:
  8718                           
  8719                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  8720     06D7  086B               	movf	_eusartTxTail,w
  8721     06D8  3E30               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  8722     06D9  0086               	movwf	6
  8723     06DA  3001               	movlw	1	; select bank2/3
  8724     06DB  0087               	movwf	7
  8725     06DC  0801               	movf	1,w
  8726     06DD  0023               	movlb	3	; select bank3
  8727     06DE  009A               	movwf	26	;volatile
  8728     06DF                     i1l3339:
  8729     06DF  3001               	movlw	1
  8730     06E0  00F0               	movwf	??_EUSART_Transmit_ISR
  8731     06E1  0870               	movf	??_EUSART_Transmit_ISR,w
  8732     06E2  0020               	movlb	0	; select bank0
  8733     06E3  07EB               	addwf	_eusartTxTail,f	;volatile
  8734     06E4                     i1l3341:
  8735                           
  8736                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  8737     06E4  3010               	movlw	16
  8738     06E5  026B               	subwf	_eusartTxTail,w	;volatile
  8739     06E6  1C03               	skipc
  8740     06E7  2EE9               	goto	u130_21
  8741     06E8  2EEA               	goto	u130_20
  8742     06E9                     u130_21:
  8743     06E9  2EEB               	goto	i1l3345
  8744     06EA                     u130_20:
  8745     06EA                     i1l3343:
  8746                           
  8747                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  8748     06EA  01EB               	clrf	_eusartTxTail	;volatile
  8749     06EB                     i1l3345:
  8750                           
  8751                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  8752     06EB  3001               	movlw	1
  8753     06EC  00F0               	movwf	??_EUSART_Transmit_ISR
  8754     06ED  0870               	movf	??_EUSART_Transmit_ISR,w
  8755     06EE  07EA               	addwf	_eusartTxBufferRemaining,f	;volatile
  8756                           
  8757                           ;mcc_generated_files/eusart.c: 209:     }
  8758     06EF  2EF2               	goto	i1l298
  8759     06F0                     i1l295:	
  8760                           ;mcc_generated_files/eusart.c: 210:     else
  8761                           
  8762                           
  8763                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
  8764     06F0  0021               	movlb	1	; select bank1
  8765     06F1  1211               	bcf	17,4	;volatile
  8766     06F2                     i1l298:
  8767     06F2  0008               	return
  8768     06F3                     __end_of_EUSART_Transmit_ISR:
  8769                           
  8770                           	psect	text59
  8771     0582                     __ptext59:	
  8772 ;; *************** function _EUSART_Receive_ISR *****************
  8773 ;; Defined at:
  8774 ;;		line 216 in file "mcc_generated_files/eusart.c"
  8775 ;; Parameters:    Size  Location     Type
  8776 ;;		None
  8777 ;; Auto vars:     Size  Location     Type
  8778 ;;		None
  8779 ;; Return value:  Size  Location     Type
  8780 ;;                  1    wreg      void 
  8781 ;; Registers used:
  8782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8783 ;; Tracked objects:
  8784 ;;		On entry : 0/0
  8785 ;;		On exit  : 0/0
  8786 ;;		Unchanged: 0/0
  8787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8788 ;;      Params:         0       0       0       0       0       0       0       0
  8789 ;;      Locals:         0       0       0       0       0       0       0       0
  8790 ;;      Temps:          0       0       0       0       0       0       0       0
  8791 ;;      Totals:         0       0       0       0       0       0       0       0
  8792 ;;Total ram usage:        0 bytes
  8793 ;; Hardware stack levels used: 1
  8794 ;; Hardware stack levels required when called: 2
  8795 ;; This function calls:
  8796 ;;		NULL
  8797 ;;		_EUSART_DefaultErrorHandler
  8798 ;;		_EUSART_DefaultFramingErrorHandler
  8799 ;;		_EUSART_DefaultOverrunErrorHandler
  8800 ;;		_EUSART_RxDataHandler
  8801 ;; This function is called by:
  8802 ;;		_EUSART_Initialize
  8803 ;;		_INTERRUPT_InterruptManager
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807     0582                     _EUSART_Receive_ISR:	
  8808                           ;psect for function _EUSART_Receive_ISR
  8809                           
  8810     0582                     i1l3347:	
  8811                           ;incstack = 0
  8812                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8813                           
  8814                           
  8815                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  8816     0582  087B               	movf	_eusartRxHead,w	;volatile
  8817     0583  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8818     0584  0086               	movwf	6
  8819     0585  0187               	clrf	7
  8820     0586  0181               	clrf	1
  8821     0587                     i1l3349:
  8822                           
  8823                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  8824     0587  0023               	movlb	3	; select bank3
  8825     0588  1D1D               	btfss	29,2	;volatile
  8826     0589  2D8B               	goto	u131_21
  8827     058A  2D8C               	goto	u131_20
  8828     058B                     u131_21:
  8829     058B  2D97               	goto	i1l3355
  8830     058C                     u131_20:
  8831     058C                     i1l3351:
  8832                           
  8833                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  8834     058C  087B               	movf	_eusartRxHead,w	;volatile
  8835     058D  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8836     058E  0086               	movwf	6
  8837     058F  0187               	clrf	7
  8838     0590  1481               	bsf	1,1
  8839     0591                     i1l3353:
  8840                           
  8841                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  8842     0591  0021               	movlb	1	; select bank1
  8843     0592  085C               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  8844     0593  008A               	movwf	10
  8845     0594  085B               	movf	_EUSART_FramingErrorHandler^(0+128),w
  8846     0595  000A               	callw
  8847     0596  3185               	pagesel	$
  8848     0597                     i1l3355:
  8849                           
  8850                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  8851     0597  0023               	movlb	3	; select bank3
  8852     0598  1C9D               	btfss	29,1	;volatile
  8853     0599  2D9B               	goto	u132_21
  8854     059A  2D9C               	goto	u132_20
  8855     059B                     u132_21:
  8856     059B  2DA7               	goto	i1l3361
  8857     059C                     u132_20:
  8858     059C                     i1l3357:
  8859                           
  8860                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  8861     059C  087B               	movf	_eusartRxHead,w	;volatile
  8862     059D  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8863     059E  0086               	movwf	6
  8864     059F  0187               	clrf	7
  8865     05A0  1501               	bsf	1,2
  8866     05A1                     i1l3359:
  8867                           
  8868                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  8869     05A1  0021               	movlb	1	; select bank1
  8870     05A2  085A               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  8871     05A3  008A               	movwf	10
  8872     05A4  0859               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  8873     05A5  000A               	callw
  8874     05A6  3185               	pagesel	$
  8875     05A7                     i1l3361:
  8876                           
  8877                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  8878     05A7  087B               	movf	_eusartRxHead,w	;volatile
  8879     05A8  3EBD               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8880     05A9  0086               	movwf	6
  8881     05AA  0187               	clrf	7
  8882     05AB  0801               	movf	1,w
  8883     05AC  1903               	btfsc	3,2
  8884     05AD  2DAF               	goto	u133_21
  8885     05AE  2DB0               	goto	u133_20
  8886     05AF                     u133_21:
  8887     05AF  2DB7               	goto	i1l3365
  8888     05B0                     u133_20:
  8889     05B0                     i1l3363:
  8890                           
  8891                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  8892     05B0  0021               	movlb	1	; select bank1
  8893     05B1  0858               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  8894     05B2  008A               	movwf	10
  8895     05B3  0857               	movf	_EUSART_ErrorHandler^(0+128),w
  8896     05B4  000A               	callw
  8897     05B5  3185               	pagesel	$
  8898                           
  8899                           ;mcc_generated_files/eusart.c: 233:     } else {
  8900     05B6  2DBA               	goto	i1l305
  8901     05B7                     i1l3365:
  8902                           
  8903                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  8904     05B7  3187  2780  3185   	fcall	_EUSART_RxDataHandler
  8905     05BA                     i1l305:
  8906     05BA  0008               	return
  8907     05BB                     __end_of_EUSART_Receive_ISR:
  8908                           
  8909                           	psect	text60
  8910     0F13                     __ptext60:	
  8911 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  8912 ;; Defined at:
  8913 ;;		line 252 in file "mcc_generated_files/eusart.c"
  8914 ;; Parameters:    Size  Location     Type
  8915 ;;		None
  8916 ;; Auto vars:     Size  Location     Type
  8917 ;;		None
  8918 ;; Return value:  Size  Location     Type
  8919 ;;                  1    wreg      void 
  8920 ;; Registers used:
  8921 ;;		None
  8922 ;; Tracked objects:
  8923 ;;		On entry : 0/0
  8924 ;;		On exit  : 0/0
  8925 ;;		Unchanged: 0/0
  8926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8927 ;;      Params:         0       0       0       0       0       0       0       0
  8928 ;;      Locals:         0       0       0       0       0       0       0       0
  8929 ;;      Temps:          0       0       0       0       0       0       0       0
  8930 ;;      Totals:         0       0       0       0       0       0       0       0
  8931 ;;Total ram usage:        0 bytes
  8932 ;; Hardware stack levels used: 1
  8933 ;; This function calls:
  8934 ;;		Nothing
  8935 ;; This function is called by:
  8936 ;;		_EUSART_Initialize
  8937 ;;		_EUSART_Receive_ISR
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941     0F13                     _EUSART_DefaultOverrunErrorHandler:	
  8942                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  8943                           
  8944     0F13                     i1l3227:	
  8945                           ;incstack = 0
  8946                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  8947                           
  8948                           
  8949                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  8950     0F13  0023               	movlb	3	; select bank3
  8951     0F14  121D               	bcf	29,4	;volatile
  8952                           
  8953                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  8954     0F15  161D               	bsf	29,4	;volatile
  8955     0F16                     i1l315:
  8956     0F16  0008               	return
  8957     0F17                     __end_of_EUSART_DefaultOverrunErrorHandler:
  8958                           
  8959                           	psect	text61
  8960     0EFE                     __ptext61:	
  8961 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  8962 ;; Defined at:
  8963 ;;		line 250 in file "mcc_generated_files/eusart.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;		None
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;		None
  8968 ;; Return value:  Size  Location     Type
  8969 ;;                  1    wreg      void 
  8970 ;; Registers used:
  8971 ;;		None
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8977 ;;      Params:         0       0       0       0       0       0       0       0
  8978 ;;      Locals:         0       0       0       0       0       0       0       0
  8979 ;;      Temps:          0       0       0       0       0       0       0       0
  8980 ;;      Totals:         0       0       0       0       0       0       0       0
  8981 ;;Total ram usage:        0 bytes
  8982 ;; Hardware stack levels used: 1
  8983 ;; This function calls:
  8984 ;;		Nothing
  8985 ;; This function is called by:
  8986 ;;		_EUSART_Initialize
  8987 ;;		_EUSART_Receive_ISR
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991     0EFE                     _EUSART_DefaultFramingErrorHandler:	
  8992                           ;psect for function _EUSART_DefaultFramingErrorHandler
  8993                           
  8994     0EFE                     i1l312:	
  8995                           ;incstack = 0
  8996                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  8997                           
  8998     0EFE  0008               	return
  8999     0EFF                     __end_of_EUSART_DefaultFramingErrorHandler:
  9000                           
  9001                           	psect	text62
  9002     0F0F                     __ptext62:	
  9003 ;; *************** function _EUSART_DefaultErrorHandler *****************
  9004 ;; Defined at:
  9005 ;;		line 260 in file "mcc_generated_files/eusart.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;		None
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;		None
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  1    wreg      void 
  9012 ;; Registers used:
  9013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9019 ;;      Params:         0       0       0       0       0       0       0       0
  9020 ;;      Locals:         0       0       0       0       0       0       0       0
  9021 ;;      Temps:          0       0       0       0       0       0       0       0
  9022 ;;      Totals:         0       0       0       0       0       0       0       0
  9023 ;;Total ram usage:        0 bytes
  9024 ;; Hardware stack levels used: 1
  9025 ;; Hardware stack levels required when called: 1
  9026 ;; This function calls:
  9027 ;;		_EUSART_RxDataHandler
  9028 ;; This function is called by:
  9029 ;;		_EUSART_Initialize
  9030 ;;		_EUSART_Receive_ISR
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034     0F0F                     _EUSART_DefaultErrorHandler:	
  9035                           ;psect for function _EUSART_DefaultErrorHandler
  9036                           
  9037     0F0F                     i1l3229:	
  9038                           ;incstack = 0
  9039                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9040                           
  9041                           
  9042                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  9043     0F0F  3187  2780  318F   	fcall	_EUSART_RxDataHandler
  9044     0F12                     i1l318:
  9045     0F12  0008               	return
  9046     0F13                     __end_of_EUSART_DefaultErrorHandler:
  9047                           
  9048                           	psect	text63
  9049     0780                     __ptext63:	
  9050 ;; *************** function _EUSART_RxDataHandler *****************
  9051 ;; Defined at:
  9052 ;;		line 240 in file "mcc_generated_files/eusart.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;		None
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;		None
  9057 ;; Return value:  Size  Location     Type
  9058 ;;                  1    wreg      void 
  9059 ;; Registers used:
  9060 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9061 ;; Tracked objects:
  9062 ;;		On entry : 0/0
  9063 ;;		On exit  : 0/0
  9064 ;;		Unchanged: 0/0
  9065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9066 ;;      Params:         0       0       0       0       0       0       0       0
  9067 ;;      Locals:         0       0       0       0       0       0       0       0
  9068 ;;      Temps:          1       0       0       0       0       0       0       0
  9069 ;;      Totals:         1       0       0       0       0       0       0       0
  9070 ;;Total ram usage:        1 bytes
  9071 ;; Hardware stack levels used: 1
  9072 ;; This function calls:
  9073 ;;		Nothing
  9074 ;; This function is called by:
  9075 ;;		_EUSART_Receive_ISR
  9076 ;;		_EUSART_DefaultErrorHandler
  9077 ;; This function uses a non-reentrant model
  9078 ;;
  9079                           
  9080     0780                     _EUSART_RxDataHandler:	
  9081                           ;psect for function _EUSART_RxDataHandler
  9082                           
  9083     0780                     i1l3129:	
  9084                           ;incstack = 0
  9085                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  9086                           
  9087                           
  9088                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  9089     0780  087B               	movf	_eusartRxHead,w
  9090     0781  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  9091     0782  0086               	movwf	6
  9092     0783  3001               	movlw	1	; select bank2/3
  9093     0784  0087               	movwf	7
  9094     0785  0023               	movlb	3	; select bank3
  9095     0786  0819               	movf	25,w	;volatile
  9096     0787  0081               	movwf	1
  9097     0788                     i1l3131:
  9098     0788  3001               	movlw	1
  9099     0789  00F0               	movwf	??_EUSART_RxDataHandler
  9100     078A  0870               	movf	??_EUSART_RxDataHandler,w
  9101     078B  07FB               	addwf	_eusartRxHead,f	;volatile
  9102     078C                     i1l3133:
  9103                           
  9104                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9105     078C  3010               	movlw	16
  9106     078D  027B               	subwf	_eusartRxHead,w	;volatile
  9107     078E  1C03               	skipc
  9108     078F  2F91               	goto	u121_21
  9109     0790  2F92               	goto	u121_20
  9110     0791                     u121_21:
  9111     0791  2F93               	goto	i1l3137
  9112     0792                     u121_20:
  9113     0792                     i1l3135:
  9114                           
  9115                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  9116     0792  01FB               	clrf	_eusartRxHead	;volatile
  9117     0793                     i1l3137:
  9118                           
  9119                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  9120     0793  3001               	movlw	1
  9121     0794  00F0               	movwf	??_EUSART_RxDataHandler
  9122     0795  0870               	movf	??_EUSART_RxDataHandler,w
  9123     0796  0020               	movlb	0	; select bank0
  9124     0797  07E9               	addwf	_eusartRxCount,f	;volatile
  9125     0798                     i1l309:
  9126     0798  0008               	return
  9127     0799                     __end_of_EUSART_RxDataHandler:
  9128     007E                     btemp	set	126	;btemp
  9129     007E                     int$flags	set	126
  9130     007E                     wtemp0	set	126
  9131     20D4                     
  9132                           	psect	idloc
  9133                           
  9134                           ;Config register IDLOC0 @ 0x8000
  9135                           ;	unspecified, using default values
  9136     8000                     	org	32768
  9137     8000  3FFF               	dw	16383
  9138                           
  9139                           ;Config register IDLOC1 @ 0x8001
  9140                           ;	unspecified, using default values
  9141     8001                     	org	32769
  9142     8001  3FFF               	dw	16383
  9143                           
  9144                           ;Config register IDLOC2 @ 0x8002
  9145                           ;	unspecified, using default values
  9146     8002                     	org	32770
  9147     8002  3FFF               	dw	16383
  9148                           
  9149                           ;Config register IDLOC3 @ 0x8003
  9150                           ;	unspecified, using default values
  9151     8003                     	org	32771
  9152     8003  3FFF               	dw	16383
  9153                           
  9154                           	psect	config
  9155                           
  9156                           ;Config register CONFIG1 @ 0x8007
  9157                           ;	Oscillator Selection
  9158                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  9159                           ;	Watchdog Timer Enable
  9160                           ;	WDTE = ON, WDT enabled
  9161                           ;	Power-up Timer Enable
  9162                           ;	PWRTE = OFF, PWRT disabled
  9163                           ;	MCLR Pin Function Select
  9164                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  9165                           ;	Flash Program Memory Code Protection
  9166                           ;	CP = OFF, Program memory code protection is disabled
  9167                           ;	Data Memory Code Protection
  9168                           ;	CPD = OFF, Data memory code protection is disabled
  9169                           ;	Brown-out Reset Enable
  9170                           ;	BOREN = ON, Brown-out Reset enabled
  9171                           ;	Clock Out Enable
  9172                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  9173                           ;	Internal/External Switchover
  9174                           ;	IESO = ON, Internal/External Switchover mode is enabled
  9175                           ;	Fail-Safe Clock Monitor Enable
  9176                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  9177     8007                     	org	32775
  9178     8007  3FFC               	dw	16380
  9179                           
  9180                           ;Config register CONFIG2 @ 0x8008
  9181                           ;	Flash Memory Self-Write Protection
  9182                           ;	WRT = OFF, Write protection off
  9183                           ;	Voltage Regulator Capacitor Enable
  9184                           ;	VCAPEN = RA5, VCAP functionality is enabled on RA5
  9185                           ;	PLL Enable
  9186                           ;	PLLEN = OFF, 4x PLL disabled
  9187                           ;	Stack Overflow/Underflow Reset Enable
  9188                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  9189                           ;	Brown-out Reset Voltage Selection
  9190                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  9191                           ;	Low-Voltage Programming Enable
  9192                           ;	LVP = ON, Low-voltage programming enabled
  9193     8008                     	org	32776
  9194     8008  3EDF               	dw	16095

Data Sizes:
    Strings     0
    Constant    40
    Data        12
    BSS         106
    Persistent  49
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     58      80
    BANK1            80      0      79
    BANK2            52      0      32
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_DO_TX$2289$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S1150$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), 

    MSSP_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_MasterIsr(), NULL(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 6
		 -> I2C_Read1ByteRegister@returnValue.data(COMMON[2]), I2C_Read2ByteRegister@returnValue.data(COMMON[2]), I2C_Write1ByteRegister@data.data(COMMON[2]), I2C_Write2ByteRegister@data.data(COMMON[2]), 
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Disable(BANK0[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> bufferBlock.data(COMMON[2]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), 
		 -> I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S1150$data_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Disable(BANK0[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> I2C_Read1ByteRegister@returnValue.data(COMMON[2]), I2C_Read2ByteRegister@returnValue.data(COMMON[2]), I2C_Write1ByteRegister@data.data(COMMON[2]), I2C_Write2ByteRegister@data.data(COMMON[2]), 
		 -> ReadData@aData(BANK0[6]), SHT30_CMD_MEASURE_H_Disable(BANK0[2]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> bufferBlock.data(COMMON[2]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), 
		 -> I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S1150$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S1150$callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), NULL(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    i2c_fsmStateTable	const PTR FTN()enum E3112[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    ModbusRTU_Slave_Poll@reg	PTR short  size(1) Largest target is 4
		 -> MB_Register(BANK1[4]), 

    ModbusSlaveF04@reg	PTR short  size(1) Largest target is 4
		 -> MB_Register(BANK1[4]), 

    S893$INPUT_REGS	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.INPUT_REGS	PTR unsigned short  size(2) Largest target is 0

    S893$HOLDING_REGS	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.HOLDING_REGS	PTR unsigned short  size(2) Largest target is 0

    S893$au16regs	PTR unsigned short  size(2) Largest target is 0

    SES_Modbus.au16regs	PTR unsigned short  size(2) Largest target is 0

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> rtcc_handle(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> rtcc_handle(), NULL(), TMR1_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_DefaultFramingErrorHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_Receive_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), EUSART_Transmit_ISR(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(2) Largest target is 0

    S95$data	PTR unsigned char  size(2) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(2) Largest target is 0

    I2C_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 6
		 -> ReadData@aData(BANK0[6]), 

    I2C_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 2
		 -> SHT30_CMD_MEASURE_H_Disable(BANK0[2]), 


Critical Paths under _main in COMMON

    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _ReadData->_I2C_ReadNBytes
    _I2C_WriteNBytes->_I2C_SetAddressNackCallback
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_ReadNBytes->_I2C_Open
    _I2C_Open->_I2C_SetInterruptHandler
    _I2C_MasterRead->_I2C_MasterOperation
    _ModbusRTU_Slave_Poll->_ModbusSlaveF04
    _validateRequest->_Modbus_calcCRC
    _Modbus_getRxBuff->_EUSART_Read
    _Modbus_sendTxBuff->_Modbus_calcCRC
    _App_Init->_Device_Init
    _Tick_Init_SES->_TMR1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _Task_Sensor->_ReadData
    _ReadData->_I2C_WriteNBytes
    _ModbusSlave_Process->_ModbusRTU_Slave_Poll
    _ModbusRTU_Slave_Poll->_ModbusSlaveF04
    _validateRequest->_Modbus_calcCRC
    _ModbusSlaveF04->_Modbus_sendTxBuff
    _Modbus_sendTxBuff->_Modbus_calcCRC

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10717
                           _App_Init
                        _App_Process
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     664
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     490
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _App_Process                                          0     0      0    9879
                     _Task_Indicator
                            _Task_MB
                        _Task_Sensor
 ---------------------------------------------------------------------------------
 (2) _Task_Sensor                                          4     4      0    6748
                                             18 BANK0      4     4      0
                         _Get_millis
                           _ReadData
 ---------------------------------------------------------------------------------
 (3) _ReadData                                            14    14      0    6748
                                              4 BANK0     14    14      0
                         _Get_millis
                     _I2C_ReadNBytes
                    _I2C_WriteNBytes
 ---------------------------------------------------------------------------------
 (4) _I2C_WriteNBytes                                      4     1      3    4400
                                              0 BANK0      4     1      3
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C_SetAddressNackCallback                           4     0      4    2259
                                              6 COMMON     4     0      4
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (6) _I2C_SetCallback                                      4     1      3    1117
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWrite                                      0     0      0      68
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (4) _I2C_ReadNBytes                                       4     1      3    2141
                                              6 COMMON     4     1      3
                          _I2C_Close
                     _I2C_MasterRead
                           _I2C_Open
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C_SetBuffer                                        3     1      2    1574
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (5) _I2C_Open                                             2     2      0     189
                                              4 COMMON     2     2      0
                 _I2C_MasterClearIrq
                _I2C_MasterEnableIrq
                     _I2C_MasterOpen
            _I2C_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (6) _I2C_SetInterruptHandler                              2     0      2     121
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterEnableIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterRead                                       0     0      0      68
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterOperation                                  2     2      0      68
                                              2 COMMON     2     2      0
                    _I2C_MasterStart
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_Close                                            1     1      0      37
                                              2 COMMON     1     1      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Task_MB                                              0     0      0    3131
                   _ModbusSlave_Init
                _ModbusSlave_Process
 ---------------------------------------------------------------------------------
 (3) _ModbusSlave_Process                                  1     1      0    3109
               _ModbusRTU_Slave_Poll
 ---------------------------------------------------------------------------------
 (4) _ModbusRTU_Slave_Poll                                14    12      2    3103
                                             44 BANK0     14    12      2
                         _Get_millis
                     _ModbusSlaveF04
                   _Modbus_getRxBuff
                  _Modbus_sendTxBuff
                     _buildException
                    _validateRequest
 ---------------------------------------------------------------------------------
 (5) _validateRequest                                     17    17      0     584
                                              9 BANK0     17    17      0
                     _Modbus_calcCRC
 ---------------------------------------------------------------------------------
 (5) _buildException                                       3     3      0      45
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _Modbus_getRxBuff                                     8     8      0      61
                                              4 COMMON     1     1      0
                                              0 BANK0      7     7      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ModbusSlaveF04                                      23    21      2    1191
                                              8 COMMON     2     0      2
                                             24 BANK0     20    20      0
                  _Modbus_sendTxBuff
 ---------------------------------------------------------------------------------
 (5) _Modbus_sendTxBuff                                   15    15      0     622
                                              9 BANK0     15    15      0
                       _EUSART_Write
                  _EUSART_is_tx_done
                         _Get_millis
                     _Modbus_calcCRC
 ---------------------------------------------------------------------------------
 (6) _Modbus_calcCRC                                      15    13      2     411
                                              2 COMMON     6     4      2
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (4) _Get_millis                                           4     0      4       0
                                              2 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (6) _EUSART_is_tx_done                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ModbusSlave_Init                                     1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Task_Indicator                                       2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _App_Init                                             0     0      0     174
                        _Device_Init
                    _TMR1_StartTimer
                      _Tick_Init_SES
 ---------------------------------------------------------------------------------
 (2) _Tick_Init_SES                                        0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Device_Init                                          3     3      0       0
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     164
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     164
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     164
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                                NULL *
       _TMR1_DefaultInterruptHandler *
                        _rtcc_handle *
 ---------------------------------------------------------------------------------
 (11) _rtcc_handle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _App_Init
     _Device_Init
     _TMR1_StartTimer
     _Tick_Init_SES
       _TMR1_SetInterruptHandler
   _App_Process
     _Task_Indicator
     _Task_MB
       _ModbusSlave_Init
       _ModbusSlave_Process
         _ModbusRTU_Slave_Poll
           _Get_millis
           _ModbusSlaveF04
             _Modbus_sendTxBuff
               _EUSART_Write
               _EUSART_is_tx_done
               _Get_millis
               _Modbus_calcCRC
           _Modbus_getRxBuff
             _EUSART_Read
           _Modbus_sendTxBuff
           _buildException
           _validateRequest
             _Modbus_calcCRC
     _Task_Sensor
       _Get_millis
       _ReadData
         _Get_millis
         _I2C_ReadNBytes
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterRead
             _I2C_MasterOperation
               _I2C_MasterStart
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterEnableIrq
             _I2C_MasterOpen
             _I2C_SetInterruptHandler
           _I2C_SetBuffer
         _I2C_WriteNBytes
           _I2C_Close
           _I2C_MasterWrite
             _I2C_MasterOperation
           _I2C_Open
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _TMR1_ISR *
     _TMR1_CallBack
       NULL(Fake) *
       _TMR1_DefaultInterruptHandler *
       _rtcc_handle *
     _TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      CB       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3A      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               34      0      20      10       61.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      CB      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Thu Apr 13 17:13:54 2023

                            _Modbus_sendTxBuff 009C                           ?_ModbusSlave_Process 0070  
                ?_EUSART_SetRxInterruptHandler 0072                                    _SSPSTATbits 0214  
                           ?_Modbus_sendTxBuff 0070                                             l71 05E4  
                                           l80 0730                        buildException@exception 0073  
                                          l135 074C                                            l321 0F40  
                                          l330 0F52                                            l162 0F59  
                                          l324 0F46                                            l501 0660  
                                          l333 0F4C                                            l165 0F1E  
                                          l327 0F3A                                            l159 0FFF  
                                          l504 0F6D                                            l600 03CE  
                                          l360 07B0                                            l273 0581  
                                          l363 0F02                                            l603 0544  
                                          l283 0687                                            l507 0F81  
                                          l292 0637                                            l276 0F1A  
                                          l613 07DA                                            l622 07EB  
                                          l606 0766                                            l543 02EA  
                                          l439 04C6                                            l288 0616  
                                          l448 047C                                            l481 06B1  
                                          l289 061F                                            l378 0F2E  
                                          l490 06CF                                            l546 060E  
                                          l483 06B3                                            l475 06AD  
                                          l555 042A                                            l628 0F77  
                                          l477 06AF                                            l741 0506  
                                          l486 06B5                                            l591 017D  
                                          l559 036F                                            l567 0248  
                                          l751 077F                                            l488 06B7  
                                          l577 00F4                                            l745 07C8  
                                          l754 0F23                                            l906 0FE1  
                                          l764 0FEF                                            l589 015E  
                                          l909 0F08                                            l757 0F28  
                                          l773 0F96                                            l782 0F34  
                                          l951 0F0B                                            l927 0F0E  
                                          l954 0F05                                            l787 06AB  
                                          l948 07FF                            __end_of_App_Process 0F82  
                                          u810 0616                                            u811 0615  
                                          u820 061B                                            u821 061A  
                                          u830 0632                                            u831 0631  
                                          u880 0667                                            u881 0666  
                                          u890 067E                                            u891 067D  
                              _timer1ReloadVal 0062                         ??_EUSART_RxDataHandler 0070  
                          ??_Modbus_sendTxBuff 0029                 ?_EUSART_SetFramingErrorHandler 0072  
                                          wreg 0009                            __end_of_Device_Init 0661  
                 ??_I2C_SetAddressNackCallback 007A                                   ?_EUSART_Read 0070  
                                 _I2C_DO_RESET 0000                                ?_buildException 0070  
                                         l2061 073A                                           l2071 0745  
                                         l2063 073C                                           l2055 0731  
                                         l4001 03FA                                           l3121 0F4D  
                                         l3201 0557                                           l2081 0F56  
                                         l2073 0747                                           l2065 073E  
                                         l2057 0735                                           l2139 0F00  
                                         l4011 041A                                           l4003 0404  
                                         l3123 0F3B                                           l3211 0561  
                                         l3203 055A                                           l2083 0F57  
                                         l2075 0748                                           l2067 0740  
                                         l2059 0737                                           l4013 0423  
                                         l4005 0406                                           l4021 02EB  
                                         l3125 0F41                                           l3221 057D  
                                         l3213 0568                                           l3205 055C  
                                         l2077 074A                                           l2069 0743  
                                         l2085 0F1B                                           l4007 040C  
                                         l4031 033C                                           l4023 031D  
                                         l4111 01F7                                           l4103 01E1  
                                         l3127 0F35                                           l3119 0F47  
                                         l3223 057E                                           l3215 056F  
                                         l3207 055E                                           l2079 0F53  
                                         l3161 051C                                           l4017 0425  
                                         l4009 0415                                           l4041 0354  
                                         l4025 0331                                           l4121 020A  
                                         l4105 01E6                                           l3225 057F  
                                         l3217 057A                                           l3209 0560  
                                         l3139 0F29                                           l3163 0525  
                                         l4043 0358                                           l4027 033A  
                                         l4131 0227                                           l4123 020F  
                                         l4115 01FA                                           l4107 01EB  
                                         l3219 057C                                           l3165 052F  
                                         l3157 0508                                           l2701 0628  
                                         l4053 036E                                           l4045 035E  
                                         l4037 033F                                           l4125 0214  
                                         l4109 01F1                                           l4061 05C7  
                                         l3181 079B                                           l4301 0F9D  
                                         l3159 0514                                           l2703 062C  
                                         l2711 0F6E                                           l4047 0363  
                                         l4039 0351                                           l4127 0219  
                                         l4135 0229                                           l4071 0714  
                                         l4063 05D0                                           l4151 04B3  
                                         l3191 07A6                                           l3183 079D  
                                         l3281 07E4                                           l3265 06AC  
                                         l2705 0632                                           l4049 036C  
                                         l4137 0238                                           l4129 0220  
                                         l4081 018A                                           l4161 074D  
                                         l4073 071D                                           l4065 05D9  
                                         l4057 05BD                                           l4153 04BD  
                                         l4145 047D                                           l4233 0F78  
                                         l3193 07AD                                           l3185 079F  
                                         l3329 0FF0                                           l3275 0638  
                                         l3371 0F6A                                           l2707 0633  
                                         l4139 023E                                           l4091 01A1  
                                         l4083 018F                                           l4163 074D  
                                         l4075 0728                                           l4067 05DC  
                                         l4059 05BD                                           l4155 04C0  
                                         l4147 0488                                           l4171 042B  
                                         l4235 0F7B                                           l3195 0545  
                                         l3187 07A0                                           l3179 0799  
                                         l3277 0650                                           l3269 06B9  
                                         l2709 0635                                           l4077 0180  
                                         l4165 0755                                           l4069 0714  
                                         l4157 04C2                                           l4149 0494  
                                         l4181 0464                                           l4173 042D  
                                         l4237 0F7E                                           l3197 0547  
                                         l3189 07A4                                           l3279 07DB  
                                         l3367 0F64                                           l4087 0191  
                                         l4079 0188                                           l4167 075D  
                                         l4191 07D3                                           l4159 04C4  
                                         l4183 0469                                           l4175 0452  
                                         l3199 054E                                           l3369 0F67  
                                         l3801 03B6                                           l2761 0674  
                                         l4089 019B                                           l4097 01B1  
                                         l4193 07D7                                           l4185 0472  
                                         l4177 045E                                           l3803 03C1  
                                         l3811 009C                                           l2771 0684  
                                         l2763 0678                                           l2755 0661  
                                         l4187 07C9                                           l4179 0461  
                                         l2693 0610                                           l3805 03CA  
                                         l3821 00E9                                           l3813 00A9  
                                         l2773 0686                                           l2765 067E  
                                         l2757 0661                                           l4189 07CF  
                                         l3901 04D3                                           l2695 0610  
                                         l3831 011F                                           l3823 00F6  
                                         l3815 00C2                                           l2767 067F  
                                         l2759 0667                                           l3911 04E9  
                                         l3903 04DA                                           l2697 061B  
                                         l2689 0F17                                           l3841 0160  
                                         l3825 00FA                                           l3817 00CA  
                                         l2769 0681                                           l2961 0602  
                                         l3809 0F0C                                           l3921 04FE  
                                         l3913 04EE                                           l3905 04DF  
                                         l2699 0620                                           l3771 0372  
                                         l3843 0165                                           l3835 012A  
                                         l3827 0109                                           l3819 00E1  
                                         l2963 0608                                           l3851 0FD5  
                                         l3923 0501                                           l3915 04EF  
                                         l3907 04E0                                           l3931 0FE8  
                                         l4299 0F97                                           l3773 0376  
                                         l3845 0174                                           l3837 0132  
                                         l3829 010E                                           l2957 05E6  
                                         l3941 07B1                                           l3853 0FDA  
                                         l3917 04F4                                           l3909 04E5  
                                         l3925 0505                                           l3933 0FEE  
                                         l4487 06C4                                           l3791 039E  
                                         l3775 0379                                           l3839 013F  
                                         l2959 05F9                                           l3951 07C1  
                                         l3943 07B8                                           l3871 076F  
                                         l3863 07FD                                           l3855 0FDB  
                                         l3847 0F2F                                           l3919 04FB  
                                         l3935 0F8C                                           l3793 03A2  
                                         l3785 038D                                           l3777 038B  
                                         l3849 0F03                                           l3865 0F09  
                                         l3953 07C4                                           l3945 07B9  
                                         l3881 077B                                           l3873 0770  
                                         l3857 0FDD                                           l3929 0FE3  
                                         l3937 0F24                                           l3795 03A6  
                                         l3787 0393                                           l3779 038B  
                                         l3971 026B                                           l3963 024B  
                                         l3867 0F06                                           l3947 07BB  
                                         l3955 07C7                                           l3875 0771  
                                         l3883 077E                                           l3859 0FE0  
                                         l3891 069E                                           l3797 03AC  
                                         l3789 0398                                           l3981 02D2  
                                         l3973 026D                                           l3965 0259  
                                         l3949 07BE                                           l3877 0776  
                                         l3869 0768                                           l3893 04C8  
                                         l3799 03B0                                           l3983 02D6  
                                         l3975 0275                                           l3967 025D  
                                         l3991 03CF                                           l3879 0779  
                                         l3959 0F1F                                           l3895 04CF  
                                         l3887 0689                                           l3985 02E7  
                                         l3977 027B                                           l3969 0264  
                                         l3897 04D1                                           l3889 068F  
                                         l3987 02E7                                           l3979 0280  
                                         l3995 03D0                                           l3899 04D2  
                                         l3997 03D6                                           l3999 03F2  
                                         u2000 07CF                                           u2001 07CE  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           _LATE 0110  
                                         u1620 039E                                           u1700 0FDA  
                                         u1621 039D                                           u1701 0FD9  
                                         u1630 03AC                                           u1710 076F  
                                         u1631 03AB                                           u1615 0394  
                                         u1711 076E                                           u1640 03B6  
                                         u1800 041A                                           u1720 0776  
                                         u1641 03B5                                           u1801 0419  
                                         u1721 0775                                           u1650 00F4  
                                         u1810 0331                                           u1730 068F  
                                         u1651 00F3                                           u1811 0330  
                                         u1731 068E                                           u1660 011F  
                                         u1820 0351                                           u1900 019B  
                                         u1740 04CF                                           u1661 011E  
                                         u1821 0350                                           u1901 019A  
                                         u1741 04CE                                           u1670 012A  
                                         u1830 035E                                           u1910 01E0  
                                         u1750 0FE8                                           u1671 0129  
                                         u1831 035D                                           u1815 032D  
                                         u1911 01DF                                           u1751 0FE7  
                                         u1680 0132                                           u1840 0363  
                                         u1920 01F7                                           u1760 07B8  
                                         u1681 0131                                           u1665 011B  
                                         u1841 0362                                           u1921 01F6  
                                         u1761 07B7                                           u1690 015E  
                                         u1770 02E7                                           u1930 0209  
                                         u1850 05C7                                           u1691 015D  
                                         u1771 02E6                                           u1931 0208  
                                         u1851 05C6                                           u1780 0404  
                                         u1940 0214                                           u1860 05E4  
                                         u1781 0403                                           u1941 0213  
                                         u1861 05E3                                           u1790 040C  
                                         u1950 0219                                           u1870 071D  
                                         u1775 02E3                                           u1791 040B  
                                         u1951 0218                                           u1871 071C  
                                         u1880 0730                                           u1960 04B3  
                                         u1881 072F                                           u1961 04B2  
                                         u1890 018F                                           u1970 0452  
                                         u1891 018E                                           u1971 0451  
                                         u1980 0469                                           u1981 0468  
                                         u1990 0472                                           u1991 0471  
                                         _WPUB 020D                                           _WPUE 0210  
                                         _main 0F97                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                               __end_of_I2C_Open 0507  
                                         btemp 007E                                           start 0052  
                    __end_of_Modbus_sendTxBuff 017E                        _I2C_SetInterruptHandler 0F2F  
                              ?_Task_Indicator 0070                     ??_TMR1_SetInterruptHandler 0074  
                        ??_ModbusSlave_Process 007A                               ?_I2C_MasterClose 0070  
                              __end_of_Task_MB 07DB                                _I2C_WriteNBytes 05BB  
                                ?_EUSART_Write 0070                               ?_I2C_MasterStart 0070  
                                _I2C_DO_RX_ACK 0000                               ?_I2C_MasterWrite 0070  
                __end_of_OSCILLATOR_Initialize 0F5A                                          ?_main 0070  
                              _TMR1_StartTimer 0F00                                          _T1CON 0018  
                                        i1l312 0EFE                                          i1l305 05BA  
                                        i1l315 0F16                                          i1l309 0798  
                                        i1l318 0F12                                          i1l191 0037  
                                        i1l193 0042                                          i1l371 0FD4  
                                        i1l187 001B                                          i1l188 0050  
                                        i1l381 0EFF                                          i1l189 002C  
                                        i1l198 0050                                          i1l295 06F0  
                                        i1l375 0FC7                                          i1l368 07FC  
                                        i1l625 0F63                                          i1l298 06F2  
                                        _RCREG 0199                                          _RCSTA 019D  
                             ?_validateRequest 0070                                          _TMR1H 0017  
                                        _TMR1L 0016                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _TRISE 0090                                          _TXREG 019A  
                                        _TXSTA 019E                                          _SW_Ad 006F  
                                   _Get_millis 0F6E                               __end_of_TMR1_ISR 0FD5  
                               _WDT_Initialize 0F1B                              __end_of_I2C_Close 07C9  
               I2C_MasterOperation@returnValue 0073                        __end_of_TMR1_Initialize 07B1  
                                        pclath 000A                               ?_I2C_SetCallback 0072  
                 I2C_SetAddressNackCallback@cb 0076                                          status 0003  
                                        wtemp0 007E                                _TMR1_WriteTimer 07EC  
                             __end_of_App_Init 0F6E                                __initialization 0054  
                                 __end_of_main 0FA3                                    _App_Process 0F78  
                             __end_of_ReadData 04C7                                 ??_EUSART_Write 0072  
                  ?_INTERRUPT_InterruptManager 0070                   __end_of_ModbusRTU_Slave_Poll 0249  
               ??_EUSART_SetRxInterruptHandler 0074                                    _Device_Init 0638  
                                       ??_main 007A                         __end_of_WDT_Initialize 0F1F  
                                ??_Task_Sensor 0032      __end_of_EUSART_DefaultFramingErrorHandler 0EFF  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0EFE                     _EUSART_OverrunErrorHandler 00D9  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _BORCON 0116  
                                       _T1GCON 0019                        TMR1_WriteTimer@timerVal 0070  
                                       i1l3131 0788                                         i1l3133 078C  
                                       i1l3135 0792                                         i1l3231 07EC  
                                       u121_20 0792                                         i1l3137 0793  
                                       u121_21 0791                                         i1l3129 0780  
                                       i1l3233 07F1                                         i1l3241 07F8  
                                       i1l3227 0F13                                         i1l3243 07FA  
                                       i1l3235 07F2                                         i1l3331 0FC8  
                                       i1l3229 0F0F                                         i1l3341 06E4  
                                       i1l3245 0FBB                                         i1l3237 07F4  
                                       i1l3333 0FCA                                         i1l3351 058C  
                                       i1l3343 06EA                                         i1l3335 06D0  
                                       i1l3175 0F5A                                         i1l3247 0FC2  
                                       i1l3239 07F6                                         u130_20 06EA  
                                       i1l3361 05A7                                         i1l3353 0591  
                                       i1l3345 06EB                                         u130_21 06E9  
                                       i1l3337 06D7                                         i1l3363 05B0  
                                       i1l3355 0597                                         i1l3347 0582  
                                       i1l3339 06DF                                         i1l3451 0006  
                                       i1l3365 05B7                                         i1l3357 059C  
                                       i1l3349 0587                                         i1l3461 0025  
                                       i1l3453 000A                                         i1l3359 05A1  
                                       i1l3471 0047                                         i1l3463 0031  
                                       i1l3455 000F                                         u131_20 058C  
                                       u123_20 07F1                                         u131_21 058B  
                                       u123_21 07F0                                         i1l3473 004C  
                                       i1l3457 0014                                         i1l3467 003C  
                                       i1l3459 0020                                         u132_20 059C  
                                       u124_20 0FC2                                         u132_21 059B  
                                       u124_21 0FC1                                         u133_20 05B0  
                                       u133_21 05AF                                         u150_20 0036  
                                       u150_21 0035                                         u151_20 003C  
                                       u151_21 003B                                         u152_20 0041  
                                       u144_20 000A                                         u152_21 0040  
                                       u144_21 0009                                         u129_20 06D7  
                                       u153_20 0047                                         u145_20 000F  
                                       u129_21 06D6                                         u153_21 0046  
                                       u145_21 000E                                         u154_20 004C  
                                       u146_20 0014                                         u154_21 004B  
                                       u146_21 0013                                         u147_20 0020  
                                       u147_21 001F                                         u148_20 0025  
                                       u148_21 0024                                         u149_20 0031  
                                       u149_21 0030                                         _OSCCON 0099  
                    ??_I2C_SetInterruptHandler 0074                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                                       _SSPADD 0212                                         _SSPBUF 0211  
                          _I2C_MasterEnableIrq 07FD                        __end_of_I2C_WriteNBytes 05E5  
                                    ??_Task_MB 007A           __end_of_TMR1_DefaultInterruptHandler 0F00  
                 _TMR1_DefaultInterruptHandler 0EFF                        __end_of_TMR1_StartTimer 0F03  
                                _I2C_MasterIsr 0000                            _EUSART_Transmit_ISR 06D0  
                            I2C_SetCallback@cb 0072                                  _I2C_SetBuffer 0FE2  
                 __end_of_I2C_MasterDisableIrq 0F0C                           ?_I2C_MasterEnableIrq 0070  
                          _I2C_DO_ADDRESS_NACK 0000                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 0F97                     _I2C_SetAddressNackCallback 0F8C  
                                  ?_Get_millis 0072                                   ?_rtcc_handle 0070  
                              ?_WDT_Initialize 0070        I2C_SetInterruptHandler@InterruptHandler 0072  
     TMR1_SetInterruptHandler@InterruptHandler 0072                        __end_of_TMR1_WriteTimer 07FD  
                         ?_EUSART_Transmit_ISR 0070                          __end_of_TMR1_CallBack 0FC8  
                             ?_TMR1_Initialize 0070                              _SYSTEM_Initialize 0FF0  
                      __end_of__initialization 0098                            _I2C_MasterOperation 0767  
                          __end_of_Task_Sensor 047D                       validateRequest@u16MsgCRC 0036  
                           ?_SYSTEM_Initialize 0070           __end_of_EUSART_SetTxInterruptHandler 0F53  
                 _EUSART_SetTxInterruptHandler 0F4D                        _rdBlkRegCompleteHandler 0000  
                               __pcstackCOMMON 0070                                   __pidataBANK0 0002  
                                 __pidataBANK1 0F82                         _I2C_CallbackReturnStop 0000  
                          ??_SYSTEM_Initialize 0074                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                           __end_of_fctsupported 1008  
                               ?_I2C_SetBuffer 0072                           ?_I2C_MasterOperation 0070  
                        ??_I2C_MasterEnableIrq 0072                                 _OPTION_REGbits 0095  
                             ??_buildException 0072                          I2C_ReadNBytes@address 0079  
                                   ??_I2C_Open 0074                           _eusartRxStatusBuffer 00BD  
                                    ?_App_Init 0070                     __end_of_I2C_MasterClearIrq 0F06  
              ??_EUSART_SetOverrunErrorHandler 0074                      __end_of_SYSTEM_Initialize 1000  
                        ??_EUSART_Transmit_ISR 0070                                     __pbssBANK0 005A  
                                   __pbssBANK1 00A0                                     __pbssBANK2 0120  
                         __end_of_EUSART_Write 0638                                      ?_ReadData 0070  
                             ??_Task_Indicator 0072                           _ModbusRTU_Slave_Poll 017E  
                         Task_MB@f_Modbus_Init 0066                            _I2C_DO_RX_NACK_STOP 0000  
                        _rd1RegCompleteHandler 0000                               ?_I2C_WriteNBytes 0020  
                       I2C_WriteNBytes@address 0023                          _wr1RegCompleteHandler 0000  
                     ModbusRTU_Slave_Poll@size 004C                                     __pmaintext 0F97  
                                ReadData@aData 0028                  ?_EUSART_SetTxInterruptHandler 0072  
             _EUSART_TxDefaultInterruptHandler 00DF                                _I2C_DO_TX_EMPTY 0000  
                          I2C_SetBuffer@buffer 0074                               ?_TMR1_StartTimer 0070  
                                   ??_TMR1_ISR 0072                                     __pintentry 0004  
                                      _BAUDCON 019F                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 0072                                  _eusartRxCount 0069  
                                   ??_App_Init 0075                                        _OSCTUNE 0098  
                             _ModbusSlave_Init 0507                                    _Task_Sensor 042B  
                     ??_EUSART_SetErrorHandler 0074                                        _SSPCON1 0215  
                                      _SSPCON2 0216                                        _SSPSTAT 0214  
                   validateRequest@isSupported 0038                               ?_TMR1_WriteTimer 0070  
                         I2C_Close@returnValue 0072                                      _I2C_DO_RX 0000  
                                    _I2C_DO_TX 0000                                ReadData@valTime 002E  
                                   ??_ReadData 0024                          ?_ModbusRTU_Slave_Poll 004C  
                  __end_of_ModbusSlave_Process 0767                                      _I2C_Close 07B1  
                         _I2C_MasterDisableIrq 0F09                                        _Task_MB 07C9  
                               _I2C_ReadNBytes 0713                                   ?_App_Process 0070  
                              ??_I2C_SetBuffer 0074                        I2C_SetBuffer@bufferSize 0072  
                           I2C_ReadNBytes@data 0076                                 _I2C_MasterRead 0F1F  
                               _I2C_MasterOpen 0FD5                                   ?_Device_Init 0070  
                                      __ptext1 0FF0                                        __ptext2 0F1B  
                                      __ptext3 0799                                        __ptext4 0731  
                                      __ptext5 0F53                                        __ptext6 0545  
                                      __ptext7 0F4D                                        __ptext8 0F47  
                                      __ptext9 0F41                 ??_TMR1_DefaultInterruptHandler 0070  
                                    _T1CONbits 0018                          _OSCILLATOR_Initialize 0F53  
                           I2C_SetCallback@idx 0075                       ??_PIN_MANAGER_Initialize 0072  
                    ?_TMR1_SetInterruptHandler 0072                             I2C_SetCallback@ptr 0074  
                   _SHT30_CMD_MEASURE_H_Enable 00ED                                ModbusSlaveF04@i 004A  
                                      clrloop0 0FA4                     _SHT30_CMD_MEASURE_L_Enable 00E9  
                         end_of_initialization 0098                         Modbus_sendTxBuff@index 0032  
                   _SHT30_CMD_MEASURE_M_Enable 00EB          __end_of_EUSART_SetOverrunErrorHandler 0F47  
                _EUSART_SetOverrunErrorHandler 0F41                                        init_ram 0FAF  
                             _Modbus_getRxBuff 03CF                                     ?_I2C_Close 0070  
                                      initloop 0FB0                          ?_I2C_MasterDisableIrq 0070  
                       __end_of_I2C_ReadNBytes 0731                              _EUSART_Initialize 0545  
                  _SHT30_CMD_MEASURE_H_Disable 006D                             ?_EUSART_Initialize 0070  
                                    _RCSTAbits 019D                                  _Tick_Init_SES 07DB  
                       __end_of_I2C_MasterRead 0F24                         __end_of_I2C_MasterOpen 0FE2  
                  _SHT30_CMD_MEASURE_L_Disable 00E5                    _SHT30_CMD_MEASURE_M_Disable 00E7  
                          ??_EUSART_Initialize 0074                               ??_WDT_Initialize 0072  
                    ModbusSlaveF04@valueRegsno 0048                             ModbusSlaveF04@size 0078  
               ??_EUSART_SetTxInterruptHandler 0074                                      _PORTAbits 000C  
                              Modbus_calcCRC@i 0025                                Modbus_calcCRC@j 0026  
                                 ??_Get_millis 0076                    ?_I2C_SetAddressNackCallback 0076  
                                  _f_Indicator 0067                         ??_ModbusRTU_Slave_Poll 004E  
                ModbusRTU_Slave_Poll@u8Current 0057                                   _fctsupported 1000  
                    __end_of_EUSART_Initialize 0582                                    _I2C_DO_IDLE 0000  
                                  _I2C_DO_RCEN 0000                               validateRequest@i 0039  
                                    _TXSTAbits 019E                                ?_I2C_ReadNBytes 0076  
                     _I2C_DO_SEND_RESTART_READ 0000                                 ?_Tick_Init_SES 0070  
                           __end_of_Get_millis 0F78                                ?_I2C_MasterRead 0070  
                              ?_I2C_MasterOpen 0070                        _I2C_CallbackReturnReset 0000  
           __end_of_EUSART_DefaultErrorHandler 0F13                     _EUSART_DefaultErrorHandler 0F0F  
                                 _EUSART_Write 060F                         ?_OSCILLATOR_Initialize 0070  
                          start_initialization 0054                                  ??_EUSART_Read 0072  
                     ?_I2C_SetInterruptHandler 0072   EUSART_SetRxInterruptHandler@interruptHandler 0072  
 EUSART_SetTxInterruptHandler@interruptHandler 0072                              ??_I2C_MasterClose 0072  
                  ModbusRTU_Slave_Poll@i8state 0058                         ??_I2C_MasterDisableIrq 0072  
                                  ??_I2C_Close 0072                              ??_I2C_MasterStart 0072  
                            ??_I2C_MasterWrite 0074                                 _ModbusSlaveF04 0249  
                       _I2C_DO_RX_NACK_RESTART 0000                             _I2C_MasterClearIrq 0F03  
                            ??_validateRequest 0029                 ?_EUSART_SetOverrunErrorHandler 0072  
                   _EUSART_FramingErrorHandler 00DB                                 _Modbus_calcCRC 0370  
                     __end_of_ModbusSlave_Init 0545                         _EUSART_SetErrorHandler 0F35  
                  __end_of_I2C_MasterEnableIrq 0800                            ?_I2C_MasterClearIrq 0070  
                                  __pdataBANK0 006D                                    __pdataBANK1 00E5  
                       ModbusSlave_Init@_SW_Ad 0072                               _I2C_DO_SEND_STOP 0000  
                            ??_I2C_SetCallback 0075                            I2C_Open@returnValue 0075  
                            _i2c_fsmStateTable 06F3                                    __pbssBIGRAM 20D4  
                  __end_of_EUSART_Transmit_ISR 06F3                          _I2C_DO_SEND_ADR_WRITE 0000  
                                  __pbssCOMMON 007A                                      ___latbits 0002  
                                _SensorAmbient 005E                                  __pcstackBANK0 0020  
                                 ?_Task_Sensor 0070                           ??_I2C_MasterClearIrq 0072  
                       __end_of_ModbusSlaveF04 02EB                     __end_of_EUSART_Receive_ISR 05BB  
                    _I2C_DO_SEND_RESTART_WRITE 0000               _EUSART_RxDefaultInterruptHandler 00DD  
                          __end_of_EUSART_Read 0688                                      __pnvBANK0 006F  
                                    __pnvBANK1 00D5                          _rd2RegCompleteHandler 0000  
                              ??_Tick_Init_SES 0074                         __end_of_Modbus_calcCRC 03CF  
                 __end_of_EUSART_RxDataHandler 0799                                       ?_Task_MB 0070  
                       _PIN_MANAGER_Initialize 0731                          _wr2RegCompleteHandler 0000  
                      ModbusRTU_Slave_Poll@reg 0056                           EUSART_Read@readValue 0073  
                  __end_of_I2C_MasterOperation 0780               __end_of_TMR1_SetInterruptHandler 0F2F  
                                 _eusartRxHead 007B                                   _eusartTxHead 006C  
                                 _eusartRxTail 007A                                   _eusartTxTail 006B  
                    __end_of_i2c_fsmStateTable 0713                   ??_INTERRUPT_InterruptManager 0072  
                     __end_of_Modbus_getRxBuff 042B                        _eusartTxBufferRemaining 006A  
              __end_of_I2C_SetInterruptHandler 0F35                         ModbusSlaveF04@u8regsno 0045  
                      I2C_MasterOperation@read 0072                                       _I2C_Open 04C7  
                                  _device_time 005A                              I2C_ReadNBytes@len 0077  
                               _eusartRxBuffer 0120                                ?_ModbusSlaveF04 0078  
                     ModbusSlaveF04@u8StartAdd 0042                                  _TMR1_CallBack 0FBB  
                               _eusartTxBuffer 0130         EUSART_SetErrorHandler@interruptHandler 0072  
                                     _LATCbits 010E                                      clear_ram0 0FA3  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 0068                                ?_Modbus_calcCRC 0072  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0074  
                                     _PIR2bits 0012                         ModbusSlaveF04@valueAdd 0046  
                            _EUSART_is_tx_done 0F17      __end_of_EUSART_DefaultOverrunErrorHandler 0F17  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 0F13                                       _TMR1_ISR 0FC8  
                            ModbusSlaveF04@reg 0044                             ?_EUSART_is_tx_done 0070  
                         buildException@u8func 0074                          __end_of_I2C_SetBuffer 0FF0  
                            ??_TMR1_Initialize 0074                            ??_EUSART_is_tx_done 0072  
                                ??_rtcc_handle 0070                                       _App_Init 0F64  
                                  _EUSART_Read 0661                               ??_I2C_ReadNBytes 0079  
                               ?_TMR1_CallBack 0070          Modbus_sendTxBuff@u32overTimecountDown 0034  
                                   _I2C_Status 00A0                                       _ReadData 047D  
                             ??_I2C_MasterRead 0074                            I2C_WriteNBytes@data 0020  
                             ??_I2C_MasterOpen 0072                      __end_of_EUSART_is_tx_done 0F1B  
                      ??_OSCILLATOR_Initialize 0072                            _EUSART_ErrorHandler 00D7  
                         _I2C_DO_SEND_ADR_READ 0000                    ?_EUSART_DefaultErrorHandler 0070  
                     _TMR1_SetInterruptHandler 0F29                          _TMR1_InterruptHandler 00D5  
                              _I2C_MasterClose 0F06                  I2C_SetAddressNackCallback@ptr 0078  
                              I2C_Open@address 0074                                _I2C_MasterStart 0F0C  
                              _I2C_MasterWrite 0F24                           _EUSART_RxDataHandler 0780  
                            ??_I2C_WriteNBytes 007A                                       __ptext10 0F3B  
                                     __ptext11 0F35                                       __ptext20 0FE2  
                                     __ptext12 0F78                                       __ptext21 04C7  
                                     __ptext13 042B                                       __ptext30 0F06  
                                     __ptext22 0F2F                                       __ptext14 047D  
                                     __ptext31 0F03                                       __ptext23 0FD5  
                                     __ptext15 05BB                                       __ptext40 009C  
                                     __ptext32 07C9                                       __ptext24 07FD  
                                     __ptext16 0F8C                                       __ptext41 0370  
                                     __ptext33 074D                                       __ptext25 0F1F  
                                     __ptext17 0688                                       __ptext50 0F00  
                                     __ptext42 0F6E                                       __ptext34 017E  
                                     __ptext26 0767                                       __ptext18 0F24  
                                     __ptext51 0638                                       __ptext43 0F17  
                                     __ptext35 02EB                                       __ptext27 0F0C  
                                     __ptext19 0713                                       __ptext60 0F13  
                                     __ptext44 060F                                       __ptext36 05E5  
                                     __ptext28 07B1                                       __ptext61 0EFE  
                                     __ptext53 0FC8                                       __ptext45 0507  
                                     __ptext37 03CF                                       __ptext29 0F09  
                                     __ptext62 0F0F                                       __ptext54 07EC  
                                     __ptext46 06AC                                       __ptext38 0661  
                                     __ptext63 0780                                       __ptext55 0FBB  
                                     __ptext47 0F64                                       __ptext39 0249  
                                     __ptext56 0EFF                                       __ptext48 07DB  
                                     __ptext57 0F5A                                       __ptext49 0F29  
                                     __ptext58 06D0                                       __ptext59 0582  
                              _validateRequest 02EB                              ??_TMR1_StartTimer 0072  
                          __end_of_rtcc_handle 0F64                  Modbus_getRxBuff@bBuffOverflow 0074  
                      ?_EUSART_SetErrorHandler 0072                                _I2C_SetCallback 0688  
EUSART_SetOverrunErrorHandler@interruptHandler 0072                            Modbus_calcCRC@temp2 0021  
                      Modbus_sendTxBuff@u16crc 0030                                    _MB_Register 00D1  
                                     int$flags 007E                              ?_ModbusSlave_Init 0070  
           __end_of_INTERRUPT_InterruptManager 0052                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0F41                  _EUSART_SetFramingErrorHandler 0F3B  
                            ??_TMR1_WriteTimer 0072                             ??_ModbusSlave_Init 0072  
                                   _INTCONbits 000B                             I2C_WriteNBytes@len 0021  
                        ?_EUSART_RxDataHandler 0070                                ??_TMR1_CallBack 0070  
                                     intlevel1 0000                                 _buildException 05E5  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 0F3B  
                          _I2C_DO_SEND_RESTART 0000           __end_of_EUSART_SetRxInterruptHandler 0F4D  
                 _EUSART_SetRxInterruptHandler 0F47                           Device_Init@value_SW1 00E4  
                         Device_Init@value_SW2 00E3                           Device_Init@value_SW3 00E2  
                         Device_Init@value_SW4 00E1                             Modbus_calcCRC@flag 0023  
                           Modbus_calcCRC@temp 0027                                  ??_App_Process 007A  
                               _Task_Indicator 06AC                             _EUSART_Receive_ISR 0582  
EUSART_SetFramingErrorHandler@interruptHandler 0072                        __end_of_I2C_MasterClose 0F09  
                      __end_of_I2C_MasterStart 0F0F                ModbusRTU_Slave_Poll@u8exception 0059  
                      __end_of_I2C_MasterWrite 0F29                                  ??_Device_Init 0072  
                                __pstringtext1 06F3                                  __pstringtext2 1000  
                            ?_Modbus_getRxBuff 0070                            ?_EUSART_Receive_ISR 0070  
                      __end_of_validateRequest 0370                             ??_Modbus_getRxBuff 0020  
                                  _rtcc_handle 0F5A                               ??_ModbusSlaveF04 0038  
                            Modbus_calcCRC@len 0020                                    _SSPCON1bits 0215  
                                  _SSPCON2bits 0216                            _ModbusSlave_Process 074D  
                       __end_of_buildException 060F                                     _SES_Modbus 20D4  
                           EUSART_Write@txData 0073                        __end_of_I2C_SetCallback 06AC  
               __end_of_PIN_MANAGER_Initialize 074D                               ??_Modbus_calcCRC 0074  
                         ??_EUSART_Receive_ISR 0071                          _MSSP_InterruptHandler 0064  
                              _TMR1_Initialize 0799                             Task_Sensor@valTime 00CD  
                       __end_of_Task_Indicator 06D0                          __end_of_Tick_Init_SES 07EC  
